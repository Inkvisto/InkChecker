{
  "_format": "hh-sol-artifact-1",
  "contractName": "Timelock_Governor",
  "sourceName": "contracts/Timelock_Governor.sol",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IVotes",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "contract TimelockController",
          "name": "_timelock",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Empty",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "str",
          "type": "string"
        }
      ],
      "name": "StringTooLong",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "EIP712DomainChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "ProposalCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "signatures",
          "type": "string[]"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "voteStart",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "voteEnd",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "ProposalExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eta",
          "type": "uint256"
        }
      ],
      "name": "ProposalQueued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldProposalThreshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newProposalThreshold",
          "type": "uint256"
        }
      ],
      "name": "ProposalThresholdSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldQuorumNumerator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newQuorumNumerator",
          "type": "uint256"
        }
      ],
      "name": "QuorumNumeratorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldTimelock",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTimelock",
          "type": "address"
        }
      ],
      "name": "TimelockChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "support",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "VoteCast",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "support",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "VoteCastWithParams",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldVotingDelay",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newVotingDelay",
          "type": "uint256"
        }
      ],
      "name": "VotingDelaySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldVotingPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newVotingPeriod",
          "type": "uint256"
        }
      ],
      "name": "VotingPeriodSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BALLOT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CLOCK_MODE",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COUNTING_MODE",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXTENDED_BALLOT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes32",
          "name": "descriptionHash",
          "type": "bytes32"
        }
      ],
      "name": "cancel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes32",
          "name": "descriptionHash",
          "type": "bytes32"
        }
      ],
      "name": "cancel_",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "support",
          "type": "uint8"
        }
      ],
      "name": "castVote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "support",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "castVoteBySig",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "support",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "castVoteWithReason",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "support",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "castVoteWithReasonAndParams",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "support",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "castVoteWithReasonAndParamsBySig",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "clock",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eip712Domain",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "fields",
          "type": "bytes1"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "verifyingContract",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "extensions",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes32",
          "name": "descriptionHash",
          "type": "bytes32"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timepoint",
          "type": "uint256"
        }
      ],
      "name": "getVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timepoint",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "getVotesWithParams",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes32",
          "name": "descriptionHash",
          "type": "bytes32"
        }
      ],
      "name": "hashProposal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonGovernanceFunction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "proposalDeadline",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "proposalEta",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "proposalSnapshot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "proposalVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "againstVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "forVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "abstainVotes",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "propose",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes32",
          "name": "descriptionHash",
          "type": "bytes32"
        }
      ],
      "name": "queue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "quorum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quorumDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timepoint",
          "type": "uint256"
        }
      ],
      "name": "quorumNumerator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quorumNumerator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "relay",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newProposalThreshold",
          "type": "uint256"
        }
      ],
      "name": "setProposalThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newVotingDelay",
          "type": "uint256"
        }
      ],
      "name": "setVotingDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newVotingPeriod",
          "type": "uint256"
        }
      ],
      "name": "setVotingPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "state",
      "outputs": [
        {
          "internalType": "enum IGovernor.ProposalState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timelock",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC5805",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newQuorumNumerator",
          "type": "uint256"
        }
      ],
      "name": "updateQuorumNumerator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract TimelockController",
          "name": "newTimelock",
          "type": "address"
        }
      ],
      "name": "updateTimelock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "bytecode": "0x6101806040523480156200001257600080fd5b5060405162005104380380620051048339810160408190526200003591620009d4565b80600483600461012c6000604051806040016040528060118152602001702a34b6b2b637b1b5afa3b7bb32b93737b960791b815250806200007b620001ad60201b60201c565b62000096600083620001c860201b620017b11790919060201c565b60e052620000b2816001620001c8602090811b620017b117901c565b61010052815160208084019190912061012052815190820120610140524660a052620001426101205161014051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60805250503060c052600262000159828262000ab8565b506200016790508362000218565b620001728262000259565b6200017d8162000300565b5050506001600160a01b031661016052620001988162000341565b50620001a481620004f6565b50505062000c45565b6040805180820190915260018152603160f81b602082015290565b6000602083511015620001e857620001e0836200055f565b905062000212565b82620001ff83620005a260201b620017e21760201c565b906200020c908262000ab8565b50600090505b92915050565b60065460408051918252602082018390527fc565b045403dc03c2eea82b81a0465edad9e2e7fc4d97e11421c209da93d7a93910160405180910390a1600655565b60008111620002bf5760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f7253657474696e67733a20766f74696e6720706572696f6420604482015266746f6f206c6f7760c81b60648201526084015b60405180910390fd5b60075460408051918252602082018390527f7e3f7f0708a84de9203036abaa450dccc85ad5ff52f78c170f3edb55cf5e8828910160405180910390a1600755565b60085460408051918252602082018390527fccb45da8d5717e6c4544694297c4ba5cf151d455c9bb0ed4fc7a38411bc05461910160405180910390a1600855565b6064811115620003c65760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72566f74657351756f72756d4672616374696f6e3a2071756f60448201527f72756d4e756d657261746f72206f7665722071756f72756d44656e6f6d696e616064820152623a37b960e91b608482015260a401620002b6565b6000620003d2620005a5565b90508015801590620003e45750600b54155b156200045f57600b6000016040518060400160405280600063ffffffff1681526020016200041d84620005df60201b620017e51760201c565b6001600160e01b0390811690915282546001810184556000938452602093849020835194909301519091166401000000000263ffffffff909316929092179101555b620004b76200048a620004716200064e565b65ffffffffffff16620006d060201b620018521760201c565b620004a084620005df60201b620017e51760201c565b600b6200073760201b620018b7179092919060201c565b505060408051828152602081018490527f0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b4633997910160405180910390a15050565b600c54604080516001600160a01b03928316815291831660208301527f08f74ea46ef7894f65eabfb5e6e695de773a000b47c529ab559178069b226401910160405180910390a1600c80546001600160a01b0319166001600160a01b0392909216919091179055565b600080829050601f815111156200058d578260405163305a27a960e01b8152600401620002b6919062000b84565b80516200059a8262000bd4565b179392505050565b90565b600b5460009015620005d657620005c8600b6200075460201b620018d21760201c565b6001600160e01b0316905090565b600a545b905090565b60006001600160e01b038211156200064a5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b6064820152608401620002b6565b5090565b6000610160516001600160a01b03166391ddadf46040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015620006b0575060408051601f3d908101601f19168201909252620006ad9181019062000bf9565b60015b620006cb57620005da43620007a260201b620019101760201c565b919050565b600063ffffffff8211156200064a5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b6064820152608401620002b6565b600080620007478585856200080b565b915091505b935093915050565b80546000908015620007985762000780836200077260018462000c23565b600091825260209091200190565b5464010000000090046001600160e01b03166200079b565b60005b9392505050565b600065ffffffffffff8211156200064a5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203460448201526538206269747360d01b6064820152608401620002b6565b825460009081908015620009605760006200082d876200077260018562000c23565b60408051808201909152905463ffffffff8082168084526401000000009092046001600160e01b031660208401529192509087161015620008b15760405162461bcd60e51b815260206004820152601b60248201527f436865636b706f696e743a2064656372656173696e67206b65797300000000006044820152606401620002b6565b805163ffffffff808816911603620008ff5784620008d6886200077260018662000c23565b80546001600160e01b03929092166401000000000263ffffffff9092169190911790556200094f565b6040805180820190915263ffffffff80881682526001600160e01b0380881660208085019182528b54600181018d5560008d81529190912094519151909216640100000000029216919091179101555b6020015192508391506200074c9050565b50506040805180820190915263ffffffff80851682526001600160e01b0380851660208085019182528854600181018a5560008a8152918220955192519093166401000000000291909316179201919091559050816200074c565b6001600160a01b0381168114620009d157600080fd5b50565b60008060408385031215620009e857600080fd5b8251620009f581620009bb565b602084015190925062000a0881620009bb565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600181811c9082168062000a3e57607f821691505b60208210810362000a5f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000ab357600081815260208120601f850160051c8101602086101562000a8e5750805b601f850160051c820191505b8181101562000aaf5782815560010162000a9a565b5050505b505050565b81516001600160401b0381111562000ad45762000ad462000a13565b62000aec8162000ae5845462000a29565b8462000a65565b602080601f83116001811462000b24576000841562000b0b5750858301515b600019600386901b1c1916600185901b17855562000aaf565b600085815260208120601f198616915b8281101562000b555788860151825594840194600190910190840162000b34565b508582101562000b745787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208083528351808285015260005b8181101562000bb35785810183015185820160400152820162000b95565b506000604082860101526040601f19601f8301168501019250505092915050565b8051602080830151919081101562000a5f5760001960209190910360031b1b16919050565b60006020828403121562000c0c57600080fd5b815165ffffffffffff811681146200079b57600080fd5b818103818111156200021257634e487b7160e01b600052601160045260246000fd5b60805160a05160c05160e0516101005161012051610140516101605161443d62000cc7600039600081816108d201528181610fda0152818161132e015281816124b4015261275a01526000612ae801526000612ac0015260006112da015260006112b001526000612a1b01526000612a4501526000612a6f015261443d6000f3fe60806040526004361061026b5760003560e01c80637b3c71d311610144578063c28bc2fa116100b6578063deaaa7cc1161007a578063deaaa7cc1461080c578063ea0217cf14610840578063eb9019d414610860578063ece40cc114610880578063f8ce560a146108a0578063fc0c546a146108c057600080fd5b8063c28bc2fa14610741578063c59057e414610754578063cd4265a514610774578063d33219b414610794578063dd4e2ba5146107c657600080fd5b80639a802a6d116101085780639a802a6d1461067e578063a7713a701461069e578063a890c910146106b3578063ab58fb8e146106d3578063b58131b0146106f3578063c01f9e371461070857600080fd5b80637b3c71d3146105d65780637d5e81e2146105f657806384b0196e1461061657806391ddadf41461063e57806397c3d3341461066a57600080fd5b80633e4f49e6116101dd578063544ffc9c116101a1578063544ffc9c146104d757806354fd4d501461052c57806356781388146105565780635f398a141461057657806360c4247f1461059657806370b0f660146105b657600080fd5b80633e4f49e61461041f578063417491db1461044c5780634385963214610458578063452115d6146104a25780634bf5d7e9146104c257600080fd5b8063160cbed71161022f578063160cbed71461034d5780632656227d1461036d5780632d63f693146103805780632fe3e261146103b65780633932abb1146103ea5780633bccf4fd146103ff57600080fd5b806301ffc9a71461029357806302a251a3146102c857806303420181146102eb57806306f3f9e61461030b57806306fdde031461032b57600080fd5b3661028e57306102796108f4565b6001600160a01b03161461028c57600080fd5b005b600080fd5b34801561029f57600080fd5b506102b36102ae3660046134db565b61090d565b60405190151581526020015b60405180910390f35b3480156102d457600080fd5b506102dd61091e565b6040519081526020016102bf565b3480156102f757600080fd5b506102dd610306366004613629565b610929565b34801561031757600080fd5b5061028c6103263660046136cf565b610a21565b34801561033757600080fd5b50610340610ab4565b6040516102bf9190613738565b34801561035957600080fd5b506102dd6103683660046138cc565b610b46565b6102dd61037b3660046138cc565b610d47565b34801561038c57600080fd5b506102dd61039b3660046136cf565b6000908152600360205260409020546001600160401b031690565b3480156103c257600080fd5b506102dd7f899f067f60f2c931e7c0101a76deed5359d3888d391b6f78fb75402bb24d0eff81565b3480156103f657600080fd5b506102dd610e39565b34801561040b57600080fd5b506102dd61041a36600461395b565b610e44565b34801561042b57600080fd5b5061043f61043a3660046136cf565b610eba565b6040516102bf91906139bf565b34801561028c57600080fd5b34801561046457600080fd5b506102b36104733660046139e7565b60008281526009602090815260408083206001600160a01b038516845260030190915290205460ff1692915050565b3480156104ae57600080fd5b506102dd6104bd3660046138cc565b610ec5565b3480156104ce57600080fd5b50610340610fd6565b3480156104e357600080fd5b506105116104f23660046136cf565b6000908152600960205260409020805460018201546002909201549092565b604080519384526020840192909252908201526060016102bf565b34801561053857600080fd5b506040805180820190915260018152603160f81b6020820152610340565b34801561056257600080fd5b506102dd610571366004613a17565b611098565b34801561058257600080fd5b506102dd610591366004613a43565b6110c1565b3480156105a257600080fd5b506102dd6105b13660046136cf565b61110b565b3480156105c257600080fd5b5061028c6105d13660046136cf565b6111bc565b3480156105e257600080fd5b506102dd6105f1366004613ac6565b611243565b34801561060257600080fd5b506102dd610611366004613b1f565b61128b565b34801561062257600080fd5b5061062b6112a2565b6040516102bf9796959493929190613c1a565b34801561064a57600080fd5b5061065361132a565b60405165ffffffffffff90911681526020016102bf565b34801561067657600080fd5b5060646102dd565b34801561068a57600080fd5b506102dd610699366004613c7c565b6113b3565b3480156106aa57600080fd5b506102dd6113ca565b3480156106bf57600080fd5b5061028c6106ce366004613cd4565b6113f4565b3480156106df57600080fd5b506102dd6106ee3660046136cf565b61147b565b3480156106ff57600080fd5b506102dd611515565b34801561071457600080fd5b506102dd6107233660046136cf565b6000908152600360205260409020600101546001600160401b031690565b61028c61074f366004613cf1565b611520565b34801561076057600080fd5b506102dd61076f3660046138cc565b61162f565b34801561078057600080fd5b506102dd61078f3660046138cc565b611669565b3480156107a057600080fd5b50600c546001600160a01b03165b6040516001600160a01b0390911681526020016102bf565b3480156107d257600080fd5b506040805180820190915260208082527f737570706f72743d627261766f2671756f72756d3d666f722c6162737461696e90820152610340565b34801561081857600080fd5b506102dd7f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f81565b34801561084c57600080fd5b5061028c61085b3660046136cf565b611677565b34801561086c57600080fd5b506102dd61087b366004613d34565b6116fe565b34801561088c57600080fd5b5061028c61089b3660046136cf565b61171f565b3480156108ac57600080fd5b506102dd6108bb3660046136cf565b6117a6565b3480156108cc57600080fd5b506107ae7f000000000000000000000000000000000000000000000000000000000000000081565b6000610908600c546001600160a01b031690565b905090565b600061091882611977565b92915050565b600061090860075490565b6000806109cd6109c57f899f067f60f2c931e7c0101a76deed5359d3888d391b6f78fb75402bb24d0eff8c8c8c8c604051610965929190613d60565b60405180910390208b805190602001206040516020016109aa959493929190948552602085019390935260ff9190911660408401526060830152608082015260a00190565b6040516020818303038152906040528051906020012061199c565b8686866119c9565b9050610a138a828b8b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508d92506119e7915050565b9a9950505050505050505050565b610a296108f4565b6001600160a01b0316336001600160a01b031614610a625760405162461bcd60e51b8152600401610a5990613d70565b60405180910390fd5b30610a6b6108f4565b6001600160a01b031614610aa85760008036604051610a8b929190613d60565b604051809103902090505b80610aa16004611b3c565b03610a9657505b610ab181611bbb565b50565b606060028054610ac390613da7565b80601f0160208091040260200160405190810160405280929190818152602001828054610aef90613da7565b8015610b3c5780601f10610b1157610100808354040283529160200191610b3c565b820191906000526020600020905b815481529060010190602001808311610b1f57829003601f168201915b5050505050905090565b600080610b558686868661162f565b90506004610b6282610eba565b6007811115610b7357610b736139a9565b14610b905760405162461bcd60e51b8152600401610a5990613de1565b600c546040805163793d064960e11b815290516000926001600160a01b03169163f27a0c929160048083019260209291908290030181865afa158015610bda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfe9190613e22565b600c5460405163b1c5f42760e01b81529192506001600160a01b03169063b1c5f42790610c38908a908a908a906000908b90600401613ec9565b602060405180830381865afa158015610c55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c799190613e22565b6000838152600d602052604080822092909255600c5491516308f2a0bb60e41b81526001600160a01b0390921691638f2a0bb091610cc4918b918b918b91908b908990600401613f17565b600060405180830381600087803b158015610cde57600080fd5b505af1158015610cf2573d6000803e3d6000fd5b505050507f9a2e42fd6722813d69113e7d0079d3d940171428df7373df9c7f7617cfda2892828242610d249190613f85565b604080519283526020830191909152015b60405180910390a15095945050505050565b600080610d568686868661162f565b90506000610d6382610eba565b90506004816007811115610d7957610d796139a9565b1480610d9657506005816007811115610d9457610d946139a9565b145b610db25760405162461bcd60e51b8152600401610a5990613de1565b60008281526003602052604090819020600201805460ff19166001179055517f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f90610e009084815260200190565b60405180910390a1610e158288888888611d29565b610e228288888888611dcb565b610e2f8288888888611dd8565b5095945050505050565b600061090860065490565b604080517f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f602082015290810186905260ff851660608201526000908190610e92906109c5906080016109aa565b9050610eaf87828860405180602001604052806000815250611e11565b979650505050505050565b600061091882611e34565b600080610ed48686868661162f565b90506000610ee182610eba565b6007811115610ef257610ef26139a9565b14610f3f5760405162461bcd60e51b815260206004820152601c60248201527f476f7665726e6f723a20746f6f206c61746520746f2063616e63656c000000006044820152606401610a59565b600081815260036020526040902054600160401b90046001600160a01b0316336001600160a01b031614610fc05760405162461bcd60e51b815260206004820152602260248201527f476f7665726e6f723a206f6e6c792070726f706f7365722063616e2063616e63604482015261195b60f21b6064820152608401610a59565b610fcc86868686611669565b9695505050505050565b60607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634bf5d7e96040518163ffffffff1660e01b8152600401600060405180830381865afa92505050801561105757506040513d6000823e601f3d908101601f191682016040526110549190810190613f98565b60015b611093575060408051808201909152601d81527f6d6f64653d626c6f636b6e756d6265722666726f6d3d64656661756c74000000602082015290565b919050565b6000803390506110b984828560405180602001604052806000815250611e11565b949350505050565b600080339050610eaf87828888888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a92506119e7915050565b600b54600090808203611122575050600a54919050565b6000600b611131600184614005565b8154811061114157611141614018565b60009182526020918290206040805180820190915291015463ffffffff8116808352600160201b9091046001600160e01b0316928201929092529150841061119757602001516001600160e01b03169392505050565b6111ab6111a385611852565b600b90611f7e565b6001600160e01b0316949350505050565b6111c46108f4565b6001600160a01b0316336001600160a01b0316146111f45760405162461bcd60e51b8152600401610a5990613d70565b306111fd6108f4565b6001600160a01b03161461123a576000803660405161121d929190613d60565b604051809103902090505b806112336004611b3c565b0361122857505b610ab181612023565b600080339050610fcc86828787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611e1192505050565b600061129985858585612064565b95945050505050565b6000606080828080836112d57f0000000000000000000000000000000000000000000000000000000000000000836123e6565b6113007f000000000000000000000000000000000000000000000000000000000000000060016123e6565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166391ddadf46040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156113a6575060408051601f3d908101601f191682019092526113a39181019061402e565b60015b6110935761090843611910565b60006113c084848461248b565b90505b9392505050565b600b54600090156113ed576113df600b6118d2565b6001600160e01b0316905090565b50600a5490565b6113fc6108f4565b6001600160a01b0316336001600160a01b03161461142c5760405162461bcd60e51b8152600401610a5990613d70565b306114356108f4565b6001600160a01b0316146114725760008036604051611455929190613d60565b604051809103902090505b8061146b6004611b3c565b0361146057505b610ab181612521565b600c546000828152600d602052604080822054905163d45c443560e01b81526004810191909152909182916001600160a01b039091169063d45c443590602401602060405180830381865afa1580156114d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fc9190613e22565b90508060011461150c57806113c3565b60009392505050565b600061090860085490565b6115286108f4565b6001600160a01b0316336001600160a01b0316146115585760405162461bcd60e51b8152600401610a5990613d70565b306115616108f4565b6001600160a01b03161461159e5760008036604051611581929190613d60565b604051809103902090505b806115976004611b3c565b0361158c57505b600080856001600160a01b03168585856040516115bc929190613d60565b60006040518083038185875af1925050503d80600081146115f9576040519150601f19603f3d011682016040523d82523d6000602084013e6115fe565b606091505b509150915061162682826040518060600160405280602881526020016143e06028913961258a565b50505050505050565b6000848484846040516020016116489493929190614056565b60408051601f19818403018152919052805160209091012095945050505050565b6000611299858585856125a3565b61167f6108f4565b6001600160a01b0316336001600160a01b0316146116af5760405162461bcd60e51b8152600401610a5990613d70565b306116b86108f4565b6001600160a01b0316146116f557600080366040516116d8929190613d60565b604051809103902090505b806116ee6004611b3c565b036116e357505b610ab181612655565b60006113c3838361171a60408051602081019091526000815290565b61248b565b6117276108f4565b6001600160a01b0316336001600160a01b0316146117575760405162461bcd60e51b8152600401610a5990613d70565b306117606108f4565b6001600160a01b03161461179d5760008036604051611780929190613d60565b604051809103902090505b806117966004611b3c565b0361178b57505b610ab1816126f6565b600061091882612737565b60006020835110156117cd576117c6836127e1565b9050610918565b816117d884826140ec565b5060009050610918565b90565b60006001600160e01b0382111561184e5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b6064820152608401610a59565b5090565b600063ffffffff82111561184e5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b6064820152608401610a59565b6000806118c585858561281f565b915091505b935093915050565b8054600090801561150c576118fa836118ec600184614005565b600091825260209091200190565b54600160201b90046001600160e01b03166113c3565b600065ffffffffffff82111561184e5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203460448201526538206269747360d01b6064820152608401610a59565b60006001600160e01b03198216636e665ced60e01b14806109185750610918826129be565b60006109186119a9612a0e565b8360405161190160f01b8152600281019290925260228201526042902090565b60008060006119da87878787612b39565b91509150610e2f81612bfd565b60008581526003602052604081206001611a0088610eba565b6007811115611a1157611a116139a9565b14611a6a5760405162461bcd60e51b815260206004820152602360248201527f476f7665726e6f723a20766f7465206e6f742063757272656e746c792061637460448201526269766560e81b6064820152608401610a59565b8054600090611a849088906001600160401b03168661248b565b9050611a938888888488612d47565b8351600003611ae857866001600160a01b03167fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda489888489604051611adb94939291906141ab565b60405180910390a2610eaf565b866001600160a01b03167fe2babfbac5889a709b63bb7f598b324e08bc5a4fb9ec647fb3cbc9ec07eb87128988848989604051611b299594939291906141d3565b60405180910390a2979650505050505050565b6000611b578254600f81810b600160801b909204900b131590565b15611b7557604051631ed9509560e11b815260040160405180910390fd5b508054600f0b6000818152600180840160205260408220805492905583546fffffffffffffffffffffffffffffffff191692016001600160801b03169190911790915590565b6064811115611c3e5760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72566f74657351756f72756d4672616374696f6e3a2071756f60448201527f72756d4e756d657261746f72206f7665722071756f72756d44656e6f6d696e616064820152623a37b960e91b608482015260a401610a59565b6000611c486113ca565b90508015801590611c595750600b54155b15611cbd576040805180820190915260008152600b9060208101611c7c846117e5565b6001600160e01b039081169091528254600181018455600093845260209384902083519490930151909116600160201b0263ffffffff909316929092179101555b611cea611cd8611ccb61132a565b65ffffffffffff16611852565b611ce1846117e5565b600b91906118b7565b505060408051828152602081018490527f0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b4633997910160405180910390a15050565b30611d326108f4565b6001600160a01b031614611dc45760005b8451811015611dc257306001600160a01b0316858281518110611d6857611d68614018565b60200260200101516001600160a01b031603611db257611db2838281518110611d9357611d93614018565b6020026020010151805190602001206004612ec190919063ffffffff16565b611dbb81614219565b9050611d43565b505b5050505050565b611dc48585858585612efd565b30611de16108f4565b6001600160a01b031614611dc457600454600f81810b600160801b909204900b1315611dc4576000600455611dc4565b600061129985858585611e2f60408051602081019091526000815290565b6119e7565b600080611e4083612f71565b90506004816007811115611e5657611e566139a9565b14611e615792915050565b6000838152600d602052604090205480611e7c575092915050565b600c54604051632ab0f52960e01b8152600481018390526001600160a01b0390911690632ab0f52990602401602060405180830381865afa158015611ec5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee99190614232565b15611ef8575060079392505050565b600c54604051632c258a9f60e11b8152600481018390526001600160a01b039091169063584b153e90602401602060405180830381865afa158015611f41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f659190614232565b15611f74575060059392505050565b5060029392505050565b815460009081816005811115611fdb576000611f99846130b1565b611fa39085614005565b60008881526020902090915081015463ffffffff9081169087161015611fcb57809150611fd9565b611fd6816001613f85565b92505b505b6000611fe987878585613199565b9050801561201657612000876118ec600184614005565b54600160201b90046001600160e01b0316610eaf565b6000979650505050505050565b60065460408051918252602082018390527fc565b045403dc03c2eea82b81a0465edad9e2e7fc4d97e11421c209da93d7a93910160405180910390a1600655565b6000338161207061132a565b65ffffffffffff169050612082611515565b6120918361087b600185614005565b10156120f95760405162461bcd60e51b815260206004820152603160248201527f476f7665726e6f723a2070726f706f73657220766f7465732062656c6f7720706044820152701c9bdc1bdcd85b081d1a1c995cda1bdb19607a1b6064820152608401610a59565b600061210e888888888051906020012061162f565b905086518851146121315760405162461bcd60e51b8152600401610a5990614254565b85518851146121525760405162461bcd60e51b8152600401610a5990614254565b60008851116121a35760405162461bcd60e51b815260206004820152601860248201527f476f7665726e6f723a20656d7074792070726f706f73616c00000000000000006044820152606401610a59565b6000818152600360205260409020546001600160401b0316156122125760405162461bcd60e51b815260206004820152602160248201527f476f7665726e6f723a2070726f706f73616c20616c72656164792065786973746044820152607360f81b6064820152608401610a59565b600061221c610e39565b6122269084613f85565b9050600061223261091e565b61223c9083613f85565b90506040518060e00160405280612252846131f7565b6001600160401b031681526001600160a01b03871660208201526000604082015260600161227f836131f7565b6001600160401b039081168252600060208084018290526040808501839052606094850183905288835260038252918290208551815492870151878501519186166001600160e01b031990941693909317600160401b6001600160a01b039094168402176001600160e01b0316600160e01b60e09290921c91909102178155938501516080860151908416921c0217600183015560a08301516002909201805460c09094015161ffff1990941692151561ff00191692909217610100931515939093029290921790558a517f7d84a6263ae0d98d3329bd7b46bb4e8d6f98cd35a7adb45c274c8b7fd5ebd5e091859188918e918e918111156123835761238361355e565b6040519080825280602002602001820160405280156123b657816020015b60608152602001906001900390816123a15790505b508d88888f6040516123d099989796959493929190614295565b60405180910390a1509098975050505050505050565b606060ff8316156123fa576117c68361325f565b81805461240690613da7565b80601f016020809104026020016040519081016040528092919081815260200182805461243290613da7565b801561247f5780601f106124545761010080835404028352916020019161247f565b820191906000526020600020905b81548152906001019060200180831161246257829003601f168201915b50505050509050610918565b604051630748d63560e31b81526001600160a01b038481166004830152602482018490526000917f000000000000000000000000000000000000000000000000000000000000000090911690633a46b1a890604401602060405180830381865afa1580156124fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c09190613e22565b600c54604080516001600160a01b03928316815291831660208301527f08f74ea46ef7894f65eabfb5e6e695de773a000b47c529ab559178069b226401910160405180910390a1600c80546001600160a01b0319166001600160a01b0392909216919091179055565b606083156125995750816113c3565b6113c38383613294565b6000806125b2868686866132be565b6000818152600d60205260409020549091501561129957600c546000828152600d60205260409081902054905163c4d252f560e01b81526001600160a01b039092169163c4d252f59161260b9160040190815260200190565b600060405180830381600087803b15801561262557600080fd5b505af1158015612639573d6000803e3d6000fd5b5050506000828152600d60205260408120555095945050505050565b600081116126b55760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f7253657474696e67733a20766f74696e6720706572696f6420604482015266746f6f206c6f7760c81b6064820152608401610a59565b60075460408051918252602082018390527f7e3f7f0708a84de9203036abaa450dccc85ad5ff52f78c170f3edb55cf5e8828910160405180910390a1600755565b60085460408051918252602082018390527fccb45da8d5717e6c4544694297c4ba5cf151d455c9bb0ed4fc7a38411bc05461910160405180910390a1600855565b600060646127448361110b565b604051632394e7a360e21b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638e539e8c90602401602060405180830381865afa1580156127a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127cd9190613e22565b6127d7919061436c565b6109189190614399565b600080829050601f8151111561280c578260405163305a27a960e01b8152600401610a599190613738565b8051612817826143bb565b179392505050565b82546000908190801561296557600061283d876118ec600185614005565b60408051808201909152905463ffffffff808216808452600160201b9092046001600160e01b0316602084015291925090871610156128be5760405162461bcd60e51b815260206004820152601b60248201527f436865636b706f696e743a2064656372656173696e67206b65797300000000006044820152606401610a59565b805163ffffffff80881691160361290657846128df886118ec600186614005565b80546001600160e01b0392909216600160201b0263ffffffff909216919091179055612955565b6040805180820190915263ffffffff80881682526001600160e01b0380881660208085019182528b54600181018d5560008d81529190912094519151909216600160201b029216919091179101555b6020015192508391506118ca9050565b50506040805180820190915263ffffffff80851682526001600160e01b0380851660208085019182528854600181018a5560008a815291822095519251909316600160201b0291909316179201919091559050816118ca565b60006001600160e01b03198216635e326c8b60e11b14806129ef57506001600160e01b031982166379dd796f60e01b145b8061091857506301ffc9a760e01b6001600160e01b0319831614610918565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015612a6757507f000000000000000000000000000000000000000000000000000000000000000046145b15612a9157507f000000000000000000000000000000000000000000000000000000000000000090565b610908604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612b705750600090506003612bf4565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612bc4573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612bed57600060019250925050612bf4565b9150600090505b94509492505050565b6000816004811115612c1157612c116139a9565b03612c195750565b6001816004811115612c2d57612c2d6139a9565b03612c7a5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610a59565b6002816004811115612c8e57612c8e6139a9565b03612cdb5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610a59565b6003816004811115612cef57612cef6139a9565b03610ab15760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610a59565b60008581526009602090815260408083206001600160a01b0388168452600381019092529091205460ff1615612dcf5760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f72566f74696e6753696d706c653a20766f746520616c726561604482015266191e4818d85cdd60ca1b6064820152608401610a59565b6001600160a01b03851660009081526003820160205260409020805460ff1916600117905560ff8416612e1b5782816000016000828254612e109190613f85565b90915550611dc29050565b60001960ff851601612e3b5782816001016000828254612e109190613f85565b60011960ff851601612e5b5782816002016000828254612e109190613f85565b60405162461bcd60e51b815260206004820152603560248201527f476f7665726e6f72566f74696e6753696d706c653a20696e76616c69642076616044820152746c756520666f7220656e756d20566f74655479706560581b6064820152608401610a59565b8154600160801b90819004600f0b6000818152600180860160205260409091209390935583546001600160801b03908116939091011602179055565b600c5460405163e38335e560e01b81526001600160a01b039091169063e38335e5903490612f38908890889088906000908990600401613ec9565b6000604051808303818588803b158015612f5157600080fd5b505af1158015612f65573d6000803e3d6000fd5b50505050505050505050565b6000818152600360205260408120600281015460ff1615612f955750600792915050565b6002810154610100900460ff1615612fb05750600292915050565b6000838152600360205260408120546001600160401b0316908190036130185760405162461bcd60e51b815260206004820152601d60248201527f476f7665726e6f723a20756e6b6e6f776e2070726f706f73616c2069640000006044820152606401610a59565b600061302261132a565b65ffffffffffff16905080821061303e57506000949350505050565b6000858152600360205260409020600101546001600160401b031681811061306c5750600195945050505050565b613075866133ca565b8015613094575060008681526009602052604090208054600190910154115b156130a55750600495945050505050565b50600395945050505050565b6000816000036130c357506000919050565b600060016130d084613416565b901c6001901b905060018184816130e9576130e9614383565b048201901c9050600181848161310157613101614383565b048201901c9050600181848161311957613119614383565b048201901c9050600181848161313157613131614383565b048201901c9050600181848161314957613149614383565b048201901c9050600181848161316157613161614383565b048201901c9050600181848161317957613179614383565b048201901c90506113c38182858161319357613193614383565b046134aa565b60005b818310156131ef5760006131b084846134c0565b60008781526020902090915063ffffffff86169082015463ffffffff1611156131db578092506131e9565b6131e6816001613f85565b93505b5061319c565b509392505050565b60006001600160401b0382111561184e5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b6064820152608401610a59565b60408051602080825281830190925260609160ff84169160009180820181803683375050509182525060208101929092525090565b8151156132a45781518083602001fd5b8060405162461bcd60e51b8152600401610a599190613738565b6000806132cd8686868661162f565b905060006132da82610eba565b905060028160078111156132f0576132f06139a9565b141580156133105750600681600781111561330d5761330d6139a9565b14155b801561332e5750600781600781111561332b5761332b6139a9565b14155b61337a5760405162461bcd60e51b815260206004820152601d60248201527f476f7665726e6f723a2070726f706f73616c206e6f74206163746976650000006044820152606401610a59565b60008281526003602052604090819020600201805461ff001916610100179055517f789cf55be980739dad1d0699b93b58e806b51c9d96619bfa8fe0a28abaa7b30c90610d359084815260200190565b6000818152600960205260408120600281015460018201546133ec9190613f85565b60008481526003602052604090205461340d906001600160401b03166117a6565b11159392505050565b600080608083901c1561342b57608092831c92015b604083901c1561343d57604092831c92015b602083901c1561344f57602092831c92015b601083901c1561346157601092831c92015b600883901c1561347357600892831c92015b600483901c1561348557600492831c92015b600283901c1561349757600292831c92015b600183901c156109185760010192915050565b60008183106134b957816113c3565b5090919050565b60006134cf6002848418614399565b6113c390848416613f85565b6000602082840312156134ed57600080fd5b81356001600160e01b0319811681146113c357600080fd5b803560ff8116811461109357600080fd5b60008083601f84011261352857600080fd5b5081356001600160401b0381111561353f57600080fd5b60208301915083602082850101111561355757600080fd5b9250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561359c5761359c61355e565b604052919050565b60006001600160401b038211156135bd576135bd61355e565b50601f01601f191660200190565b60006135de6135d9846135a4565b613574565b90508281528383830111156135f257600080fd5b828260208301376000602084830101529392505050565b600082601f83011261361a57600080fd5b6113c3838335602085016135cb565b60008060008060008060008060e0898b03121561364557600080fd5b8835975061365560208a01613505565b965060408901356001600160401b038082111561367157600080fd5b61367d8c838d01613516565b909850965060608b013591508082111561369657600080fd5b506136a38b828c01613609565b9450506136b260808a01613505565b925060a0890135915060c089013590509295985092959890939650565b6000602082840312156136e157600080fd5b5035919050565b60005b838110156137035781810151838201526020016136eb565b50506000910152565b600081518084526137248160208601602086016136e8565b601f01601f19169290920160200192915050565b6020815260006113c3602083018461370c565b60006001600160401b038211156137645761376461355e565b5060051b60200190565b6001600160a01b0381168114610ab157600080fd5b600082601f83011261379457600080fd5b813560206137a46135d98361374b565b82815260059290921b840181019181810190868411156137c357600080fd5b8286015b848110156137e75780356137da8161376e565b83529183019183016137c7565b509695505050505050565b600082601f83011261380357600080fd5b813560206138136135d98361374b565b82815260059290921b8401810191818101908684111561383257600080fd5b8286015b848110156137e75780358352918301918301613836565b600082601f83011261385e57600080fd5b8135602061386e6135d98361374b565b82815260059290921b8401810191818101908684111561388d57600080fd5b8286015b848110156137e75780356001600160401b038111156138b05760008081fd5b6138be8986838b0101613609565b845250918301918301613891565b600080600080608085870312156138e257600080fd5b84356001600160401b03808211156138f957600080fd5b61390588838901613783565b9550602087013591508082111561391b57600080fd5b613927888389016137f2565b9450604087013591508082111561393d57600080fd5b5061394a8782880161384d565b949793965093946060013593505050565b600080600080600060a0868803121561397357600080fd5b8535945061398360208701613505565b935061399160408701613505565b94979396509394606081013594506080013592915050565b634e487b7160e01b600052602160045260246000fd5b60208101600883106139e157634e487b7160e01b600052602160045260246000fd5b91905290565b600080604083850312156139fa57600080fd5b823591506020830135613a0c8161376e565b809150509250929050565b60008060408385031215613a2a57600080fd5b82359150613a3a60208401613505565b90509250929050565b600080600080600060808688031215613a5b57600080fd5b85359450613a6b60208701613505565b935060408601356001600160401b0380821115613a8757600080fd5b613a9389838a01613516565b90955093506060880135915080821115613aac57600080fd5b50613ab988828901613609565b9150509295509295909350565b60008060008060608587031215613adc57600080fd5b84359350613aec60208601613505565b925060408501356001600160401b03811115613b0757600080fd5b613b1387828801613516565b95989497509550505050565b60008060008060808587031215613b3557600080fd5b84356001600160401b0380821115613b4c57600080fd5b613b5888838901613783565b95506020870135915080821115613b6e57600080fd5b613b7a888389016137f2565b94506040870135915080821115613b9057600080fd5b613b9c8883890161384d565b93506060870135915080821115613bb257600080fd5b508501601f81018713613bc457600080fd5b613bd3878235602084016135cb565b91505092959194509250565b600081518084526020808501945080840160005b83811015613c0f57815187529582019590820190600101613bf3565b509495945050505050565b60ff60f81b8816815260e060208201526000613c3960e083018961370c565b8281036040840152613c4b818961370c565b606084018890526001600160a01b038716608085015260a0840186905283810360c08501529050610a138185613bdf565b600080600060608486031215613c9157600080fd5b8335613c9c8161376e565b92506020840135915060408401356001600160401b03811115613cbe57600080fd5b613cca86828701613609565b9150509250925092565b600060208284031215613ce657600080fd5b81356113c38161376e565b60008060008060608587031215613d0757600080fd5b8435613d128161376e565b93506020850135925060408501356001600160401b03811115613b0757600080fd5b60008060408385031215613d4757600080fd5b8235613d528161376e565b946020939093013593505050565b8183823760009101908152919050565b60208082526018908201527f476f7665726e6f723a206f6e6c79476f7665726e616e63650000000000000000604082015260600190565b600181811c90821680613dbb57607f821691505b602082108103613ddb57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526021908201527f476f7665726e6f723a2070726f706f73616c206e6f74207375636365737366756040820152601b60fa1b606082015260800190565b600060208284031215613e3457600080fd5b5051919050565b600081518084526020808501945080840160005b83811015613c0f5781516001600160a01b031687529582019590820190600101613e4f565b600081518084526020808501808196508360051b8101915082860160005b85811015613ebc578284038952613eaa84835161370c565b98850198935090840190600101613e92565b5091979650505050505050565b60a081526000613edc60a0830188613e3b565b8281036020840152613eee8188613bdf565b90508281036040840152613f028187613e74565b60608401959095525050608001529392505050565b60c081526000613f2a60c0830189613e3b565b8281036020840152613f3c8189613bdf565b90508281036040840152613f508188613e74565b60608401969096525050608081019290925260a0909101529392505050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561091857610918613f6f565b600060208284031215613faa57600080fd5b81516001600160401b03811115613fc057600080fd5b8201601f81018413613fd157600080fd5b8051613fdf6135d9826135a4565b818152856020838501011115613ff457600080fd5b6112998260208301602086016136e8565b8181038181111561091857610918613f6f565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561404057600080fd5b815165ffffffffffff811681146113c357600080fd5b6080815260006140696080830187613e3b565b828103602084015261407b8187613bdf565b9050828103604084015261408f8186613e74565b91505082606083015295945050505050565b601f8211156140e757600081815260208120601f850160051c810160208610156140c85750805b601f850160051c820191505b81811015611dc2578281556001016140d4565b505050565b81516001600160401b038111156141055761410561355e565b614119816141138454613da7565b846140a1565b602080601f83116001811461414e57600084156141365750858301515b600019600386901b1c1916600185901b178555611dc2565b600085815260208120601f198616915b8281101561417d5788860151825594840194600190910190840161415e565b508582101561419b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b84815260ff84166020820152826040820152608060608201526000610fcc608083018461370c565b85815260ff8516602082015283604082015260a0606082015260006141fb60a083018561370c565b828103608084015261420d818561370c565b98975050505050505050565b60006001820161422b5761422b613f6f565b5060010190565b60006020828403121561424457600080fd5b815180151581146113c357600080fd5b60208082526021908201527f476f7665726e6f723a20696e76616c69642070726f706f73616c206c656e67746040820152600d60fb1b606082015260800190565b60006101208b8352602060018060a01b038c16818501528160408501526142be8285018c613e3b565b915083820360608501526142d2828b613bdf565b915083820360808501528189518084528284019150828160051b850101838c0160005b8381101561432357601f1987840301855261431183835161370c565b948601949250908501906001016142f5565b505086810360a0880152614337818c613e74565b9450505050508560c08401528460e084015282810361010084015261435c818561370c565b9c9b505050505050505050505050565b808202811582820484141761091857610918613f6f565b634e487b7160e01b600052601260045260246000fd5b6000826143b657634e487b7160e01b600052601260045260246000fd5b500490565b80516020808301519190811015613ddb5760001960209190910360031b1b1691905056fe476f7665726e6f723a2072656c617920726576657274656420776974686f7574206d657373616765a26469706673582212206b9906be57a4cad5ec0139f5459c9a06655642a449defd1476e20f15f1755a5164736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061026b5760003560e01c80637b3c71d311610144578063c28bc2fa116100b6578063deaaa7cc1161007a578063deaaa7cc1461080c578063ea0217cf14610840578063eb9019d414610860578063ece40cc114610880578063f8ce560a146108a0578063fc0c546a146108c057600080fd5b8063c28bc2fa14610741578063c59057e414610754578063cd4265a514610774578063d33219b414610794578063dd4e2ba5146107c657600080fd5b80639a802a6d116101085780639a802a6d1461067e578063a7713a701461069e578063a890c910146106b3578063ab58fb8e146106d3578063b58131b0146106f3578063c01f9e371461070857600080fd5b80637b3c71d3146105d65780637d5e81e2146105f657806384b0196e1461061657806391ddadf41461063e57806397c3d3341461066a57600080fd5b80633e4f49e6116101dd578063544ffc9c116101a1578063544ffc9c146104d757806354fd4d501461052c57806356781388146105565780635f398a141461057657806360c4247f1461059657806370b0f660146105b657600080fd5b80633e4f49e61461041f578063417491db1461044c5780634385963214610458578063452115d6146104a25780634bf5d7e9146104c257600080fd5b8063160cbed71161022f578063160cbed71461034d5780632656227d1461036d5780632d63f693146103805780632fe3e261146103b65780633932abb1146103ea5780633bccf4fd146103ff57600080fd5b806301ffc9a71461029357806302a251a3146102c857806303420181146102eb57806306f3f9e61461030b57806306fdde031461032b57600080fd5b3661028e57306102796108f4565b6001600160a01b03161461028c57600080fd5b005b600080fd5b34801561029f57600080fd5b506102b36102ae3660046134db565b61090d565b60405190151581526020015b60405180910390f35b3480156102d457600080fd5b506102dd61091e565b6040519081526020016102bf565b3480156102f757600080fd5b506102dd610306366004613629565b610929565b34801561031757600080fd5b5061028c6103263660046136cf565b610a21565b34801561033757600080fd5b50610340610ab4565b6040516102bf9190613738565b34801561035957600080fd5b506102dd6103683660046138cc565b610b46565b6102dd61037b3660046138cc565b610d47565b34801561038c57600080fd5b506102dd61039b3660046136cf565b6000908152600360205260409020546001600160401b031690565b3480156103c257600080fd5b506102dd7f899f067f60f2c931e7c0101a76deed5359d3888d391b6f78fb75402bb24d0eff81565b3480156103f657600080fd5b506102dd610e39565b34801561040b57600080fd5b506102dd61041a36600461395b565b610e44565b34801561042b57600080fd5b5061043f61043a3660046136cf565b610eba565b6040516102bf91906139bf565b34801561028c57600080fd5b34801561046457600080fd5b506102b36104733660046139e7565b60008281526009602090815260408083206001600160a01b038516845260030190915290205460ff1692915050565b3480156104ae57600080fd5b506102dd6104bd3660046138cc565b610ec5565b3480156104ce57600080fd5b50610340610fd6565b3480156104e357600080fd5b506105116104f23660046136cf565b6000908152600960205260409020805460018201546002909201549092565b604080519384526020840192909252908201526060016102bf565b34801561053857600080fd5b506040805180820190915260018152603160f81b6020820152610340565b34801561056257600080fd5b506102dd610571366004613a17565b611098565b34801561058257600080fd5b506102dd610591366004613a43565b6110c1565b3480156105a257600080fd5b506102dd6105b13660046136cf565b61110b565b3480156105c257600080fd5b5061028c6105d13660046136cf565b6111bc565b3480156105e257600080fd5b506102dd6105f1366004613ac6565b611243565b34801561060257600080fd5b506102dd610611366004613b1f565b61128b565b34801561062257600080fd5b5061062b6112a2565b6040516102bf9796959493929190613c1a565b34801561064a57600080fd5b5061065361132a565b60405165ffffffffffff90911681526020016102bf565b34801561067657600080fd5b5060646102dd565b34801561068a57600080fd5b506102dd610699366004613c7c565b6113b3565b3480156106aa57600080fd5b506102dd6113ca565b3480156106bf57600080fd5b5061028c6106ce366004613cd4565b6113f4565b3480156106df57600080fd5b506102dd6106ee3660046136cf565b61147b565b3480156106ff57600080fd5b506102dd611515565b34801561071457600080fd5b506102dd6107233660046136cf565b6000908152600360205260409020600101546001600160401b031690565b61028c61074f366004613cf1565b611520565b34801561076057600080fd5b506102dd61076f3660046138cc565b61162f565b34801561078057600080fd5b506102dd61078f3660046138cc565b611669565b3480156107a057600080fd5b50600c546001600160a01b03165b6040516001600160a01b0390911681526020016102bf565b3480156107d257600080fd5b506040805180820190915260208082527f737570706f72743d627261766f2671756f72756d3d666f722c6162737461696e90820152610340565b34801561081857600080fd5b506102dd7f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f81565b34801561084c57600080fd5b5061028c61085b3660046136cf565b611677565b34801561086c57600080fd5b506102dd61087b366004613d34565b6116fe565b34801561088c57600080fd5b5061028c61089b3660046136cf565b61171f565b3480156108ac57600080fd5b506102dd6108bb3660046136cf565b6117a6565b3480156108cc57600080fd5b506107ae7f000000000000000000000000000000000000000000000000000000000000000081565b6000610908600c546001600160a01b031690565b905090565b600061091882611977565b92915050565b600061090860075490565b6000806109cd6109c57f899f067f60f2c931e7c0101a76deed5359d3888d391b6f78fb75402bb24d0eff8c8c8c8c604051610965929190613d60565b60405180910390208b805190602001206040516020016109aa959493929190948552602085019390935260ff9190911660408401526060830152608082015260a00190565b6040516020818303038152906040528051906020012061199c565b8686866119c9565b9050610a138a828b8b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508d92506119e7915050565b9a9950505050505050505050565b610a296108f4565b6001600160a01b0316336001600160a01b031614610a625760405162461bcd60e51b8152600401610a5990613d70565b60405180910390fd5b30610a6b6108f4565b6001600160a01b031614610aa85760008036604051610a8b929190613d60565b604051809103902090505b80610aa16004611b3c565b03610a9657505b610ab181611bbb565b50565b606060028054610ac390613da7565b80601f0160208091040260200160405190810160405280929190818152602001828054610aef90613da7565b8015610b3c5780601f10610b1157610100808354040283529160200191610b3c565b820191906000526020600020905b815481529060010190602001808311610b1f57829003601f168201915b5050505050905090565b600080610b558686868661162f565b90506004610b6282610eba565b6007811115610b7357610b736139a9565b14610b905760405162461bcd60e51b8152600401610a5990613de1565b600c546040805163793d064960e11b815290516000926001600160a01b03169163f27a0c929160048083019260209291908290030181865afa158015610bda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfe9190613e22565b600c5460405163b1c5f42760e01b81529192506001600160a01b03169063b1c5f42790610c38908a908a908a906000908b90600401613ec9565b602060405180830381865afa158015610c55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c799190613e22565b6000838152600d602052604080822092909255600c5491516308f2a0bb60e41b81526001600160a01b0390921691638f2a0bb091610cc4918b918b918b91908b908990600401613f17565b600060405180830381600087803b158015610cde57600080fd5b505af1158015610cf2573d6000803e3d6000fd5b505050507f9a2e42fd6722813d69113e7d0079d3d940171428df7373df9c7f7617cfda2892828242610d249190613f85565b604080519283526020830191909152015b60405180910390a15095945050505050565b600080610d568686868661162f565b90506000610d6382610eba565b90506004816007811115610d7957610d796139a9565b1480610d9657506005816007811115610d9457610d946139a9565b145b610db25760405162461bcd60e51b8152600401610a5990613de1565b60008281526003602052604090819020600201805460ff19166001179055517f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f90610e009084815260200190565b60405180910390a1610e158288888888611d29565b610e228288888888611dcb565b610e2f8288888888611dd8565b5095945050505050565b600061090860065490565b604080517f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f602082015290810186905260ff851660608201526000908190610e92906109c5906080016109aa565b9050610eaf87828860405180602001604052806000815250611e11565b979650505050505050565b600061091882611e34565b600080610ed48686868661162f565b90506000610ee182610eba565b6007811115610ef257610ef26139a9565b14610f3f5760405162461bcd60e51b815260206004820152601c60248201527f476f7665726e6f723a20746f6f206c61746520746f2063616e63656c000000006044820152606401610a59565b600081815260036020526040902054600160401b90046001600160a01b0316336001600160a01b031614610fc05760405162461bcd60e51b815260206004820152602260248201527f476f7665726e6f723a206f6e6c792070726f706f7365722063616e2063616e63604482015261195b60f21b6064820152608401610a59565b610fcc86868686611669565b9695505050505050565b60607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634bf5d7e96040518163ffffffff1660e01b8152600401600060405180830381865afa92505050801561105757506040513d6000823e601f3d908101601f191682016040526110549190810190613f98565b60015b611093575060408051808201909152601d81527f6d6f64653d626c6f636b6e756d6265722666726f6d3d64656661756c74000000602082015290565b919050565b6000803390506110b984828560405180602001604052806000815250611e11565b949350505050565b600080339050610eaf87828888888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a92506119e7915050565b600b54600090808203611122575050600a54919050565b6000600b611131600184614005565b8154811061114157611141614018565b60009182526020918290206040805180820190915291015463ffffffff8116808352600160201b9091046001600160e01b0316928201929092529150841061119757602001516001600160e01b03169392505050565b6111ab6111a385611852565b600b90611f7e565b6001600160e01b0316949350505050565b6111c46108f4565b6001600160a01b0316336001600160a01b0316146111f45760405162461bcd60e51b8152600401610a5990613d70565b306111fd6108f4565b6001600160a01b03161461123a576000803660405161121d929190613d60565b604051809103902090505b806112336004611b3c565b0361122857505b610ab181612023565b600080339050610fcc86828787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611e1192505050565b600061129985858585612064565b95945050505050565b6000606080828080836112d57f0000000000000000000000000000000000000000000000000000000000000000836123e6565b6113007f000000000000000000000000000000000000000000000000000000000000000060016123e6565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166391ddadf46040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156113a6575060408051601f3d908101601f191682019092526113a39181019061402e565b60015b6110935761090843611910565b60006113c084848461248b565b90505b9392505050565b600b54600090156113ed576113df600b6118d2565b6001600160e01b0316905090565b50600a5490565b6113fc6108f4565b6001600160a01b0316336001600160a01b03161461142c5760405162461bcd60e51b8152600401610a5990613d70565b306114356108f4565b6001600160a01b0316146114725760008036604051611455929190613d60565b604051809103902090505b8061146b6004611b3c565b0361146057505b610ab181612521565b600c546000828152600d602052604080822054905163d45c443560e01b81526004810191909152909182916001600160a01b039091169063d45c443590602401602060405180830381865afa1580156114d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fc9190613e22565b90508060011461150c57806113c3565b60009392505050565b600061090860085490565b6115286108f4565b6001600160a01b0316336001600160a01b0316146115585760405162461bcd60e51b8152600401610a5990613d70565b306115616108f4565b6001600160a01b03161461159e5760008036604051611581929190613d60565b604051809103902090505b806115976004611b3c565b0361158c57505b600080856001600160a01b03168585856040516115bc929190613d60565b60006040518083038185875af1925050503d80600081146115f9576040519150601f19603f3d011682016040523d82523d6000602084013e6115fe565b606091505b509150915061162682826040518060600160405280602881526020016143e06028913961258a565b50505050505050565b6000848484846040516020016116489493929190614056565b60408051601f19818403018152919052805160209091012095945050505050565b6000611299858585856125a3565b61167f6108f4565b6001600160a01b0316336001600160a01b0316146116af5760405162461bcd60e51b8152600401610a5990613d70565b306116b86108f4565b6001600160a01b0316146116f557600080366040516116d8929190613d60565b604051809103902090505b806116ee6004611b3c565b036116e357505b610ab181612655565b60006113c3838361171a60408051602081019091526000815290565b61248b565b6117276108f4565b6001600160a01b0316336001600160a01b0316146117575760405162461bcd60e51b8152600401610a5990613d70565b306117606108f4565b6001600160a01b03161461179d5760008036604051611780929190613d60565b604051809103902090505b806117966004611b3c565b0361178b57505b610ab1816126f6565b600061091882612737565b60006020835110156117cd576117c6836127e1565b9050610918565b816117d884826140ec565b5060009050610918565b90565b60006001600160e01b0382111561184e5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b6064820152608401610a59565b5090565b600063ffffffff82111561184e5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b6064820152608401610a59565b6000806118c585858561281f565b915091505b935093915050565b8054600090801561150c576118fa836118ec600184614005565b600091825260209091200190565b54600160201b90046001600160e01b03166113c3565b600065ffffffffffff82111561184e5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203460448201526538206269747360d01b6064820152608401610a59565b60006001600160e01b03198216636e665ced60e01b14806109185750610918826129be565b60006109186119a9612a0e565b8360405161190160f01b8152600281019290925260228201526042902090565b60008060006119da87878787612b39565b91509150610e2f81612bfd565b60008581526003602052604081206001611a0088610eba565b6007811115611a1157611a116139a9565b14611a6a5760405162461bcd60e51b815260206004820152602360248201527f476f7665726e6f723a20766f7465206e6f742063757272656e746c792061637460448201526269766560e81b6064820152608401610a59565b8054600090611a849088906001600160401b03168661248b565b9050611a938888888488612d47565b8351600003611ae857866001600160a01b03167fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda489888489604051611adb94939291906141ab565b60405180910390a2610eaf565b866001600160a01b03167fe2babfbac5889a709b63bb7f598b324e08bc5a4fb9ec647fb3cbc9ec07eb87128988848989604051611b299594939291906141d3565b60405180910390a2979650505050505050565b6000611b578254600f81810b600160801b909204900b131590565b15611b7557604051631ed9509560e11b815260040160405180910390fd5b508054600f0b6000818152600180840160205260408220805492905583546fffffffffffffffffffffffffffffffff191692016001600160801b03169190911790915590565b6064811115611c3e5760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72566f74657351756f72756d4672616374696f6e3a2071756f60448201527f72756d4e756d657261746f72206f7665722071756f72756d44656e6f6d696e616064820152623a37b960e91b608482015260a401610a59565b6000611c486113ca565b90508015801590611c595750600b54155b15611cbd576040805180820190915260008152600b9060208101611c7c846117e5565b6001600160e01b039081169091528254600181018455600093845260209384902083519490930151909116600160201b0263ffffffff909316929092179101555b611cea611cd8611ccb61132a565b65ffffffffffff16611852565b611ce1846117e5565b600b91906118b7565b505060408051828152602081018490527f0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b4633997910160405180910390a15050565b30611d326108f4565b6001600160a01b031614611dc45760005b8451811015611dc257306001600160a01b0316858281518110611d6857611d68614018565b60200260200101516001600160a01b031603611db257611db2838281518110611d9357611d93614018565b6020026020010151805190602001206004612ec190919063ffffffff16565b611dbb81614219565b9050611d43565b505b5050505050565b611dc48585858585612efd565b30611de16108f4565b6001600160a01b031614611dc457600454600f81810b600160801b909204900b1315611dc4576000600455611dc4565b600061129985858585611e2f60408051602081019091526000815290565b6119e7565b600080611e4083612f71565b90506004816007811115611e5657611e566139a9565b14611e615792915050565b6000838152600d602052604090205480611e7c575092915050565b600c54604051632ab0f52960e01b8152600481018390526001600160a01b0390911690632ab0f52990602401602060405180830381865afa158015611ec5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee99190614232565b15611ef8575060079392505050565b600c54604051632c258a9f60e11b8152600481018390526001600160a01b039091169063584b153e90602401602060405180830381865afa158015611f41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f659190614232565b15611f74575060059392505050565b5060029392505050565b815460009081816005811115611fdb576000611f99846130b1565b611fa39085614005565b60008881526020902090915081015463ffffffff9081169087161015611fcb57809150611fd9565b611fd6816001613f85565b92505b505b6000611fe987878585613199565b9050801561201657612000876118ec600184614005565b54600160201b90046001600160e01b0316610eaf565b6000979650505050505050565b60065460408051918252602082018390527fc565b045403dc03c2eea82b81a0465edad9e2e7fc4d97e11421c209da93d7a93910160405180910390a1600655565b6000338161207061132a565b65ffffffffffff169050612082611515565b6120918361087b600185614005565b10156120f95760405162461bcd60e51b815260206004820152603160248201527f476f7665726e6f723a2070726f706f73657220766f7465732062656c6f7720706044820152701c9bdc1bdcd85b081d1a1c995cda1bdb19607a1b6064820152608401610a59565b600061210e888888888051906020012061162f565b905086518851146121315760405162461bcd60e51b8152600401610a5990614254565b85518851146121525760405162461bcd60e51b8152600401610a5990614254565b60008851116121a35760405162461bcd60e51b815260206004820152601860248201527f476f7665726e6f723a20656d7074792070726f706f73616c00000000000000006044820152606401610a59565b6000818152600360205260409020546001600160401b0316156122125760405162461bcd60e51b815260206004820152602160248201527f476f7665726e6f723a2070726f706f73616c20616c72656164792065786973746044820152607360f81b6064820152608401610a59565b600061221c610e39565b6122269084613f85565b9050600061223261091e565b61223c9083613f85565b90506040518060e00160405280612252846131f7565b6001600160401b031681526001600160a01b03871660208201526000604082015260600161227f836131f7565b6001600160401b039081168252600060208084018290526040808501839052606094850183905288835260038252918290208551815492870151878501519186166001600160e01b031990941693909317600160401b6001600160a01b039094168402176001600160e01b0316600160e01b60e09290921c91909102178155938501516080860151908416921c0217600183015560a08301516002909201805460c09094015161ffff1990941692151561ff00191692909217610100931515939093029290921790558a517f7d84a6263ae0d98d3329bd7b46bb4e8d6f98cd35a7adb45c274c8b7fd5ebd5e091859188918e918e918111156123835761238361355e565b6040519080825280602002602001820160405280156123b657816020015b60608152602001906001900390816123a15790505b508d88888f6040516123d099989796959493929190614295565b60405180910390a1509098975050505050505050565b606060ff8316156123fa576117c68361325f565b81805461240690613da7565b80601f016020809104026020016040519081016040528092919081815260200182805461243290613da7565b801561247f5780601f106124545761010080835404028352916020019161247f565b820191906000526020600020905b81548152906001019060200180831161246257829003601f168201915b50505050509050610918565b604051630748d63560e31b81526001600160a01b038481166004830152602482018490526000917f000000000000000000000000000000000000000000000000000000000000000090911690633a46b1a890604401602060405180830381865afa1580156124fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c09190613e22565b600c54604080516001600160a01b03928316815291831660208301527f08f74ea46ef7894f65eabfb5e6e695de773a000b47c529ab559178069b226401910160405180910390a1600c80546001600160a01b0319166001600160a01b0392909216919091179055565b606083156125995750816113c3565b6113c38383613294565b6000806125b2868686866132be565b6000818152600d60205260409020549091501561129957600c546000828152600d60205260409081902054905163c4d252f560e01b81526001600160a01b039092169163c4d252f59161260b9160040190815260200190565b600060405180830381600087803b15801561262557600080fd5b505af1158015612639573d6000803e3d6000fd5b5050506000828152600d60205260408120555095945050505050565b600081116126b55760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f7253657474696e67733a20766f74696e6720706572696f6420604482015266746f6f206c6f7760c81b6064820152608401610a59565b60075460408051918252602082018390527f7e3f7f0708a84de9203036abaa450dccc85ad5ff52f78c170f3edb55cf5e8828910160405180910390a1600755565b60085460408051918252602082018390527fccb45da8d5717e6c4544694297c4ba5cf151d455c9bb0ed4fc7a38411bc05461910160405180910390a1600855565b600060646127448361110b565b604051632394e7a360e21b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638e539e8c90602401602060405180830381865afa1580156127a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127cd9190613e22565b6127d7919061436c565b6109189190614399565b600080829050601f8151111561280c578260405163305a27a960e01b8152600401610a599190613738565b8051612817826143bb565b179392505050565b82546000908190801561296557600061283d876118ec600185614005565b60408051808201909152905463ffffffff808216808452600160201b9092046001600160e01b0316602084015291925090871610156128be5760405162461bcd60e51b815260206004820152601b60248201527f436865636b706f696e743a2064656372656173696e67206b65797300000000006044820152606401610a59565b805163ffffffff80881691160361290657846128df886118ec600186614005565b80546001600160e01b0392909216600160201b0263ffffffff909216919091179055612955565b6040805180820190915263ffffffff80881682526001600160e01b0380881660208085019182528b54600181018d5560008d81529190912094519151909216600160201b029216919091179101555b6020015192508391506118ca9050565b50506040805180820190915263ffffffff80851682526001600160e01b0380851660208085019182528854600181018a5560008a815291822095519251909316600160201b0291909316179201919091559050816118ca565b60006001600160e01b03198216635e326c8b60e11b14806129ef57506001600160e01b031982166379dd796f60e01b145b8061091857506301ffc9a760e01b6001600160e01b0319831614610918565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015612a6757507f000000000000000000000000000000000000000000000000000000000000000046145b15612a9157507f000000000000000000000000000000000000000000000000000000000000000090565b610908604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612b705750600090506003612bf4565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612bc4573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612bed57600060019250925050612bf4565b9150600090505b94509492505050565b6000816004811115612c1157612c116139a9565b03612c195750565b6001816004811115612c2d57612c2d6139a9565b03612c7a5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610a59565b6002816004811115612c8e57612c8e6139a9565b03612cdb5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610a59565b6003816004811115612cef57612cef6139a9565b03610ab15760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610a59565b60008581526009602090815260408083206001600160a01b0388168452600381019092529091205460ff1615612dcf5760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f72566f74696e6753696d706c653a20766f746520616c726561604482015266191e4818d85cdd60ca1b6064820152608401610a59565b6001600160a01b03851660009081526003820160205260409020805460ff1916600117905560ff8416612e1b5782816000016000828254612e109190613f85565b90915550611dc29050565b60001960ff851601612e3b5782816001016000828254612e109190613f85565b60011960ff851601612e5b5782816002016000828254612e109190613f85565b60405162461bcd60e51b815260206004820152603560248201527f476f7665726e6f72566f74696e6753696d706c653a20696e76616c69642076616044820152746c756520666f7220656e756d20566f74655479706560581b6064820152608401610a59565b8154600160801b90819004600f0b6000818152600180860160205260409091209390935583546001600160801b03908116939091011602179055565b600c5460405163e38335e560e01b81526001600160a01b039091169063e38335e5903490612f38908890889088906000908990600401613ec9565b6000604051808303818588803b158015612f5157600080fd5b505af1158015612f65573d6000803e3d6000fd5b50505050505050505050565b6000818152600360205260408120600281015460ff1615612f955750600792915050565b6002810154610100900460ff1615612fb05750600292915050565b6000838152600360205260408120546001600160401b0316908190036130185760405162461bcd60e51b815260206004820152601d60248201527f476f7665726e6f723a20756e6b6e6f776e2070726f706f73616c2069640000006044820152606401610a59565b600061302261132a565b65ffffffffffff16905080821061303e57506000949350505050565b6000858152600360205260409020600101546001600160401b031681811061306c5750600195945050505050565b613075866133ca565b8015613094575060008681526009602052604090208054600190910154115b156130a55750600495945050505050565b50600395945050505050565b6000816000036130c357506000919050565b600060016130d084613416565b901c6001901b905060018184816130e9576130e9614383565b048201901c9050600181848161310157613101614383565b048201901c9050600181848161311957613119614383565b048201901c9050600181848161313157613131614383565b048201901c9050600181848161314957613149614383565b048201901c9050600181848161316157613161614383565b048201901c9050600181848161317957613179614383565b048201901c90506113c38182858161319357613193614383565b046134aa565b60005b818310156131ef5760006131b084846134c0565b60008781526020902090915063ffffffff86169082015463ffffffff1611156131db578092506131e9565b6131e6816001613f85565b93505b5061319c565b509392505050565b60006001600160401b0382111561184e5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b6064820152608401610a59565b60408051602080825281830190925260609160ff84169160009180820181803683375050509182525060208101929092525090565b8151156132a45781518083602001fd5b8060405162461bcd60e51b8152600401610a599190613738565b6000806132cd8686868661162f565b905060006132da82610eba565b905060028160078111156132f0576132f06139a9565b141580156133105750600681600781111561330d5761330d6139a9565b14155b801561332e5750600781600781111561332b5761332b6139a9565b14155b61337a5760405162461bcd60e51b815260206004820152601d60248201527f476f7665726e6f723a2070726f706f73616c206e6f74206163746976650000006044820152606401610a59565b60008281526003602052604090819020600201805461ff001916610100179055517f789cf55be980739dad1d0699b93b58e806b51c9d96619bfa8fe0a28abaa7b30c90610d359084815260200190565b6000818152600960205260408120600281015460018201546133ec9190613f85565b60008481526003602052604090205461340d906001600160401b03166117a6565b11159392505050565b600080608083901c1561342b57608092831c92015b604083901c1561343d57604092831c92015b602083901c1561344f57602092831c92015b601083901c1561346157601092831c92015b600883901c1561347357600892831c92015b600483901c1561348557600492831c92015b600283901c1561349757600292831c92015b600183901c156109185760010192915050565b60008183106134b957816113c3565b5090919050565b60006134cf6002848418614399565b6113c390848416613f85565b6000602082840312156134ed57600080fd5b81356001600160e01b0319811681146113c357600080fd5b803560ff8116811461109357600080fd5b60008083601f84011261352857600080fd5b5081356001600160401b0381111561353f57600080fd5b60208301915083602082850101111561355757600080fd5b9250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561359c5761359c61355e565b604052919050565b60006001600160401b038211156135bd576135bd61355e565b50601f01601f191660200190565b60006135de6135d9846135a4565b613574565b90508281528383830111156135f257600080fd5b828260208301376000602084830101529392505050565b600082601f83011261361a57600080fd5b6113c3838335602085016135cb565b60008060008060008060008060e0898b03121561364557600080fd5b8835975061365560208a01613505565b965060408901356001600160401b038082111561367157600080fd5b61367d8c838d01613516565b909850965060608b013591508082111561369657600080fd5b506136a38b828c01613609565b9450506136b260808a01613505565b925060a0890135915060c089013590509295985092959890939650565b6000602082840312156136e157600080fd5b5035919050565b60005b838110156137035781810151838201526020016136eb565b50506000910152565b600081518084526137248160208601602086016136e8565b601f01601f19169290920160200192915050565b6020815260006113c3602083018461370c565b60006001600160401b038211156137645761376461355e565b5060051b60200190565b6001600160a01b0381168114610ab157600080fd5b600082601f83011261379457600080fd5b813560206137a46135d98361374b565b82815260059290921b840181019181810190868411156137c357600080fd5b8286015b848110156137e75780356137da8161376e565b83529183019183016137c7565b509695505050505050565b600082601f83011261380357600080fd5b813560206138136135d98361374b565b82815260059290921b8401810191818101908684111561383257600080fd5b8286015b848110156137e75780358352918301918301613836565b600082601f83011261385e57600080fd5b8135602061386e6135d98361374b565b82815260059290921b8401810191818101908684111561388d57600080fd5b8286015b848110156137e75780356001600160401b038111156138b05760008081fd5b6138be8986838b0101613609565b845250918301918301613891565b600080600080608085870312156138e257600080fd5b84356001600160401b03808211156138f957600080fd5b61390588838901613783565b9550602087013591508082111561391b57600080fd5b613927888389016137f2565b9450604087013591508082111561393d57600080fd5b5061394a8782880161384d565b949793965093946060013593505050565b600080600080600060a0868803121561397357600080fd5b8535945061398360208701613505565b935061399160408701613505565b94979396509394606081013594506080013592915050565b634e487b7160e01b600052602160045260246000fd5b60208101600883106139e157634e487b7160e01b600052602160045260246000fd5b91905290565b600080604083850312156139fa57600080fd5b823591506020830135613a0c8161376e565b809150509250929050565b60008060408385031215613a2a57600080fd5b82359150613a3a60208401613505565b90509250929050565b600080600080600060808688031215613a5b57600080fd5b85359450613a6b60208701613505565b935060408601356001600160401b0380821115613a8757600080fd5b613a9389838a01613516565b90955093506060880135915080821115613aac57600080fd5b50613ab988828901613609565b9150509295509295909350565b60008060008060608587031215613adc57600080fd5b84359350613aec60208601613505565b925060408501356001600160401b03811115613b0757600080fd5b613b1387828801613516565b95989497509550505050565b60008060008060808587031215613b3557600080fd5b84356001600160401b0380821115613b4c57600080fd5b613b5888838901613783565b95506020870135915080821115613b6e57600080fd5b613b7a888389016137f2565b94506040870135915080821115613b9057600080fd5b613b9c8883890161384d565b93506060870135915080821115613bb257600080fd5b508501601f81018713613bc457600080fd5b613bd3878235602084016135cb565b91505092959194509250565b600081518084526020808501945080840160005b83811015613c0f57815187529582019590820190600101613bf3565b509495945050505050565b60ff60f81b8816815260e060208201526000613c3960e083018961370c565b8281036040840152613c4b818961370c565b606084018890526001600160a01b038716608085015260a0840186905283810360c08501529050610a138185613bdf565b600080600060608486031215613c9157600080fd5b8335613c9c8161376e565b92506020840135915060408401356001600160401b03811115613cbe57600080fd5b613cca86828701613609565b9150509250925092565b600060208284031215613ce657600080fd5b81356113c38161376e565b60008060008060608587031215613d0757600080fd5b8435613d128161376e565b93506020850135925060408501356001600160401b03811115613b0757600080fd5b60008060408385031215613d4757600080fd5b8235613d528161376e565b946020939093013593505050565b8183823760009101908152919050565b60208082526018908201527f476f7665726e6f723a206f6e6c79476f7665726e616e63650000000000000000604082015260600190565b600181811c90821680613dbb57607f821691505b602082108103613ddb57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526021908201527f476f7665726e6f723a2070726f706f73616c206e6f74207375636365737366756040820152601b60fa1b606082015260800190565b600060208284031215613e3457600080fd5b5051919050565b600081518084526020808501945080840160005b83811015613c0f5781516001600160a01b031687529582019590820190600101613e4f565b600081518084526020808501808196508360051b8101915082860160005b85811015613ebc578284038952613eaa84835161370c565b98850198935090840190600101613e92565b5091979650505050505050565b60a081526000613edc60a0830188613e3b565b8281036020840152613eee8188613bdf565b90508281036040840152613f028187613e74565b60608401959095525050608001529392505050565b60c081526000613f2a60c0830189613e3b565b8281036020840152613f3c8189613bdf565b90508281036040840152613f508188613e74565b60608401969096525050608081019290925260a0909101529392505050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561091857610918613f6f565b600060208284031215613faa57600080fd5b81516001600160401b03811115613fc057600080fd5b8201601f81018413613fd157600080fd5b8051613fdf6135d9826135a4565b818152856020838501011115613ff457600080fd5b6112998260208301602086016136e8565b8181038181111561091857610918613f6f565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561404057600080fd5b815165ffffffffffff811681146113c357600080fd5b6080815260006140696080830187613e3b565b828103602084015261407b8187613bdf565b9050828103604084015261408f8186613e74565b91505082606083015295945050505050565b601f8211156140e757600081815260208120601f850160051c810160208610156140c85750805b601f850160051c820191505b81811015611dc2578281556001016140d4565b505050565b81516001600160401b038111156141055761410561355e565b614119816141138454613da7565b846140a1565b602080601f83116001811461414e57600084156141365750858301515b600019600386901b1c1916600185901b178555611dc2565b600085815260208120601f198616915b8281101561417d5788860151825594840194600190910190840161415e565b508582101561419b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b84815260ff84166020820152826040820152608060608201526000610fcc608083018461370c565b85815260ff8516602082015283604082015260a0606082015260006141fb60a083018561370c565b828103608084015261420d818561370c565b98975050505050505050565b60006001820161422b5761422b613f6f565b5060010190565b60006020828403121561424457600080fd5b815180151581146113c357600080fd5b60208082526021908201527f476f7665726e6f723a20696e76616c69642070726f706f73616c206c656e67746040820152600d60fb1b606082015260800190565b60006101208b8352602060018060a01b038c16818501528160408501526142be8285018c613e3b565b915083820360608501526142d2828b613bdf565b915083820360808501528189518084528284019150828160051b850101838c0160005b8381101561432357601f1987840301855261431183835161370c565b948601949250908501906001016142f5565b505086810360a0880152614337818c613e74565b9450505050508560c08401528460e084015282810361010084015261435c818561370c565b9c9b505050505050505050505050565b808202811582820484141761091857610918613f6f565b634e487b7160e01b600052601260045260246000fd5b6000826143b657634e487b7160e01b600052601260045260246000fd5b500490565b80516020808301519190811015613ddb5760001960209190910360031b1b1691905056fe476f7665726e6f723a2072656c617920726576657274656420776974686f7574206d657373616765a26469706673582212206b9906be57a4cad5ec0139f5459c9a06655642a449defd1476e20f15f1755a5164736f6c63430008110033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "errors": {
      "Empty()": [
        {
          "details": "An operation (e.g. {front}) couldn't be completed due to the queue being empty."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "CLOCK_MODE()": {
        "details": "Machine-readable description of the clock as specified in EIP-6372."
      },
      "COUNTING_MODE()": {
        "details": "See {IGovernor-COUNTING_MODE}."
      },
      "cancel(address[],uint256[],bytes[],bytes32)": {
        "details": "Cancel a proposal. A proposal is cancellable by the proposer, but only while it is Pending state, i.e. before the vote starts. Emits a {ProposalCanceled} event."
      },
      "castVote(uint256,uint8)": {
        "details": "Cast a vote Emits a {VoteCast} event."
      },
      "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)": {
        "details": "Cast a vote using the user's cryptographic signature. Emits a {VoteCast} event."
      },
      "castVoteWithReason(uint256,uint8,string)": {
        "details": "Cast a vote with a reason Emits a {VoteCast} event."
      },
      "castVoteWithReasonAndParams(uint256,uint8,string,bytes)": {
        "details": "Cast a vote with a reason and additional encoded parameters Emits a {VoteCast} or {VoteCastWithParams} event depending on the length of params."
      },
      "castVoteWithReasonAndParamsBySig(uint256,uint8,string,bytes,uint8,bytes32,bytes32)": {
        "details": "Cast a vote with a reason and additional encoded parameters using the user's cryptographic signature. Emits a {VoteCast} or {VoteCastWithParams} event depending on the length of params."
      },
      "clock()": {
        "details": "Clock (as specified in EIP-6372) is set to match the token's clock. Fallback to block numbers if the token does not implement EIP-6372."
      },
      "eip712Domain()": {
        "details": "See {EIP-5267}."
      },
      "execute(address[],uint256[],bytes[],bytes32)": {
        "details": "Execute a successful proposal. This requires the quorum to be reached, the vote to be successful, and the deadline to be reached. Emits a {ProposalExecuted} event. Note: some module can modify the requirements for execution, for example by adding an additional timelock."
      },
      "getVotes(address,uint256)": {
        "details": "Voting power of an `account` at a specific `timepoint`. Note: this can be implemented in a number of ways, for example by reading the delegated balance from one (or multiple), {ERC20Votes} tokens."
      },
      "getVotesWithParams(address,uint256,bytes)": {
        "details": "Voting power of an `account` at a specific `timepoint` given additional encoded parameters."
      },
      "hasVoted(uint256,address)": {
        "details": "See {IGovernor-hasVoted}."
      },
      "hashProposal(address[],uint256[],bytes[],bytes32)": {
        "details": "Hashing function used to (re)build the proposal id from the proposal details.."
      },
      "name()": {
        "details": "Name of the governor instance (used in building the ERC712 domain separator)."
      },
      "proposalDeadline(uint256)": {
        "details": "Timepoint at which votes close. If using block number, votes close at the end of this block, so it is possible to cast a vote during this block."
      },
      "proposalEta(uint256)": {
        "details": "Public accessor to check the eta of a queued proposal"
      },
      "proposalSnapshot(uint256)": {
        "details": "Timepoint used to retrieve user's votes and quorum. If using block number (as per Compound's Comp), the snapshot is performed at the end of this block. Hence, voting for this proposal starts at the beginning of the following block."
      },
      "proposalVotes(uint256)": {
        "details": "Accessor to the internal vote counts."
      },
      "queue(address[],uint256[],bytes[],bytes32)": {
        "details": "Function to queue a proposal to the timelock."
      },
      "quorumDenominator()": {
        "details": "Returns the quorum denominator. Defaults to 100, but may be overridden."
      },
      "quorumNumerator()": {
        "details": "Returns the current quorum numerator. See {quorumDenominator}."
      },
      "quorumNumerator(uint256)": {
        "details": "Returns the quorum numerator at a specific timepoint. See {quorumDenominator}."
      },
      "timelock()": {
        "details": "Public accessor to check the address of the timelock"
      },
      "updateQuorumNumerator(uint256)": {
        "details": "Changes the quorum numerator. Emits a {QuorumNumeratorUpdated} event. Requirements: - Must be called through a governance proposal. - New numerator must be smaller or equal to the denominator."
      },
      "updateTimelock(address)": {
        "details": "Public endpoint to update the underlying timelock instance. Restricted to the timelock itself, so updates must be proposed, scheduled, and executed through governance proposals. CAUTION: It is not recommended to change the timelock while there are other queued governance proposals."
      },
      "version()": {
        "details": "Version of the governor instance (used in building the ERC712 domain separator). Default: \"1\""
      }
    },
    "version": 1
  },
  "evm": {
    "bytecode": {
      "functionDebugData": {
        "@_1788": {
          "entryPoint": null,
          "id": 1788,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@_2116": {
          "entryPoint": null,
          "id": 2116,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@_3314": {
          "entryPoint": null,
          "id": 3314,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "@_4896": {
          "entryPoint": null,
          "id": 4896,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@_5264": {
          "entryPoint": null,
          "id": 5264,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@_5372": {
          "entryPoint": null,
          "id": 5372,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@_9169": {
          "entryPoint": null,
          "id": 9169,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@_buildDomainSeparator_9216": {
          "entryPoint": null,
          "id": 9216,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@_insert_7363": {
          "entryPoint": 2059,
          "id": 7363,
          "parameterSlots": 3,
          "returnSlots": 2
        },
        "@_setProposalThreshold_3429": {
          "entryPoint": 768,
          "id": 3429,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@_setVotingDelay_3392": {
          "entryPoint": 536,
          "id": 3392,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@_setVotingPeriod_3414": {
          "entryPoint": 601,
          "id": 3414,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@_unsafeAccess_7482": {
          "entryPoint": null,
          "id": 7482,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@_updateQuorumNumerator_5547": {
          "entryPoint": 833,
          "id": 5547,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@_updateTimelock_5236": {
          "entryPoint": 1270,
          "id": 5236,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@clock_5291": {
          "entryPoint": 1614,
          "id": 5291,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@getStringSlot_8512": {
          "entryPoint": 1442,
          "id": 8512,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@latest_7210": {
          "entryPoint": 1876,
          "id": 7210,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@push_7013": {
          "entryPoint": 1847,
          "id": 7013,
          "parameterSlots": 3,
          "returnSlots": 2
        },
        "@quorumDenominator_5449": {
          "entryPoint": null,
          "id": 5449,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@quorumNumerator_5390": {
          "entryPoint": 1445,
          "id": 5390,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@toShortStringWithFallback_8398": {
          "entryPoint": 456,
          "id": 8398,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@toShortString_8312": {
          "entryPoint": 1375,
          "id": 8312,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@toUint224_10279": {
          "entryPoint": 1503,
          "id": 10279,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@toUint32_10879": {
          "entryPoint": 1744,
          "id": 10879,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@toUint48_10829": {
          "entryPoint": 1954,
          "id": 10829,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@version_2206": {
          "entryPoint": 429,
          "id": 2206,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_contract$_IVotes_$5667t_contract$_TimelockController_$4634_fromMemory": {
          "entryPoint": 2516,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "abi_decode_tuple_t_uint48_fromMemory": {
          "entryPoint": 3065,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 6,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": 2948,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_0687f8064c09ccf183090b5092c4485c730072a161487645a7e37b56cef356bb__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_3f314603cb191f371d117be724372820f824fc7fbb608c5408b31620bafe9a83__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_4f6b1769383e9e01fad001f10d4f9180a25f63424c2597419936b157d29f34ec__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_599034f9324dd4e988c6cea5a00a30f53147fec1b01559682f18cd840028f495__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_9d2acf551b2466898443b9bc3a403a4d86037386bc5a8960c1bbb0f204e69b79__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_c907489dafcfb622d3b83f2657a14d6da2f59e0de3116af0d6a80554c1a7cb19__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "array_dataslot_string_storage": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "checked_sub_t_uint256": {
          "entryPoint": 3107,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "clean_up_bytearray_end_slots_string_storage": {
          "entryPoint": 2661,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32": {
          "entryPoint": 3028,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
          "entryPoint": 2744,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "extract_byte_array_length": {
          "entryPoint": 2601,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "extract_used_part_and_set_length_of_short_byte_array": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "panic_error_0x41": {
          "entryPoint": 2579,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "validator_revert_contract_IVotes": {
          "entryPoint": 2491,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 0
        }
      },
      "generatedSources": [
        {
          "ast": {
            "nodeType": "YulBlock",
            "src": "0:8216:39",
            "statements": [
              {
                "nodeType": "YulBlock",
                "src": "6:3:39",
                "statements": []
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "67:86:39",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "131:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "140:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "143:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "133:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "133:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "133:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "90:5:39"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "101:5:39"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "116:3:39",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "121:1:39",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "112:3:39"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "112:11:39"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "125:1:39",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "108:3:39"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "108:19:39"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "97:3:39"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "97:31:39"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "87:2:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "87:42:39"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "80:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "80:50:39"
                      },
                      "nodeType": "YulIf",
                      "src": "77:70:39"
                    }
                  ]
                },
                "name": "validator_revert_contract_IVotes",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "56:5:39",
                    "type": ""
                  }
                ],
                "src": "14:139:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "298:303:39",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "344:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "353:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "356:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "346:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "346:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "346:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "319:7:39"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "328:9:39"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "315:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "315:23:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "340:2:39",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "311:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "311:32:39"
                      },
                      "nodeType": "YulIf",
                      "src": "308:52:39"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "369:29:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "388:9:39"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "382:5:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "382:16:39"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "373:5:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "440:5:39"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_contract_IVotes",
                          "nodeType": "YulIdentifier",
                          "src": "407:32:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "407:39:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "407:39:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "455:15:39",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "465:5:39"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "455:6:39"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "479:40:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "504:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "515:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "500:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "500:18:39"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "494:5:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "494:25:39"
                      },
                      "variables": [
                        {
                          "name": "value_1",
                          "nodeType": "YulTypedName",
                          "src": "483:7:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "561:7:39"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_contract_IVotes",
                          "nodeType": "YulIdentifier",
                          "src": "528:32:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "528:41:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "528:41:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "578:17:39",
                      "value": {
                        "name": "value_1",
                        "nodeType": "YulIdentifier",
                        "src": "588:7:39"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "578:6:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_contract$_IVotes_$5667t_contract$_TimelockController_$4634_fromMemory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "256:9:39",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "267:7:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "279:6:39",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "287:6:39",
                    "type": ""
                  }
                ],
                "src": "158:443:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "638:95:39",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "655:1:39",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "662:3:39",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "667:10:39",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "658:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "658:20:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "648:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "648:31:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "648:31:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "695:1:39",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "698:4:39",
                            "type": "",
                            "value": "0x41"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "688:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "688:15:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "688:15:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "719:1:39",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "722:4:39",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "712:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "712:15:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "712:15:39"
                    }
                  ]
                },
                "name": "panic_error_0x41",
                "nodeType": "YulFunctionDefinition",
                "src": "606:127:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "793:325:39",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "803:22:39",
                      "value": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "817:1:39",
                            "type": "",
                            "value": "1"
                          },
                          {
                            "name": "data",
                            "nodeType": "YulIdentifier",
                            "src": "820:4:39"
                          }
                        ],
                        "functionName": {
                          "name": "shr",
                          "nodeType": "YulIdentifier",
                          "src": "813:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "813:12:39"
                      },
                      "variableNames": [
                        {
                          "name": "length",
                          "nodeType": "YulIdentifier",
                          "src": "803:6:39"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "834:38:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "data",
                            "nodeType": "YulIdentifier",
                            "src": "864:4:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "870:1:39",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "and",
                          "nodeType": "YulIdentifier",
                          "src": "860:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "860:12:39"
                      },
                      "variables": [
                        {
                          "name": "outOfPlaceEncoding",
                          "nodeType": "YulTypedName",
                          "src": "838:18:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "911:31:39",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "913:27:39",
                            "value": {
                              "arguments": [
                                {
                                  "name": "length",
                                  "nodeType": "YulIdentifier",
                                  "src": "927:6:39"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "935:4:39",
                                  "type": "",
                                  "value": "0x7f"
                                }
                              ],
                              "functionName": {
                                "name": "and",
                                "nodeType": "YulIdentifier",
                                "src": "923:3:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "923:17:39"
                            },
                            "variableNames": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "913:6:39"
                              }
                            ]
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "outOfPlaceEncoding",
                            "nodeType": "YulIdentifier",
                            "src": "891:18:39"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "884:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "884:26:39"
                      },
                      "nodeType": "YulIf",
                      "src": "881:61:39"
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1001:111:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1022:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1029:3:39",
                                      "type": "",
                                      "value": "224"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1034:10:39",
                                      "type": "",
                                      "value": "0x4e487b71"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shl",
                                    "nodeType": "YulIdentifier",
                                    "src": "1025:3:39"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1025:20:39"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "1015:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1015:31:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1015:31:39"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1066:1:39",
                                  "type": "",
                                  "value": "4"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1069:4:39",
                                  "type": "",
                                  "value": "0x22"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "1059:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1059:15:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1059:15:39"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1094:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1097:4:39",
                                  "type": "",
                                  "value": "0x24"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "1087:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1087:15:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1087:15:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "outOfPlaceEncoding",
                            "nodeType": "YulIdentifier",
                            "src": "957:18:39"
                          },
                          {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "980:6:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "988:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "977:2:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "977:14:39"
                          }
                        ],
                        "functionName": {
                          "name": "eq",
                          "nodeType": "YulIdentifier",
                          "src": "954:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "954:38:39"
                      },
                      "nodeType": "YulIf",
                      "src": "951:161:39"
                    }
                  ]
                },
                "name": "extract_byte_array_length",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "data",
                    "nodeType": "YulTypedName",
                    "src": "773:4:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "length",
                    "nodeType": "YulTypedName",
                    "src": "782:6:39",
                    "type": ""
                  }
                ],
                "src": "738:380:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1179:65:39",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1196:1:39",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "name": "ptr",
                            "nodeType": "YulIdentifier",
                            "src": "1199:3:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1189:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1189:14:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1189:14:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1212:26:39",
                      "value": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1230:1:39",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1233:4:39",
                            "type": "",
                            "value": "0x20"
                          }
                        ],
                        "functionName": {
                          "name": "keccak256",
                          "nodeType": "YulIdentifier",
                          "src": "1220:9:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1220:18:39"
                      },
                      "variableNames": [
                        {
                          "name": "data",
                          "nodeType": "YulIdentifier",
                          "src": "1212:4:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "array_dataslot_string_storage",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "ptr",
                    "nodeType": "YulTypedName",
                    "src": "1162:3:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "data",
                    "nodeType": "YulTypedName",
                    "src": "1170:4:39",
                    "type": ""
                  }
                ],
                "src": "1123:121:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1330:464:39",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1363:425:39",
                        "statements": [
                          {
                            "nodeType": "YulVariableDeclaration",
                            "src": "1377:11:39",
                            "value": {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "1387:1:39",
                              "type": "",
                              "value": "0"
                            },
                            "variables": [
                              {
                                "name": "_1",
                                "nodeType": "YulTypedName",
                                "src": "1381:2:39",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "1408:2:39"
                                },
                                {
                                  "name": "array",
                                  "nodeType": "YulIdentifier",
                                  "src": "1412:5:39"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "1401:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1401:17:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1401:17:39"
                          },
                          {
                            "nodeType": "YulVariableDeclaration",
                            "src": "1431:31:39",
                            "value": {
                              "arguments": [
                                {
                                  "name": "_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "1453:2:39"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1457:4:39",
                                  "type": "",
                                  "value": "0x20"
                                }
                              ],
                              "functionName": {
                                "name": "keccak256",
                                "nodeType": "YulIdentifier",
                                "src": "1443:9:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1443:19:39"
                            },
                            "variables": [
                              {
                                "name": "data",
                                "nodeType": "YulTypedName",
                                "src": "1435:4:39",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "nodeType": "YulVariableDeclaration",
                            "src": "1475:57:39",
                            "value": {
                              "arguments": [
                                {
                                  "name": "data",
                                  "nodeType": "YulIdentifier",
                                  "src": "1498:4:39"
                                },
                                {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1508:1:39",
                                      "type": "",
                                      "value": "5"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "startIndex",
                                          "nodeType": "YulIdentifier",
                                          "src": "1515:10:39"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1527:2:39",
                                          "type": "",
                                          "value": "31"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "1511:3:39"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1511:19:39"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shr",
                                    "nodeType": "YulIdentifier",
                                    "src": "1504:3:39"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1504:27:39"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "1494:3:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1494:38:39"
                            },
                            "variables": [
                              {
                                "name": "deleteStart",
                                "nodeType": "YulTypedName",
                                "src": "1479:11:39",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "body": {
                              "nodeType": "YulBlock",
                              "src": "1569:23:39",
                              "statements": [
                                {
                                  "nodeType": "YulAssignment",
                                  "src": "1571:19:39",
                                  "value": {
                                    "name": "data",
                                    "nodeType": "YulIdentifier",
                                    "src": "1586:4:39"
                                  },
                                  "variableNames": [
                                    {
                                      "name": "deleteStart",
                                      "nodeType": "YulIdentifier",
                                      "src": "1571:11:39"
                                    }
                                  ]
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "name": "startIndex",
                                  "nodeType": "YulIdentifier",
                                  "src": "1551:10:39"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1563:4:39",
                                  "type": "",
                                  "value": "0x20"
                                }
                              ],
                              "functionName": {
                                "name": "lt",
                                "nodeType": "YulIdentifier",
                                "src": "1548:2:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1548:20:39"
                            },
                            "nodeType": "YulIf",
                            "src": "1545:47:39"
                          },
                          {
                            "nodeType": "YulVariableDeclaration",
                            "src": "1605:41:39",
                            "value": {
                              "arguments": [
                                {
                                  "name": "data",
                                  "nodeType": "YulIdentifier",
                                  "src": "1619:4:39"
                                },
                                {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1629:1:39",
                                      "type": "",
                                      "value": "5"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "len",
                                          "nodeType": "YulIdentifier",
                                          "src": "1636:3:39"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1641:2:39",
                                          "type": "",
                                          "value": "31"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "1632:3:39"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1632:12:39"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shr",
                                    "nodeType": "YulIdentifier",
                                    "src": "1625:3:39"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1625:20:39"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "1615:3:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1615:31:39"
                            },
                            "variables": [
                              {
                                "name": "_2",
                                "nodeType": "YulTypedName",
                                "src": "1609:2:39",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "nodeType": "YulVariableDeclaration",
                            "src": "1659:24:39",
                            "value": {
                              "name": "deleteStart",
                              "nodeType": "YulIdentifier",
                              "src": "1672:11:39"
                            },
                            "variables": [
                              {
                                "name": "start",
                                "nodeType": "YulTypedName",
                                "src": "1663:5:39",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "body": {
                              "nodeType": "YulBlock",
                              "src": "1757:21:39",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "name": "start",
                                        "nodeType": "YulIdentifier",
                                        "src": "1766:5:39"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "1773:2:39"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sstore",
                                      "nodeType": "YulIdentifier",
                                      "src": "1759:6:39"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1759:17:39"
                                  },
                                  "nodeType": "YulExpressionStatement",
                                  "src": "1759:17:39"
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "name": "start",
                                  "nodeType": "YulIdentifier",
                                  "src": "1707:5:39"
                                },
                                {
                                  "name": "_2",
                                  "nodeType": "YulIdentifier",
                                  "src": "1714:2:39"
                                }
                              ],
                              "functionName": {
                                "name": "lt",
                                "nodeType": "YulIdentifier",
                                "src": "1704:2:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1704:13:39"
                            },
                            "nodeType": "YulForLoop",
                            "post": {
                              "nodeType": "YulBlock",
                              "src": "1718:26:39",
                              "statements": [
                                {
                                  "nodeType": "YulAssignment",
                                  "src": "1720:22:39",
                                  "value": {
                                    "arguments": [
                                      {
                                        "name": "start",
                                        "nodeType": "YulIdentifier",
                                        "src": "1733:5:39"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1740:1:39",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1729:3:39"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1729:13:39"
                                  },
                                  "variableNames": [
                                    {
                                      "name": "start",
                                      "nodeType": "YulIdentifier",
                                      "src": "1720:5:39"
                                    }
                                  ]
                                }
                              ]
                            },
                            "pre": {
                              "nodeType": "YulBlock",
                              "src": "1700:3:39",
                              "statements": []
                            },
                            "src": "1696:82:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "len",
                            "nodeType": "YulIdentifier",
                            "src": "1346:3:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1351:2:39",
                            "type": "",
                            "value": "31"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "1343:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1343:11:39"
                      },
                      "nodeType": "YulIf",
                      "src": "1340:448:39"
                    }
                  ]
                },
                "name": "clean_up_bytearray_end_slots_string_storage",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "array",
                    "nodeType": "YulTypedName",
                    "src": "1302:5:39",
                    "type": ""
                  },
                  {
                    "name": "len",
                    "nodeType": "YulTypedName",
                    "src": "1309:3:39",
                    "type": ""
                  },
                  {
                    "name": "startIndex",
                    "nodeType": "YulTypedName",
                    "src": "1314:10:39",
                    "type": ""
                  }
                ],
                "src": "1249:545:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1884:81:39",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "1894:65:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "1909:4:39"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1927:1:39",
                                            "type": "",
                                            "value": "3"
                                          },
                                          {
                                            "name": "len",
                                            "nodeType": "YulIdentifier",
                                            "src": "1930:3:39"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "1923:3:39"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1923:11:39"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1940:1:39",
                                            "type": "",
                                            "value": "0"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "1936:3:39"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1936:6:39"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shr",
                                      "nodeType": "YulIdentifier",
                                      "src": "1919:3:39"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1919:24:39"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "1915:3:39"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1915:29:39"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "1905:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1905:40:39"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1951:1:39",
                                "type": "",
                                "value": "1"
                              },
                              {
                                "name": "len",
                                "nodeType": "YulIdentifier",
                                "src": "1954:3:39"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "1947:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1947:11:39"
                          }
                        ],
                        "functionName": {
                          "name": "or",
                          "nodeType": "YulIdentifier",
                          "src": "1902:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1902:57:39"
                      },
                      "variableNames": [
                        {
                          "name": "used",
                          "nodeType": "YulIdentifier",
                          "src": "1894:4:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "extract_used_part_and_set_length_of_short_byte_array",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "data",
                    "nodeType": "YulTypedName",
                    "src": "1861:4:39",
                    "type": ""
                  },
                  {
                    "name": "len",
                    "nodeType": "YulTypedName",
                    "src": "1867:3:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "used",
                    "nodeType": "YulTypedName",
                    "src": "1875:4:39",
                    "type": ""
                  }
                ],
                "src": "1799:166:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2066:1256:39",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "2076:24:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "src",
                            "nodeType": "YulIdentifier",
                            "src": "2096:3:39"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "2090:5:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2090:10:39"
                      },
                      "variables": [
                        {
                          "name": "newLen",
                          "nodeType": "YulTypedName",
                          "src": "2080:6:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2143:22:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x41",
                                "nodeType": "YulIdentifier",
                                "src": "2145:16:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2145:18:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2145:18:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "newLen",
                            "nodeType": "YulIdentifier",
                            "src": "2115:6:39"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2131:2:39",
                                    "type": "",
                                    "value": "64"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2135:1:39",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "2127:3:39"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2127:10:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2139:1:39",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "2123:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2123:18:39"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "2112:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2112:30:39"
                      },
                      "nodeType": "YulIf",
                      "src": "2109:56:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "slot",
                            "nodeType": "YulIdentifier",
                            "src": "2218:4:39"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "slot",
                                    "nodeType": "YulIdentifier",
                                    "src": "2256:4:39"
                                  }
                                ],
                                "functionName": {
                                  "name": "sload",
                                  "nodeType": "YulIdentifier",
                                  "src": "2250:5:39"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2250:11:39"
                              }
                            ],
                            "functionName": {
                              "name": "extract_byte_array_length",
                              "nodeType": "YulIdentifier",
                              "src": "2224:25:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2224:38:39"
                          },
                          {
                            "name": "newLen",
                            "nodeType": "YulIdentifier",
                            "src": "2264:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "clean_up_bytearray_end_slots_string_storage",
                          "nodeType": "YulIdentifier",
                          "src": "2174:43:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2174:97:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2174:97:39"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "2280:18:39",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "2297:1:39",
                        "type": "",
                        "value": "0"
                      },
                      "variables": [
                        {
                          "name": "srcOffset",
                          "nodeType": "YulTypedName",
                          "src": "2284:9:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "2307:23:39",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "2326:4:39",
                        "type": "",
                        "value": "0x20"
                      },
                      "variables": [
                        {
                          "name": "srcOffset_1",
                          "nodeType": "YulTypedName",
                          "src": "2311:11:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2339:24:39",
                      "value": {
                        "name": "srcOffset_1",
                        "nodeType": "YulIdentifier",
                        "src": "2352:11:39"
                      },
                      "variableNames": [
                        {
                          "name": "srcOffset",
                          "nodeType": "YulIdentifier",
                          "src": "2339:9:39"
                        }
                      ]
                    },
                    {
                      "cases": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2409:656:39",
                            "statements": [
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "2423:35:39",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "newLen",
                                      "nodeType": "YulIdentifier",
                                      "src": "2442:6:39"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2454:2:39",
                                          "type": "",
                                          "value": "31"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "not",
                                        "nodeType": "YulIdentifier",
                                        "src": "2450:3:39"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2450:7:39"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "2438:3:39"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2438:20:39"
                                },
                                "variables": [
                                  {
                                    "name": "loopEnd",
                                    "nodeType": "YulTypedName",
                                    "src": "2427:7:39",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "2471:49:39",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "slot",
                                      "nodeType": "YulIdentifier",
                                      "src": "2515:4:39"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "array_dataslot_string_storage",
                                    "nodeType": "YulIdentifier",
                                    "src": "2485:29:39"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2485:35:39"
                                },
                                "variables": [
                                  {
                                    "name": "dstPtr",
                                    "nodeType": "YulTypedName",
                                    "src": "2475:6:39",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "2533:10:39",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2542:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                "variables": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulTypedName",
                                    "src": "2537:1:39",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "2620:172:39",
                                  "statements": [
                                    {
                                      "expression": {
                                        "arguments": [
                                          {
                                            "name": "dstPtr",
                                            "nodeType": "YulIdentifier",
                                            "src": "2645:6:39"
                                          },
                                          {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "src",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "2663:3:39"
                                                  },
                                                  {
                                                    "name": "srcOffset",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "2668:9:39"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2659:3:39"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "2659:19:39"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mload",
                                              "nodeType": "YulIdentifier",
                                              "src": "2653:5:39"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2653:26:39"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sstore",
                                          "nodeType": "YulIdentifier",
                                          "src": "2638:6:39"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2638:42:39"
                                      },
                                      "nodeType": "YulExpressionStatement",
                                      "src": "2638:42:39"
                                    },
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "2697:24:39",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "dstPtr",
                                            "nodeType": "YulIdentifier",
                                            "src": "2711:6:39"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2719:1:39",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "2707:3:39"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2707:14:39"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "dstPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "2697:6:39"
                                        }
                                      ]
                                    },
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "2738:40:39",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "srcOffset",
                                            "nodeType": "YulIdentifier",
                                            "src": "2755:9:39"
                                          },
                                          {
                                            "name": "srcOffset_1",
                                            "nodeType": "YulIdentifier",
                                            "src": "2766:11:39"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "2751:3:39"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2751:27:39"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "srcOffset",
                                          "nodeType": "YulIdentifier",
                                          "src": "2738:9:39"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "2567:1:39"
                                    },
                                    {
                                      "name": "loopEnd",
                                      "nodeType": "YulIdentifier",
                                      "src": "2570:7:39"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "lt",
                                    "nodeType": "YulIdentifier",
                                    "src": "2564:2:39"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2564:14:39"
                                },
                                "nodeType": "YulForLoop",
                                "post": {
                                  "nodeType": "YulBlock",
                                  "src": "2579:28:39",
                                  "statements": [
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "2581:24:39",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "i",
                                            "nodeType": "YulIdentifier",
                                            "src": "2590:1:39"
                                          },
                                          {
                                            "name": "srcOffset_1",
                                            "nodeType": "YulIdentifier",
                                            "src": "2593:11:39"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "2586:3:39"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2586:19:39"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "2581:1:39"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "pre": {
                                  "nodeType": "YulBlock",
                                  "src": "2560:3:39",
                                  "statements": []
                                },
                                "src": "2556:236:39"
                              },
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "2840:166:39",
                                  "statements": [
                                    {
                                      "nodeType": "YulVariableDeclaration",
                                      "src": "2858:43:39",
                                      "value": {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "name": "src",
                                                "nodeType": "YulIdentifier",
                                                "src": "2885:3:39"
                                              },
                                              {
                                                "name": "srcOffset",
                                                "nodeType": "YulIdentifier",
                                                "src": "2890:9:39"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "2881:3:39"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2881:19:39"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "mload",
                                          "nodeType": "YulIdentifier",
                                          "src": "2875:5:39"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2875:26:39"
                                      },
                                      "variables": [
                                        {
                                          "name": "lastValue",
                                          "nodeType": "YulTypedName",
                                          "src": "2862:9:39",
                                          "type": ""
                                        }
                                      ]
                                    },
                                    {
                                      "expression": {
                                        "arguments": [
                                          {
                                            "name": "dstPtr",
                                            "nodeType": "YulIdentifier",
                                            "src": "2925:6:39"
                                          },
                                          {
                                            "arguments": [
                                              {
                                                "name": "lastValue",
                                                "nodeType": "YulIdentifier",
                                                "src": "2937:9:39"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "arguments": [
                                                      {
                                                        "arguments": [
                                                          {
                                                            "arguments": [
                                                              {
                                                                "kind": "number",
                                                                "nodeType": "YulLiteral",
                                                                "src": "2964:1:39",
                                                                "type": "",
                                                                "value": "3"
                                                              },
                                                              {
                                                                "name": "newLen",
                                                                "nodeType": "YulIdentifier",
                                                                "src": "2967:6:39"
                                                              }
                                                            ],
                                                            "functionName": {
                                                              "name": "shl",
                                                              "nodeType": "YulIdentifier",
                                                              "src": "2960:3:39"
                                                            },
                                                            "nodeType": "YulFunctionCall",
                                                            "src": "2960:14:39"
                                                          },
                                                          {
                                                            "kind": "number",
                                                            "nodeType": "YulLiteral",
                                                            "src": "2976:3:39",
                                                            "type": "",
                                                            "value": "248"
                                                          }
                                                        ],
                                                        "functionName": {
                                                          "name": "and",
                                                          "nodeType": "YulIdentifier",
                                                          "src": "2956:3:39"
                                                        },
                                                        "nodeType": "YulFunctionCall",
                                                        "src": "2956:24:39"
                                                      },
                                                      {
                                                        "arguments": [
                                                          {
                                                            "kind": "number",
                                                            "nodeType": "YulLiteral",
                                                            "src": "2986:1:39",
                                                            "type": "",
                                                            "value": "0"
                                                          }
                                                        ],
                                                        "functionName": {
                                                          "name": "not",
                                                          "nodeType": "YulIdentifier",
                                                          "src": "2982:3:39"
                                                        },
                                                        "nodeType": "YulFunctionCall",
                                                        "src": "2982:6:39"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "shr",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "2952:3:39"
                                                    },
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "2952:37:39"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "not",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2948:3:39"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "2948:42:39"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "and",
                                              "nodeType": "YulIdentifier",
                                              "src": "2933:3:39"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2933:58:39"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sstore",
                                          "nodeType": "YulIdentifier",
                                          "src": "2918:6:39"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2918:74:39"
                                      },
                                      "nodeType": "YulExpressionStatement",
                                      "src": "2918:74:39"
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "loopEnd",
                                      "nodeType": "YulIdentifier",
                                      "src": "2811:7:39"
                                    },
                                    {
                                      "name": "newLen",
                                      "nodeType": "YulIdentifier",
                                      "src": "2820:6:39"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "lt",
                                    "nodeType": "YulIdentifier",
                                    "src": "2808:2:39"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2808:19:39"
                                },
                                "nodeType": "YulIf",
                                "src": "2805:201:39"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "slot",
                                      "nodeType": "YulIdentifier",
                                      "src": "3026:4:39"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "3040:1:39",
                                              "type": "",
                                              "value": "1"
                                            },
                                            {
                                              "name": "newLen",
                                              "nodeType": "YulIdentifier",
                                              "src": "3043:6:39"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "shl",
                                            "nodeType": "YulIdentifier",
                                            "src": "3036:3:39"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "3036:14:39"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3052:1:39",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "3032:3:39"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3032:22:39"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "sstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "3019:6:39"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3019:36:39"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3019:36:39"
                              }
                            ]
                          },
                          "nodeType": "YulCase",
                          "src": "2402:663:39",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2407:1:39",
                            "type": "",
                            "value": "1"
                          }
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3082:234:39",
                            "statements": [
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "3096:14:39",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3109:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                "variables": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulTypedName",
                                    "src": "3100:5:39",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "3145:67:39",
                                  "statements": [
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "3163:35:39",
                                      "value": {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "name": "src",
                                                "nodeType": "YulIdentifier",
                                                "src": "3182:3:39"
                                              },
                                              {
                                                "name": "srcOffset",
                                                "nodeType": "YulIdentifier",
                                                "src": "3187:9:39"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "3178:3:39"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "3178:19:39"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "mload",
                                          "nodeType": "YulIdentifier",
                                          "src": "3172:5:39"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "3172:26:39"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "value",
                                          "nodeType": "YulIdentifier",
                                          "src": "3163:5:39"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "condition": {
                                  "name": "newLen",
                                  "nodeType": "YulIdentifier",
                                  "src": "3126:6:39"
                                },
                                "nodeType": "YulIf",
                                "src": "3123:89:39"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "slot",
                                      "nodeType": "YulIdentifier",
                                      "src": "3232:4:39"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "value",
                                          "nodeType": "YulIdentifier",
                                          "src": "3291:5:39"
                                        },
                                        {
                                          "name": "newLen",
                                          "nodeType": "YulIdentifier",
                                          "src": "3298:6:39"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "extract_used_part_and_set_length_of_short_byte_array",
                                        "nodeType": "YulIdentifier",
                                        "src": "3238:52:39"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3238:67:39"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "sstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "3225:6:39"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3225:81:39"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3225:81:39"
                              }
                            ]
                          },
                          "nodeType": "YulCase",
                          "src": "3074:242:39",
                          "value": "default"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "name": "newLen",
                            "nodeType": "YulIdentifier",
                            "src": "2382:6:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2390:2:39",
                            "type": "",
                            "value": "31"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "2379:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2379:14:39"
                      },
                      "nodeType": "YulSwitch",
                      "src": "2372:944:39"
                    }
                  ]
                },
                "name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "slot",
                    "nodeType": "YulTypedName",
                    "src": "2051:4:39",
                    "type": ""
                  },
                  {
                    "name": "src",
                    "nodeType": "YulTypedName",
                    "src": "2057:3:39",
                    "type": ""
                  }
                ],
                "src": "1970:1352:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3540:276:39",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "3550:27:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3562:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3573:3:39",
                            "type": "",
                            "value": "160"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "3558:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3558:19:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "3550:4:39"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3593:9:39"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "3604:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3586:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3586:25:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3586:25:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3631:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3642:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3627:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3627:18:39"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "3647:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3620:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3620:34:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3620:34:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3674:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3685:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3670:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3670:18:39"
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulIdentifier",
                            "src": "3690:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3663:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3663:34:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3663:34:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3717:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3728:2:39",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3713:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3713:18:39"
                          },
                          {
                            "name": "value3",
                            "nodeType": "YulIdentifier",
                            "src": "3733:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3706:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3706:34:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3706:34:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3760:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3771:3:39",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3756:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3756:19:39"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value4",
                                "nodeType": "YulIdentifier",
                                "src": "3781:6:39"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3797:3:39",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3802:1:39",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "3793:3:39"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3793:11:39"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3806:1:39",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3789:3:39"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3789:19:39"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "3777:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3777:32:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3749:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3749:61:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3749:61:39"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "3477:9:39",
                    "type": ""
                  },
                  {
                    "name": "value4",
                    "nodeType": "YulTypedName",
                    "src": "3488:6:39",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "3496:6:39",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "3504:6:39",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "3512:6:39",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "3520:6:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "3531:4:39",
                    "type": ""
                  }
                ],
                "src": "3327:489:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3950:119:39",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "3960:26:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3972:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3983:2:39",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "3968:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3968:18:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "3960:4:39"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4002:9:39"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "4013:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3995:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3995:25:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3995:25:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4040:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4051:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4036:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4036:18:39"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "4056:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4029:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4029:34:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4029:34:39"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "3911:9:39",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "3922:6:39",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "3930:6:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "3941:4:39",
                    "type": ""
                  }
                ],
                "src": "3821:248:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4248:229:39",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4265:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4276:2:39",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4258:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4258:21:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4258:21:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4299:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4310:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4295:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4295:18:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4315:2:39",
                            "type": "",
                            "value": "39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4288:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4288:30:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4288:30:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4338:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4349:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4334:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4334:18:39"
                          },
                          {
                            "hexValue": "476f7665726e6f7253657474696e67733a20766f74696e6720706572696f6420",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "4354:34:39",
                            "type": "",
                            "value": "GovernorSettings: voting period "
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4327:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4327:62:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4327:62:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4409:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4420:2:39",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4405:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4405:18:39"
                          },
                          {
                            "hexValue": "746f6f206c6f77",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "4425:9:39",
                            "type": "",
                            "value": "too low"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4398:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4398:37:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4398:37:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4444:27:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4456:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4467:3:39",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4452:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4452:19:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "4444:4:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_3f314603cb191f371d117be724372820f824fc7fbb608c5408b31620bafe9a83__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "4225:9:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "4239:4:39",
                    "type": ""
                  }
                ],
                "src": "4074:403:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4656:297:39",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4673:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4684:2:39",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4666:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4666:21:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4666:21:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4707:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4718:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4703:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4703:18:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4723:2:39",
                            "type": "",
                            "value": "67"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4696:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4696:30:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4696:30:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4746:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4757:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4742:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4742:18:39"
                          },
                          {
                            "hexValue": "476f7665726e6f72566f74657351756f72756d4672616374696f6e3a2071756f",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "4762:34:39",
                            "type": "",
                            "value": "GovernorVotesQuorumFraction: quo"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4735:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4735:62:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4735:62:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4817:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4828:2:39",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4813:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4813:18:39"
                          },
                          {
                            "hexValue": "72756d4e756d657261746f72206f7665722071756f72756d44656e6f6d696e61",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "4833:34:39",
                            "type": "",
                            "value": "rumNumerator over quorumDenomina"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4806:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4806:62:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4806:62:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4888:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4899:3:39",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4884:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4884:19:39"
                          },
                          {
                            "hexValue": "746f72",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "4905:5:39",
                            "type": "",
                            "value": "tor"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4877:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4877:34:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4877:34:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4920:27:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4932:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4943:3:39",
                            "type": "",
                            "value": "160"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4928:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4928:19:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "4920:4:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_0687f8064c09ccf183090b5092c4485c730072a161487645a7e37b56cef356bb__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "4633:9:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "4647:4:39",
                    "type": ""
                  }
                ],
                "src": "4482:471:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "5087:175:39",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "5097:26:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5109:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5120:2:39",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "5105:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5105:18:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "5097:4:39"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "5132:29:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5150:3:39",
                                "type": "",
                                "value": "160"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5155:1:39",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "5146:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5146:11:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5159:1:39",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "5142:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5142:19:39"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "5136:2:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5177:9:39"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "5192:6:39"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "5200:2:39"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "5188:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5188:15:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5170:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5170:34:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5170:34:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5224:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5235:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5220:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5220:18:39"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "5244:6:39"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "5252:2:39"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "5240:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5240:15:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5213:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5213:43:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5213:43:39"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "5048:9:39",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "5059:6:39",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "5067:6:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "5078:4:39",
                    "type": ""
                  }
                ],
                "src": "4958:304:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "5388:427:39",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "5398:12:39",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "5408:2:39",
                        "type": "",
                        "value": "32"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "5402:2:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5426:9:39"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "5437:2:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5419:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5419:21:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5419:21:39"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "5449:27:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "5469:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "5463:5:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5463:13:39"
                      },
                      "variables": [
                        {
                          "name": "length",
                          "nodeType": "YulTypedName",
                          "src": "5453:6:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5496:9:39"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "5507:2:39"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5492:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5492:18:39"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "5512:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5485:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5485:34:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5485:34:39"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "5528:10:39",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "5537:1:39",
                        "type": "",
                        "value": "0"
                      },
                      "variables": [
                        {
                          "name": "i",
                          "nodeType": "YulTypedName",
                          "src": "5532:1:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "5597:90:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "headStart",
                                          "nodeType": "YulIdentifier",
                                          "src": "5626:9:39"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "5637:1:39"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "5622:3:39"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5622:17:39"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5641:2:39",
                                      "type": "",
                                      "value": "64"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "5618:3:39"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5618:26:39"
                                },
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "value0",
                                              "nodeType": "YulIdentifier",
                                              "src": "5660:6:39"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "5668:1:39"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "5656:3:39"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "5656:14:39"
                                        },
                                        {
                                          "name": "_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "5672:2:39"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "5652:3:39"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5652:23:39"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "5646:5:39"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5646:30:39"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "5611:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "5611:66:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "5611:66:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "i",
                            "nodeType": "YulIdentifier",
                            "src": "5558:1:39"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "5561:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "5555:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5555:13:39"
                      },
                      "nodeType": "YulForLoop",
                      "post": {
                        "nodeType": "YulBlock",
                        "src": "5569:19:39",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "5571:15:39",
                            "value": {
                              "arguments": [
                                {
                                  "name": "i",
                                  "nodeType": "YulIdentifier",
                                  "src": "5580:1:39"
                                },
                                {
                                  "name": "_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "5583:2:39"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "5576:3:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "5576:10:39"
                            },
                            "variableNames": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "5571:1:39"
                              }
                            ]
                          }
                        ]
                      },
                      "pre": {
                        "nodeType": "YulBlock",
                        "src": "5551:3:39",
                        "statements": []
                      },
                      "src": "5547:140:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5711:9:39"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "5722:6:39"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5707:3:39"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5707:22:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5731:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5703:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5703:31:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5736:1:39",
                            "type": "",
                            "value": "0"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5696:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5696:42:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5696:42:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "5747:62:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5763:9:39"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "5782:6:39"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5790:2:39",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5778:3:39"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5778:15:39"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5799:2:39",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "5795:3:39"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5795:7:39"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "5774:3:39"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5774:29:39"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5759:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5759:45:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5806:2:39",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "5755:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5755:54:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "5747:4:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "5357:9:39",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "5368:6:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "5379:4:39",
                    "type": ""
                  }
                ],
                "src": "5267:548:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "5914:203:39",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "5924:26:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "array",
                            "nodeType": "YulIdentifier",
                            "src": "5944:5:39"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "5938:5:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5938:12:39"
                      },
                      "variables": [
                        {
                          "name": "length",
                          "nodeType": "YulTypedName",
                          "src": "5928:6:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "5959:32:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "array",
                                "nodeType": "YulIdentifier",
                                "src": "5978:5:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5985:4:39",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5974:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5974:16:39"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "5968:5:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5968:23:39"
                      },
                      "variableNames": [
                        {
                          "name": "value",
                          "nodeType": "YulIdentifier",
                          "src": "5959:5:39"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "6028:83:39",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "6042:59:39",
                            "value": {
                              "arguments": [
                                {
                                  "name": "value",
                                  "nodeType": "YulIdentifier",
                                  "src": "6055:5:39"
                                },
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "6070:1:39",
                                          "type": "",
                                          "value": "3"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "6077:4:39",
                                              "type": "",
                                              "value": "0x20"
                                            },
                                            {
                                              "name": "length",
                                              "nodeType": "YulIdentifier",
                                              "src": "6083:6:39"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "sub",
                                            "nodeType": "YulIdentifier",
                                            "src": "6073:3:39"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "6073:17:39"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "6066:3:39"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "6066:25:39"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "6097:1:39",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "not",
                                        "nodeType": "YulIdentifier",
                                        "src": "6093:3:39"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "6093:6:39"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shl",
                                    "nodeType": "YulIdentifier",
                                    "src": "6062:3:39"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6062:38:39"
                                }
                              ],
                              "functionName": {
                                "name": "and",
                                "nodeType": "YulIdentifier",
                                "src": "6051:3:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "6051:50:39"
                            },
                            "variableNames": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "6042:5:39"
                              }
                            ]
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "6006:6:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6014:4:39",
                            "type": "",
                            "value": "0x20"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "6003:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6003:16:39"
                      },
                      "nodeType": "YulIf",
                      "src": "6000:111:39"
                    }
                  ]
                },
                "name": "convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "array",
                    "nodeType": "YulTypedName",
                    "src": "5894:5:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "5904:5:39",
                    "type": ""
                  }
                ],
                "src": "5820:297:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "6296:229:39",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6313:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6324:2:39",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6306:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6306:21:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6306:21:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6347:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6358:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6343:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6343:18:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6363:2:39",
                            "type": "",
                            "value": "39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6336:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6336:30:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6336:30:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6386:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6397:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6382:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6382:18:39"
                          },
                          {
                            "hexValue": "53616665436173743a2076616c756520646f65736e27742066697420696e2032",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "6402:34:39",
                            "type": "",
                            "value": "SafeCast: value doesn't fit in 2"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6375:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6375:62:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6375:62:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6457:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6468:2:39",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6453:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6453:18:39"
                          },
                          {
                            "hexValue": "32342062697473",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "6473:9:39",
                            "type": "",
                            "value": "24 bits"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6446:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6446:37:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6446:37:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "6492:27:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6504:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6515:3:39",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "6500:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6500:19:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "6492:4:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_9d2acf551b2466898443b9bc3a403a4d86037386bc5a8960c1bbb0f204e69b79__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "6273:9:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "6287:4:39",
                    "type": ""
                  }
                ],
                "src": "6122:403:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "6610:204:39",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "6656:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6665:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6668:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "6658:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "6658:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "6658:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "6631:7:39"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6640:9:39"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "6627:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6627:23:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6652:2:39",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "6623:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6623:32:39"
                      },
                      "nodeType": "YulIf",
                      "src": "6620:52:39"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "6681:29:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6700:9:39"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "6694:5:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6694:16:39"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "6685:5:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "6768:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6777:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6780:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "6770:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "6770:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "6770:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "6732:5:39"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "6743:5:39"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6750:14:39",
                                    "type": "",
                                    "value": "0xffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "6739:3:39"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6739:26:39"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "6729:2:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6729:37:39"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "6722:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6722:45:39"
                      },
                      "nodeType": "YulIf",
                      "src": "6719:65:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "6793:15:39",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "6803:5:39"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "6793:6:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_uint48_fromMemory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "6576:9:39",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "6587:7:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "6599:6:39",
                    "type": ""
                  }
                ],
                "src": "6530:284:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "6993:228:39",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7010:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7021:2:39",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7003:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7003:21:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7003:21:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7044:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7055:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7040:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7040:18:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7060:2:39",
                            "type": "",
                            "value": "38"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7033:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7033:30:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7033:30:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7083:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7094:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7079:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7079:18:39"
                          },
                          {
                            "hexValue": "53616665436173743a2076616c756520646f65736e27742066697420696e2033",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "7099:34:39",
                            "type": "",
                            "value": "SafeCast: value doesn't fit in 3"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7072:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7072:62:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7072:62:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7154:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7165:2:39",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7150:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7150:18:39"
                          },
                          {
                            "hexValue": "322062697473",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "7170:8:39",
                            "type": "",
                            "value": "2 bits"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7143:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7143:36:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7143:36:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "7188:27:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7200:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7211:3:39",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "7196:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7196:19:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "7188:4:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_c907489dafcfb622d3b83f2657a14d6da2f59e0de3116af0d6a80554c1a7cb19__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "6970:9:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "6984:4:39",
                    "type": ""
                  }
                ],
                "src": "6819:402:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "7275:176:39",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "7285:17:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "7297:1:39"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "7300:1:39"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "7293:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7293:9:39"
                      },
                      "variableNames": [
                        {
                          "name": "diff",
                          "nodeType": "YulIdentifier",
                          "src": "7285:4:39"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "7334:111:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "7355:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7362:3:39",
                                      "type": "",
                                      "value": "224"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7367:10:39",
                                      "type": "",
                                      "value": "0x4e487b71"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shl",
                                    "nodeType": "YulIdentifier",
                                    "src": "7358:3:39"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7358:20:39"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "7348:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "7348:31:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "7348:31:39"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "7399:1:39",
                                  "type": "",
                                  "value": "4"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "7402:4:39",
                                  "type": "",
                                  "value": "0x11"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "7392:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "7392:15:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "7392:15:39"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "7427:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "7430:4:39",
                                  "type": "",
                                  "value": "0x24"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "7420:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "7420:15:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "7420:15:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "diff",
                            "nodeType": "YulIdentifier",
                            "src": "7317:4:39"
                          },
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "7323:1:39"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "7314:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7314:11:39"
                      },
                      "nodeType": "YulIf",
                      "src": "7311:134:39"
                    }
                  ]
                },
                "name": "checked_sub_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "7257:1:39",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "7260:1:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "diff",
                    "nodeType": "YulTypedName",
                    "src": "7266:4:39",
                    "type": ""
                  }
                ],
                "src": "7226:225:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "7630:228:39",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7647:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7658:2:39",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7640:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7640:21:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7640:21:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7681:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7692:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7677:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7677:18:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7697:2:39",
                            "type": "",
                            "value": "38"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7670:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7670:30:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7670:30:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7720:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7731:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7716:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7716:18:39"
                          },
                          {
                            "hexValue": "53616665436173743a2076616c756520646f65736e27742066697420696e2034",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "7736:34:39",
                            "type": "",
                            "value": "SafeCast: value doesn't fit in 4"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7709:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7709:62:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7709:62:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7791:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7802:2:39",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7787:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7787:18:39"
                          },
                          {
                            "hexValue": "382062697473",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "7807:8:39",
                            "type": "",
                            "value": "8 bits"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7780:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7780:36:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7780:36:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "7825:27:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7837:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7848:3:39",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "7833:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7833:19:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "7825:4:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_599034f9324dd4e988c6cea5a00a30f53147fec1b01559682f18cd840028f495__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "7607:9:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "7621:4:39",
                    "type": ""
                  }
                ],
                "src": "7456:402:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "8037:177:39",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "8054:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8065:2:39",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "8047:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8047:21:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8047:21:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8088:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8099:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8084:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8084:18:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8104:2:39",
                            "type": "",
                            "value": "27"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "8077:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8077:30:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8077:30:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8127:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8138:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8123:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8123:18:39"
                          },
                          {
                            "hexValue": "436865636b706f696e743a2064656372656173696e67206b657973",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "8143:29:39",
                            "type": "",
                            "value": "Checkpoint: decreasing keys"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "8116:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8116:57:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8116:57:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "8182:26:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "8194:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8205:2:39",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "8190:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8190:18:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "8182:4:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_4f6b1769383e9e01fad001f10d4f9180a25f63424c2597419936b157d29f34ec__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "8014:9:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "8028:4:39",
                    "type": ""
                  }
                ],
                "src": "7863:351:39"
              }
            ]
          },
          "contents": "{\n    { }\n    function validator_revert_contract_IVotes(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_contract$_IVotes_$5667t_contract$_TimelockController_$4634_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_contract_IVotes(value)\n        value0 := value\n        let value_1 := mload(add(headStart, 32))\n        validator_revert_contract_IVotes(value_1)\n        value1 := value_1\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_stringliteral_3f314603cb191f371d117be724372820f824fc7fbb608c5408b31620bafe9a83__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 39)\n        mstore(add(headStart, 64), \"GovernorSettings: voting period \")\n        mstore(add(headStart, 96), \"too low\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0687f8064c09ccf183090b5092c4485c730072a161487645a7e37b56cef356bb__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 67)\n        mstore(add(headStart, 64), \"GovernorVotesQuorumFraction: quo\")\n        mstore(add(headStart, 96), \"rumNumerator over quorumDenomina\")\n        mstore(add(headStart, 128), \"tor\")\n        tail := add(headStart, 160)\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        mstore(add(add(headStart, length), 64), 0)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32(array) -> value\n    {\n        let length := mload(array)\n        value := mload(add(array, 0x20))\n        if lt(length, 0x20)\n        {\n            value := and(value, shl(shl(3, sub(0x20, length)), not(0)))\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_9d2acf551b2466898443b9bc3a403a4d86037386bc5a8960c1bbb0f204e69b79__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 39)\n        mstore(add(headStart, 64), \"SafeCast: value doesn't fit in 2\")\n        mstore(add(headStart, 96), \"24 bits\")\n        tail := add(headStart, 128)\n    }\n    function abi_decode_tuple_t_uint48_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, 0xffffffffffff))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_c907489dafcfb622d3b83f2657a14d6da2f59e0de3116af0d6a80554c1a7cb19__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"SafeCast: value doesn't fit in 3\")\n        mstore(add(headStart, 96), \"2 bits\")\n        tail := add(headStart, 128)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_599034f9324dd4e988c6cea5a00a30f53147fec1b01559682f18cd840028f495__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"SafeCast: value doesn't fit in 4\")\n        mstore(add(headStart, 96), \"8 bits\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_4f6b1769383e9e01fad001f10d4f9180a25f63424c2597419936b157d29f34ec__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 27)\n        mstore(add(headStart, 64), \"Checkpoint: decreasing keys\")\n        tail := add(headStart, 96)\n    }\n}",
          "id": 39,
          "language": "Yul",
          "name": "#utility.yul"
        }
      ],
      "linkReferences": {},
      "object": "6101806040523480156200001257600080fd5b5060405162005104380380620051048339810160408190526200003591620009d4565b80600483600461012c6000604051806040016040528060118152602001702a34b6b2b637b1b5afa3b7bb32b93737b960791b815250806200007b620001ad60201b60201c565b62000096600083620001c860201b620017b11790919060201c565b60e052620000b2816001620001c8602090811b620017b117901c565b61010052815160208084019190912061012052815190820120610140524660a052620001426101205161014051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60805250503060c052600262000159828262000ab8565b506200016790508362000218565b620001728262000259565b6200017d8162000300565b5050506001600160a01b031661016052620001988162000341565b50620001a481620004f6565b50505062000c45565b6040805180820190915260018152603160f81b602082015290565b6000602083511015620001e857620001e0836200055f565b905062000212565b82620001ff83620005a260201b620017e21760201c565b906200020c908262000ab8565b50600090505b92915050565b60065460408051918252602082018390527fc565b045403dc03c2eea82b81a0465edad9e2e7fc4d97e11421c209da93d7a93910160405180910390a1600655565b60008111620002bf5760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f7253657474696e67733a20766f74696e6720706572696f6420604482015266746f6f206c6f7760c81b60648201526084015b60405180910390fd5b60075460408051918252602082018390527f7e3f7f0708a84de9203036abaa450dccc85ad5ff52f78c170f3edb55cf5e8828910160405180910390a1600755565b60085460408051918252602082018390527fccb45da8d5717e6c4544694297c4ba5cf151d455c9bb0ed4fc7a38411bc05461910160405180910390a1600855565b6064811115620003c65760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72566f74657351756f72756d4672616374696f6e3a2071756f60448201527f72756d4e756d657261746f72206f7665722071756f72756d44656e6f6d696e616064820152623a37b960e91b608482015260a401620002b6565b6000620003d2620005a5565b90508015801590620003e45750600b54155b156200045f57600b6000016040518060400160405280600063ffffffff1681526020016200041d84620005df60201b620017e51760201c565b6001600160e01b0390811690915282546001810184556000938452602093849020835194909301519091166401000000000263ffffffff909316929092179101555b620004b76200048a620004716200064e565b65ffffffffffff16620006d060201b620018521760201c565b620004a084620005df60201b620017e51760201c565b600b6200073760201b620018b7179092919060201c565b505060408051828152602081018490527f0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b4633997910160405180910390a15050565b600c54604080516001600160a01b03928316815291831660208301527f08f74ea46ef7894f65eabfb5e6e695de773a000b47c529ab559178069b226401910160405180910390a1600c80546001600160a01b0319166001600160a01b0392909216919091179055565b600080829050601f815111156200058d578260405163305a27a960e01b8152600401620002b6919062000b84565b80516200059a8262000bd4565b179392505050565b90565b600b5460009015620005d657620005c8600b6200075460201b620018d21760201c565b6001600160e01b0316905090565b600a545b905090565b60006001600160e01b038211156200064a5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b6064820152608401620002b6565b5090565b6000610160516001600160a01b03166391ddadf46040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015620006b0575060408051601f3d908101601f19168201909252620006ad9181019062000bf9565b60015b620006cb57620005da43620007a260201b620019101760201c565b919050565b600063ffffffff8211156200064a5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b6064820152608401620002b6565b600080620007478585856200080b565b915091505b935093915050565b80546000908015620007985762000780836200077260018462000c23565b600091825260209091200190565b5464010000000090046001600160e01b03166200079b565b60005b9392505050565b600065ffffffffffff8211156200064a5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203460448201526538206269747360d01b6064820152608401620002b6565b825460009081908015620009605760006200082d876200077260018562000c23565b60408051808201909152905463ffffffff8082168084526401000000009092046001600160e01b031660208401529192509087161015620008b15760405162461bcd60e51b815260206004820152601b60248201527f436865636b706f696e743a2064656372656173696e67206b65797300000000006044820152606401620002b6565b805163ffffffff808816911603620008ff5784620008d6886200077260018662000c23565b80546001600160e01b03929092166401000000000263ffffffff9092169190911790556200094f565b6040805180820190915263ffffffff80881682526001600160e01b0380881660208085019182528b54600181018d5560008d81529190912094519151909216640100000000029216919091179101555b6020015192508391506200074c9050565b50506040805180820190915263ffffffff80851682526001600160e01b0380851660208085019182528854600181018a5560008a8152918220955192519093166401000000000291909316179201919091559050816200074c565b6001600160a01b0381168114620009d157600080fd5b50565b60008060408385031215620009e857600080fd5b8251620009f581620009bb565b602084015190925062000a0881620009bb565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600181811c9082168062000a3e57607f821691505b60208210810362000a5f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000ab357600081815260208120601f850160051c8101602086101562000a8e5750805b601f850160051c820191505b8181101562000aaf5782815560010162000a9a565b5050505b505050565b81516001600160401b0381111562000ad45762000ad462000a13565b62000aec8162000ae5845462000a29565b8462000a65565b602080601f83116001811462000b24576000841562000b0b5750858301515b600019600386901b1c1916600185901b17855562000aaf565b600085815260208120601f198616915b8281101562000b555788860151825594840194600190910190840162000b34565b508582101562000b745787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208083528351808285015260005b8181101562000bb35785810183015185820160400152820162000b95565b506000604082860101526040601f19601f8301168501019250505092915050565b8051602080830151919081101562000a5f5760001960209190910360031b1b16919050565b60006020828403121562000c0c57600080fd5b815165ffffffffffff811681146200079b57600080fd5b818103818111156200021257634e487b7160e01b600052601160045260246000fd5b60805160a05160c05160e0516101005161012051610140516101605161443d62000cc7600039600081816108d201528181610fda0152818161132e015281816124b4015261275a01526000612ae801526000612ac0015260006112da015260006112b001526000612a1b01526000612a4501526000612a6f015261443d6000f3fe60806040526004361061026b5760003560e01c80637b3c71d311610144578063c28bc2fa116100b6578063deaaa7cc1161007a578063deaaa7cc1461080c578063ea0217cf14610840578063eb9019d414610860578063ece40cc114610880578063f8ce560a146108a0578063fc0c546a146108c057600080fd5b8063c28bc2fa14610741578063c59057e414610754578063cd4265a514610774578063d33219b414610794578063dd4e2ba5146107c657600080fd5b80639a802a6d116101085780639a802a6d1461067e578063a7713a701461069e578063a890c910146106b3578063ab58fb8e146106d3578063b58131b0146106f3578063c01f9e371461070857600080fd5b80637b3c71d3146105d65780637d5e81e2146105f657806384b0196e1461061657806391ddadf41461063e57806397c3d3341461066a57600080fd5b80633e4f49e6116101dd578063544ffc9c116101a1578063544ffc9c146104d757806354fd4d501461052c57806356781388146105565780635f398a141461057657806360c4247f1461059657806370b0f660146105b657600080fd5b80633e4f49e61461041f578063417491db1461044c5780634385963214610458578063452115d6146104a25780634bf5d7e9146104c257600080fd5b8063160cbed71161022f578063160cbed71461034d5780632656227d1461036d5780632d63f693146103805780632fe3e261146103b65780633932abb1146103ea5780633bccf4fd146103ff57600080fd5b806301ffc9a71461029357806302a251a3146102c857806303420181146102eb57806306f3f9e61461030b57806306fdde031461032b57600080fd5b3661028e57306102796108f4565b6001600160a01b03161461028c57600080fd5b005b600080fd5b34801561029f57600080fd5b506102b36102ae3660046134db565b61090d565b60405190151581526020015b60405180910390f35b3480156102d457600080fd5b506102dd61091e565b6040519081526020016102bf565b3480156102f757600080fd5b506102dd610306366004613629565b610929565b34801561031757600080fd5b5061028c6103263660046136cf565b610a21565b34801561033757600080fd5b50610340610ab4565b6040516102bf9190613738565b34801561035957600080fd5b506102dd6103683660046138cc565b610b46565b6102dd61037b3660046138cc565b610d47565b34801561038c57600080fd5b506102dd61039b3660046136cf565b6000908152600360205260409020546001600160401b031690565b3480156103c257600080fd5b506102dd7f899f067f60f2c931e7c0101a76deed5359d3888d391b6f78fb75402bb24d0eff81565b3480156103f657600080fd5b506102dd610e39565b34801561040b57600080fd5b506102dd61041a36600461395b565b610e44565b34801561042b57600080fd5b5061043f61043a3660046136cf565b610eba565b6040516102bf91906139bf565b34801561028c57600080fd5b34801561046457600080fd5b506102b36104733660046139e7565b60008281526009602090815260408083206001600160a01b038516845260030190915290205460ff1692915050565b3480156104ae57600080fd5b506102dd6104bd3660046138cc565b610ec5565b3480156104ce57600080fd5b50610340610fd6565b3480156104e357600080fd5b506105116104f23660046136cf565b6000908152600960205260409020805460018201546002909201549092565b604080519384526020840192909252908201526060016102bf565b34801561053857600080fd5b506040805180820190915260018152603160f81b6020820152610340565b34801561056257600080fd5b506102dd610571366004613a17565b611098565b34801561058257600080fd5b506102dd610591366004613a43565b6110c1565b3480156105a257600080fd5b506102dd6105b13660046136cf565b61110b565b3480156105c257600080fd5b5061028c6105d13660046136cf565b6111bc565b3480156105e257600080fd5b506102dd6105f1366004613ac6565b611243565b34801561060257600080fd5b506102dd610611366004613b1f565b61128b565b34801561062257600080fd5b5061062b6112a2565b6040516102bf9796959493929190613c1a565b34801561064a57600080fd5b5061065361132a565b60405165ffffffffffff90911681526020016102bf565b34801561067657600080fd5b5060646102dd565b34801561068a57600080fd5b506102dd610699366004613c7c565b6113b3565b3480156106aa57600080fd5b506102dd6113ca565b3480156106bf57600080fd5b5061028c6106ce366004613cd4565b6113f4565b3480156106df57600080fd5b506102dd6106ee3660046136cf565b61147b565b3480156106ff57600080fd5b506102dd611515565b34801561071457600080fd5b506102dd6107233660046136cf565b6000908152600360205260409020600101546001600160401b031690565b61028c61074f366004613cf1565b611520565b34801561076057600080fd5b506102dd61076f3660046138cc565b61162f565b34801561078057600080fd5b506102dd61078f3660046138cc565b611669565b3480156107a057600080fd5b50600c546001600160a01b03165b6040516001600160a01b0390911681526020016102bf565b3480156107d257600080fd5b506040805180820190915260208082527f737570706f72743d627261766f2671756f72756d3d666f722c6162737461696e90820152610340565b34801561081857600080fd5b506102dd7f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f81565b34801561084c57600080fd5b5061028c61085b3660046136cf565b611677565b34801561086c57600080fd5b506102dd61087b366004613d34565b6116fe565b34801561088c57600080fd5b5061028c61089b3660046136cf565b61171f565b3480156108ac57600080fd5b506102dd6108bb3660046136cf565b6117a6565b3480156108cc57600080fd5b506107ae7f000000000000000000000000000000000000000000000000000000000000000081565b6000610908600c546001600160a01b031690565b905090565b600061091882611977565b92915050565b600061090860075490565b6000806109cd6109c57f899f067f60f2c931e7c0101a76deed5359d3888d391b6f78fb75402bb24d0eff8c8c8c8c604051610965929190613d60565b60405180910390208b805190602001206040516020016109aa959493929190948552602085019390935260ff9190911660408401526060830152608082015260a00190565b6040516020818303038152906040528051906020012061199c565b8686866119c9565b9050610a138a828b8b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508d92506119e7915050565b9a9950505050505050505050565b610a296108f4565b6001600160a01b0316336001600160a01b031614610a625760405162461bcd60e51b8152600401610a5990613d70565b60405180910390fd5b30610a6b6108f4565b6001600160a01b031614610aa85760008036604051610a8b929190613d60565b604051809103902090505b80610aa16004611b3c565b03610a9657505b610ab181611bbb565b50565b606060028054610ac390613da7565b80601f0160208091040260200160405190810160405280929190818152602001828054610aef90613da7565b8015610b3c5780601f10610b1157610100808354040283529160200191610b3c565b820191906000526020600020905b815481529060010190602001808311610b1f57829003601f168201915b5050505050905090565b600080610b558686868661162f565b90506004610b6282610eba565b6007811115610b7357610b736139a9565b14610b905760405162461bcd60e51b8152600401610a5990613de1565b600c546040805163793d064960e11b815290516000926001600160a01b03169163f27a0c929160048083019260209291908290030181865afa158015610bda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfe9190613e22565b600c5460405163b1c5f42760e01b81529192506001600160a01b03169063b1c5f42790610c38908a908a908a906000908b90600401613ec9565b602060405180830381865afa158015610c55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c799190613e22565b6000838152600d602052604080822092909255600c5491516308f2a0bb60e41b81526001600160a01b0390921691638f2a0bb091610cc4918b918b918b91908b908990600401613f17565b600060405180830381600087803b158015610cde57600080fd5b505af1158015610cf2573d6000803e3d6000fd5b505050507f9a2e42fd6722813d69113e7d0079d3d940171428df7373df9c7f7617cfda2892828242610d249190613f85565b604080519283526020830191909152015b60405180910390a15095945050505050565b600080610d568686868661162f565b90506000610d6382610eba565b90506004816007811115610d7957610d796139a9565b1480610d9657506005816007811115610d9457610d946139a9565b145b610db25760405162461bcd60e51b8152600401610a5990613de1565b60008281526003602052604090819020600201805460ff19166001179055517f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f90610e009084815260200190565b60405180910390a1610e158288888888611d29565b610e228288888888611dcb565b610e2f8288888888611dd8565b5095945050505050565b600061090860065490565b604080517f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f602082015290810186905260ff851660608201526000908190610e92906109c5906080016109aa565b9050610eaf87828860405180602001604052806000815250611e11565b979650505050505050565b600061091882611e34565b600080610ed48686868661162f565b90506000610ee182610eba565b6007811115610ef257610ef26139a9565b14610f3f5760405162461bcd60e51b815260206004820152601c60248201527f476f7665726e6f723a20746f6f206c61746520746f2063616e63656c000000006044820152606401610a59565b600081815260036020526040902054600160401b90046001600160a01b0316336001600160a01b031614610fc05760405162461bcd60e51b815260206004820152602260248201527f476f7665726e6f723a206f6e6c792070726f706f7365722063616e2063616e63604482015261195b60f21b6064820152608401610a59565b610fcc86868686611669565b9695505050505050565b60607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634bf5d7e96040518163ffffffff1660e01b8152600401600060405180830381865afa92505050801561105757506040513d6000823e601f3d908101601f191682016040526110549190810190613f98565b60015b611093575060408051808201909152601d81527f6d6f64653d626c6f636b6e756d6265722666726f6d3d64656661756c74000000602082015290565b919050565b6000803390506110b984828560405180602001604052806000815250611e11565b949350505050565b600080339050610eaf87828888888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a92506119e7915050565b600b54600090808203611122575050600a54919050565b6000600b611131600184614005565b8154811061114157611141614018565b60009182526020918290206040805180820190915291015463ffffffff8116808352600160201b9091046001600160e01b0316928201929092529150841061119757602001516001600160e01b03169392505050565b6111ab6111a385611852565b600b90611f7e565b6001600160e01b0316949350505050565b6111c46108f4565b6001600160a01b0316336001600160a01b0316146111f45760405162461bcd60e51b8152600401610a5990613d70565b306111fd6108f4565b6001600160a01b03161461123a576000803660405161121d929190613d60565b604051809103902090505b806112336004611b3c565b0361122857505b610ab181612023565b600080339050610fcc86828787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611e1192505050565b600061129985858585612064565b95945050505050565b6000606080828080836112d57f0000000000000000000000000000000000000000000000000000000000000000836123e6565b6113007f000000000000000000000000000000000000000000000000000000000000000060016123e6565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166391ddadf46040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156113a6575060408051601f3d908101601f191682019092526113a39181019061402e565b60015b6110935761090843611910565b60006113c084848461248b565b90505b9392505050565b600b54600090156113ed576113df600b6118d2565b6001600160e01b0316905090565b50600a5490565b6113fc6108f4565b6001600160a01b0316336001600160a01b03161461142c5760405162461bcd60e51b8152600401610a5990613d70565b306114356108f4565b6001600160a01b0316146114725760008036604051611455929190613d60565b604051809103902090505b8061146b6004611b3c565b0361146057505b610ab181612521565b600c546000828152600d602052604080822054905163d45c443560e01b81526004810191909152909182916001600160a01b039091169063d45c443590602401602060405180830381865afa1580156114d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fc9190613e22565b90508060011461150c57806113c3565b60009392505050565b600061090860085490565b6115286108f4565b6001600160a01b0316336001600160a01b0316146115585760405162461bcd60e51b8152600401610a5990613d70565b306115616108f4565b6001600160a01b03161461159e5760008036604051611581929190613d60565b604051809103902090505b806115976004611b3c565b0361158c57505b600080856001600160a01b03168585856040516115bc929190613d60565b60006040518083038185875af1925050503d80600081146115f9576040519150601f19603f3d011682016040523d82523d6000602084013e6115fe565b606091505b509150915061162682826040518060600160405280602881526020016143e06028913961258a565b50505050505050565b6000848484846040516020016116489493929190614056565b60408051601f19818403018152919052805160209091012095945050505050565b6000611299858585856125a3565b61167f6108f4565b6001600160a01b0316336001600160a01b0316146116af5760405162461bcd60e51b8152600401610a5990613d70565b306116b86108f4565b6001600160a01b0316146116f557600080366040516116d8929190613d60565b604051809103902090505b806116ee6004611b3c565b036116e357505b610ab181612655565b60006113c3838361171a60408051602081019091526000815290565b61248b565b6117276108f4565b6001600160a01b0316336001600160a01b0316146117575760405162461bcd60e51b8152600401610a5990613d70565b306117606108f4565b6001600160a01b03161461179d5760008036604051611780929190613d60565b604051809103902090505b806117966004611b3c565b0361178b57505b610ab1816126f6565b600061091882612737565b60006020835110156117cd576117c6836127e1565b9050610918565b816117d884826140ec565b5060009050610918565b90565b60006001600160e01b0382111561184e5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b6064820152608401610a59565b5090565b600063ffffffff82111561184e5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b6064820152608401610a59565b6000806118c585858561281f565b915091505b935093915050565b8054600090801561150c576118fa836118ec600184614005565b600091825260209091200190565b54600160201b90046001600160e01b03166113c3565b600065ffffffffffff82111561184e5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203460448201526538206269747360d01b6064820152608401610a59565b60006001600160e01b03198216636e665ced60e01b14806109185750610918826129be565b60006109186119a9612a0e565b8360405161190160f01b8152600281019290925260228201526042902090565b60008060006119da87878787612b39565b91509150610e2f81612bfd565b60008581526003602052604081206001611a0088610eba565b6007811115611a1157611a116139a9565b14611a6a5760405162461bcd60e51b815260206004820152602360248201527f476f7665726e6f723a20766f7465206e6f742063757272656e746c792061637460448201526269766560e81b6064820152608401610a59565b8054600090611a849088906001600160401b03168661248b565b9050611a938888888488612d47565b8351600003611ae857866001600160a01b03167fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda489888489604051611adb94939291906141ab565b60405180910390a2610eaf565b866001600160a01b03167fe2babfbac5889a709b63bb7f598b324e08bc5a4fb9ec647fb3cbc9ec07eb87128988848989604051611b299594939291906141d3565b60405180910390a2979650505050505050565b6000611b578254600f81810b600160801b909204900b131590565b15611b7557604051631ed9509560e11b815260040160405180910390fd5b508054600f0b6000818152600180840160205260408220805492905583546fffffffffffffffffffffffffffffffff191692016001600160801b03169190911790915590565b6064811115611c3e5760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72566f74657351756f72756d4672616374696f6e3a2071756f60448201527f72756d4e756d657261746f72206f7665722071756f72756d44656e6f6d696e616064820152623a37b960e91b608482015260a401610a59565b6000611c486113ca565b90508015801590611c595750600b54155b15611cbd576040805180820190915260008152600b9060208101611c7c846117e5565b6001600160e01b039081169091528254600181018455600093845260209384902083519490930151909116600160201b0263ffffffff909316929092179101555b611cea611cd8611ccb61132a565b65ffffffffffff16611852565b611ce1846117e5565b600b91906118b7565b505060408051828152602081018490527f0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b4633997910160405180910390a15050565b30611d326108f4565b6001600160a01b031614611dc45760005b8451811015611dc257306001600160a01b0316858281518110611d6857611d68614018565b60200260200101516001600160a01b031603611db257611db2838281518110611d9357611d93614018565b6020026020010151805190602001206004612ec190919063ffffffff16565b611dbb81614219565b9050611d43565b505b5050505050565b611dc48585858585612efd565b30611de16108f4565b6001600160a01b031614611dc457600454600f81810b600160801b909204900b1315611dc4576000600455611dc4565b600061129985858585611e2f60408051602081019091526000815290565b6119e7565b600080611e4083612f71565b90506004816007811115611e5657611e566139a9565b14611e615792915050565b6000838152600d602052604090205480611e7c575092915050565b600c54604051632ab0f52960e01b8152600481018390526001600160a01b0390911690632ab0f52990602401602060405180830381865afa158015611ec5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee99190614232565b15611ef8575060079392505050565b600c54604051632c258a9f60e11b8152600481018390526001600160a01b039091169063584b153e90602401602060405180830381865afa158015611f41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f659190614232565b15611f74575060059392505050565b5060029392505050565b815460009081816005811115611fdb576000611f99846130b1565b611fa39085614005565b60008881526020902090915081015463ffffffff9081169087161015611fcb57809150611fd9565b611fd6816001613f85565b92505b505b6000611fe987878585613199565b9050801561201657612000876118ec600184614005565b54600160201b90046001600160e01b0316610eaf565b6000979650505050505050565b60065460408051918252602082018390527fc565b045403dc03c2eea82b81a0465edad9e2e7fc4d97e11421c209da93d7a93910160405180910390a1600655565b6000338161207061132a565b65ffffffffffff169050612082611515565b6120918361087b600185614005565b10156120f95760405162461bcd60e51b815260206004820152603160248201527f476f7665726e6f723a2070726f706f73657220766f7465732062656c6f7720706044820152701c9bdc1bdcd85b081d1a1c995cda1bdb19607a1b6064820152608401610a59565b600061210e888888888051906020012061162f565b905086518851146121315760405162461bcd60e51b8152600401610a5990614254565b85518851146121525760405162461bcd60e51b8152600401610a5990614254565b60008851116121a35760405162461bcd60e51b815260206004820152601860248201527f476f7665726e6f723a20656d7074792070726f706f73616c00000000000000006044820152606401610a59565b6000818152600360205260409020546001600160401b0316156122125760405162461bcd60e51b815260206004820152602160248201527f476f7665726e6f723a2070726f706f73616c20616c72656164792065786973746044820152607360f81b6064820152608401610a59565b600061221c610e39565b6122269084613f85565b9050600061223261091e565b61223c9083613f85565b90506040518060e00160405280612252846131f7565b6001600160401b031681526001600160a01b03871660208201526000604082015260600161227f836131f7565b6001600160401b039081168252600060208084018290526040808501839052606094850183905288835260038252918290208551815492870151878501519186166001600160e01b031990941693909317600160401b6001600160a01b039094168402176001600160e01b0316600160e01b60e09290921c91909102178155938501516080860151908416921c0217600183015560a08301516002909201805460c09094015161ffff1990941692151561ff00191692909217610100931515939093029290921790558a517f7d84a6263ae0d98d3329bd7b46bb4e8d6f98cd35a7adb45c274c8b7fd5ebd5e091859188918e918e918111156123835761238361355e565b6040519080825280602002602001820160405280156123b657816020015b60608152602001906001900390816123a15790505b508d88888f6040516123d099989796959493929190614295565b60405180910390a1509098975050505050505050565b606060ff8316156123fa576117c68361325f565b81805461240690613da7565b80601f016020809104026020016040519081016040528092919081815260200182805461243290613da7565b801561247f5780601f106124545761010080835404028352916020019161247f565b820191906000526020600020905b81548152906001019060200180831161246257829003601f168201915b50505050509050610918565b604051630748d63560e31b81526001600160a01b038481166004830152602482018490526000917f000000000000000000000000000000000000000000000000000000000000000090911690633a46b1a890604401602060405180830381865afa1580156124fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c09190613e22565b600c54604080516001600160a01b03928316815291831660208301527f08f74ea46ef7894f65eabfb5e6e695de773a000b47c529ab559178069b226401910160405180910390a1600c80546001600160a01b0319166001600160a01b0392909216919091179055565b606083156125995750816113c3565b6113c38383613294565b6000806125b2868686866132be565b6000818152600d60205260409020549091501561129957600c546000828152600d60205260409081902054905163c4d252f560e01b81526001600160a01b039092169163c4d252f59161260b9160040190815260200190565b600060405180830381600087803b15801561262557600080fd5b505af1158015612639573d6000803e3d6000fd5b5050506000828152600d60205260408120555095945050505050565b600081116126b55760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f7253657474696e67733a20766f74696e6720706572696f6420604482015266746f6f206c6f7760c81b6064820152608401610a59565b60075460408051918252602082018390527f7e3f7f0708a84de9203036abaa450dccc85ad5ff52f78c170f3edb55cf5e8828910160405180910390a1600755565b60085460408051918252602082018390527fccb45da8d5717e6c4544694297c4ba5cf151d455c9bb0ed4fc7a38411bc05461910160405180910390a1600855565b600060646127448361110b565b604051632394e7a360e21b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638e539e8c90602401602060405180830381865afa1580156127a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127cd9190613e22565b6127d7919061436c565b6109189190614399565b600080829050601f8151111561280c578260405163305a27a960e01b8152600401610a599190613738565b8051612817826143bb565b179392505050565b82546000908190801561296557600061283d876118ec600185614005565b60408051808201909152905463ffffffff808216808452600160201b9092046001600160e01b0316602084015291925090871610156128be5760405162461bcd60e51b815260206004820152601b60248201527f436865636b706f696e743a2064656372656173696e67206b65797300000000006044820152606401610a59565b805163ffffffff80881691160361290657846128df886118ec600186614005565b80546001600160e01b0392909216600160201b0263ffffffff909216919091179055612955565b6040805180820190915263ffffffff80881682526001600160e01b0380881660208085019182528b54600181018d5560008d81529190912094519151909216600160201b029216919091179101555b6020015192508391506118ca9050565b50506040805180820190915263ffffffff80851682526001600160e01b0380851660208085019182528854600181018a5560008a815291822095519251909316600160201b0291909316179201919091559050816118ca565b60006001600160e01b03198216635e326c8b60e11b14806129ef57506001600160e01b031982166379dd796f60e01b145b8061091857506301ffc9a760e01b6001600160e01b0319831614610918565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015612a6757507f000000000000000000000000000000000000000000000000000000000000000046145b15612a9157507f000000000000000000000000000000000000000000000000000000000000000090565b610908604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612b705750600090506003612bf4565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612bc4573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612bed57600060019250925050612bf4565b9150600090505b94509492505050565b6000816004811115612c1157612c116139a9565b03612c195750565b6001816004811115612c2d57612c2d6139a9565b03612c7a5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610a59565b6002816004811115612c8e57612c8e6139a9565b03612cdb5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610a59565b6003816004811115612cef57612cef6139a9565b03610ab15760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610a59565b60008581526009602090815260408083206001600160a01b0388168452600381019092529091205460ff1615612dcf5760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f72566f74696e6753696d706c653a20766f746520616c726561604482015266191e4818d85cdd60ca1b6064820152608401610a59565b6001600160a01b03851660009081526003820160205260409020805460ff1916600117905560ff8416612e1b5782816000016000828254612e109190613f85565b90915550611dc29050565b60001960ff851601612e3b5782816001016000828254612e109190613f85565b60011960ff851601612e5b5782816002016000828254612e109190613f85565b60405162461bcd60e51b815260206004820152603560248201527f476f7665726e6f72566f74696e6753696d706c653a20696e76616c69642076616044820152746c756520666f7220656e756d20566f74655479706560581b6064820152608401610a59565b8154600160801b90819004600f0b6000818152600180860160205260409091209390935583546001600160801b03908116939091011602179055565b600c5460405163e38335e560e01b81526001600160a01b039091169063e38335e5903490612f38908890889088906000908990600401613ec9565b6000604051808303818588803b158015612f5157600080fd5b505af1158015612f65573d6000803e3d6000fd5b50505050505050505050565b6000818152600360205260408120600281015460ff1615612f955750600792915050565b6002810154610100900460ff1615612fb05750600292915050565b6000838152600360205260408120546001600160401b0316908190036130185760405162461bcd60e51b815260206004820152601d60248201527f476f7665726e6f723a20756e6b6e6f776e2070726f706f73616c2069640000006044820152606401610a59565b600061302261132a565b65ffffffffffff16905080821061303e57506000949350505050565b6000858152600360205260409020600101546001600160401b031681811061306c5750600195945050505050565b613075866133ca565b8015613094575060008681526009602052604090208054600190910154115b156130a55750600495945050505050565b50600395945050505050565b6000816000036130c357506000919050565b600060016130d084613416565b901c6001901b905060018184816130e9576130e9614383565b048201901c9050600181848161310157613101614383565b048201901c9050600181848161311957613119614383565b048201901c9050600181848161313157613131614383565b048201901c9050600181848161314957613149614383565b048201901c9050600181848161316157613161614383565b048201901c9050600181848161317957613179614383565b048201901c90506113c38182858161319357613193614383565b046134aa565b60005b818310156131ef5760006131b084846134c0565b60008781526020902090915063ffffffff86169082015463ffffffff1611156131db578092506131e9565b6131e6816001613f85565b93505b5061319c565b509392505050565b60006001600160401b0382111561184e5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b6064820152608401610a59565b60408051602080825281830190925260609160ff84169160009180820181803683375050509182525060208101929092525090565b8151156132a45781518083602001fd5b8060405162461bcd60e51b8152600401610a599190613738565b6000806132cd8686868661162f565b905060006132da82610eba565b905060028160078111156132f0576132f06139a9565b141580156133105750600681600781111561330d5761330d6139a9565b14155b801561332e5750600781600781111561332b5761332b6139a9565b14155b61337a5760405162461bcd60e51b815260206004820152601d60248201527f476f7665726e6f723a2070726f706f73616c206e6f74206163746976650000006044820152606401610a59565b60008281526003602052604090819020600201805461ff001916610100179055517f789cf55be980739dad1d0699b93b58e806b51c9d96619bfa8fe0a28abaa7b30c90610d359084815260200190565b6000818152600960205260408120600281015460018201546133ec9190613f85565b60008481526003602052604090205461340d906001600160401b03166117a6565b11159392505050565b600080608083901c1561342b57608092831c92015b604083901c1561343d57604092831c92015b602083901c1561344f57602092831c92015b601083901c1561346157601092831c92015b600883901c1561347357600892831c92015b600483901c1561348557600492831c92015b600283901c1561349757600292831c92015b600183901c156109185760010192915050565b60008183106134b957816113c3565b5090919050565b60006134cf6002848418614399565b6113c390848416613f85565b6000602082840312156134ed57600080fd5b81356001600160e01b0319811681146113c357600080fd5b803560ff8116811461109357600080fd5b60008083601f84011261352857600080fd5b5081356001600160401b0381111561353f57600080fd5b60208301915083602082850101111561355757600080fd5b9250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561359c5761359c61355e565b604052919050565b60006001600160401b038211156135bd576135bd61355e565b50601f01601f191660200190565b60006135de6135d9846135a4565b613574565b90508281528383830111156135f257600080fd5b828260208301376000602084830101529392505050565b600082601f83011261361a57600080fd5b6113c3838335602085016135cb565b60008060008060008060008060e0898b03121561364557600080fd5b8835975061365560208a01613505565b965060408901356001600160401b038082111561367157600080fd5b61367d8c838d01613516565b909850965060608b013591508082111561369657600080fd5b506136a38b828c01613609565b9450506136b260808a01613505565b925060a0890135915060c089013590509295985092959890939650565b6000602082840312156136e157600080fd5b5035919050565b60005b838110156137035781810151838201526020016136eb565b50506000910152565b600081518084526137248160208601602086016136e8565b601f01601f19169290920160200192915050565b6020815260006113c3602083018461370c565b60006001600160401b038211156137645761376461355e565b5060051b60200190565b6001600160a01b0381168114610ab157600080fd5b600082601f83011261379457600080fd5b813560206137a46135d98361374b565b82815260059290921b840181019181810190868411156137c357600080fd5b8286015b848110156137e75780356137da8161376e565b83529183019183016137c7565b509695505050505050565b600082601f83011261380357600080fd5b813560206138136135d98361374b565b82815260059290921b8401810191818101908684111561383257600080fd5b8286015b848110156137e75780358352918301918301613836565b600082601f83011261385e57600080fd5b8135602061386e6135d98361374b565b82815260059290921b8401810191818101908684111561388d57600080fd5b8286015b848110156137e75780356001600160401b038111156138b05760008081fd5b6138be8986838b0101613609565b845250918301918301613891565b600080600080608085870312156138e257600080fd5b84356001600160401b03808211156138f957600080fd5b61390588838901613783565b9550602087013591508082111561391b57600080fd5b613927888389016137f2565b9450604087013591508082111561393d57600080fd5b5061394a8782880161384d565b949793965093946060013593505050565b600080600080600060a0868803121561397357600080fd5b8535945061398360208701613505565b935061399160408701613505565b94979396509394606081013594506080013592915050565b634e487b7160e01b600052602160045260246000fd5b60208101600883106139e157634e487b7160e01b600052602160045260246000fd5b91905290565b600080604083850312156139fa57600080fd5b823591506020830135613a0c8161376e565b809150509250929050565b60008060408385031215613a2a57600080fd5b82359150613a3a60208401613505565b90509250929050565b600080600080600060808688031215613a5b57600080fd5b85359450613a6b60208701613505565b935060408601356001600160401b0380821115613a8757600080fd5b613a9389838a01613516565b90955093506060880135915080821115613aac57600080fd5b50613ab988828901613609565b9150509295509295909350565b60008060008060608587031215613adc57600080fd5b84359350613aec60208601613505565b925060408501356001600160401b03811115613b0757600080fd5b613b1387828801613516565b95989497509550505050565b60008060008060808587031215613b3557600080fd5b84356001600160401b0380821115613b4c57600080fd5b613b5888838901613783565b95506020870135915080821115613b6e57600080fd5b613b7a888389016137f2565b94506040870135915080821115613b9057600080fd5b613b9c8883890161384d565b93506060870135915080821115613bb257600080fd5b508501601f81018713613bc457600080fd5b613bd3878235602084016135cb565b91505092959194509250565b600081518084526020808501945080840160005b83811015613c0f57815187529582019590820190600101613bf3565b509495945050505050565b60ff60f81b8816815260e060208201526000613c3960e083018961370c565b8281036040840152613c4b818961370c565b606084018890526001600160a01b038716608085015260a0840186905283810360c08501529050610a138185613bdf565b600080600060608486031215613c9157600080fd5b8335613c9c8161376e565b92506020840135915060408401356001600160401b03811115613cbe57600080fd5b613cca86828701613609565b9150509250925092565b600060208284031215613ce657600080fd5b81356113c38161376e565b60008060008060608587031215613d0757600080fd5b8435613d128161376e565b93506020850135925060408501356001600160401b03811115613b0757600080fd5b60008060408385031215613d4757600080fd5b8235613d528161376e565b946020939093013593505050565b8183823760009101908152919050565b60208082526018908201527f476f7665726e6f723a206f6e6c79476f7665726e616e63650000000000000000604082015260600190565b600181811c90821680613dbb57607f821691505b602082108103613ddb57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526021908201527f476f7665726e6f723a2070726f706f73616c206e6f74207375636365737366756040820152601b60fa1b606082015260800190565b600060208284031215613e3457600080fd5b5051919050565b600081518084526020808501945080840160005b83811015613c0f5781516001600160a01b031687529582019590820190600101613e4f565b600081518084526020808501808196508360051b8101915082860160005b85811015613ebc578284038952613eaa84835161370c565b98850198935090840190600101613e92565b5091979650505050505050565b60a081526000613edc60a0830188613e3b565b8281036020840152613eee8188613bdf565b90508281036040840152613f028187613e74565b60608401959095525050608001529392505050565b60c081526000613f2a60c0830189613e3b565b8281036020840152613f3c8189613bdf565b90508281036040840152613f508188613e74565b60608401969096525050608081019290925260a0909101529392505050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561091857610918613f6f565b600060208284031215613faa57600080fd5b81516001600160401b03811115613fc057600080fd5b8201601f81018413613fd157600080fd5b8051613fdf6135d9826135a4565b818152856020838501011115613ff457600080fd5b6112998260208301602086016136e8565b8181038181111561091857610918613f6f565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561404057600080fd5b815165ffffffffffff811681146113c357600080fd5b6080815260006140696080830187613e3b565b828103602084015261407b8187613bdf565b9050828103604084015261408f8186613e74565b91505082606083015295945050505050565b601f8211156140e757600081815260208120601f850160051c810160208610156140c85750805b601f850160051c820191505b81811015611dc2578281556001016140d4565b505050565b81516001600160401b038111156141055761410561355e565b614119816141138454613da7565b846140a1565b602080601f83116001811461414e57600084156141365750858301515b600019600386901b1c1916600185901b178555611dc2565b600085815260208120601f198616915b8281101561417d5788860151825594840194600190910190840161415e565b508582101561419b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b84815260ff84166020820152826040820152608060608201526000610fcc608083018461370c565b85815260ff8516602082015283604082015260a0606082015260006141fb60a083018561370c565b828103608084015261420d818561370c565b98975050505050505050565b60006001820161422b5761422b613f6f565b5060010190565b60006020828403121561424457600080fd5b815180151581146113c357600080fd5b60208082526021908201527f476f7665726e6f723a20696e76616c69642070726f706f73616c206c656e67746040820152600d60fb1b606082015260800190565b60006101208b8352602060018060a01b038c16818501528160408501526142be8285018c613e3b565b915083820360608501526142d2828b613bdf565b915083820360808501528189518084528284019150828160051b850101838c0160005b8381101561432357601f1987840301855261431183835161370c565b948601949250908501906001016142f5565b505086810360a0880152614337818c613e74565b9450505050508560c08401528460e084015282810361010084015261435c818561370c565b9c9b505050505050505050505050565b808202811582820484141761091857610918613f6f565b634e487b7160e01b600052601260045260246000fd5b6000826143b657634e487b7160e01b600052601260045260246000fd5b500490565b80516020808301519190811015613ddb5760001960209190910360031b1b1691905056fe476f7665726e6f723a2072656c617920726576657274656420776974686f7574206d657373616765a26469706673582212206b9906be57a4cad5ec0139f5459c9a06655642a449defd1476e20f15f1755a5164736f6c63430008110033",
      "opcodes": "PUSH2 0x180 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x5104 CODESIZE SUB DUP1 PUSH3 0x5104 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x35 SWAP2 PUSH3 0x9D4 JUMP JUMPDEST DUP1 PUSH1 0x4 DUP4 PUSH1 0x4 PUSH2 0x12C PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x11 DUP2 MSTORE PUSH1 0x20 ADD PUSH17 0x2A34B6B2B637B1B5AFA3B7BB32B93737B9 PUSH1 0x79 SHL DUP2 MSTORE POP DUP1 PUSH3 0x7B PUSH3 0x1AD PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x96 PUSH1 0x0 DUP4 PUSH3 0x1C8 PUSH1 0x20 SHL PUSH3 0x17B1 OR SWAP1 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0xE0 MSTORE PUSH3 0xB2 DUP2 PUSH1 0x1 PUSH3 0x1C8 PUSH1 0x20 SWAP1 DUP2 SHL PUSH3 0x17B1 OR SWAP1 SHR JUMP JUMPDEST PUSH2 0x100 MSTORE DUP2 MLOAD PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 KECCAK256 PUSH2 0x120 MSTORE DUP2 MLOAD SWAP1 DUP3 ADD KECCAK256 PUSH2 0x140 MSTORE CHAINID PUSH1 0xA0 MSTORE PUSH3 0x142 PUSH2 0x120 MLOAD PUSH2 0x140 MLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x80 MSTORE POP POP ADDRESS PUSH1 0xC0 MSTORE PUSH1 0x2 PUSH3 0x159 DUP3 DUP3 PUSH3 0xAB8 JUMP JUMPDEST POP PUSH3 0x167 SWAP1 POP DUP4 PUSH3 0x218 JUMP JUMPDEST PUSH3 0x172 DUP3 PUSH3 0x259 JUMP JUMPDEST PUSH3 0x17D DUP2 PUSH3 0x300 JUMP JUMPDEST POP POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x160 MSTORE PUSH3 0x198 DUP2 PUSH3 0x341 JUMP JUMPDEST POP PUSH3 0x1A4 DUP2 PUSH3 0x4F6 JUMP JUMPDEST POP POP POP PUSH3 0xC45 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x31 PUSH1 0xF8 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP4 MLOAD LT ISZERO PUSH3 0x1E8 JUMPI PUSH3 0x1E0 DUP4 PUSH3 0x55F JUMP JUMPDEST SWAP1 POP PUSH3 0x212 JUMP JUMPDEST DUP3 PUSH3 0x1FF DUP4 PUSH3 0x5A2 PUSH1 0x20 SHL PUSH3 0x17E2 OR PUSH1 0x20 SHR JUMP JUMPDEST SWAP1 PUSH3 0x20C SWAP1 DUP3 PUSH3 0xAB8 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP4 SWAP1 MSTORE PUSH32 0xC565B045403DC03C2EEA82B81A0465EDAD9E2E7FC4D97E11421C209DA93D7A93 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x6 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH3 0x2BF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F7253657474696E67733A20766F74696E6720706572696F6420 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x746F6F206C6F77 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP4 SWAP1 MSTORE PUSH32 0x7E3F7F0708A84DE9203036ABAA450DCCC85AD5FF52F78C170F3EDB55CF5E8828 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x7 SSTORE JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP4 SWAP1 MSTORE PUSH32 0xCCB45DA8D5717E6C4544694297C4BA5CF151D455C9BB0ED4FC7A38411BC05461 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x8 SSTORE JUMP JUMPDEST PUSH1 0x64 DUP2 GT ISZERO PUSH3 0x3C6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x43 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F72566F74657351756F72756D4672616374696F6E3A2071756F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x72756D4E756D657261746F72206F7665722071756F72756D44656E6F6D696E61 PUSH1 0x64 DUP3 ADD MSTORE PUSH3 0x3A37B9 PUSH1 0xE9 SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH3 0x2B6 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x3D2 PUSH3 0x5A5 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO DUP1 ISZERO SWAP1 PUSH3 0x3E4 JUMPI POP PUSH1 0xB SLOAD ISZERO JUMPDEST ISZERO PUSH3 0x45F JUMPI PUSH1 0xB PUSH1 0x0 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x41D DUP5 PUSH3 0x5DF PUSH1 0x20 SHL PUSH3 0x17E5 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP1 DUP2 AND SWAP1 SWAP2 MSTORE DUP3 SLOAD PUSH1 0x1 DUP2 ADD DUP5 SSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x20 SWAP4 DUP5 SWAP1 KECCAK256 DUP4 MLOAD SWAP5 SWAP1 SWAP4 ADD MLOAD SWAP1 SWAP2 AND PUSH5 0x100000000 MUL PUSH4 0xFFFFFFFF SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP2 ADD SSTORE JUMPDEST PUSH3 0x4B7 PUSH3 0x48A PUSH3 0x471 PUSH3 0x64E JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND PUSH3 0x6D0 PUSH1 0x20 SHL PUSH3 0x1852 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x4A0 DUP5 PUSH3 0x5DF PUSH1 0x20 SHL PUSH3 0x17E5 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0xB PUSH3 0x737 PUSH1 0x20 SHL PUSH3 0x18B7 OR SWAP1 SWAP3 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0x553476BF02EF2726E8CE5CED78D63E26E602E4A2257B1F559418E24B4633997 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 DUP4 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0x8F74EA46EF7894F65EABFB5E6E695DE773A000B47C529AB559178069B226401 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0xC DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SWAP1 POP PUSH1 0x1F DUP2 MLOAD GT ISZERO PUSH3 0x58D JUMPI DUP3 PUSH1 0x40 MLOAD PUSH4 0x305A27A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x2B6 SWAP2 SWAP1 PUSH3 0xB84 JUMP JUMPDEST DUP1 MLOAD PUSH3 0x59A DUP3 PUSH3 0xBD4 JUMP JUMPDEST OR SWAP4 SWAP3 POP POP POP JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x0 SWAP1 ISZERO PUSH3 0x5D6 JUMPI PUSH3 0x5C8 PUSH1 0xB PUSH3 0x754 PUSH1 0x20 SHL PUSH3 0x18D2 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0xA SLOAD JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP3 GT ISZERO PUSH3 0x64A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53616665436173743A2076616C756520646F65736E27742066697420696E2032 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x32342062697473 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x2B6 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x160 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x91DDADF4 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH3 0x6B0 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH3 0x6AD SWAP2 DUP2 ADD SWAP1 PUSH3 0xBF9 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH3 0x6CB JUMPI PUSH3 0x5DA NUMBER PUSH3 0x7A2 PUSH1 0x20 SHL PUSH3 0x1910 OR PUSH1 0x20 SHR JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 GT ISZERO PUSH3 0x64A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53616665436173743A2076616C756520646F65736E27742066697420696E2033 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x322062697473 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x2B6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x747 DUP6 DUP6 DUP6 PUSH3 0x80B JUMP JUMPDEST SWAP2 POP SWAP2 POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST DUP1 SLOAD PUSH1 0x0 SWAP1 DUP1 ISZERO PUSH3 0x798 JUMPI PUSH3 0x780 DUP4 PUSH3 0x772 PUSH1 0x1 DUP5 PUSH3 0xC23 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SWAP1 JUMP JUMPDEST SLOAD PUSH5 0x100000000 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH3 0x79B JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH6 0xFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x64A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53616665436173743A2076616C756520646F65736E27742066697420696E2034 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x382062697473 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x2B6 JUMP JUMPDEST DUP3 SLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP1 ISZERO PUSH3 0x960 JUMPI PUSH1 0x0 PUSH3 0x82D DUP8 PUSH3 0x772 PUSH1 0x1 DUP6 PUSH3 0xC23 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE SWAP1 SLOAD PUSH4 0xFFFFFFFF DUP1 DUP3 AND DUP1 DUP5 MSTORE PUSH5 0x100000000 SWAP1 SWAP3 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x20 DUP5 ADD MSTORE SWAP2 SWAP3 POP SWAP1 DUP8 AND LT ISZERO PUSH3 0x8B1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436865636B706F696E743A2064656372656173696E67206B6579730000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x2B6 JUMP JUMPDEST DUP1 MLOAD PUSH4 0xFFFFFFFF DUP1 DUP9 AND SWAP2 AND SUB PUSH3 0x8FF JUMPI DUP5 PUSH3 0x8D6 DUP9 PUSH3 0x772 PUSH1 0x1 DUP7 PUSH3 0xC23 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH5 0x100000000 MUL PUSH4 0xFFFFFFFF SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH3 0x94F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH4 0xFFFFFFFF DUP1 DUP9 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP1 DUP9 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 DUP3 MSTORE DUP12 SLOAD PUSH1 0x1 DUP2 ADD DUP14 SSTORE PUSH1 0x0 DUP14 DUP2 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SWAP5 MLOAD SWAP2 MLOAD SWAP1 SWAP3 AND PUSH5 0x100000000 MUL SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP2 ADD SSTORE JUMPDEST PUSH1 0x20 ADD MLOAD SWAP3 POP DUP4 SWAP2 POP PUSH3 0x74C SWAP1 POP JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH4 0xFFFFFFFF DUP1 DUP6 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP1 DUP6 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 DUP3 MSTORE DUP9 SLOAD PUSH1 0x1 DUP2 ADD DUP11 SSTORE PUSH1 0x0 DUP11 DUP2 MSTORE SWAP2 DUP3 KECCAK256 SWAP6 MLOAD SWAP3 MLOAD SWAP1 SWAP4 AND PUSH5 0x100000000 MUL SWAP2 SWAP1 SWAP4 AND OR SWAP3 ADD SWAP2 SWAP1 SWAP2 SSTORE SWAP1 POP DUP2 PUSH3 0x74C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x9D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x9E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH3 0x9F5 DUP2 PUSH3 0x9BB JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH3 0xA08 DUP2 PUSH3 0x9BB JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0xA3E JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0xA5F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0xAB3 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0xA8E JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0xAAF JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0xA9A JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0xAD4 JUMPI PUSH3 0xAD4 PUSH3 0xA13 JUMP JUMPDEST PUSH3 0xAEC DUP2 PUSH3 0xAE5 DUP5 SLOAD PUSH3 0xA29 JUMP JUMPDEST DUP5 PUSH3 0xA65 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0xB24 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0xB0B JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0xAAF JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0xB55 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0xB34 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0xB74 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0xBB3 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH3 0xB95 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x40 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP2 SWAP1 DUP2 LT ISZERO PUSH3 0xA5F JUMPI PUSH1 0x0 NOT PUSH1 0x20 SWAP2 SWAP1 SWAP2 SUB PUSH1 0x3 SHL SHL AND SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0xC0C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH6 0xFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH3 0x79B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH3 0x212 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH2 0x120 MLOAD PUSH2 0x140 MLOAD PUSH2 0x160 MLOAD PUSH2 0x443D PUSH3 0xCC7 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x8D2 ADD MSTORE DUP2 DUP2 PUSH2 0xFDA ADD MSTORE DUP2 DUP2 PUSH2 0x132E ADD MSTORE DUP2 DUP2 PUSH2 0x24B4 ADD MSTORE PUSH2 0x275A ADD MSTORE PUSH1 0x0 PUSH2 0x2AE8 ADD MSTORE PUSH1 0x0 PUSH2 0x2AC0 ADD MSTORE PUSH1 0x0 PUSH2 0x12DA ADD MSTORE PUSH1 0x0 PUSH2 0x12B0 ADD MSTORE PUSH1 0x0 PUSH2 0x2A1B ADD MSTORE PUSH1 0x0 PUSH2 0x2A45 ADD MSTORE PUSH1 0x0 PUSH2 0x2A6F ADD MSTORE PUSH2 0x443D PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x26B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7B3C71D3 GT PUSH2 0x144 JUMPI DUP1 PUSH4 0xC28BC2FA GT PUSH2 0xB6 JUMPI DUP1 PUSH4 0xDEAAA7CC GT PUSH2 0x7A JUMPI DUP1 PUSH4 0xDEAAA7CC EQ PUSH2 0x80C JUMPI DUP1 PUSH4 0xEA0217CF EQ PUSH2 0x840 JUMPI DUP1 PUSH4 0xEB9019D4 EQ PUSH2 0x860 JUMPI DUP1 PUSH4 0xECE40CC1 EQ PUSH2 0x880 JUMPI DUP1 PUSH4 0xF8CE560A EQ PUSH2 0x8A0 JUMPI DUP1 PUSH4 0xFC0C546A EQ PUSH2 0x8C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xC28BC2FA EQ PUSH2 0x741 JUMPI DUP1 PUSH4 0xC59057E4 EQ PUSH2 0x754 JUMPI DUP1 PUSH4 0xCD4265A5 EQ PUSH2 0x774 JUMPI DUP1 PUSH4 0xD33219B4 EQ PUSH2 0x794 JUMPI DUP1 PUSH4 0xDD4E2BA5 EQ PUSH2 0x7C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9A802A6D GT PUSH2 0x108 JUMPI DUP1 PUSH4 0x9A802A6D EQ PUSH2 0x67E JUMPI DUP1 PUSH4 0xA7713A70 EQ PUSH2 0x69E JUMPI DUP1 PUSH4 0xA890C910 EQ PUSH2 0x6B3 JUMPI DUP1 PUSH4 0xAB58FB8E EQ PUSH2 0x6D3 JUMPI DUP1 PUSH4 0xB58131B0 EQ PUSH2 0x6F3 JUMPI DUP1 PUSH4 0xC01F9E37 EQ PUSH2 0x708 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7B3C71D3 EQ PUSH2 0x5D6 JUMPI DUP1 PUSH4 0x7D5E81E2 EQ PUSH2 0x5F6 JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x616 JUMPI DUP1 PUSH4 0x91DDADF4 EQ PUSH2 0x63E JUMPI DUP1 PUSH4 0x97C3D334 EQ PUSH2 0x66A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3E4F49E6 GT PUSH2 0x1DD JUMPI DUP1 PUSH4 0x544FFC9C GT PUSH2 0x1A1 JUMPI DUP1 PUSH4 0x544FFC9C EQ PUSH2 0x4D7 JUMPI DUP1 PUSH4 0x54FD4D50 EQ PUSH2 0x52C JUMPI DUP1 PUSH4 0x56781388 EQ PUSH2 0x556 JUMPI DUP1 PUSH4 0x5F398A14 EQ PUSH2 0x576 JUMPI DUP1 PUSH4 0x60C4247F EQ PUSH2 0x596 JUMPI DUP1 PUSH4 0x70B0F660 EQ PUSH2 0x5B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3E4F49E6 EQ PUSH2 0x41F JUMPI DUP1 PUSH4 0x417491DB EQ PUSH2 0x44C JUMPI DUP1 PUSH4 0x43859632 EQ PUSH2 0x458 JUMPI DUP1 PUSH4 0x452115D6 EQ PUSH2 0x4A2 JUMPI DUP1 PUSH4 0x4BF5D7E9 EQ PUSH2 0x4C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x160CBED7 GT PUSH2 0x22F JUMPI DUP1 PUSH4 0x160CBED7 EQ PUSH2 0x34D JUMPI DUP1 PUSH4 0x2656227D EQ PUSH2 0x36D JUMPI DUP1 PUSH4 0x2D63F693 EQ PUSH2 0x380 JUMPI DUP1 PUSH4 0x2FE3E261 EQ PUSH2 0x3B6 JUMPI DUP1 PUSH4 0x3932ABB1 EQ PUSH2 0x3EA JUMPI DUP1 PUSH4 0x3BCCF4FD EQ PUSH2 0x3FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x293 JUMPI DUP1 PUSH4 0x2A251A3 EQ PUSH2 0x2C8 JUMPI DUP1 PUSH4 0x3420181 EQ PUSH2 0x2EB JUMPI DUP1 PUSH4 0x6F3F9E6 EQ PUSH2 0x30B JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x32B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0x28E JUMPI ADDRESS PUSH2 0x279 PUSH2 0x8F4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x28C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x29F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B3 PUSH2 0x2AE CALLDATASIZE PUSH1 0x4 PUSH2 0x34DB JUMP JUMPDEST PUSH2 0x90D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DD PUSH2 0x91E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2BF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DD PUSH2 0x306 CALLDATASIZE PUSH1 0x4 PUSH2 0x3629 JUMP JUMPDEST PUSH2 0x929 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x317 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28C PUSH2 0x326 CALLDATASIZE PUSH1 0x4 PUSH2 0x36CF JUMP JUMPDEST PUSH2 0xA21 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x337 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x340 PUSH2 0xAB4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2BF SWAP2 SWAP1 PUSH2 0x3738 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x359 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DD PUSH2 0x368 CALLDATASIZE PUSH1 0x4 PUSH2 0x38CC JUMP JUMPDEST PUSH2 0xB46 JUMP JUMPDEST PUSH2 0x2DD PUSH2 0x37B CALLDATASIZE PUSH1 0x4 PUSH2 0x38CC JUMP JUMPDEST PUSH2 0xD47 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x38C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DD PUSH2 0x39B CALLDATASIZE PUSH1 0x4 PUSH2 0x36CF JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DD PUSH32 0x899F067F60F2C931E7C0101A76DEED5359D3888D391B6F78FB75402BB24D0EFF DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DD PUSH2 0xE39 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x40B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DD PUSH2 0x41A CALLDATASIZE PUSH1 0x4 PUSH2 0x395B JUMP JUMPDEST PUSH2 0xE44 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x43F PUSH2 0x43A CALLDATASIZE PUSH1 0x4 PUSH2 0x36CF JUMP JUMPDEST PUSH2 0xEBA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2BF SWAP2 SWAP1 PUSH2 0x39BF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x464 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B3 PUSH2 0x473 CALLDATASIZE PUSH1 0x4 PUSH2 0x39E7 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE PUSH1 0x3 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DD PUSH2 0x4BD CALLDATASIZE PUSH1 0x4 PUSH2 0x38CC JUMP JUMPDEST PUSH2 0xEC5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x340 PUSH2 0xFD6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x511 PUSH2 0x4F2 CALLDATASIZE PUSH1 0x4 PUSH2 0x36CF JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x2BF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x538 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x31 PUSH1 0xF8 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x340 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x562 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DD PUSH2 0x571 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A17 JUMP JUMPDEST PUSH2 0x1098 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x582 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DD PUSH2 0x591 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A43 JUMP JUMPDEST PUSH2 0x10C1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DD PUSH2 0x5B1 CALLDATASIZE PUSH1 0x4 PUSH2 0x36CF JUMP JUMPDEST PUSH2 0x110B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28C PUSH2 0x5D1 CALLDATASIZE PUSH1 0x4 PUSH2 0x36CF JUMP JUMPDEST PUSH2 0x11BC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DD PUSH2 0x5F1 CALLDATASIZE PUSH1 0x4 PUSH2 0x3AC6 JUMP JUMPDEST PUSH2 0x1243 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x602 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DD PUSH2 0x611 CALLDATASIZE PUSH1 0x4 PUSH2 0x3B1F JUMP JUMPDEST PUSH2 0x128B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x622 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62B PUSH2 0x12A2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2BF SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3C1A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x64A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x653 PUSH2 0x132A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH6 0xFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2BF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x676 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x64 PUSH2 0x2DD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x68A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DD PUSH2 0x699 CALLDATASIZE PUSH1 0x4 PUSH2 0x3C7C JUMP JUMPDEST PUSH2 0x13B3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DD PUSH2 0x13CA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28C PUSH2 0x6CE CALLDATASIZE PUSH1 0x4 PUSH2 0x3CD4 JUMP JUMPDEST PUSH2 0x13F4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DD PUSH2 0x6EE CALLDATASIZE PUSH1 0x4 PUSH2 0x36CF JUMP JUMPDEST PUSH2 0x147B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DD PUSH2 0x1515 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x714 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DD PUSH2 0x723 CALLDATASIZE PUSH1 0x4 PUSH2 0x36CF JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x28C PUSH2 0x74F CALLDATASIZE PUSH1 0x4 PUSH2 0x3CF1 JUMP JUMPDEST PUSH2 0x1520 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x760 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DD PUSH2 0x76F CALLDATASIZE PUSH1 0x4 PUSH2 0x38CC JUMP JUMPDEST PUSH2 0x162F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x780 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DD PUSH2 0x78F CALLDATASIZE PUSH1 0x4 PUSH2 0x38CC JUMP JUMPDEST PUSH2 0x1669 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xC SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2BF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP1 DUP3 MSTORE PUSH32 0x737570706F72743D627261766F2671756F72756D3D666F722C6162737461696E SWAP1 DUP3 ADD MSTORE PUSH2 0x340 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x818 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DD PUSH32 0x150214D74D59B7D1E90C73FC22EF3D991DD0A76B046543D4D80AB92D2A50328F DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x84C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28C PUSH2 0x85B CALLDATASIZE PUSH1 0x4 PUSH2 0x36CF JUMP JUMPDEST PUSH2 0x1677 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x86C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DD PUSH2 0x87B CALLDATASIZE PUSH1 0x4 PUSH2 0x3D34 JUMP JUMPDEST PUSH2 0x16FE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x88C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28C PUSH2 0x89B CALLDATASIZE PUSH1 0x4 PUSH2 0x36CF JUMP JUMPDEST PUSH2 0x171F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DD PUSH2 0x8BB CALLDATASIZE PUSH1 0x4 PUSH2 0x36CF JUMP JUMPDEST PUSH2 0x17A6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7AE PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x908 PUSH1 0xC SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x918 DUP3 PUSH2 0x1977 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x908 PUSH1 0x7 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x9CD PUSH2 0x9C5 PUSH32 0x899F067F60F2C931E7C0101A76DEED5359D3888D391B6F78FB75402BB24D0EFF DUP13 DUP13 DUP13 DUP13 PUSH1 0x40 MLOAD PUSH2 0x965 SWAP3 SWAP2 SWAP1 PUSH2 0x3D60 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP12 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x9AA SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0x199C JUMP JUMPDEST DUP7 DUP7 DUP7 PUSH2 0x19C9 JUMP JUMPDEST SWAP1 POP PUSH2 0xA13 DUP11 DUP3 DUP12 DUP12 DUP12 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP14 SWAP3 POP PUSH2 0x19E7 SWAP2 POP POP JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xA29 PUSH2 0x8F4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xA62 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA59 SWAP1 PUSH2 0x3D70 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST ADDRESS PUSH2 0xA6B PUSH2 0x8F4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xAA8 JUMPI PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x40 MLOAD PUSH2 0xA8B SWAP3 SWAP2 SWAP1 PUSH2 0x3D60 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 SWAP1 POP JUMPDEST DUP1 PUSH2 0xAA1 PUSH1 0x4 PUSH2 0x1B3C JUMP JUMPDEST SUB PUSH2 0xA96 JUMPI POP JUMPDEST PUSH2 0xAB1 DUP2 PUSH2 0x1BBB JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0xAC3 SWAP1 PUSH2 0x3DA7 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xAEF SWAP1 PUSH2 0x3DA7 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xB3C JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xB11 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xB3C JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xB1F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xB55 DUP7 DUP7 DUP7 DUP7 PUSH2 0x162F JUMP JUMPDEST SWAP1 POP PUSH1 0x4 PUSH2 0xB62 DUP3 PUSH2 0xEBA JUMP JUMPDEST PUSH1 0x7 DUP2 GT ISZERO PUSH2 0xB73 JUMPI PUSH2 0xB73 PUSH2 0x39A9 JUMP JUMPDEST EQ PUSH2 0xB90 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA59 SWAP1 PUSH2 0x3DE1 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x793D0649 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0xF27A0C92 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xBDA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xBFE SWAP2 SWAP1 PUSH2 0x3E22 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x40 MLOAD PUSH4 0xB1C5F427 PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xB1C5F427 SWAP1 PUSH2 0xC38 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x0 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x3EC9 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC55 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC79 SWAP2 SWAP1 PUSH2 0x3E22 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE PUSH1 0xC SLOAD SWAP2 MLOAD PUSH4 0x8F2A0BB PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0x8F2A0BB0 SWAP2 PUSH2 0xCC4 SWAP2 DUP12 SWAP2 DUP12 SWAP2 DUP12 SWAP2 SWAP1 DUP12 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x3F17 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCDE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xCF2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH32 0x9A2E42FD6722813D69113E7D0079D3D940171428DF7373DF9C7F7617CFDA2892 DUP3 DUP3 TIMESTAMP PUSH2 0xD24 SWAP2 SWAP1 PUSH2 0x3F85 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xD56 DUP7 DUP7 DUP7 DUP7 PUSH2 0x162F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xD63 DUP3 PUSH2 0xEBA JUMP JUMPDEST SWAP1 POP PUSH1 0x4 DUP2 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0xD79 JUMPI PUSH2 0xD79 PUSH2 0x39A9 JUMP JUMPDEST EQ DUP1 PUSH2 0xD96 JUMPI POP PUSH1 0x5 DUP2 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0xD94 JUMPI PUSH2 0xD94 PUSH2 0x39A9 JUMP JUMPDEST EQ JUMPDEST PUSH2 0xDB2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA59 SWAP1 PUSH2 0x3DE1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD PUSH32 0x712AE1383F79AC853F8D882153778E0260EF8F03B504E2866E0593E04D2B291F SWAP1 PUSH2 0xE00 SWAP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0xE15 DUP3 DUP9 DUP9 DUP9 DUP9 PUSH2 0x1D29 JUMP JUMPDEST PUSH2 0xE22 DUP3 DUP9 DUP9 DUP9 DUP9 PUSH2 0x1DCB JUMP JUMPDEST PUSH2 0xE2F DUP3 DUP9 DUP9 DUP9 DUP9 PUSH2 0x1DD8 JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x908 PUSH1 0x6 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x150214D74D59B7D1E90C73FC22EF3D991DD0A76B046543D4D80AB92D2A50328F PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xFF DUP6 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH2 0xE92 SWAP1 PUSH2 0x9C5 SWAP1 PUSH1 0x80 ADD PUSH2 0x9AA JUMP JUMPDEST SWAP1 POP PUSH2 0xEAF DUP8 DUP3 DUP9 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1E11 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x918 DUP3 PUSH2 0x1E34 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xED4 DUP7 DUP7 DUP7 DUP7 PUSH2 0x162F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xEE1 DUP3 PUSH2 0xEBA JUMP JUMPDEST PUSH1 0x7 DUP2 GT ISZERO PUSH2 0xEF2 JUMPI PUSH2 0xEF2 PUSH2 0x39A9 JUMP JUMPDEST EQ PUSH2 0xF3F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F723A20746F6F206C61746520746F2063616E63656C00000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA59 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xFC0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F723A206F6E6C792070726F706F7365722063616E2063616E63 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x195B PUSH1 0xF2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA59 JUMP JUMPDEST PUSH2 0xFCC DUP7 DUP7 DUP7 DUP7 PUSH2 0x1669 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x4BF5D7E9 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1057 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1054 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x3F98 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1093 JUMPI POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1D DUP2 MSTORE PUSH32 0x6D6F64653D626C6F636B6E756D6265722666726F6D3D64656661756C74000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER SWAP1 POP PUSH2 0x10B9 DUP5 DUP3 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1E11 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER SWAP1 POP PUSH2 0xEAF DUP8 DUP3 DUP9 DUP9 DUP9 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP11 SWAP3 POP PUSH2 0x19E7 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x0 SWAP1 DUP1 DUP3 SUB PUSH2 0x1122 JUMPI POP POP PUSH1 0xA SLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xB PUSH2 0x1131 PUSH1 0x1 DUP5 PUSH2 0x4005 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x1141 JUMPI PUSH2 0x1141 PUSH2 0x4018 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE SWAP2 ADD SLOAD PUSH4 0xFFFFFFFF DUP2 AND DUP1 DUP4 MSTORE PUSH1 0x1 PUSH1 0x20 SHL SWAP1 SWAP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP2 POP DUP5 LT PUSH2 0x1197 JUMPI PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x11AB PUSH2 0x11A3 DUP6 PUSH2 0x1852 JUMP JUMPDEST PUSH1 0xB SWAP1 PUSH2 0x1F7E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x11C4 PUSH2 0x8F4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x11F4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA59 SWAP1 PUSH2 0x3D70 JUMP JUMPDEST ADDRESS PUSH2 0x11FD PUSH2 0x8F4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x123A JUMPI PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x40 MLOAD PUSH2 0x121D SWAP3 SWAP2 SWAP1 PUSH2 0x3D60 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 SWAP1 POP JUMPDEST DUP1 PUSH2 0x1233 PUSH1 0x4 PUSH2 0x1B3C JUMP JUMPDEST SUB PUSH2 0x1228 JUMPI POP JUMPDEST PUSH2 0xAB1 DUP2 PUSH2 0x2023 JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER SWAP1 POP PUSH2 0xFCC DUP7 DUP3 DUP8 DUP8 DUP8 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x1E11 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1299 DUP6 DUP6 DUP6 DUP6 PUSH2 0x2064 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 DUP3 DUP1 DUP1 DUP4 PUSH2 0x12D5 PUSH32 0x0 DUP4 PUSH2 0x23E6 JUMP JUMPDEST PUSH2 0x1300 PUSH32 0x0 PUSH1 0x1 PUSH2 0x23E6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0xF PUSH1 0xF8 SHL SWAP12 SWAP4 SWAP11 POP SWAP2 SWAP9 POP CHAINID SWAP8 POP ADDRESS SWAP7 POP SWAP5 POP SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x91DDADF4 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x13A6 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x13A3 SWAP2 DUP2 ADD SWAP1 PUSH2 0x402E JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1093 JUMPI PUSH2 0x908 NUMBER PUSH2 0x1910 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13C0 DUP5 DUP5 DUP5 PUSH2 0x248B JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x0 SWAP1 ISZERO PUSH2 0x13ED JUMPI PUSH2 0x13DF PUSH1 0xB PUSH2 0x18D2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND SWAP1 POP SWAP1 JUMP JUMPDEST POP PUSH1 0xA SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x13FC PUSH2 0x8F4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x142C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA59 SWAP1 PUSH2 0x3D70 JUMP JUMPDEST ADDRESS PUSH2 0x1435 PUSH2 0x8F4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1472 JUMPI PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x40 MLOAD PUSH2 0x1455 SWAP3 SWAP2 SWAP1 PUSH2 0x3D60 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 SWAP1 POP JUMPDEST DUP1 PUSH2 0x146B PUSH1 0x4 PUSH2 0x1B3C JUMP JUMPDEST SUB PUSH2 0x1460 JUMPI POP JUMPDEST PUSH2 0xAB1 DUP2 PUSH2 0x2521 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SLOAD SWAP1 MLOAD PUSH4 0xD45C4435 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP2 DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xD45C4435 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x14D8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x14FC SWAP2 SWAP1 PUSH2 0x3E22 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 EQ PUSH2 0x150C JUMPI DUP1 PUSH2 0x13C3 JUMP JUMPDEST PUSH1 0x0 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x908 PUSH1 0x8 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1528 PUSH2 0x8F4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1558 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA59 SWAP1 PUSH2 0x3D70 JUMP JUMPDEST ADDRESS PUSH2 0x1561 PUSH2 0x8F4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x159E JUMPI PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x40 MLOAD PUSH2 0x1581 SWAP3 SWAP2 SWAP1 PUSH2 0x3D60 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 SWAP1 POP JUMPDEST DUP1 PUSH2 0x1597 PUSH1 0x4 PUSH2 0x1B3C JUMP JUMPDEST SUB PUSH2 0x158C JUMPI POP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x15BC SWAP3 SWAP2 SWAP1 PUSH2 0x3D60 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x15F9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x15FE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1626 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x43E0 PUSH1 0x28 SWAP2 CODECOPY PUSH2 0x258A JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1648 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4056 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1299 DUP6 DUP6 DUP6 DUP6 PUSH2 0x25A3 JUMP JUMPDEST PUSH2 0x167F PUSH2 0x8F4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x16AF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA59 SWAP1 PUSH2 0x3D70 JUMP JUMPDEST ADDRESS PUSH2 0x16B8 PUSH2 0x8F4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x16F5 JUMPI PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x40 MLOAD PUSH2 0x16D8 SWAP3 SWAP2 SWAP1 PUSH2 0x3D60 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 SWAP1 POP JUMPDEST DUP1 PUSH2 0x16EE PUSH1 0x4 PUSH2 0x1B3C JUMP JUMPDEST SUB PUSH2 0x16E3 JUMPI POP JUMPDEST PUSH2 0xAB1 DUP2 PUSH2 0x2655 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13C3 DUP4 DUP4 PUSH2 0x171A PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x248B JUMP JUMPDEST PUSH2 0x1727 PUSH2 0x8F4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1757 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA59 SWAP1 PUSH2 0x3D70 JUMP JUMPDEST ADDRESS PUSH2 0x1760 PUSH2 0x8F4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x179D JUMPI PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x40 MLOAD PUSH2 0x1780 SWAP3 SWAP2 SWAP1 PUSH2 0x3D60 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 SWAP1 POP JUMPDEST DUP1 PUSH2 0x1796 PUSH1 0x4 PUSH2 0x1B3C JUMP JUMPDEST SUB PUSH2 0x178B JUMPI POP JUMPDEST PUSH2 0xAB1 DUP2 PUSH2 0x26F6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x918 DUP3 PUSH2 0x2737 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP4 MLOAD LT ISZERO PUSH2 0x17CD JUMPI PUSH2 0x17C6 DUP4 PUSH2 0x27E1 JUMP JUMPDEST SWAP1 POP PUSH2 0x918 JUMP JUMPDEST DUP2 PUSH2 0x17D8 DUP5 DUP3 PUSH2 0x40EC JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP PUSH2 0x918 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP3 GT ISZERO PUSH2 0x184E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53616665436173743A2076616C756520646F65736E27742066697420696E2032 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x32342062697473 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA59 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 GT ISZERO PUSH2 0x184E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53616665436173743A2076616C756520646F65736E27742066697420696E2033 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x322062697473 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA59 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x18C5 DUP6 DUP6 DUP6 PUSH2 0x281F JUMP JUMPDEST SWAP2 POP SWAP2 POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST DUP1 SLOAD PUSH1 0x0 SWAP1 DUP1 ISZERO PUSH2 0x150C JUMPI PUSH2 0x18FA DUP4 PUSH2 0x18EC PUSH1 0x1 DUP5 PUSH2 0x4005 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SWAP1 JUMP JUMPDEST SLOAD PUSH1 0x1 PUSH1 0x20 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH2 0x13C3 JUMP JUMPDEST PUSH1 0x0 PUSH6 0xFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x184E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53616665436173743A2076616C756520646F65736E27742066697420696E2034 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x382062697473 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA59 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x6E665CED PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x918 JUMPI POP PUSH2 0x918 DUP3 PUSH2 0x29BE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x918 PUSH2 0x19A9 PUSH2 0x2A0E JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH2 0x1901 PUSH1 0xF0 SHL DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x19DA DUP8 DUP8 DUP8 DUP8 PUSH2 0x2B39 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0xE2F DUP2 PUSH2 0x2BFD JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 PUSH2 0x1A00 DUP9 PUSH2 0xEBA JUMP JUMPDEST PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x1A11 JUMPI PUSH2 0x1A11 PUSH2 0x39A9 JUMP JUMPDEST EQ PUSH2 0x1A6A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F723A20766F7465206E6F742063757272656E746C7920616374 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x697665 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA59 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x1A84 SWAP1 DUP9 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP7 PUSH2 0x248B JUMP JUMPDEST SWAP1 POP PUSH2 0x1A93 DUP9 DUP9 DUP9 DUP5 DUP9 PUSH2 0x2D47 JUMP JUMPDEST DUP4 MLOAD PUSH1 0x0 SUB PUSH2 0x1AE8 JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xB8E138887D0AA13BAB447E82DE9D5C1777041ECD21CA36BA824FF1E6C07DDDA4 DUP10 DUP9 DUP5 DUP10 PUSH1 0x40 MLOAD PUSH2 0x1ADB SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x41AB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH2 0xEAF JUMP JUMPDEST DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xE2BABFBAC5889A709B63BB7F598B324E08BC5A4FB9EC647FB3CBC9EC07EB8712 DUP10 DUP9 DUP5 DUP10 DUP10 PUSH1 0x40 MLOAD PUSH2 0x1B29 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x41D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B57 DUP3 SLOAD PUSH1 0xF DUP2 DUP2 SIGNEXTEND PUSH1 0x1 PUSH1 0x80 SHL SWAP1 SWAP3 DIV SWAP1 SIGNEXTEND SGT ISZERO SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1B75 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1ED95095 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP DUP1 SLOAD PUSH1 0xF SIGNEXTEND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP1 DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 DUP1 SLOAD SWAP3 SWAP1 SSTORE DUP4 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP3 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE SWAP1 JUMP JUMPDEST PUSH1 0x64 DUP2 GT ISZERO PUSH2 0x1C3E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x43 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F72566F74657351756F72756D4672616374696F6E3A2071756F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x72756D4E756D657261746F72206F7665722071756F72756D44656E6F6D696E61 PUSH1 0x64 DUP3 ADD MSTORE PUSH3 0x3A37B9 PUSH1 0xE9 SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH2 0xA59 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C48 PUSH2 0x13CA JUMP JUMPDEST SWAP1 POP DUP1 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x1C59 JUMPI POP PUSH1 0xB SLOAD ISZERO JUMPDEST ISZERO PUSH2 0x1CBD JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0xB SWAP1 PUSH1 0x20 DUP2 ADD PUSH2 0x1C7C DUP5 PUSH2 0x17E5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP1 DUP2 AND SWAP1 SWAP2 MSTORE DUP3 SLOAD PUSH1 0x1 DUP2 ADD DUP5 SSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x20 SWAP4 DUP5 SWAP1 KECCAK256 DUP4 MLOAD SWAP5 SWAP1 SWAP4 ADD MLOAD SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0x20 SHL MUL PUSH4 0xFFFFFFFF SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP2 ADD SSTORE JUMPDEST PUSH2 0x1CEA PUSH2 0x1CD8 PUSH2 0x1CCB PUSH2 0x132A JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND PUSH2 0x1852 JUMP JUMPDEST PUSH2 0x1CE1 DUP5 PUSH2 0x17E5 JUMP JUMPDEST PUSH1 0xB SWAP2 SWAP1 PUSH2 0x18B7 JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0x553476BF02EF2726E8CE5CED78D63E26E602E4A2257B1F559418E24B4633997 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST ADDRESS PUSH2 0x1D32 PUSH2 0x8F4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1DC4 JUMPI PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x1DC2 JUMPI ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1D68 JUMPI PUSH2 0x1D68 PUSH2 0x4018 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x1DB2 JUMPI PUSH2 0x1DB2 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1D93 JUMPI PUSH2 0x1D93 PUSH2 0x4018 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x4 PUSH2 0x2EC1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1DBB DUP2 PUSH2 0x4219 JUMP JUMPDEST SWAP1 POP PUSH2 0x1D43 JUMP JUMPDEST POP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1DC4 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x2EFD JUMP JUMPDEST ADDRESS PUSH2 0x1DE1 PUSH2 0x8F4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1DC4 JUMPI PUSH1 0x4 SLOAD PUSH1 0xF DUP2 DUP2 SIGNEXTEND PUSH1 0x1 PUSH1 0x80 SHL SWAP1 SWAP3 DIV SWAP1 SIGNEXTEND SGT ISZERO PUSH2 0x1DC4 JUMPI PUSH1 0x0 PUSH1 0x4 SSTORE PUSH2 0x1DC4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1299 DUP6 DUP6 DUP6 DUP6 PUSH2 0x1E2F PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x19E7 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1E40 DUP4 PUSH2 0x2F71 JUMP JUMPDEST SWAP1 POP PUSH1 0x4 DUP2 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x1E56 JUMPI PUSH2 0x1E56 PUSH2 0x39A9 JUMP JUMPDEST EQ PUSH2 0x1E61 JUMPI SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP1 PUSH2 0x1E7C JUMPI POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x40 MLOAD PUSH4 0x2AB0F529 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x2AB0F529 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1EC5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1EE9 SWAP2 SWAP1 PUSH2 0x4232 JUMP JUMPDEST ISZERO PUSH2 0x1EF8 JUMPI POP PUSH1 0x7 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x40 MLOAD PUSH4 0x2C258A9F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x584B153E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1F41 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1F65 SWAP2 SWAP1 PUSH2 0x4232 JUMP JUMPDEST ISZERO PUSH2 0x1F74 JUMPI POP PUSH1 0x5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST POP PUSH1 0x2 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 SLOAD PUSH1 0x0 SWAP1 DUP2 DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x1FDB JUMPI PUSH1 0x0 PUSH2 0x1F99 DUP5 PUSH2 0x30B1 JUMP JUMPDEST PUSH2 0x1FA3 SWAP1 DUP6 PUSH2 0x4005 JUMP JUMPDEST PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 SWAP1 SWAP2 POP DUP2 ADD SLOAD PUSH4 0xFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP8 AND LT ISZERO PUSH2 0x1FCB JUMPI DUP1 SWAP2 POP PUSH2 0x1FD9 JUMP JUMPDEST PUSH2 0x1FD6 DUP2 PUSH1 0x1 PUSH2 0x3F85 JUMP JUMPDEST SWAP3 POP JUMPDEST POP JUMPDEST PUSH1 0x0 PUSH2 0x1FE9 DUP8 DUP8 DUP6 DUP6 PUSH2 0x3199 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x2016 JUMPI PUSH2 0x2000 DUP8 PUSH2 0x18EC PUSH1 0x1 DUP5 PUSH2 0x4005 JUMP JUMPDEST SLOAD PUSH1 0x1 PUSH1 0x20 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH2 0xEAF JUMP JUMPDEST PUSH1 0x0 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP4 SWAP1 MSTORE PUSH32 0xC565B045403DC03C2EEA82B81A0465EDAD9E2E7FC4D97E11421C209DA93D7A93 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x6 SSTORE JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x2070 PUSH2 0x132A JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND SWAP1 POP PUSH2 0x2082 PUSH2 0x1515 JUMP JUMPDEST PUSH2 0x2091 DUP4 PUSH2 0x87B PUSH1 0x1 DUP6 PUSH2 0x4005 JUMP JUMPDEST LT ISZERO PUSH2 0x20F9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x31 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F723A2070726F706F73657220766F7465732062656C6F772070 PUSH1 0x44 DUP3 ADD MSTORE PUSH17 0x1C9BDC1BDCD85B081D1A1C995CDA1BDB19 PUSH1 0x7A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA59 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x210E DUP9 DUP9 DUP9 DUP9 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0x162F JUMP JUMPDEST SWAP1 POP DUP7 MLOAD DUP9 MLOAD EQ PUSH2 0x2131 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA59 SWAP1 PUSH2 0x4254 JUMP JUMPDEST DUP6 MLOAD DUP9 MLOAD EQ PUSH2 0x2152 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA59 SWAP1 PUSH2 0x4254 JUMP JUMPDEST PUSH1 0x0 DUP9 MLOAD GT PUSH2 0x21A3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F723A20656D7074792070726F706F73616C0000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA59 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND ISZERO PUSH2 0x2212 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F723A2070726F706F73616C20616C7265616479206578697374 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA59 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x221C PUSH2 0xE39 JUMP JUMPDEST PUSH2 0x2226 SWAP1 DUP5 PUSH2 0x3F85 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2232 PUSH2 0x91E JUMP JUMPDEST PUSH2 0x223C SWAP1 DUP4 PUSH2 0x3F85 JUMP JUMPDEST SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x2252 DUP5 PUSH2 0x31F7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x227F DUP4 PUSH2 0x31F7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x0 PUSH1 0x20 DUP1 DUP5 ADD DUP3 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP6 ADD DUP4 SWAP1 MSTORE PUSH1 0x60 SWAP5 DUP6 ADD DUP4 SWAP1 MSTORE DUP9 DUP4 MSTORE PUSH1 0x3 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 MLOAD DUP2 SLOAD SWAP3 DUP8 ADD MLOAD DUP8 DUP6 ADD MLOAD SWAP2 DUP7 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR PUSH1 0x1 PUSH1 0x40 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND DUP5 MUL OR PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0xE0 SWAP3 SWAP1 SWAP3 SHR SWAP2 SWAP1 SWAP2 MUL OR DUP2 SSTORE SWAP4 DUP6 ADD MLOAD PUSH1 0x80 DUP7 ADD MLOAD SWAP1 DUP5 AND SWAP3 SHR MUL OR PUSH1 0x1 DUP4 ADD SSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0x2 SWAP1 SWAP3 ADD DUP1 SLOAD PUSH1 0xC0 SWAP1 SWAP5 ADD MLOAD PUSH2 0xFFFF NOT SWAP1 SWAP5 AND SWAP3 ISZERO ISZERO PUSH2 0xFF00 NOT AND SWAP3 SWAP1 SWAP3 OR PUSH2 0x100 SWAP4 ISZERO ISZERO SWAP4 SWAP1 SWAP4 MUL SWAP3 SWAP1 SWAP3 OR SWAP1 SSTORE DUP11 MLOAD PUSH32 0x7D84A6263AE0D98D3329BD7B46BB4E8D6F98CD35A7ADB45C274C8B7FD5EBD5E0 SWAP2 DUP6 SWAP2 DUP9 SWAP2 DUP15 SWAP2 DUP15 SWAP2 DUP2 GT ISZERO PUSH2 0x2383 JUMPI PUSH2 0x2383 PUSH2 0x355E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x23B6 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x23A1 JUMPI SWAP1 POP JUMPDEST POP DUP14 DUP9 DUP9 DUP16 PUSH1 0x40 MLOAD PUSH2 0x23D0 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4295 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xFF DUP4 AND ISZERO PUSH2 0x23FA JUMPI PUSH2 0x17C6 DUP4 PUSH2 0x325F JUMP JUMPDEST DUP2 DUP1 SLOAD PUSH2 0x2406 SWAP1 PUSH2 0x3DA7 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2432 SWAP1 PUSH2 0x3DA7 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x247F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2454 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x247F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2462 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH2 0x918 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x748D635 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0x0 SWAP2 PUSH32 0x0 SWAP1 SWAP2 AND SWAP1 PUSH4 0x3A46B1A8 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x24FD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x13C0 SWAP2 SWAP1 PUSH2 0x3E22 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 DUP4 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0x8F74EA46EF7894F65EABFB5E6E695DE773A000B47C529AB559178069B226401 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0xC DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x2599 JUMPI POP DUP2 PUSH2 0x13C3 JUMP JUMPDEST PUSH2 0x13C3 DUP4 DUP4 PUSH2 0x3294 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x25B2 DUP7 DUP7 DUP7 DUP7 PUSH2 0x32BE JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x1299 JUMPI PUSH1 0xC SLOAD PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 MLOAD PUSH4 0xC4D252F5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0xC4D252F5 SWAP2 PUSH2 0x260B SWAP2 PUSH1 0x4 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2625 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2639 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0x26B5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F7253657474696E67733A20766F74696E6720706572696F6420 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x746F6F206C6F77 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA59 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP4 SWAP1 MSTORE PUSH32 0x7E3F7F0708A84DE9203036ABAA450DCCC85AD5FF52F78C170F3EDB55CF5E8828 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x7 SSTORE JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP4 SWAP1 MSTORE PUSH32 0xCCB45DA8D5717E6C4544694297C4BA5CF151D455C9BB0ED4FC7A38411BC05461 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x8 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x64 PUSH2 0x2744 DUP4 PUSH2 0x110B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2394E7A3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x8E539E8C SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x27A9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x27CD SWAP2 SWAP1 PUSH2 0x3E22 JUMP JUMPDEST PUSH2 0x27D7 SWAP2 SWAP1 PUSH2 0x436C JUMP JUMPDEST PUSH2 0x918 SWAP2 SWAP1 PUSH2 0x4399 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SWAP1 POP PUSH1 0x1F DUP2 MLOAD GT ISZERO PUSH2 0x280C JUMPI DUP3 PUSH1 0x40 MLOAD PUSH4 0x305A27A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA59 SWAP2 SWAP1 PUSH2 0x3738 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x2817 DUP3 PUSH2 0x43BB JUMP JUMPDEST OR SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP1 ISZERO PUSH2 0x2965 JUMPI PUSH1 0x0 PUSH2 0x283D DUP8 PUSH2 0x18EC PUSH1 0x1 DUP6 PUSH2 0x4005 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE SWAP1 SLOAD PUSH4 0xFFFFFFFF DUP1 DUP3 AND DUP1 DUP5 MSTORE PUSH1 0x1 PUSH1 0x20 SHL SWAP1 SWAP3 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x20 DUP5 ADD MSTORE SWAP2 SWAP3 POP SWAP1 DUP8 AND LT ISZERO PUSH2 0x28BE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436865636B706F696E743A2064656372656173696E67206B6579730000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA59 JUMP JUMPDEST DUP1 MLOAD PUSH4 0xFFFFFFFF DUP1 DUP9 AND SWAP2 AND SUB PUSH2 0x2906 JUMPI DUP5 PUSH2 0x28DF DUP9 PUSH2 0x18EC PUSH1 0x1 DUP7 PUSH2 0x4005 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x20 SHL MUL PUSH4 0xFFFFFFFF SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x2955 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH4 0xFFFFFFFF DUP1 DUP9 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP1 DUP9 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 DUP3 MSTORE DUP12 SLOAD PUSH1 0x1 DUP2 ADD DUP14 SSTORE PUSH1 0x0 DUP14 DUP2 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SWAP5 MLOAD SWAP2 MLOAD SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x20 SHL MUL SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP2 ADD SSTORE JUMPDEST PUSH1 0x20 ADD MLOAD SWAP3 POP DUP4 SWAP2 POP PUSH2 0x18CA SWAP1 POP JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH4 0xFFFFFFFF DUP1 DUP6 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP1 DUP6 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 DUP3 MSTORE DUP9 SLOAD PUSH1 0x1 DUP2 ADD DUP11 SSTORE PUSH1 0x0 DUP11 DUP2 MSTORE SWAP2 DUP3 KECCAK256 SWAP6 MLOAD SWAP3 MLOAD SWAP1 SWAP4 AND PUSH1 0x1 PUSH1 0x20 SHL MUL SWAP2 SWAP1 SWAP4 AND OR SWAP3 ADD SWAP2 SWAP1 SWAP2 SSTORE SWAP1 POP DUP2 PUSH2 0x18CA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5E326C8B PUSH1 0xE1 SHL EQ DUP1 PUSH2 0x29EF JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x79DD796F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x918 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x918 JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ DUP1 ISZERO PUSH2 0x2A67 JUMPI POP PUSH32 0x0 CHAINID EQ JUMPDEST ISZERO PUSH2 0x2A91 JUMPI POP PUSH32 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x908 PUSH1 0x40 DUP1 MLOAD PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x0 SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x0 PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT ISZERO PUSH2 0x2B70 JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x3 PUSH2 0x2BF4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP10 SWAP1 MSTORE PUSH1 0xFF DUP9 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2BC4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x2BED JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x2BF4 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2C11 JUMPI PUSH2 0x2C11 PUSH2 0x39A9 JUMP JUMPDEST SUB PUSH2 0x2C19 JUMPI POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2C2D JUMPI PUSH2 0x2C2D PUSH2 0x39A9 JUMP JUMPDEST SUB PUSH2 0x2C7A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA59 JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2C8E JUMPI PUSH2 0x2C8E PUSH2 0x39A9 JUMP JUMPDEST SUB PUSH2 0x2CDB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA59 JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2CEF JUMPI PUSH2 0x2CEF PUSH2 0x39A9 JUMP JUMPDEST SUB PUSH2 0xAB1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA59 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP5 MSTORE PUSH1 0x3 DUP2 ADD SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x2DCF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F72566F74696E6753696D706C653A20766F746520616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x191E4818D85CDD PUSH1 0xCA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA59 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 DUP3 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH1 0xFF DUP5 AND PUSH2 0x2E1B JUMPI DUP3 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x2E10 SWAP2 SWAP1 PUSH2 0x3F85 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x1DC2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 NOT PUSH1 0xFF DUP6 AND ADD PUSH2 0x2E3B JUMPI DUP3 DUP2 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x2E10 SWAP2 SWAP1 PUSH2 0x3F85 JUMP JUMPDEST PUSH1 0x1 NOT PUSH1 0xFF DUP6 AND ADD PUSH2 0x2E5B JUMPI DUP3 DUP2 PUSH1 0x2 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x2E10 SWAP2 SWAP1 PUSH2 0x3F85 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x35 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F72566F74696E6753696D706C653A20696E76616C6964207661 PUSH1 0x44 DUP3 ADD MSTORE PUSH21 0x6C756520666F7220656E756D20566F746554797065 PUSH1 0x58 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA59 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DUP2 SWAP1 DIV PUSH1 0xF SIGNEXTEND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP1 DUP7 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE DUP4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP1 DUP2 AND SWAP4 SWAP1 SWAP2 ADD AND MUL OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x40 MLOAD PUSH4 0xE38335E5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xE38335E5 SWAP1 CALLVALUE SWAP1 PUSH2 0x2F38 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x0 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x3EC9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2F51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2F65 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x2F95 JUMPI POP PUSH1 0x7 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 DUP2 ADD SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x2FB0 JUMPI POP PUSH1 0x2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x3018 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F723A20756E6B6E6F776E2070726F706F73616C206964000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA59 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3022 PUSH2 0x132A JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND SWAP1 POP DUP1 DUP3 LT PUSH2 0x303E JUMPI POP PUSH1 0x0 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP2 DUP2 LT PUSH2 0x306C JUMPI POP PUSH1 0x1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x3075 DUP7 PUSH2 0x33CA JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3094 JUMPI POP PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD GT JUMPDEST ISZERO PUSH2 0x30A5 JUMPI POP PUSH1 0x4 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST POP PUSH1 0x3 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 SUB PUSH2 0x30C3 JUMPI POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH2 0x30D0 DUP5 PUSH2 0x3416 JUMP JUMPDEST SWAP1 SHR PUSH1 0x1 SWAP1 SHL SWAP1 POP PUSH1 0x1 DUP2 DUP5 DUP2 PUSH2 0x30E9 JUMPI PUSH2 0x30E9 PUSH2 0x4383 JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH1 0x1 DUP2 DUP5 DUP2 PUSH2 0x3101 JUMPI PUSH2 0x3101 PUSH2 0x4383 JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH1 0x1 DUP2 DUP5 DUP2 PUSH2 0x3119 JUMPI PUSH2 0x3119 PUSH2 0x4383 JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH1 0x1 DUP2 DUP5 DUP2 PUSH2 0x3131 JUMPI PUSH2 0x3131 PUSH2 0x4383 JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH1 0x1 DUP2 DUP5 DUP2 PUSH2 0x3149 JUMPI PUSH2 0x3149 PUSH2 0x4383 JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH1 0x1 DUP2 DUP5 DUP2 PUSH2 0x3161 JUMPI PUSH2 0x3161 PUSH2 0x4383 JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH1 0x1 DUP2 DUP5 DUP2 PUSH2 0x3179 JUMPI PUSH2 0x3179 PUSH2 0x4383 JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH2 0x13C3 DUP2 DUP3 DUP6 DUP2 PUSH2 0x3193 JUMPI PUSH2 0x3193 PUSH2 0x4383 JUMP JUMPDEST DIV PUSH2 0x34AA JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP4 LT ISZERO PUSH2 0x31EF JUMPI PUSH1 0x0 PUSH2 0x31B0 DUP5 DUP5 PUSH2 0x34C0 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 SWAP1 SWAP2 POP PUSH4 0xFFFFFFFF DUP7 AND SWAP1 DUP3 ADD SLOAD PUSH4 0xFFFFFFFF AND GT ISZERO PUSH2 0x31DB JUMPI DUP1 SWAP3 POP PUSH2 0x31E9 JUMP JUMPDEST PUSH2 0x31E6 DUP2 PUSH1 0x1 PUSH2 0x3F85 JUMP JUMPDEST SWAP4 POP JUMPDEST POP PUSH2 0x319C JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x184E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53616665436173743A2076616C756520646F65736E27742066697420696E2036 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x342062697473 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA59 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0xFF DUP5 AND SWAP2 PUSH1 0x0 SWAP2 DUP1 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP POP POP SWAP2 DUP3 MSTORE POP PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP1 JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0x32A4 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA59 SWAP2 SWAP1 PUSH2 0x3738 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x32CD DUP7 DUP7 DUP7 DUP7 PUSH2 0x162F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x32DA DUP3 PUSH2 0xEBA JUMP JUMPDEST SWAP1 POP PUSH1 0x2 DUP2 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x32F0 JUMPI PUSH2 0x32F0 PUSH2 0x39A9 JUMP JUMPDEST EQ ISZERO DUP1 ISZERO PUSH2 0x3310 JUMPI POP PUSH1 0x6 DUP2 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x330D JUMPI PUSH2 0x330D PUSH2 0x39A9 JUMP JUMPDEST EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x332E JUMPI POP PUSH1 0x7 DUP2 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x332B JUMPI PUSH2 0x332B PUSH2 0x39A9 JUMP JUMPDEST EQ ISZERO JUMPDEST PUSH2 0x337A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F723A2070726F706F73616C206E6F7420616374697665000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA59 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE MLOAD PUSH32 0x789CF55BE980739DAD1D0699B93B58E806B51C9D96619BFA8FE0A28ABAA7B30C SWAP1 PUSH2 0xD35 SWAP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH2 0x33EC SWAP2 SWAP1 PUSH2 0x3F85 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x340D SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH2 0x17A6 JUMP JUMPDEST GT ISZERO SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x80 DUP4 SWAP1 SHR ISZERO PUSH2 0x342B JUMPI PUSH1 0x80 SWAP3 DUP4 SHR SWAP3 ADD JUMPDEST PUSH1 0x40 DUP4 SWAP1 SHR ISZERO PUSH2 0x343D JUMPI PUSH1 0x40 SWAP3 DUP4 SHR SWAP3 ADD JUMPDEST PUSH1 0x20 DUP4 SWAP1 SHR ISZERO PUSH2 0x344F JUMPI PUSH1 0x20 SWAP3 DUP4 SHR SWAP3 ADD JUMPDEST PUSH1 0x10 DUP4 SWAP1 SHR ISZERO PUSH2 0x3461 JUMPI PUSH1 0x10 SWAP3 DUP4 SHR SWAP3 ADD JUMPDEST PUSH1 0x8 DUP4 SWAP1 SHR ISZERO PUSH2 0x3473 JUMPI PUSH1 0x8 SWAP3 DUP4 SHR SWAP3 ADD JUMPDEST PUSH1 0x4 DUP4 SWAP1 SHR ISZERO PUSH2 0x3485 JUMPI PUSH1 0x4 SWAP3 DUP4 SHR SWAP3 ADD JUMPDEST PUSH1 0x2 DUP4 SWAP1 SHR ISZERO PUSH2 0x3497 JUMPI PUSH1 0x2 SWAP3 DUP4 SHR SWAP3 ADD JUMPDEST PUSH1 0x1 DUP4 SWAP1 SHR ISZERO PUSH2 0x918 JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x34B9 JUMPI DUP2 PUSH2 0x13C3 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x34CF PUSH1 0x2 DUP5 DUP5 XOR PUSH2 0x4399 JUMP JUMPDEST PUSH2 0x13C3 SWAP1 DUP5 DUP5 AND PUSH2 0x3F85 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x34ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x13C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x1093 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x3528 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x353F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x3557 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x359C JUMPI PUSH2 0x359C PUSH2 0x355E JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x35BD JUMPI PUSH2 0x35BD PUSH2 0x355E JUMP JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x35DE PUSH2 0x35D9 DUP5 PUSH2 0x35A4 JUMP JUMPDEST PUSH2 0x3574 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE DUP4 DUP4 DUP4 ADD GT ISZERO PUSH2 0x35F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP3 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x361A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x13C3 DUP4 DUP4 CALLDATALOAD PUSH1 0x20 DUP6 ADD PUSH2 0x35CB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xE0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x3645 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 CALLDATALOAD SWAP8 POP PUSH2 0x3655 PUSH1 0x20 DUP11 ADD PUSH2 0x3505 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x3671 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x367D DUP13 DUP4 DUP14 ADD PUSH2 0x3516 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3696 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x36A3 DUP12 DUP3 DUP13 ADD PUSH2 0x3609 JUMP JUMPDEST SWAP5 POP POP PUSH2 0x36B2 PUSH1 0x80 DUP11 ADD PUSH2 0x3505 JUMP JUMPDEST SWAP3 POP PUSH1 0xA0 DUP10 ADD CALLDATALOAD SWAP2 POP PUSH1 0xC0 DUP10 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 SWAP1 SWAP4 SWAP7 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x36E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3703 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x36EB JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x3724 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x36E8 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x13C3 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x370C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x3764 JUMPI PUSH2 0x3764 PUSH2 0x355E JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xAB1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3794 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x37A4 PUSH2 0x35D9 DUP4 PUSH2 0x374B JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x37C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x37E7 JUMPI DUP1 CALLDATALOAD PUSH2 0x37DA DUP2 PUSH2 0x376E JUMP JUMPDEST DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x37C7 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3803 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x3813 PUSH2 0x35D9 DUP4 PUSH2 0x374B JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x3832 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x37E7 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x3836 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x385E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x386E PUSH2 0x35D9 DUP4 PUSH2 0x374B JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x388D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x37E7 JUMPI DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x38B0 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0x38BE DUP10 DUP7 DUP4 DUP12 ADD ADD PUSH2 0x3609 JUMP JUMPDEST DUP5 MSTORE POP SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x3891 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x38E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x38F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3905 DUP9 DUP4 DUP10 ADD PUSH2 0x3783 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x391B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3927 DUP9 DUP4 DUP10 ADD PUSH2 0x37F2 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x393D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x394A DUP8 DUP3 DUP9 ADD PUSH2 0x384D JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP4 SWAP5 PUSH1 0x60 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x3973 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH2 0x3983 PUSH1 0x20 DUP8 ADD PUSH2 0x3505 JUMP JUMPDEST SWAP4 POP PUSH2 0x3991 PUSH1 0x40 DUP8 ADD PUSH2 0x3505 JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP4 SWAP5 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP2 ADD PUSH1 0x8 DUP4 LT PUSH2 0x39E1 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x39FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x3A0C DUP2 PUSH2 0x376E JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3A2A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x3A3A PUSH1 0x20 DUP5 ADD PUSH2 0x3505 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x3A5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH2 0x3A6B PUSH1 0x20 DUP8 ADD PUSH2 0x3505 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x3A87 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3A93 DUP10 DUP4 DUP11 ADD PUSH2 0x3516 JUMP JUMPDEST SWAP1 SWAP6 POP SWAP4 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3AAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AB9 DUP9 DUP3 DUP10 ADD PUSH2 0x3609 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3ADC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH2 0x3AEC PUSH1 0x20 DUP7 ADD PUSH2 0x3505 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x3B07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3B13 DUP8 DUP3 DUP9 ADD PUSH2 0x3516 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3B35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x3B4C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3B58 DUP9 DUP4 DUP10 ADD PUSH2 0x3783 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3B6E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3B7A DUP9 DUP4 DUP10 ADD PUSH2 0x37F2 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3B90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3B9C DUP9 DUP4 DUP10 ADD PUSH2 0x384D JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3BB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP6 ADD PUSH1 0x1F DUP2 ADD DUP8 SGT PUSH2 0x3BC4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3BD3 DUP8 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x35CB JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3C0F JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3BF3 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0xFF PUSH1 0xF8 SHL DUP9 AND DUP2 MSTORE PUSH1 0xE0 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x3C39 PUSH1 0xE0 DUP4 ADD DUP10 PUSH2 0x370C JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x3C4B DUP2 DUP10 PUSH2 0x370C JUMP JUMPDEST PUSH1 0x60 DUP5 ADD DUP9 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD DUP7 SWAP1 MSTORE DUP4 DUP2 SUB PUSH1 0xC0 DUP6 ADD MSTORE SWAP1 POP PUSH2 0xA13 DUP2 DUP6 PUSH2 0x3BDF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3C91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x3C9C DUP2 PUSH2 0x376E JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x3CBE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3CCA DUP7 DUP3 DUP8 ADD PUSH2 0x3609 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3CE6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x13C3 DUP2 PUSH2 0x376E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3D07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x3D12 DUP2 PUSH2 0x376E JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x3B07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3D47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x3D52 DUP2 PUSH2 0x376E JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST DUP2 DUP4 DUP3 CALLDATACOPY PUSH1 0x0 SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F723A206F6E6C79476F7665726E616E63650000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x3DBB JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x3DDB JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x21 SWAP1 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F723A2070726F706F73616C206E6F7420737563636573736675 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0xFA SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3E34 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3C0F JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3E4F JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD DUP1 DUP2 SWAP7 POP DUP4 PUSH1 0x5 SHL DUP2 ADD SWAP2 POP DUP3 DUP7 ADD PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x3EBC JUMPI DUP3 DUP5 SUB DUP10 MSTORE PUSH2 0x3EAA DUP5 DUP4 MLOAD PUSH2 0x370C JUMP JUMPDEST SWAP9 DUP6 ADD SWAP9 SWAP4 POP SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3E92 JUMP JUMPDEST POP SWAP2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xA0 DUP2 MSTORE PUSH1 0x0 PUSH2 0x3EDC PUSH1 0xA0 DUP4 ADD DUP9 PUSH2 0x3E3B JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x3EEE DUP2 DUP9 PUSH2 0x3BDF JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x3F02 DUP2 DUP8 PUSH2 0x3E74 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD SWAP6 SWAP1 SWAP6 MSTORE POP POP PUSH1 0x80 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0xC0 DUP2 MSTORE PUSH1 0x0 PUSH2 0x3F2A PUSH1 0xC0 DUP4 ADD DUP10 PUSH2 0x3E3B JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x3F3C DUP2 DUP10 PUSH2 0x3BDF JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x3F50 DUP2 DUP9 PUSH2 0x3E74 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD SWAP7 SWAP1 SWAP7 MSTORE POP POP PUSH1 0x80 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xA0 SWAP1 SWAP2 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x918 JUMPI PUSH2 0x918 PUSH2 0x3F6F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3FAA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x3FC0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD PUSH1 0x1F DUP2 ADD DUP5 SGT PUSH2 0x3FD1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x3FDF PUSH2 0x35D9 DUP3 PUSH2 0x35A4 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP6 PUSH1 0x20 DUP4 DUP6 ADD ADD GT ISZERO PUSH2 0x3FF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1299 DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x36E8 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x918 JUMPI PUSH2 0x918 PUSH2 0x3F6F JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4040 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH6 0xFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x13C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x80 DUP2 MSTORE PUSH1 0x0 PUSH2 0x4069 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x3E3B JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x407B DUP2 DUP8 PUSH2 0x3BDF JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x408F DUP2 DUP7 PUSH2 0x3E74 JUMP JUMPDEST SWAP2 POP POP DUP3 PUSH1 0x60 DUP4 ADD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x40E7 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x40C8 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1DC2 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x40D4 JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x4105 JUMPI PUSH2 0x4105 PUSH2 0x355E JUMP JUMPDEST PUSH2 0x4119 DUP2 PUSH2 0x4113 DUP5 SLOAD PUSH2 0x3DA7 JUMP JUMPDEST DUP5 PUSH2 0x40A1 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x414E JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x4136 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x1DC2 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x417D JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x415E JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x419B JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST DUP5 DUP2 MSTORE PUSH1 0xFF DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0xFCC PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x370C JUMP JUMPDEST DUP6 DUP2 MSTORE PUSH1 0xFF DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE DUP4 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x41FB PUSH1 0xA0 DUP4 ADD DUP6 PUSH2 0x370C JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x420D DUP2 DUP6 PUSH2 0x370C JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x422B JUMPI PUSH2 0x422B PUSH2 0x3F6F JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4244 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x13C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x21 SWAP1 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F723A20696E76616C69642070726F706F73616C206C656E6774 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0xFB SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x120 DUP12 DUP4 MSTORE PUSH1 0x20 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP13 AND DUP2 DUP6 ADD MSTORE DUP2 PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x42BE DUP3 DUP6 ADD DUP13 PUSH2 0x3E3B JUMP JUMPDEST SWAP2 POP DUP4 DUP3 SUB PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0x42D2 DUP3 DUP12 PUSH2 0x3BDF JUMP JUMPDEST SWAP2 POP DUP4 DUP3 SUB PUSH1 0x80 DUP6 ADD MSTORE DUP2 DUP10 MLOAD DUP1 DUP5 MSTORE DUP3 DUP5 ADD SWAP2 POP DUP3 DUP2 PUSH1 0x5 SHL DUP6 ADD ADD DUP4 DUP13 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4323 JUMPI PUSH1 0x1F NOT DUP8 DUP5 SUB ADD DUP6 MSTORE PUSH2 0x4311 DUP4 DUP4 MLOAD PUSH2 0x370C JUMP JUMPDEST SWAP5 DUP7 ADD SWAP5 SWAP3 POP SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x42F5 JUMP JUMPDEST POP POP DUP7 DUP2 SUB PUSH1 0xA0 DUP9 ADD MSTORE PUSH2 0x4337 DUP2 DUP13 PUSH2 0x3E74 JUMP JUMPDEST SWAP5 POP POP POP POP POP DUP6 PUSH1 0xC0 DUP5 ADD MSTORE DUP5 PUSH1 0xE0 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH2 0x100 DUP5 ADD MSTORE PUSH2 0x435C DUP2 DUP6 PUSH2 0x370C JUMP JUMPDEST SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x918 JUMPI PUSH2 0x918 PUSH2 0x3F6F JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x43B6 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x3DDB JUMPI PUSH1 0x0 NOT PUSH1 0x20 SWAP2 SWAP1 SWAP2 SUB PUSH1 0x3 SHL SHL AND SWAP2 SWAP1 POP JUMP INVALID SELFBALANCE PUSH16 0x7665726E6F723A2072656C6179207265 PUSH23 0x657274656420776974686F7574206D657373616765A264 PUSH10 0x706673582212206B9906 0xBE JUMPI LOG4 0xCA 0xD5 0xEC ADD CODECOPY CREATE2 GASLIMIT SWAP13 SWAP11 MOD PUSH6 0x5642A449DEFD EQ PUSH23 0xE20F15F1755A5164736F6C634300081100330000000000 ",
      "sourceMap": "388:3041:7:-:0;;;544:249;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;776:9;741:1;697:6;664:1;667:3;672:1;1444:88:8;;;;;;;;;;;;;-1:-1:-1;;;1444:88:8;;;1484:5;1491:9;:7;;;:9;;:::i;:::-;3178:45:33;3209:13;3178:4;:30;;;;;;:45;;;;:::i;:::-;3170:53;;3244:51;:7;3278:16;3244:33;;;;;;;:51;;:::i;:::-;3233:62;;3319:22;;;;;;;;;;3305:36;;3368:25;;;;;;3351:42;;3421:13;3404:30;;3469:23;4004:11;;4017:14;;3981:81;;;1856:95;3981:81;;;3586:25:39;3627:18;;;3620:34;;;;3670:18;;;3663:34;4033:13:33;3713:18:39;;;3706:34;4056:4:33;3756:19:39;;;3749:61;3945:7:33;;3558:19:39;;3981:81:33;;;;;;;;;;;;3971:92;;;;;;3964:99;;3890:180;;3469:23;3444:48;;-1:-1:-1;;3524:4:33;3502:27;;1512:5:8::1;:13;1520:5:::0;1512;:13:::1;:::i;:::-;-1:-1:-1::0;641:35:9;;-1:-1:-1;657:18:9;641:15;:35::i;:::-;686:37;703:19;686:16;:37::i;:::-;733:47;755:24;733:21;:47::i;:::-;-1:-1:-1;;;;;;;;419:39:14;;;1327:44:15;1350:20;1327:22;:44::i;:::-;-1:-1:-1;1783:32:13;1799:15;1783;:32::i;:::-;1725:97;544:249:7;;388:3041;;2301:99:8;2383:10;;;;;;;;;;;;-1:-1:-1;;;2383:10:8;;;;;2301:99::o;2194:324:29:-;2290:11;2339:2;2323:5;2317:19;:24;2313:199;;;2364:20;2378:5;2364:13;:20::i;:::-;2357:27;;;;2313:199;2456:5;2415:32;2441:5;2415:25;;;;;:32;;:::i;:::-;:38;:46;;:38;:46;:::i;:::-;-1:-1:-1;2499:1:29;;-1:-1:-1;2313:199:29;2194:324;;;;:::o;1567:171:9:-;1663:12;;1648:44;;;3995:25:39;;;4051:2;4036:18;;4029:34;;;1648:44:9;;3968:18:39;1648:44:9;;;;;;;1702:12;:29;1567:171::o;1744:259::-;1848:1;1830:15;:19;1822:71;;;;-1:-1:-1;;;1822:71:9;;4276:2:39;1822:71:9;;;4258:21:39;4315:2;4295:18;;;4288:30;4354:34;4334:18;;;4327:62;-1:-1:-1;;;4405:18:39;;;4398:37;4452:19;;1822:71:9;;;;;;;;;1924:13;;1908:47;;;3995:25:39;;;4051:2;4036:18;;4029:34;;;1908:47:9;;3968:18:39;1908:47:9;;;;;;;1965:13;:31;1744:259::o;2009:213::-;2123:18;;2102:62;;;3995:25:39;;;4051:2;4036:18;;4029:34;;;2102:62:9;;3968:18:39;2102:62:9;;;;;;;2174:18;:41;2009:213::o;3611:906:15:-;2625:3;3719:18;:41;;3698:155;;;;-1:-1:-1;;;3698:155:15;;4684:2:39;3698:155:15;;;4666:21:39;4723:2;4703:18;;;4696:30;4762:34;4742:18;;;4735:62;4833:34;4813:18;;;4806:62;-1:-1:-1;;;4884:19:39;;;4877:34;4928:19;;3698:155:15;4482:471:39;3698:155:15;3864:26;3893:17;:15;:17::i;:::-;3864:46;-1:-1:-1;4044:23:15;;;;;:75;;-1:-1:-1;4071:23:15;:43;:48;4044:75;4040:255;;;4135:23;:36;;4194:76;;;;;;;;4227:1;4194:76;;;;;;4238:30;:18;:28;;;;;:30;;:::i;:::-;-1:-1:-1;;;;;4194:76:15;;;;;;4135:149;;;;;;;-1:-1:-1;4135:149:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4040:255;4352:80;4381:18;:7;:5;:7::i;:::-;:16;;;;;;;:18;;:::i;:::-;4401:30;:18;:28;;;;;:30;;:::i;:::-;4352:23;:28;;;;;;:80;;;;;:::i;:::-;-1:-1:-1;;4448:62:15;;;3995:25:39;;;4051:2;4036:18;;4029:34;;;4448:62:15;;3968:18:39;4448:62:15;;;;;;;3688:829;3611:906;:::o;6389:176:13:-;6492:9;;6469:56;;;-1:-1:-1;;;;;6492:9:13;;;5170:34:39;;5240:15;;;5235:2;5220:18;;5213:43;6469:56:13;;5105:18:39;6469:56:13;;;;;;;6535:9;:23;;-1:-1:-1;;;;;;6535:23:13;-1:-1:-1;;;;;6535:23:13;;;;;;;;;;6389:176::o;1107:286:29:-;1172:11;1195:17;1221:3;1195:30;;1253:2;1239:4;:11;:16;1235:72;;;1292:3;1278:18;;-1:-1:-1;;;1278:18:29;;;;;;;;:::i;1235:72::-;1373:11;;1356:13;1373:4;1356:13;:::i;:::-;1348:36;;1107:286;-1:-1:-1;;;1107:286:29:o;3159:202:30:-;3335:10;3159:202::o;1475:191:15:-;1557:23;:43;1531:7;;1557:48;:102;;1627:32;:23;:30;;;;;:32;;:::i;:::-;-1:-1:-1;;;;;1557:102:15;1550:109;;1475:191;:::o;1557:102::-;1608:16;;1557:102;1550:109;;1475:191;:::o;1975:192:37:-;2032:7;-1:-1:-1;;;;;2059:26:37;;;2051:78;;;;-1:-1:-1;;;2051:78:37;;6324:2:39;2051:78:37;;;6306:21:39;6363:2;6343:18;;;6336:30;6402:34;6382:18;;;6375:62;-1:-1:-1;;;6453:18:39;;;6446:37;6500:19;;2051:78:37;6122:403:39;2051:78:37;-1:-1:-1;2154:5:37;1975:192::o;642:235:14:-;697:6;719:5;;-1:-1:-1;;;;;719:11:14;;:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;719:13:14;;;;;;;;-1:-1:-1;;719:13:14;;;;;;;;;;;;:::i;:::-;;;715:156;;829:31;847:12;829:17;;;;;:31;;:::i;715:156::-;781:9;642:235;-1:-1:-1;642:235:14:o;14403:187:37:-;14459:6;14494:16;14485:25;;;14477:76;;;;-1:-1:-1;;;14477:76:37;;7021:2:39;14477:76:37;;;7003:21:39;7060:2;7040:18;;;7033:30;7099:34;7079:18;;;7072:62;-1:-1:-1;;;7150:18:39;;;7143:36;7196:19;;14477:76:37;6819:402:39;8042:162:24;8124:7;;8159:38;8167:4;8186:3;8191:5;8159:7;:38::i;:::-;8152:45;;;;8042:162;;;;;;;:::o;10057:206::-;10152:24;;10119:7;;10193:8;;:63;;10208:41;10222:4;10241:7;10247:1;10241:3;:7;:::i;:::-;13819:28;13882:20;;;13947:4;13934:18;;;13930:28;;13709:265;10208:41;:48;;;;-1:-1:-1;;;;;10208:48:24;10193:63;;;10204:1;10193:63;10186:70;10057:206;-1:-1:-1;;;10057:206:24:o;13379:187:37:-;13435:6;13470:16;13461:25;;;13453:76;;;;-1:-1:-1;;;13453:76:37;;7658:2:39;13453:76:37;;;7640:21:39;7697:2;7677:18;;;7670:30;7736:34;7716:18;;;7709:62;-1:-1:-1;;;7787:18:39;;;7780:36;7833:19;;13453:76:37;7456:402:39;11193:836:24;11326:11;;11284:7;;;;11352;;11348:675;;11427:25;11455:28;11469:4;11475:7;11481:1;11475:3;:7;:::i;11455:28::-;11427:56;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;11427:56:24;;;;;;;-1:-1:-1;11561:16:24;;;-1:-1:-1;11561:16:24;11553:56;;;;-1:-1:-1;;;11553:56:24;;8065:2:39;11553:56:24;;;8047:21:39;8104:2;8084:18;;;8077:30;8143:29;8123:18;;;8116:57;8190:18;;11553:56:24;7863:351:39;11553:56:24;11673:9;;:16;;;;;;;11669:189;;11747:5;11709:28;11723:4;11729:7;11735:1;11729:3;:7;:::i;11709:28::-;:43;;-1:-1:-1;;;;;11709:43:24;;;;;;;;;;;;;;;;11669:189;;;11801:41;;;;;;;;;;;;;;;-1:-1:-1;;;;;11801:41:24;;;;;;;;;;11791:52;;;;;;;-1:-1:-1;11791:52:24;;;;;;;;;;;;;;;;;;;;;;;;;11669:189;11879:11;;;;-1:-1:-1;11892:5:24;;-1:-1:-1;11871:27:24;;-1:-1:-1;11871:27:24;11348:675;-1:-1:-1;;11939:41:24;;;;;;;;;;;;;;;-1:-1:-1;;;;;11939:41:24;;;;;;;;;;11929:52;;;;;;;-1:-1:-1;11929:52:24;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;11973:5:24;11995:17;;14:139:39;-1:-1:-1;;;;;97:31:39;;87:42;;77:70;;143:1;140;133:12;77:70;14:139;:::o;158:443::-;279:6;287;340:2;328:9;319:7;315:23;311:32;308:52;;;356:1;353;346:12;308:52;388:9;382:16;407:39;440:5;407:39;:::i;:::-;515:2;500:18;;494:25;465:5;;-1:-1:-1;528:41:39;494:25;528:41;:::i;:::-;588:7;578:17;;;158:443;;;;;:::o;606:127::-;667:10;662:3;658:20;655:1;648:31;698:4;695:1;688:15;722:4;719:1;712:15;738:380;817:1;813:12;;;;860;;;881:61;;935:4;927:6;923:17;913:27;;881:61;988:2;980:6;977:14;957:18;954:38;951:161;;1034:10;1029:3;1025:20;1022:1;1015:31;1069:4;1066:1;1059:15;1097:4;1094:1;1087:15;951:161;;738:380;;;:::o;1249:545::-;1351:2;1346:3;1343:11;1340:448;;;1387:1;1412:5;1408:2;1401:17;1457:4;1453:2;1443:19;1527:2;1515:10;1511:19;1508:1;1504:27;1498:4;1494:38;1563:4;1551:10;1548:20;1545:47;;;-1:-1:-1;1586:4:39;1545:47;1641:2;1636:3;1632:12;1629:1;1625:20;1619:4;1615:31;1605:41;;1696:82;1714:2;1707:5;1704:13;1696:82;;;1759:17;;;1740:1;1729:13;1696:82;;;1700:3;;;1340:448;1249:545;;;:::o;1970:1352::-;2090:10;;-1:-1:-1;;;;;2112:30:39;;2109:56;;;2145:18;;:::i;:::-;2174:97;2264:6;2224:38;2256:4;2250:11;2224:38;:::i;:::-;2218:4;2174:97;:::i;:::-;2326:4;;2390:2;2379:14;;2407:1;2402:663;;;;3109:1;3126:6;3123:89;;;-1:-1:-1;3178:19:39;;;3172:26;3123:89;-1:-1:-1;;1927:1:39;1923:11;;;1919:24;1915:29;1905:40;1951:1;1947:11;;;1902:57;3225:81;;2372:944;;2402:663;1196:1;1189:14;;;1233:4;1220:18;;-1:-1:-1;;2438:20:39;;;2556:236;2570:7;2567:1;2564:14;2556:236;;;2659:19;;;2653:26;2638:42;;2751:27;;;;2719:1;2707:14;;;;2586:19;;2556:236;;;2560:3;2820:6;2811:7;2808:19;2805:201;;;2881:19;;;2875:26;-1:-1:-1;;2964:1:39;2960:14;;;2976:3;2956:24;2952:37;2948:42;2933:58;2918:74;;2805:201;-1:-1:-1;;;;;3052:1:39;3036:14;;;3032:22;3019:36;;-1:-1:-1;1970:1352:39:o;5267:548::-;5379:4;5408:2;5437;5426:9;5419:21;5469:6;5463:13;5512:6;5507:2;5496:9;5492:18;5485:34;5537:1;5547:140;5561:6;5558:1;5555:13;5547:140;;;5656:14;;;5652:23;;5646:30;5622:17;;;5641:2;5618:26;5611:66;5576:10;;5547:140;;;5551:3;5736:1;5731:2;5722:6;5711:9;5707:22;5703:31;5696:42;5806:2;5799;5795:7;5790:2;5782:6;5778:15;5774:29;5763:9;5759:45;5755:54;5747:62;;;;5267:548;;;;:::o;5820:297::-;5938:12;;5985:4;5974:16;;;5968:23;;5938:12;6003:16;;6000:111;;;-1:-1:-1;;6077:4:39;6073:17;;;;6070:1;6066:25;6062:38;6051:50;;5820:297;-1:-1:-1;5820:297:39:o;6530:284::-;6599:6;6652:2;6640:9;6631:7;6627:23;6623:32;6620:52;;;6668:1;6665;6658:12;6620:52;6700:9;6694:16;6750:14;6743:5;6739:26;6732:5;6729:37;6719:65;;6780:1;6777;6770:12;7226:225;7293:9;;;7314:11;;;7311:134;;;7367:10;7362:3;7358:20;7355:1;7348:31;7402:4;7399:1;7392:15;7430:4;7427:1;7420:15;7863:351;388:3041:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
    },
    "deployedBytecode": {
      "functionDebugData": {
        "@BALLOT_TYPEHASH_2035": {
          "entryPoint": null,
          "id": 2035,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@CLOCK_MODE_5314": {
          "entryPoint": 4054,
          "id": 5314,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@COUNTING_MODE_4670": {
          "entryPoint": null,
          "id": 4670,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@EXTENDED_BALLOT_TYPEHASH_2040": {
          "entryPoint": null,
          "id": 2040,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@_2130": {
          "entryPoint": null,
          "id": 2130,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@_afterExecute_2844": {
          "entryPoint": 7640,
          "id": 2844,
          "parameterSlots": 5,
          "returnSlots": 0
        },
        "@_beforeExecute_2807": {
          "entryPoint": 7465,
          "id": 2807,
          "parameterSlots": 5,
          "returnSlots": 0
        },
        "@_buildDomainSeparator_9216": {
          "entryPoint": null,
          "id": 9216,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@_cancel_1975": {
          "entryPoint": null,
          "id": 1975,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "@_cancel_2908": {
          "entryPoint": 12990,
          "id": 2908,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "@_cancel_5187": {
          "entryPoint": 9635,
          "id": 5187,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "@_castVote_3144": {
          "entryPoint": 7697,
          "id": 3144,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "@_castVote_3220": {
          "entryPoint": 6631,
          "id": 3220,
          "parameterSlots": 5,
          "returnSlots": 1
        },
        "@_countVote_4859": {
          "entryPoint": 11591,
          "id": 4859,
          "parameterSlots": 5,
          "returnSlots": 0
        },
        "@_defaultParams_2408": {
          "entryPoint": null,
          "id": 2408,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@_domainSeparatorV4_9195": {
          "entryPoint": 10766,
          "id": 9195,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@_execute_1947": {
          "entryPoint": 7627,
          "id": 1947,
          "parameterSlots": 5,
          "returnSlots": 0
        },
        "@_execute_5136": {
          "entryPoint": 12029,
          "id": 5136,
          "parameterSlots": 5,
          "returnSlots": 0
        },
        "@_executor_1988": {
          "entryPoint": 2292,
          "id": 1988,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@_executor_5200": {
          "entryPoint": null,
          "id": 5200,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@_getVotes_5334": {
          "entryPoint": 9355,
          "id": 5334,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "@_hashTypedDataV4_9232": {
          "entryPoint": 6556,
          "id": 9232,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@_insert_7363": {
          "entryPoint": 10271,
          "id": 7363,
          "parameterSlots": 3,
          "returnSlots": 2
        },
        "@_msgData_8005": {
          "entryPoint": null,
          "id": 8005,
          "parameterSlots": 0,
          "returnSlots": 2
        },
        "@_msgSender_7996": {
          "entryPoint": null,
          "id": 7996,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@_quorumReached_4746": {
          "entryPoint": 13258,
          "id": 4746,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@_revert_6443": {
          "entryPoint": 12948,
          "id": 6443,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@_setProposalThreshold_3429": {
          "entryPoint": 9974,
          "id": 3429,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@_setVotingDelay_3392": {
          "entryPoint": 8227,
          "id": 3392,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@_setVotingPeriod_3414": {
          "entryPoint": 9813,
          "id": 3414,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@_throwError_8764": {
          "entryPoint": 11261,
          "id": 8764,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@_unsafeAccess_7482": {
          "entryPoint": null,
          "id": 7482,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@_updateQuorumNumerator_5547": {
          "entryPoint": 7099,
          "id": 5547,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@_updateTimelock_5236": {
          "entryPoint": 9505,
          "id": 5236,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@_upperBinaryLookup_7415": {
          "entryPoint": 12697,
          "id": 7415,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "@_voteSucceeded_4769": {
          "entryPoint": null,
          "id": 4769,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@average_9378": {
          "entryPoint": 13504,
          "id": 9378,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@cancel_2689": {
          "entryPoint": 3781,
          "id": 2689,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "@cancel__1813": {
          "entryPoint": 5737,
          "id": 1813,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "@castVoteBySig_3064": {
          "entryPoint": 3652,
          "id": 3064,
          "parameterSlots": 5,
          "returnSlots": 1
        },
        "@castVoteWithReasonAndParamsBySig_3121": {
          "entryPoint": 2345,
          "id": 3121,
          "parameterSlots": 8,
          "returnSlots": 1
        },
        "@castVoteWithReasonAndParams_3021": {
          "entryPoint": 4289,
          "id": 3021,
          "parameterSlots": 5,
          "returnSlots": 1
        },
        "@castVoteWithReason_2993": {
          "entryPoint": 4675,
          "id": 2993,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "@castVote_2968": {
          "entryPoint": 4248,
          "id": 2968,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@clear_12014": {
          "entryPoint": null,
          "id": 12014,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@clock_5291": {
          "entryPoint": 4906,
          "id": 5291,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@eip712Domain_9279": {
          "entryPoint": 4770,
          "id": 9279,
          "parameterSlots": 0,
          "returnSlots": 7
        },
        "@empty_12056": {
          "entryPoint": null,
          "id": 12056,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@execute_2634": {
          "entryPoint": 3399,
          "id": 2634,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "@getStringSlot_8512": {
          "entryPoint": 6114,
          "id": 8512,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@getVotesWithParams_2945": {
          "entryPoint": 5043,
          "id": 2945,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "@getVotes_2926": {
          "entryPoint": 5886,
          "id": 2926,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@hasVoted_4689": {
          "entryPoint": null,
          "id": 4689,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@hashProposal_2237": {
          "entryPoint": 5679,
          "id": 2237,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "@latest_7210": {
          "entryPoint": 6354,
          "id": 7210,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@length_8358": {
          "entryPoint": null,
          "id": 8358,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@log2_9849": {
          "entryPoint": 13334,
          "id": 9849,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@min_9355": {
          "entryPoint": 13482,
          "id": 9355,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@name_2197": {
          "entryPoint": 2740,
          "id": 2197,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@nonGovernanceFunction_1817": {
          "entryPoint": null,
          "id": 1817,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@popFront_11893": {
          "entryPoint": 6972,
          "id": 11893,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@proposalDeadline_2362": {
          "entryPoint": null,
          "id": 2362,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@proposalEta_5026": {
          "entryPoint": 5243,
          "id": 5026,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@proposalSnapshot_2348": {
          "entryPoint": null,
          "id": 2348,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@proposalThreshold_1917": {
          "entryPoint": 5397,
          "id": 1917,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@proposalThreshold_3341": {
          "entryPoint": null,
          "id": 3341,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@proposalVotes_4717": {
          "entryPoint": null,
          "id": 4717,
          "parameterSlots": 1,
          "returnSlots": 3
        },
        "@propose_1904": {
          "entryPoint": 4747,
          "id": 1904,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "@propose_2550": {
          "entryPoint": 8292,
          "id": 2550,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "@pushBack_11767": {
          "entryPoint": 11969,
          "id": 11767,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@push_7013": {
          "entryPoint": 6327,
          "id": 7013,
          "parameterSlots": 3,
          "returnSlots": 2
        },
        "@queue_5104": {
          "entryPoint": 2886,
          "id": 5104,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "@quorumDenominator_5449": {
          "entryPoint": null,
          "id": 5449,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@quorumNumerator_5390": {
          "entryPoint": 5066,
          "id": 5390,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@quorumNumerator_5440": {
          "entryPoint": 4363,
          "id": 5440,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@quorum_1859": {
          "entryPoint": 6054,
          "id": 1859,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@quorum_5472": {
          "entryPoint": 10039,
          "id": 5472,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@recover_9011": {
          "entryPoint": 6601,
          "id": 9011,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "@relay_3251": {
          "entryPoint": 5408,
          "id": 3251,
          "parameterSlots": 4,
          "returnSlots": 0
        },
        "@setProposalThreshold_3377": {
          "entryPoint": 5919,
          "id": 3377,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@setVotingDelay_3353": {
          "entryPoint": 4540,
          "id": 3353,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@setVotingPeriod_3365": {
          "entryPoint": 5751,
          "id": 3365,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@sqrt_9681": {
          "entryPoint": 12465,
          "id": 9681,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@state_1876": {
          "entryPoint": 3770,
          "id": 1876,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@state_2326": {
          "entryPoint": 12145,
          "id": 2326,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@state_4987": {
          "entryPoint": 7732,
          "id": 4987,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@supportsInterface_2004": {
          "entryPoint": 2317,
          "id": 2004,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@supportsInterface_2188": {
          "entryPoint": 10686,
          "id": 2188,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@supportsInterface_4920": {
          "entryPoint": 6519,
          "id": 4920,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@supportsInterface_9301": {
          "entryPoint": null,
          "id": 9301,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@timelock_5000": {
          "entryPoint": null,
          "id": 5000,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@toShortStringWithFallback_8398": {
          "entryPoint": 6065,
          "id": 8398,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@toShortString_8312": {
          "entryPoint": 10209,
          "id": 8312,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@toStringWithFallback_8424": {
          "entryPoint": 9190,
          "id": 8424,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@toString_8338": {
          "entryPoint": 12895,
          "id": 8338,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@toTypedDataHash_9055": {
          "entryPoint": null,
          "id": 9055,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@toUint224_10279": {
          "entryPoint": 6117,
          "id": 10279,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@toUint32_10879": {
          "entryPoint": 6226,
          "id": 10879,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@toUint48_10829": {
          "entryPoint": 6416,
          "id": 10829,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@toUint64_10779": {
          "entryPoint": 12791,
          "id": 10779,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@token_5248": {
          "entryPoint": null,
          "id": 5248,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@tryRecover_8978": {
          "entryPoint": 11065,
          "id": 8978,
          "parameterSlots": 4,
          "returnSlots": 2
        },
        "@updateQuorumNumerator_5485": {
          "entryPoint": 2593,
          "id": 5485,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@updateTimelock_5214": {
          "entryPoint": 5108,
          "id": 5214,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@upperLookupRecent_7180": {
          "entryPoint": 8062,
          "id": 7180,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@verifyCallResult_6423": {
          "entryPoint": 9610,
          "id": 6423,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "@version_2206": {
          "entryPoint": null,
          "id": 2206,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@votingDelay_1830": {
          "entryPoint": 3641,
          "id": 1830,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@votingDelay_3323": {
          "entryPoint": null,
          "id": 3323,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@votingPeriod_1843": {
          "entryPoint": 2334,
          "id": 1843,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@votingPeriod_3332": {
          "entryPoint": null,
          "id": 3332,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "abi_decode_array_address_dyn": {
          "entryPoint": 14211,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_array_bytes_dyn": {
          "entryPoint": 14413,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_array_uint256_dyn": {
          "entryPoint": 14322,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_available_length_bytes": {
          "entryPoint": 13771,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_decode_bytes": {
          "entryPoint": 13833,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_string_calldata": {
          "entryPoint": 13590,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "abi_decode_tuple_t_addresst_uint256": {
          "entryPoint": 15668,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "abi_decode_tuple_t_addresst_uint256t_bytes_calldata_ptr": {
          "entryPoint": 15601,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 4
        },
        "abi_decode_tuple_t_addresst_uint256t_bytes_memory_ptr": {
          "entryPoint": 15484,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 3
        },
        "abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_array$_t_bytes_memory_ptr_$dyn_memory_ptrt_bytes32": {
          "entryPoint": 14540,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 4
        },
        "abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_array$_t_bytes_memory_ptr_$dyn_memory_ptrt_string_memory_ptr": {
          "entryPoint": 15135,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 4
        },
        "abi_decode_tuple_t_bool_fromMemory": {
          "entryPoint": 16946,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_bytes32_fromMemory": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_bytes4": {
          "entryPoint": 13531,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_contract$_TimelockController_$4634": {
          "entryPoint": 15572,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_string_memory_ptr_fromMemory": {
          "entryPoint": 16280,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_uint256": {
          "entryPoint": 14031,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_uint256_fromMemory": {
          "entryPoint": 15906,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_uint256t_address": {
          "entryPoint": 14823,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "abi_decode_tuple_t_uint256t_uint8": {
          "entryPoint": 14871,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "abi_decode_tuple_t_uint256t_uint8t_string_calldata_ptr": {
          "entryPoint": 15046,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 4
        },
        "abi_decode_tuple_t_uint256t_uint8t_string_calldata_ptrt_bytes_memory_ptr": {
          "entryPoint": 14915,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 5
        },
        "abi_decode_tuple_t_uint256t_uint8t_string_calldata_ptrt_bytes_memory_ptrt_uint8t_bytes32t_bytes32": {
          "entryPoint": 13865,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 8
        },
        "abi_decode_tuple_t_uint256t_uint8t_uint8t_bytes32t_bytes32": {
          "entryPoint": 14683,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 5
        },
        "abi_decode_tuple_t_uint48_fromMemory": {
          "entryPoint": 16430,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_uint8": {
          "entryPoint": 13573,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_array_address_dyn": {
          "entryPoint": 15931,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_array_bytes_dyn": {
          "entryPoint": 15988,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_array_uint256_dyn": {
          "entryPoint": 15327,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_string": {
          "entryPoint": 14092,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_packed_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
          "entryPoint": 15712,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_bytes32__to_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_bytes32__fromStack_reversed": {
          "entryPoint": 16470,
          "id": null,
          "parameterSlots": 5,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_rational_0_by_1_t_bytes32__to_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_bytes32_t_bytes32__fromStack_reversed": {
          "entryPoint": 16073,
          "id": null,
          "parameterSlots": 6,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_rational_0_by_1_t_bytes32_t_uint256__to_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_bytes32_t_bytes32_t_uint256__fromStack_reversed": {
          "entryPoint": 16151,
          "id": null,
          "parameterSlots": 7,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed": {
          "entryPoint": 15386,
          "id": null,
          "parameterSlots": 8,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 6,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_bytes32_t_uint256_t_uint8__to_t_bytes32_t_uint256_t_uint8__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_bytes32_t_uint256_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint256_t_uint8_t_bytes32_t_bytes32__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 6,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 5,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_contract$_IERC5805_$5701__to_t_address__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_enum$_ProposalState_$3447__to_t_uint8__fromStack_reversed": {
          "entryPoint": 14783,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": 14136,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_01397b9b23826f2770c44682f6f60114915147b09511a75fee3231adbc22847f__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": 15728,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_0687f8064c09ccf183090b5092c4485c730072a161487645a7e37b56cef356bb__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_35c793b1b5a6be245307722bba06fa552ac609ebfd70358ab0b3220eed40db4d__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": 16980,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_397853bd9e6f0888f5fdcc37d267617a8f74b5e4540887757482a2da22f4cdfc__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_3f314603cb191f371d117be724372820f824fc7fbb608c5408b31620bafe9a83__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_4f6b1769383e9e01fad001f10d4f9180a25f63424c2597419936b157d29f34ec__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_52977fe78dd360b196702e8b1aa8e7d06cd560911da4c4d483548d7b2d1a38d8__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_599034f9324dd4e988c6cea5a00a30f53147fec1b01559682f18cd840028f495__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_5b1e239298a1362f9b5245bd4e9393de28380a12326aa31532e03fe3f1061d80__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_8400b334e0df18026c76df742cddc258619f9923d5f5b8ba67cd6eec1d1f3513__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_93ae0c6bf6ffaece591a770b1865daa9f65157e541970aa9d8dc5f89a9490939__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_9d2acf551b2466898443b9bc3a403a4d86037386bc5a8960c1bbb0f204e69b79__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_9df62e32cc9e9c02131fa3d2189c515bf05634e5979aec1a0e5b3a9e44a36d0b__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_a608627370ddd238e48feab42026732822e64969fe5a8155723eaa5f397576d9__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": 15841,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_be0e8e67d15e920d3846a46401854a27a676d8965bbdde05e68fc2cc5672c892__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_c16dd4ca2a7081ef35bfb3860532c95d6b1aacddadf6f22f1058fc06b5718887__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_c1bb0f67bc14091429c4b8b5d74e1f929b2838d72b5fb3c5a2cbef13b2faab40__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_c907489dafcfb622d3b83f2657a14d6da2f59e0de3116af0d6a80554c1a7cb19__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_df78ee0077e11770202b643d4ac130b9964a5ac311c9b8d8ed6242eb4e2dcf86__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_e3fd25dc9791b847d14d0815e84967e87bbf815be3a68ecdd58e99f67196ddc7__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint256_t_address_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_string_memory_ptr_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_uint256_t_uint256_t_string_memory_ptr__to_t_uint256_t_address_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_string_memory_ptr_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_uint256_t_uint256_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": 17045,
          "id": null,
          "parameterSlots": 10,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint256_t_uint8_t_uint256_t_string_memory_ptr__to_t_uint256_t_uint8_t_uint256_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": 16811,
          "id": null,
          "parameterSlots": 5,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint256_t_uint8_t_uint256_t_string_memory_ptr_t_bytes_memory_ptr__to_t_uint256_t_uint8_t_uint256_t_string_memory_ptr_t_bytes_memory_ptr__fromStack_reversed": {
          "entryPoint": 16851,
          "id": null,
          "parameterSlots": 6,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint48__to_t_uint48__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "allocate_memory": {
          "entryPoint": 13684,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "array_allocation_size_array_address_dyn": {
          "entryPoint": 14155,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "array_allocation_size_bytes": {
          "entryPoint": 13732,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "array_dataslot_string_storage": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "checked_add_t_uint256": {
          "entryPoint": 16261,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "checked_div_t_uint256": {
          "entryPoint": 17305,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "checked_mul_t_uint256": {
          "entryPoint": 17260,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "checked_sub_t_uint256": {
          "entryPoint": 16389,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "clean_up_bytearray_end_slots_string_storage": {
          "entryPoint": 16545,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32": {
          "entryPoint": 17339,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
          "entryPoint": 16620,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "copy_memory_to_memory_with_cleanup": {
          "entryPoint": 14056,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "extract_byte_array_length": {
          "entryPoint": 15783,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "extract_used_part_and_set_length_of_short_byte_array": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "increment_t_uint256": {
          "entryPoint": 16921,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "panic_error_0x11": {
          "entryPoint": 16239,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "panic_error_0x12": {
          "entryPoint": 17283,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "panic_error_0x21": {
          "entryPoint": 14761,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "panic_error_0x32": {
          "entryPoint": 16408,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "panic_error_0x41": {
          "entryPoint": 13662,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "validator_revert_address": {
          "entryPoint": 14190,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 0
        }
      },
      "generatedSources": [
        {
          "ast": {
            "nodeType": "YulBlock",
            "src": "0:40134:39",
            "statements": [
              {
                "nodeType": "YulBlock",
                "src": "6:3:39",
                "statements": []
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "83:217:39",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "129:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "138:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "141:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "131:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "131:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "131:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "104:7:39"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "113:9:39"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "100:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "100:23:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "125:2:39",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "96:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "96:32:39"
                      },
                      "nodeType": "YulIf",
                      "src": "93:52:39"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "154:36:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "180:9:39"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "167:12:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "167:23:39"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "158:5:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "254:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "263:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "266:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "256:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "256:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "256:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "212:5:39"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "223:5:39"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "234:3:39",
                                        "type": "",
                                        "value": "224"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "239:10:39",
                                        "type": "",
                                        "value": "0xffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "230:3:39"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "230:20:39"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "219:3:39"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "219:32:39"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "209:2:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "209:43:39"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "202:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "202:51:39"
                      },
                      "nodeType": "YulIf",
                      "src": "199:71:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "279:15:39",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "289:5:39"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "279:6:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_bytes4",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "49:9:39",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "60:7:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "72:6:39",
                    "type": ""
                  }
                ],
                "src": "14:286:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "400:92:39",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "410:26:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "422:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "433:2:39",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "418:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "418:18:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "410:4:39"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "452:9:39"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "477:6:39"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "470:6:39"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "470:14:39"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "463:6:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "463:22:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "445:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "445:41:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "445:41:39"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "369:9:39",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "380:6:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "391:4:39",
                    "type": ""
                  }
                ],
                "src": "305:187:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "598:76:39",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "608:26:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "620:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "631:2:39",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "616:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "616:18:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "608:4:39"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "650:9:39"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "661:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "643:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "643:25:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "643:25:39"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "567:9:39",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "578:6:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "589:4:39",
                    "type": ""
                  }
                ],
                "src": "497:177:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "726:109:39",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "736:29:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "758:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "745:12:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "745:20:39"
                      },
                      "variableNames": [
                        {
                          "name": "value",
                          "nodeType": "YulIdentifier",
                          "src": "736:5:39"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "813:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "822:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "825:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "815:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "815:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "815:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "787:5:39"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "798:5:39"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "805:4:39",
                                    "type": "",
                                    "value": "0xff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "794:3:39"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "794:16:39"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "784:2:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "784:27:39"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "777:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "777:35:39"
                      },
                      "nodeType": "YulIf",
                      "src": "774:55:39"
                    }
                  ]
                },
                "name": "abi_decode_uint8",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "offset",
                    "nodeType": "YulTypedName",
                    "src": "705:6:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "716:5:39",
                    "type": ""
                  }
                ],
                "src": "679:156:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "913:275:39",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "962:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "971:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "974:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "964:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "964:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "964:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "941:6:39"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "949:4:39",
                                    "type": "",
                                    "value": "0x1f"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "937:3:39"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "937:17:39"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "956:3:39"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "933:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "933:27:39"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "926:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "926:35:39"
                      },
                      "nodeType": "YulIf",
                      "src": "923:55:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "987:30:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "1010:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "997:12:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "997:20:39"
                      },
                      "variableNames": [
                        {
                          "name": "length",
                          "nodeType": "YulIdentifier",
                          "src": "987:6:39"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1060:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1069:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1072:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "1062:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1062:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1062:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "1032:6:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1040:18:39",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "1029:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1029:30:39"
                      },
                      "nodeType": "YulIf",
                      "src": "1026:50:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1085:29:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "1101:6:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1109:4:39",
                            "type": "",
                            "value": "0x20"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1097:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1097:17:39"
                      },
                      "variableNames": [
                        {
                          "name": "arrayPos",
                          "nodeType": "YulIdentifier",
                          "src": "1085:8:39"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1166:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1175:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1178:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "1168:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1168:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1168:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "1137:6:39"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "1145:6:39"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1133:3:39"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1133:19:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1154:4:39",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1129:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1129:30:39"
                          },
                          {
                            "name": "end",
                            "nodeType": "YulIdentifier",
                            "src": "1161:3:39"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "1126:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1126:39:39"
                      },
                      "nodeType": "YulIf",
                      "src": "1123:59:39"
                    }
                  ]
                },
                "name": "abi_decode_string_calldata",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "offset",
                    "nodeType": "YulTypedName",
                    "src": "876:6:39",
                    "type": ""
                  },
                  {
                    "name": "end",
                    "nodeType": "YulTypedName",
                    "src": "884:3:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "arrayPos",
                    "nodeType": "YulTypedName",
                    "src": "892:8:39",
                    "type": ""
                  },
                  {
                    "name": "length",
                    "nodeType": "YulTypedName",
                    "src": "902:6:39",
                    "type": ""
                  }
                ],
                "src": "840:348:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1225:95:39",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1242:1:39",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1249:3:39",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1254:10:39",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "1245:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1245:20:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1235:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1235:31:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1235:31:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1282:1:39",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1285:4:39",
                            "type": "",
                            "value": "0x41"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1275:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1275:15:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1275:15:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1306:1:39",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1309:4:39",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "1299:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1299:15:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1299:15:39"
                    }
                  ]
                },
                "name": "panic_error_0x41",
                "nodeType": "YulFunctionDefinition",
                "src": "1193:127:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1370:230:39",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "1380:19:39",
                      "value": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1396:2:39",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "1390:5:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1390:9:39"
                      },
                      "variableNames": [
                        {
                          "name": "memPtr",
                          "nodeType": "YulIdentifier",
                          "src": "1380:6:39"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "1408:58:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "1430:6:39"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "size",
                                    "nodeType": "YulIdentifier",
                                    "src": "1446:4:39"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1452:2:39",
                                    "type": "",
                                    "value": "31"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1442:3:39"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1442:13:39"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1461:2:39",
                                    "type": "",
                                    "value": "31"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "1457:3:39"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1457:7:39"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "1438:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1438:27:39"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1426:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1426:40:39"
                      },
                      "variables": [
                        {
                          "name": "newFreePtr",
                          "nodeType": "YulTypedName",
                          "src": "1412:10:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1541:22:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x41",
                                "nodeType": "YulIdentifier",
                                "src": "1543:16:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1543:18:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1543:18:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "1484:10:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1496:18:39",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1481:2:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1481:34:39"
                          },
                          {
                            "arguments": [
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "1520:10:39"
                              },
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "1532:6:39"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "1517:2:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1517:22:39"
                          }
                        ],
                        "functionName": {
                          "name": "or",
                          "nodeType": "YulIdentifier",
                          "src": "1478:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1478:62:39"
                      },
                      "nodeType": "YulIf",
                      "src": "1475:88:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1579:2:39",
                            "type": "",
                            "value": "64"
                          },
                          {
                            "name": "newFreePtr",
                            "nodeType": "YulIdentifier",
                            "src": "1583:10:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1572:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1572:22:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1572:22:39"
                    }
                  ]
                },
                "name": "allocate_memory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "size",
                    "nodeType": "YulTypedName",
                    "src": "1350:4:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "memPtr",
                    "nodeType": "YulTypedName",
                    "src": "1359:6:39",
                    "type": ""
                  }
                ],
                "src": "1325:275:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1662:129:39",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1706:22:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x41",
                                "nodeType": "YulIdentifier",
                                "src": "1708:16:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1708:18:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1708:18:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "1678:6:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1686:18:39",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "1675:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1675:30:39"
                      },
                      "nodeType": "YulIf",
                      "src": "1672:56:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1737:48:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "1757:6:39"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1765:2:39",
                                    "type": "",
                                    "value": "31"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1753:3:39"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1753:15:39"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1774:2:39",
                                    "type": "",
                                    "value": "31"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "1770:3:39"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1770:7:39"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "1749:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1749:29:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1780:4:39",
                            "type": "",
                            "value": "0x20"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1745:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1745:40:39"
                      },
                      "variableNames": [
                        {
                          "name": "size",
                          "nodeType": "YulIdentifier",
                          "src": "1737:4:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "array_allocation_size_bytes",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "length",
                    "nodeType": "YulTypedName",
                    "src": "1642:6:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "size",
                    "nodeType": "YulTypedName",
                    "src": "1653:4:39",
                    "type": ""
                  }
                ],
                "src": "1605:186:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1870:262:39",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "1880:61:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "1933:6:39"
                              }
                            ],
                            "functionName": {
                              "name": "array_allocation_size_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "1905:27:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1905:35:39"
                          }
                        ],
                        "functionName": {
                          "name": "allocate_memory",
                          "nodeType": "YulIdentifier",
                          "src": "1889:15:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1889:52:39"
                      },
                      "variableNames": [
                        {
                          "name": "array",
                          "nodeType": "YulIdentifier",
                          "src": "1880:5:39"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "array",
                            "nodeType": "YulIdentifier",
                            "src": "1957:5:39"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "1964:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1950:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1950:21:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1950:21:39"
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2009:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2018:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2021:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "2011:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2011:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2011:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "1990:3:39"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "1995:6:39"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1986:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1986:16:39"
                          },
                          {
                            "name": "end",
                            "nodeType": "YulIdentifier",
                            "src": "2004:3:39"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "1983:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1983:25:39"
                      },
                      "nodeType": "YulIf",
                      "src": "1980:45:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "array",
                                "nodeType": "YulIdentifier",
                                "src": "2051:5:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2058:4:39",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2047:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2047:16:39"
                          },
                          {
                            "name": "src",
                            "nodeType": "YulIdentifier",
                            "src": "2065:3:39"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "2070:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "calldatacopy",
                          "nodeType": "YulIdentifier",
                          "src": "2034:12:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2034:43:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2034:43:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "array",
                                    "nodeType": "YulIdentifier",
                                    "src": "2101:5:39"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "2108:6:39"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2097:3:39"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2097:18:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2117:4:39",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2093:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2093:29:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2124:1:39",
                            "type": "",
                            "value": "0"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2086:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2086:40:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2086:40:39"
                    }
                  ]
                },
                "name": "abi_decode_available_length_bytes",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "src",
                    "nodeType": "YulTypedName",
                    "src": "1839:3:39",
                    "type": ""
                  },
                  {
                    "name": "length",
                    "nodeType": "YulTypedName",
                    "src": "1844:6:39",
                    "type": ""
                  },
                  {
                    "name": "end",
                    "nodeType": "YulTypedName",
                    "src": "1852:3:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "array",
                    "nodeType": "YulTypedName",
                    "src": "1860:5:39",
                    "type": ""
                  }
                ],
                "src": "1796:336:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2189:168:39",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2238:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2247:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2250:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "2240:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2240:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2240:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "2217:6:39"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2225:4:39",
                                    "type": "",
                                    "value": "0x1f"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2213:3:39"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2213:17:39"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "2232:3:39"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "2209:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2209:27:39"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "2202:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2202:35:39"
                      },
                      "nodeType": "YulIf",
                      "src": "2199:55:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2263:88:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "2310:6:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2318:4:39",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2306:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2306:17:39"
                          },
                          {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "2338:6:39"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2325:12:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2325:20:39"
                          },
                          {
                            "name": "end",
                            "nodeType": "YulIdentifier",
                            "src": "2347:3:39"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_available_length_bytes",
                          "nodeType": "YulIdentifier",
                          "src": "2272:33:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2272:79:39"
                      },
                      "variableNames": [
                        {
                          "name": "array",
                          "nodeType": "YulIdentifier",
                          "src": "2263:5:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_bytes",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "offset",
                    "nodeType": "YulTypedName",
                    "src": "2163:6:39",
                    "type": ""
                  },
                  {
                    "name": "end",
                    "nodeType": "YulTypedName",
                    "src": "2171:3:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "array",
                    "nodeType": "YulTypedName",
                    "src": "2179:5:39",
                    "type": ""
                  }
                ],
                "src": "2137:220:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2559:781:39",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2606:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2615:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2618:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "2608:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2608:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2608:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "2580:7:39"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2589:9:39"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "2576:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2576:23:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2601:3:39",
                            "type": "",
                            "value": "224"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "2572:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2572:33:39"
                      },
                      "nodeType": "YulIf",
                      "src": "2569:53:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2631:33:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2654:9:39"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "2641:12:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2641:23:39"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "2631:6:39"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2673:46:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2704:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2715:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2700:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2700:18:39"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_uint8",
                          "nodeType": "YulIdentifier",
                          "src": "2683:16:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2683:36:39"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "2673:6:39"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "2728:46:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2759:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2770:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2755:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2755:18:39"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "2742:12:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2742:32:39"
                      },
                      "variables": [
                        {
                          "name": "offset",
                          "nodeType": "YulTypedName",
                          "src": "2732:6:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "2783:28:39",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "2793:18:39",
                        "type": "",
                        "value": "0xffffffffffffffff"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "2787:2:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2838:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2847:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2850:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "2840:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2840:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2840:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "2826:6:39"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "2834:2:39"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "2823:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2823:14:39"
                      },
                      "nodeType": "YulIf",
                      "src": "2820:34:39"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "2863:85:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2920:9:39"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "2931:6:39"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2916:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2916:22:39"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "2940:7:39"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_string_calldata",
                          "nodeType": "YulIdentifier",
                          "src": "2889:26:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2889:59:39"
                      },
                      "variables": [
                        {
                          "name": "value2_1",
                          "nodeType": "YulTypedName",
                          "src": "2867:8:39",
                          "type": ""
                        },
                        {
                          "name": "value3_1",
                          "nodeType": "YulTypedName",
                          "src": "2877:8:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2957:18:39",
                      "value": {
                        "name": "value2_1",
                        "nodeType": "YulIdentifier",
                        "src": "2967:8:39"
                      },
                      "variableNames": [
                        {
                          "name": "value2",
                          "nodeType": "YulIdentifier",
                          "src": "2957:6:39"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2984:18:39",
                      "value": {
                        "name": "value3_1",
                        "nodeType": "YulIdentifier",
                        "src": "2994:8:39"
                      },
                      "variableNames": [
                        {
                          "name": "value3",
                          "nodeType": "YulIdentifier",
                          "src": "2984:6:39"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "3011:48:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3044:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3055:2:39",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3040:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3040:18:39"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "3027:12:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3027:32:39"
                      },
                      "variables": [
                        {
                          "name": "offset_1",
                          "nodeType": "YulTypedName",
                          "src": "3015:8:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "3088:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3097:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3100:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "3090:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3090:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "3090:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "offset_1",
                            "nodeType": "YulIdentifier",
                            "src": "3074:8:39"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "3084:2:39"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "3071:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3071:16:39"
                      },
                      "nodeType": "YulIf",
                      "src": "3068:36:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3113:61:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3144:9:39"
                              },
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "3155:8:39"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3140:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3140:24:39"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "3166:7:39"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_bytes",
                          "nodeType": "YulIdentifier",
                          "src": "3123:16:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3123:51:39"
                      },
                      "variableNames": [
                        {
                          "name": "value4",
                          "nodeType": "YulIdentifier",
                          "src": "3113:6:39"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3183:47:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3214:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3225:3:39",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3210:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3210:19:39"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_uint8",
                          "nodeType": "YulIdentifier",
                          "src": "3193:16:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3193:37:39"
                      },
                      "variableNames": [
                        {
                          "name": "value5",
                          "nodeType": "YulIdentifier",
                          "src": "3183:6:39"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3239:43:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3266:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3277:3:39",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3262:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3262:19:39"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "3249:12:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3249:33:39"
                      },
                      "variableNames": [
                        {
                          "name": "value6",
                          "nodeType": "YulIdentifier",
                          "src": "3239:6:39"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3291:43:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3318:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3329:3:39",
                                "type": "",
                                "value": "192"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3314:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3314:19:39"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "3301:12:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3301:33:39"
                      },
                      "variableNames": [
                        {
                          "name": "value7",
                          "nodeType": "YulIdentifier",
                          "src": "3291:6:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_uint256t_uint8t_string_calldata_ptrt_bytes_memory_ptrt_uint8t_bytes32t_bytes32",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "2469:9:39",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "2480:7:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "2492:6:39",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "2500:6:39",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "2508:6:39",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "2516:6:39",
                    "type": ""
                  },
                  {
                    "name": "value4",
                    "nodeType": "YulTypedName",
                    "src": "2524:6:39",
                    "type": ""
                  },
                  {
                    "name": "value5",
                    "nodeType": "YulTypedName",
                    "src": "2532:6:39",
                    "type": ""
                  },
                  {
                    "name": "value6",
                    "nodeType": "YulTypedName",
                    "src": "2540:6:39",
                    "type": ""
                  },
                  {
                    "name": "value7",
                    "nodeType": "YulTypedName",
                    "src": "2548:6:39",
                    "type": ""
                  }
                ],
                "src": "2362:978:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3415:110:39",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "3461:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3470:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3473:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "3463:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3463:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "3463:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "3436:7:39"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3445:9:39"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "3432:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3432:23:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3457:2:39",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "3428:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3428:32:39"
                      },
                      "nodeType": "YulIf",
                      "src": "3425:52:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3486:33:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3509:9:39"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "3496:12:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3496:23:39"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "3486:6:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "3381:9:39",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "3392:7:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "3404:6:39",
                    "type": ""
                  }
                ],
                "src": "3345:180:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3596:184:39",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "3606:10:39",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "3615:1:39",
                        "type": "",
                        "value": "0"
                      },
                      "variables": [
                        {
                          "name": "i",
                          "nodeType": "YulTypedName",
                          "src": "3610:1:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "3675:63:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "3700:3:39"
                                    },
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "3705:1:39"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "3696:3:39"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3696:11:39"
                                },
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "src",
                                          "nodeType": "YulIdentifier",
                                          "src": "3719:3:39"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "3724:1:39"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "3715:3:39"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3715:11:39"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "3709:5:39"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3709:18:39"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "3689:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3689:39:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "3689:39:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "i",
                            "nodeType": "YulIdentifier",
                            "src": "3636:1:39"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "3639:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "3633:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3633:13:39"
                      },
                      "nodeType": "YulForLoop",
                      "post": {
                        "nodeType": "YulBlock",
                        "src": "3647:19:39",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "3649:15:39",
                            "value": {
                              "arguments": [
                                {
                                  "name": "i",
                                  "nodeType": "YulIdentifier",
                                  "src": "3658:1:39"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3661:2:39",
                                  "type": "",
                                  "value": "32"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "3654:3:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3654:10:39"
                            },
                            "variableNames": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "3649:1:39"
                              }
                            ]
                          }
                        ]
                      },
                      "pre": {
                        "nodeType": "YulBlock",
                        "src": "3629:3:39",
                        "statements": []
                      },
                      "src": "3625:113:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "3758:3:39"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "3763:6:39"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3754:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3754:16:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3772:1:39",
                            "type": "",
                            "value": "0"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3747:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3747:27:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3747:27:39"
                    }
                  ]
                },
                "name": "copy_memory_to_memory_with_cleanup",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "src",
                    "nodeType": "YulTypedName",
                    "src": "3574:3:39",
                    "type": ""
                  },
                  {
                    "name": "dst",
                    "nodeType": "YulTypedName",
                    "src": "3579:3:39",
                    "type": ""
                  },
                  {
                    "name": "length",
                    "nodeType": "YulTypedName",
                    "src": "3584:6:39",
                    "type": ""
                  }
                ],
                "src": "3530:250:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3835:221:39",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "3845:26:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "3865:5:39"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "3859:5:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3859:12:39"
                      },
                      "variables": [
                        {
                          "name": "length",
                          "nodeType": "YulTypedName",
                          "src": "3849:6:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "3887:3:39"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "3892:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3880:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3880:19:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3880:19:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "3947:5:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3954:4:39",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3943:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3943:16:39"
                          },
                          {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "3965:3:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3970:4:39",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3961:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3961:14:39"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "3977:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "copy_memory_to_memory_with_cleanup",
                          "nodeType": "YulIdentifier",
                          "src": "3908:34:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3908:76:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3908:76:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3993:57:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "4008:3:39"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "4021:6:39"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4029:2:39",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4017:3:39"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4017:15:39"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4038:2:39",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "4034:3:39"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4034:7:39"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "4013:3:39"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4013:29:39"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4004:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4004:39:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4045:4:39",
                            "type": "",
                            "value": "0x20"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4000:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4000:50:39"
                      },
                      "variableNames": [
                        {
                          "name": "end",
                          "nodeType": "YulIdentifier",
                          "src": "3993:3:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_string",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "3812:5:39",
                    "type": ""
                  },
                  {
                    "name": "pos",
                    "nodeType": "YulTypedName",
                    "src": "3819:3:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "end",
                    "nodeType": "YulTypedName",
                    "src": "3827:3:39",
                    "type": ""
                  }
                ],
                "src": "3785:271:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4182:99:39",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4199:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4210:2:39",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4192:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4192:21:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4192:21:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4222:53:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "4248:6:39"
                          },
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4260:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4271:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4256:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4256:18:39"
                          }
                        ],
                        "functionName": {
                          "name": "abi_encode_string",
                          "nodeType": "YulIdentifier",
                          "src": "4230:17:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4230:45:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "4222:4:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "4151:9:39",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "4162:6:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "4173:4:39",
                    "type": ""
                  }
                ],
                "src": "4061:220:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4355:114:39",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "4399:22:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x41",
                                "nodeType": "YulIdentifier",
                                "src": "4401:16:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "4401:18:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "4401:18:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "4371:6:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4379:18:39",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "4368:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4368:30:39"
                      },
                      "nodeType": "YulIf",
                      "src": "4365:56:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4430:33:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4446:1:39",
                                "type": "",
                                "value": "5"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "4449:6:39"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "4442:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4442:14:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4458:4:39",
                            "type": "",
                            "value": "0x20"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4438:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4438:25:39"
                      },
                      "variableNames": [
                        {
                          "name": "size",
                          "nodeType": "YulIdentifier",
                          "src": "4430:4:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "array_allocation_size_array_address_dyn",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "length",
                    "nodeType": "YulTypedName",
                    "src": "4335:6:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "size",
                    "nodeType": "YulTypedName",
                    "src": "4346:4:39",
                    "type": ""
                  }
                ],
                "src": "4286:183:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4519:86:39",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "4583:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4592:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4595:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "4585:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "4585:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "4585:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "4542:5:39"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "4553:5:39"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "4568:3:39",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "4573:1:39",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "4564:3:39"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "4564:11:39"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4577:1:39",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "4560:3:39"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4560:19:39"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "4549:3:39"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4549:31:39"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "4539:2:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4539:42:39"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "4532:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4532:50:39"
                      },
                      "nodeType": "YulIf",
                      "src": "4529:70:39"
                    }
                  ]
                },
                "name": "validator_revert_address",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "4508:5:39",
                    "type": ""
                  }
                ],
                "src": "4474:131:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4674:673:39",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "4723:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4732:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4735:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "4725:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "4725:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "4725:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "4702:6:39"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4710:4:39",
                                    "type": "",
                                    "value": "0x1f"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4698:3:39"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4698:17:39"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "4717:3:39"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "4694:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4694:27:39"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "4687:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4687:35:39"
                      },
                      "nodeType": "YulIf",
                      "src": "4684:55:39"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "4748:30:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "4771:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "4758:12:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4758:20:39"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "4752:2:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "4787:14:39",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "4797:4:39",
                        "type": "",
                        "value": "0x20"
                      },
                      "variables": [
                        {
                          "name": "_2",
                          "nodeType": "YulTypedName",
                          "src": "4791:2:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "4810:71:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "4877:2:39"
                              }
                            ],
                            "functionName": {
                              "name": "array_allocation_size_array_address_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "4837:39:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4837:43:39"
                          }
                        ],
                        "functionName": {
                          "name": "allocate_memory",
                          "nodeType": "YulIdentifier",
                          "src": "4821:15:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4821:60:39"
                      },
                      "variables": [
                        {
                          "name": "dst",
                          "nodeType": "YulTypedName",
                          "src": "4814:3:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "4890:16:39",
                      "value": {
                        "name": "dst",
                        "nodeType": "YulIdentifier",
                        "src": "4903:3:39"
                      },
                      "variables": [
                        {
                          "name": "dst_1",
                          "nodeType": "YulTypedName",
                          "src": "4894:5:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "dst",
                            "nodeType": "YulIdentifier",
                            "src": "4922:3:39"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "4927:2:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4915:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4915:15:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4915:15:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4939:19:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "dst",
                            "nodeType": "YulIdentifier",
                            "src": "4950:3:39"
                          },
                          {
                            "name": "_2",
                            "nodeType": "YulIdentifier",
                            "src": "4955:2:39"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4946:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4946:12:39"
                      },
                      "variableNames": [
                        {
                          "name": "dst",
                          "nodeType": "YulIdentifier",
                          "src": "4939:3:39"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "4967:46:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "4989:6:39"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5001:1:39",
                                    "type": "",
                                    "value": "5"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "5004:2:39"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "4997:3:39"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4997:10:39"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4985:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4985:23:39"
                          },
                          {
                            "name": "_2",
                            "nodeType": "YulIdentifier",
                            "src": "5010:2:39"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4981:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4981:32:39"
                      },
                      "variables": [
                        {
                          "name": "srcEnd",
                          "nodeType": "YulTypedName",
                          "src": "4971:6:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "5041:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "5050:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "5053:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "5043:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "5043:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "5043:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "srcEnd",
                            "nodeType": "YulIdentifier",
                            "src": "5028:6:39"
                          },
                          {
                            "name": "end",
                            "nodeType": "YulIdentifier",
                            "src": "5036:3:39"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "5025:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5025:15:39"
                      },
                      "nodeType": "YulIf",
                      "src": "5022:35:39"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "5066:26:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "5081:6:39"
                          },
                          {
                            "name": "_2",
                            "nodeType": "YulIdentifier",
                            "src": "5089:2:39"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "5077:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5077:15:39"
                      },
                      "variables": [
                        {
                          "name": "src",
                          "nodeType": "YulTypedName",
                          "src": "5070:3:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "5157:161:39",
                        "statements": [
                          {
                            "nodeType": "YulVariableDeclaration",
                            "src": "5171:30:39",
                            "value": {
                              "arguments": [
                                {
                                  "name": "src",
                                  "nodeType": "YulIdentifier",
                                  "src": "5197:3:39"
                                }
                              ],
                              "functionName": {
                                "name": "calldataload",
                                "nodeType": "YulIdentifier",
                                "src": "5184:12:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "5184:17:39"
                            },
                            "variables": [
                              {
                                "name": "value",
                                "nodeType": "YulTypedName",
                                "src": "5175:5:39",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "value",
                                  "nodeType": "YulIdentifier",
                                  "src": "5239:5:39"
                                }
                              ],
                              "functionName": {
                                "name": "validator_revert_address",
                                "nodeType": "YulIdentifier",
                                "src": "5214:24:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "5214:31:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "5214:31:39"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "dst",
                                  "nodeType": "YulIdentifier",
                                  "src": "5265:3:39"
                                },
                                {
                                  "name": "value",
                                  "nodeType": "YulIdentifier",
                                  "src": "5270:5:39"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "5258:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "5258:18:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "5258:18:39"
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "5289:19:39",
                            "value": {
                              "arguments": [
                                {
                                  "name": "dst",
                                  "nodeType": "YulIdentifier",
                                  "src": "5300:3:39"
                                },
                                {
                                  "name": "_2",
                                  "nodeType": "YulIdentifier",
                                  "src": "5305:2:39"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "5296:3:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "5296:12:39"
                            },
                            "variableNames": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "5289:3:39"
                              }
                            ]
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "src",
                            "nodeType": "YulIdentifier",
                            "src": "5112:3:39"
                          },
                          {
                            "name": "srcEnd",
                            "nodeType": "YulIdentifier",
                            "src": "5117:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "5109:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5109:15:39"
                      },
                      "nodeType": "YulForLoop",
                      "post": {
                        "nodeType": "YulBlock",
                        "src": "5125:23:39",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "5127:19:39",
                            "value": {
                              "arguments": [
                                {
                                  "name": "src",
                                  "nodeType": "YulIdentifier",
                                  "src": "5138:3:39"
                                },
                                {
                                  "name": "_2",
                                  "nodeType": "YulIdentifier",
                                  "src": "5143:2:39"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "5134:3:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "5134:12:39"
                            },
                            "variableNames": [
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "5127:3:39"
                              }
                            ]
                          }
                        ]
                      },
                      "pre": {
                        "nodeType": "YulBlock",
                        "src": "5105:3:39",
                        "statements": []
                      },
                      "src": "5101:217:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "5327:14:39",
                      "value": {
                        "name": "dst_1",
                        "nodeType": "YulIdentifier",
                        "src": "5336:5:39"
                      },
                      "variableNames": [
                        {
                          "name": "array",
                          "nodeType": "YulIdentifier",
                          "src": "5327:5:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_array_address_dyn",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "offset",
                    "nodeType": "YulTypedName",
                    "src": "4648:6:39",
                    "type": ""
                  },
                  {
                    "name": "end",
                    "nodeType": "YulTypedName",
                    "src": "4656:3:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "array",
                    "nodeType": "YulTypedName",
                    "src": "4664:5:39",
                    "type": ""
                  }
                ],
                "src": "4610:737:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "5416:598:39",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "5465:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "5474:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "5477:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "5467:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "5467:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "5467:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "5444:6:39"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5452:4:39",
                                    "type": "",
                                    "value": "0x1f"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5440:3:39"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5440:17:39"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "5459:3:39"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "5436:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5436:27:39"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "5429:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5429:35:39"
                      },
                      "nodeType": "YulIf",
                      "src": "5426:55:39"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "5490:30:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "5513:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "5500:12:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5500:20:39"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "5494:2:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "5529:14:39",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "5539:4:39",
                        "type": "",
                        "value": "0x20"
                      },
                      "variables": [
                        {
                          "name": "_2",
                          "nodeType": "YulTypedName",
                          "src": "5533:2:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "5552:71:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "5619:2:39"
                              }
                            ],
                            "functionName": {
                              "name": "array_allocation_size_array_address_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "5579:39:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5579:43:39"
                          }
                        ],
                        "functionName": {
                          "name": "allocate_memory",
                          "nodeType": "YulIdentifier",
                          "src": "5563:15:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5563:60:39"
                      },
                      "variables": [
                        {
                          "name": "dst",
                          "nodeType": "YulTypedName",
                          "src": "5556:3:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "5632:16:39",
                      "value": {
                        "name": "dst",
                        "nodeType": "YulIdentifier",
                        "src": "5645:3:39"
                      },
                      "variables": [
                        {
                          "name": "dst_1",
                          "nodeType": "YulTypedName",
                          "src": "5636:5:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "dst",
                            "nodeType": "YulIdentifier",
                            "src": "5664:3:39"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "5669:2:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5657:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5657:15:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5657:15:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "5681:19:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "dst",
                            "nodeType": "YulIdentifier",
                            "src": "5692:3:39"
                          },
                          {
                            "name": "_2",
                            "nodeType": "YulIdentifier",
                            "src": "5697:2:39"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "5688:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5688:12:39"
                      },
                      "variableNames": [
                        {
                          "name": "dst",
                          "nodeType": "YulIdentifier",
                          "src": "5681:3:39"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "5709:46:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "5731:6:39"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5743:1:39",
                                    "type": "",
                                    "value": "5"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "5746:2:39"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "5739:3:39"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5739:10:39"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5727:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5727:23:39"
                          },
                          {
                            "name": "_2",
                            "nodeType": "YulIdentifier",
                            "src": "5752:2:39"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "5723:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5723:32:39"
                      },
                      "variables": [
                        {
                          "name": "srcEnd",
                          "nodeType": "YulTypedName",
                          "src": "5713:6:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "5783:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "5792:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "5795:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "5785:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "5785:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "5785:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "srcEnd",
                            "nodeType": "YulIdentifier",
                            "src": "5770:6:39"
                          },
                          {
                            "name": "end",
                            "nodeType": "YulIdentifier",
                            "src": "5778:3:39"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "5767:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5767:15:39"
                      },
                      "nodeType": "YulIf",
                      "src": "5764:35:39"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "5808:26:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "5823:6:39"
                          },
                          {
                            "name": "_2",
                            "nodeType": "YulIdentifier",
                            "src": "5831:2:39"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "5819:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5819:15:39"
                      },
                      "variables": [
                        {
                          "name": "src",
                          "nodeType": "YulTypedName",
                          "src": "5812:3:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "5899:86:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "dst",
                                  "nodeType": "YulIdentifier",
                                  "src": "5920:3:39"
                                },
                                {
                                  "arguments": [
                                    {
                                      "name": "src",
                                      "nodeType": "YulIdentifier",
                                      "src": "5938:3:39"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "calldataload",
                                    "nodeType": "YulIdentifier",
                                    "src": "5925:12:39"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5925:17:39"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "5913:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "5913:30:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "5913:30:39"
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "5956:19:39",
                            "value": {
                              "arguments": [
                                {
                                  "name": "dst",
                                  "nodeType": "YulIdentifier",
                                  "src": "5967:3:39"
                                },
                                {
                                  "name": "_2",
                                  "nodeType": "YulIdentifier",
                                  "src": "5972:2:39"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "5963:3:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "5963:12:39"
                            },
                            "variableNames": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "5956:3:39"
                              }
                            ]
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "src",
                            "nodeType": "YulIdentifier",
                            "src": "5854:3:39"
                          },
                          {
                            "name": "srcEnd",
                            "nodeType": "YulIdentifier",
                            "src": "5859:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "5851:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5851:15:39"
                      },
                      "nodeType": "YulForLoop",
                      "post": {
                        "nodeType": "YulBlock",
                        "src": "5867:23:39",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "5869:19:39",
                            "value": {
                              "arguments": [
                                {
                                  "name": "src",
                                  "nodeType": "YulIdentifier",
                                  "src": "5880:3:39"
                                },
                                {
                                  "name": "_2",
                                  "nodeType": "YulIdentifier",
                                  "src": "5885:2:39"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "5876:3:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "5876:12:39"
                            },
                            "variableNames": [
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "5869:3:39"
                              }
                            ]
                          }
                        ]
                      },
                      "pre": {
                        "nodeType": "YulBlock",
                        "src": "5847:3:39",
                        "statements": []
                      },
                      "src": "5843:142:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "5994:14:39",
                      "value": {
                        "name": "dst_1",
                        "nodeType": "YulIdentifier",
                        "src": "6003:5:39"
                      },
                      "variableNames": [
                        {
                          "name": "array",
                          "nodeType": "YulIdentifier",
                          "src": "5994:5:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_array_uint256_dyn",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "offset",
                    "nodeType": "YulTypedName",
                    "src": "5390:6:39",
                    "type": ""
                  },
                  {
                    "name": "end",
                    "nodeType": "YulTypedName",
                    "src": "5398:3:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "array",
                    "nodeType": "YulTypedName",
                    "src": "5406:5:39",
                    "type": ""
                  }
                ],
                "src": "5352:662:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "6081:824:39",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "6130:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6139:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6142:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "6132:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "6132:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "6132:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "6109:6:39"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6117:4:39",
                                    "type": "",
                                    "value": "0x1f"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6105:3:39"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6105:17:39"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "6124:3:39"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "6101:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6101:27:39"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "6094:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6094:35:39"
                      },
                      "nodeType": "YulIf",
                      "src": "6091:55:39"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "6155:30:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "6178:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "6165:12:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6165:20:39"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "6159:2:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "6194:14:39",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "6204:4:39",
                        "type": "",
                        "value": "0x20"
                      },
                      "variables": [
                        {
                          "name": "_2",
                          "nodeType": "YulTypedName",
                          "src": "6198:2:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "6217:71:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "6284:2:39"
                              }
                            ],
                            "functionName": {
                              "name": "array_allocation_size_array_address_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "6244:39:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6244:43:39"
                          }
                        ],
                        "functionName": {
                          "name": "allocate_memory",
                          "nodeType": "YulIdentifier",
                          "src": "6228:15:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6228:60:39"
                      },
                      "variables": [
                        {
                          "name": "dst",
                          "nodeType": "YulTypedName",
                          "src": "6221:3:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "6297:16:39",
                      "value": {
                        "name": "dst",
                        "nodeType": "YulIdentifier",
                        "src": "6310:3:39"
                      },
                      "variables": [
                        {
                          "name": "dst_1",
                          "nodeType": "YulTypedName",
                          "src": "6301:5:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "dst",
                            "nodeType": "YulIdentifier",
                            "src": "6329:3:39"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "6334:2:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6322:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6322:15:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6322:15:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "6346:19:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "dst",
                            "nodeType": "YulIdentifier",
                            "src": "6357:3:39"
                          },
                          {
                            "name": "_2",
                            "nodeType": "YulIdentifier",
                            "src": "6362:2:39"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "6353:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6353:12:39"
                      },
                      "variableNames": [
                        {
                          "name": "dst",
                          "nodeType": "YulIdentifier",
                          "src": "6346:3:39"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "6374:46:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "6396:6:39"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6408:1:39",
                                    "type": "",
                                    "value": "5"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "6411:2:39"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "6404:3:39"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6404:10:39"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6392:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6392:23:39"
                          },
                          {
                            "name": "_2",
                            "nodeType": "YulIdentifier",
                            "src": "6417:2:39"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "6388:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6388:32:39"
                      },
                      "variables": [
                        {
                          "name": "srcEnd",
                          "nodeType": "YulTypedName",
                          "src": "6378:6:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "6448:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6457:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6460:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "6450:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "6450:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "6450:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "srcEnd",
                            "nodeType": "YulIdentifier",
                            "src": "6435:6:39"
                          },
                          {
                            "name": "end",
                            "nodeType": "YulIdentifier",
                            "src": "6443:3:39"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "6432:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6432:15:39"
                      },
                      "nodeType": "YulIf",
                      "src": "6429:35:39"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "6473:26:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "6488:6:39"
                          },
                          {
                            "name": "_2",
                            "nodeType": "YulIdentifier",
                            "src": "6496:2:39"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "6484:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6484:15:39"
                      },
                      "variables": [
                        {
                          "name": "src",
                          "nodeType": "YulTypedName",
                          "src": "6477:3:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "6564:312:39",
                        "statements": [
                          {
                            "nodeType": "YulVariableDeclaration",
                            "src": "6578:36:39",
                            "value": {
                              "arguments": [
                                {
                                  "name": "src",
                                  "nodeType": "YulIdentifier",
                                  "src": "6610:3:39"
                                }
                              ],
                              "functionName": {
                                "name": "calldataload",
                                "nodeType": "YulIdentifier",
                                "src": "6597:12:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "6597:17:39"
                            },
                            "variables": [
                              {
                                "name": "innerOffset",
                                "nodeType": "YulTypedName",
                                "src": "6582:11:39",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "body": {
                              "nodeType": "YulBlock",
                              "src": "6678:74:39",
                              "statements": [
                                {
                                  "nodeType": "YulVariableDeclaration",
                                  "src": "6696:11:39",
                                  "value": {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6706:1:39",
                                    "type": "",
                                    "value": "0"
                                  },
                                  "variables": [
                                    {
                                      "name": "_3",
                                      "nodeType": "YulTypedName",
                                      "src": "6700:2:39",
                                      "type": ""
                                    }
                                  ]
                                },
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "name": "_3",
                                        "nodeType": "YulIdentifier",
                                        "src": "6731:2:39"
                                      },
                                      {
                                        "name": "_3",
                                        "nodeType": "YulIdentifier",
                                        "src": "6735:2:39"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "revert",
                                      "nodeType": "YulIdentifier",
                                      "src": "6724:6:39"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6724:14:39"
                                  },
                                  "nodeType": "YulExpressionStatement",
                                  "src": "6724:14:39"
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "name": "innerOffset",
                                  "nodeType": "YulIdentifier",
                                  "src": "6633:11:39"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6646:18:39",
                                  "type": "",
                                  "value": "0xffffffffffffffff"
                                }
                              ],
                              "functionName": {
                                "name": "gt",
                                "nodeType": "YulIdentifier",
                                "src": "6630:2:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "6630:35:39"
                            },
                            "nodeType": "YulIf",
                            "src": "6627:125:39"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "dst",
                                  "nodeType": "YulIdentifier",
                                  "src": "6772:3:39"
                                },
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "offset",
                                              "nodeType": "YulIdentifier",
                                              "src": "6802:6:39"
                                            },
                                            {
                                              "name": "innerOffset",
                                              "nodeType": "YulIdentifier",
                                              "src": "6810:11:39"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "6798:3:39"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "6798:24:39"
                                        },
                                        {
                                          "name": "_2",
                                          "nodeType": "YulIdentifier",
                                          "src": "6824:2:39"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "6794:3:39"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "6794:33:39"
                                    },
                                    {
                                      "name": "end",
                                      "nodeType": "YulIdentifier",
                                      "src": "6829:3:39"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "abi_decode_bytes",
                                    "nodeType": "YulIdentifier",
                                    "src": "6777:16:39"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6777:56:39"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "6765:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "6765:69:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "6765:69:39"
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "6847:19:39",
                            "value": {
                              "arguments": [
                                {
                                  "name": "dst",
                                  "nodeType": "YulIdentifier",
                                  "src": "6858:3:39"
                                },
                                {
                                  "name": "_2",
                                  "nodeType": "YulIdentifier",
                                  "src": "6863:2:39"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "6854:3:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "6854:12:39"
                            },
                            "variableNames": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "6847:3:39"
                              }
                            ]
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "src",
                            "nodeType": "YulIdentifier",
                            "src": "6519:3:39"
                          },
                          {
                            "name": "srcEnd",
                            "nodeType": "YulIdentifier",
                            "src": "6524:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "6516:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6516:15:39"
                      },
                      "nodeType": "YulForLoop",
                      "post": {
                        "nodeType": "YulBlock",
                        "src": "6532:23:39",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "6534:19:39",
                            "value": {
                              "arguments": [
                                {
                                  "name": "src",
                                  "nodeType": "YulIdentifier",
                                  "src": "6545:3:39"
                                },
                                {
                                  "name": "_2",
                                  "nodeType": "YulIdentifier",
                                  "src": "6550:2:39"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "6541:3:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "6541:12:39"
                            },
                            "variableNames": [
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "6534:3:39"
                              }
                            ]
                          }
                        ]
                      },
                      "pre": {
                        "nodeType": "YulBlock",
                        "src": "6512:3:39",
                        "statements": []
                      },
                      "src": "6508:368:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "6885:14:39",
                      "value": {
                        "name": "dst_1",
                        "nodeType": "YulIdentifier",
                        "src": "6894:5:39"
                      },
                      "variableNames": [
                        {
                          "name": "array",
                          "nodeType": "YulIdentifier",
                          "src": "6885:5:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_array_bytes_dyn",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "offset",
                    "nodeType": "YulTypedName",
                    "src": "6055:6:39",
                    "type": ""
                  },
                  {
                    "name": "end",
                    "nodeType": "YulTypedName",
                    "src": "6063:3:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "array",
                    "nodeType": "YulTypedName",
                    "src": "6071:5:39",
                    "type": ""
                  }
                ],
                "src": "6019:886:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "7115:692:39",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "7162:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "7171:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "7174:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "7164:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "7164:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "7164:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "7136:7:39"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7145:9:39"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "7132:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7132:23:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7157:3:39",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "7128:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7128:33:39"
                      },
                      "nodeType": "YulIf",
                      "src": "7125:53:39"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "7187:37:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7214:9:39"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "7201:12:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7201:23:39"
                      },
                      "variables": [
                        {
                          "name": "offset",
                          "nodeType": "YulTypedName",
                          "src": "7191:6:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "7233:28:39",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "7243:18:39",
                        "type": "",
                        "value": "0xffffffffffffffff"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "7237:2:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "7288:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "7297:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "7300:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "7290:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "7290:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "7290:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "7276:6:39"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "7284:2:39"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "7273:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7273:14:39"
                      },
                      "nodeType": "YulIf",
                      "src": "7270:34:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "7313:71:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7356:9:39"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "7367:6:39"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7352:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7352:22:39"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "7376:7:39"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_array_address_dyn",
                          "nodeType": "YulIdentifier",
                          "src": "7323:28:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7323:61:39"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "7313:6:39"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "7393:48:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7426:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7437:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7422:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7422:18:39"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "7409:12:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7409:32:39"
                      },
                      "variables": [
                        {
                          "name": "offset_1",
                          "nodeType": "YulTypedName",
                          "src": "7397:8:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "7470:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "7479:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "7482:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "7472:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "7472:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "7472:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "offset_1",
                            "nodeType": "YulIdentifier",
                            "src": "7456:8:39"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "7466:2:39"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "7453:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7453:16:39"
                      },
                      "nodeType": "YulIf",
                      "src": "7450:36:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "7495:73:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7538:9:39"
                              },
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "7549:8:39"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7534:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7534:24:39"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "7560:7:39"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_array_uint256_dyn",
                          "nodeType": "YulIdentifier",
                          "src": "7505:28:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7505:63:39"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "7495:6:39"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "7577:48:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7610:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7621:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7606:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7606:18:39"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "7593:12:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7593:32:39"
                      },
                      "variables": [
                        {
                          "name": "offset_2",
                          "nodeType": "YulTypedName",
                          "src": "7581:8:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "7654:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "7663:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "7666:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "7656:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "7656:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "7656:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "offset_2",
                            "nodeType": "YulIdentifier",
                            "src": "7640:8:39"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "7650:2:39"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "7637:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7637:16:39"
                      },
                      "nodeType": "YulIf",
                      "src": "7634:36:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "7679:71:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7720:9:39"
                              },
                              {
                                "name": "offset_2",
                                "nodeType": "YulIdentifier",
                                "src": "7731:8:39"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7716:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7716:24:39"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "7742:7:39"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_array_bytes_dyn",
                          "nodeType": "YulIdentifier",
                          "src": "7689:26:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7689:61:39"
                      },
                      "variableNames": [
                        {
                          "name": "value2",
                          "nodeType": "YulIdentifier",
                          "src": "7679:6:39"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "7759:42:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7786:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7797:2:39",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7782:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7782:18:39"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "7769:12:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7769:32:39"
                      },
                      "variableNames": [
                        {
                          "name": "value3",
                          "nodeType": "YulIdentifier",
                          "src": "7759:6:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_array$_t_bytes_memory_ptr_$dyn_memory_ptrt_bytes32",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "7057:9:39",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "7068:7:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "7080:6:39",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "7088:6:39",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "7096:6:39",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "7104:6:39",
                    "type": ""
                  }
                ],
                "src": "6910:897:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "7913:76:39",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "7923:26:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7935:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7946:2:39",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "7931:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7931:18:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "7923:4:39"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7965:9:39"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "7976:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7958:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7958:25:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7958:25:39"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "7882:9:39",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "7893:6:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "7904:4:39",
                    "type": ""
                  }
                ],
                "src": "7812:177:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "8128:324:39",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "8175:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8184:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8187:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "8177:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "8177:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "8177:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "8149:7:39"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8158:9:39"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "8145:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8145:23:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8170:3:39",
                            "type": "",
                            "value": "160"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "8141:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8141:33:39"
                      },
                      "nodeType": "YulIf",
                      "src": "8138:53:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "8200:33:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "8223:9:39"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "8210:12:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8210:23:39"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "8200:6:39"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "8242:46:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8273:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8284:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8269:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8269:18:39"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_uint8",
                          "nodeType": "YulIdentifier",
                          "src": "8252:16:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8252:36:39"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "8242:6:39"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "8297:46:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8328:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8339:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8324:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8324:18:39"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_uint8",
                          "nodeType": "YulIdentifier",
                          "src": "8307:16:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8307:36:39"
                      },
                      "variableNames": [
                        {
                          "name": "value2",
                          "nodeType": "YulIdentifier",
                          "src": "8297:6:39"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "8352:42:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8379:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8390:2:39",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8375:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8375:18:39"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "8362:12:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8362:32:39"
                      },
                      "variableNames": [
                        {
                          "name": "value3",
                          "nodeType": "YulIdentifier",
                          "src": "8352:6:39"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "8403:43:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8430:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8441:3:39",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8426:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8426:19:39"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "8413:12:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8413:33:39"
                      },
                      "variableNames": [
                        {
                          "name": "value4",
                          "nodeType": "YulIdentifier",
                          "src": "8403:6:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_uint256t_uint8t_uint8t_bytes32t_bytes32",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "8062:9:39",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "8073:7:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "8085:6:39",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "8093:6:39",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "8101:6:39",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "8109:6:39",
                    "type": ""
                  },
                  {
                    "name": "value4",
                    "nodeType": "YulTypedName",
                    "src": "8117:6:39",
                    "type": ""
                  }
                ],
                "src": "7994:458:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "8489:95:39",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8506:1:39",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8513:3:39",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8518:10:39",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "8509:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8509:20:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "8499:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8499:31:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8499:31:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8546:1:39",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8549:4:39",
                            "type": "",
                            "value": "0x21"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "8539:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8539:15:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8539:15:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8570:1:39",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8573:4:39",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "8563:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8563:15:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8563:15:39"
                    }
                  ]
                },
                "name": "panic_error_0x21",
                "nodeType": "YulFunctionDefinition",
                "src": "8457:127:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "8706:229:39",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "8716:26:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "8728:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8739:2:39",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "8724:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8724:18:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "8716:4:39"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "8784:111:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8805:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8812:3:39",
                                      "type": "",
                                      "value": "224"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8817:10:39",
                                      "type": "",
                                      "value": "0x4e487b71"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shl",
                                    "nodeType": "YulIdentifier",
                                    "src": "8808:3:39"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8808:20:39"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "8798:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "8798:31:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "8798:31:39"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8849:1:39",
                                  "type": "",
                                  "value": "4"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8852:4:39",
                                  "type": "",
                                  "value": "0x21"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "8842:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "8842:15:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "8842:15:39"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8877:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8880:4:39",
                                  "type": "",
                                  "value": "0x24"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "8870:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "8870:15:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "8870:15:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "8764:6:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8772:1:39",
                                "type": "",
                                "value": "8"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "8761:2:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8761:13:39"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "8754:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8754:21:39"
                      },
                      "nodeType": "YulIf",
                      "src": "8751:144:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "8911:9:39"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "8922:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "8904:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8904:25:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8904:25:39"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_enum$_ProposalState_$3447__to_t_uint8__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "8675:9:39",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "8686:6:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "8697:4:39",
                    "type": ""
                  }
                ],
                "src": "8589:346:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "9027:228:39",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "9073:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "9082:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "9085:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "9075:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "9075:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "9075:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "9048:7:39"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9057:9:39"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "9044:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9044:23:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9069:2:39",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "9040:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9040:32:39"
                      },
                      "nodeType": "YulIf",
                      "src": "9037:52:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "9098:33:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "9121:9:39"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "9108:12:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9108:23:39"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "9098:6:39"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "9140:45:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9170:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9181:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9166:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9166:18:39"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "9153:12:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9153:32:39"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "9144:5:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "9219:5:39"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_address",
                          "nodeType": "YulIdentifier",
                          "src": "9194:24:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9194:31:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9194:31:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "9234:15:39",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "9244:5:39"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "9234:6:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_uint256t_address",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "8985:9:39",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "8996:7:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "9008:6:39",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "9016:6:39",
                    "type": ""
                  }
                ],
                "src": "8940:315:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "9417:162:39",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "9427:26:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "9439:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9450:2:39",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "9435:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9435:18:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "9427:4:39"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "9469:9:39"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "9480:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9462:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9462:25:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9462:25:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9507:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9518:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9503:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9503:18:39"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "9523:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9496:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9496:34:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9496:34:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9550:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9561:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9546:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9546:18:39"
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulIdentifier",
                            "src": "9566:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9539:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9539:34:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9539:34:39"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "9370:9:39",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "9381:6:39",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "9389:6:39",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "9397:6:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "9408:4:39",
                    "type": ""
                  }
                ],
                "src": "9260:319:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "9669:165:39",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "9715:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "9724:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "9727:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "9717:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "9717:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "9717:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "9690:7:39"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9699:9:39"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "9686:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9686:23:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9711:2:39",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "9682:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9682:32:39"
                      },
                      "nodeType": "YulIf",
                      "src": "9679:52:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "9740:33:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "9763:9:39"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "9750:12:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9750:23:39"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "9740:6:39"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "9782:46:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9813:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9824:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9809:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9809:18:39"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_uint8",
                          "nodeType": "YulIdentifier",
                          "src": "9792:16:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9792:36:39"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "9782:6:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_uint256t_uint8",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "9627:9:39",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "9638:7:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "9650:6:39",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "9658:6:39",
                    "type": ""
                  }
                ],
                "src": "9584:250:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "9987:621:39",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "10034:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "10043:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "10046:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "10036:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "10036:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "10036:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "10008:7:39"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10017:9:39"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "10004:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10004:23:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10029:3:39",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "10000:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10000:33:39"
                      },
                      "nodeType": "YulIf",
                      "src": "9997:53:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "10059:33:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "10082:9:39"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "10069:12:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10069:23:39"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "10059:6:39"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "10101:46:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10132:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10143:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10128:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10128:18:39"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_uint8",
                          "nodeType": "YulIdentifier",
                          "src": "10111:16:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10111:36:39"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "10101:6:39"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "10156:46:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10187:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10198:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10183:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10183:18:39"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "10170:12:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10170:32:39"
                      },
                      "variables": [
                        {
                          "name": "offset",
                          "nodeType": "YulTypedName",
                          "src": "10160:6:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "10211:28:39",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "10221:18:39",
                        "type": "",
                        "value": "0xffffffffffffffff"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "10215:2:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "10266:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "10275:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "10278:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "10268:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "10268:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "10268:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "10254:6:39"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "10262:2:39"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "10251:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10251:14:39"
                      },
                      "nodeType": "YulIf",
                      "src": "10248:34:39"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "10291:85:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10348:9:39"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "10359:6:39"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10344:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10344:22:39"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "10368:7:39"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_string_calldata",
                          "nodeType": "YulIdentifier",
                          "src": "10317:26:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10317:59:39"
                      },
                      "variables": [
                        {
                          "name": "value2_1",
                          "nodeType": "YulTypedName",
                          "src": "10295:8:39",
                          "type": ""
                        },
                        {
                          "name": "value3_1",
                          "nodeType": "YulTypedName",
                          "src": "10305:8:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "10385:18:39",
                      "value": {
                        "name": "value2_1",
                        "nodeType": "YulIdentifier",
                        "src": "10395:8:39"
                      },
                      "variableNames": [
                        {
                          "name": "value2",
                          "nodeType": "YulIdentifier",
                          "src": "10385:6:39"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "10412:18:39",
                      "value": {
                        "name": "value3_1",
                        "nodeType": "YulIdentifier",
                        "src": "10422:8:39"
                      },
                      "variableNames": [
                        {
                          "name": "value3",
                          "nodeType": "YulIdentifier",
                          "src": "10412:6:39"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "10439:48:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10472:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10483:2:39",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10468:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10468:18:39"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "10455:12:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10455:32:39"
                      },
                      "variables": [
                        {
                          "name": "offset_1",
                          "nodeType": "YulTypedName",
                          "src": "10443:8:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "10516:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "10525:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "10528:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "10518:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "10518:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "10518:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "offset_1",
                            "nodeType": "YulIdentifier",
                            "src": "10502:8:39"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "10512:2:39"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "10499:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10499:16:39"
                      },
                      "nodeType": "YulIf",
                      "src": "10496:36:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "10541:61:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10572:9:39"
                              },
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "10583:8:39"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10568:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10568:24:39"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "10594:7:39"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_bytes",
                          "nodeType": "YulIdentifier",
                          "src": "10551:16:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10551:51:39"
                      },
                      "variableNames": [
                        {
                          "name": "value4",
                          "nodeType": "YulIdentifier",
                          "src": "10541:6:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_uint256t_uint8t_string_calldata_ptrt_bytes_memory_ptr",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "9921:9:39",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "9932:7:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "9944:6:39",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "9952:6:39",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "9960:6:39",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "9968:6:39",
                    "type": ""
                  },
                  {
                    "name": "value4",
                    "nodeType": "YulTypedName",
                    "src": "9976:6:39",
                    "type": ""
                  }
                ],
                "src": "9839:769:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "10735:427:39",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "10781:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "10790:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "10793:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "10783:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "10783:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "10783:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "10756:7:39"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10765:9:39"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "10752:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10752:23:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10777:2:39",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "10748:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10748:32:39"
                      },
                      "nodeType": "YulIf",
                      "src": "10745:52:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "10806:33:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "10829:9:39"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "10816:12:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10816:23:39"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "10806:6:39"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "10848:46:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10879:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10890:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10875:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10875:18:39"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_uint8",
                          "nodeType": "YulIdentifier",
                          "src": "10858:16:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10858:36:39"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "10848:6:39"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "10903:46:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10934:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10945:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10930:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10930:18:39"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "10917:12:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10917:32:39"
                      },
                      "variables": [
                        {
                          "name": "offset",
                          "nodeType": "YulTypedName",
                          "src": "10907:6:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "10992:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "11001:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "11004:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "10994:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "10994:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "10994:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "10964:6:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10972:18:39",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "10961:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10961:30:39"
                      },
                      "nodeType": "YulIf",
                      "src": "10958:50:39"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "11017:85:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11074:9:39"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "11085:6:39"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11070:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11070:22:39"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "11094:7:39"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_string_calldata",
                          "nodeType": "YulIdentifier",
                          "src": "11043:26:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11043:59:39"
                      },
                      "variables": [
                        {
                          "name": "value2_1",
                          "nodeType": "YulTypedName",
                          "src": "11021:8:39",
                          "type": ""
                        },
                        {
                          "name": "value3_1",
                          "nodeType": "YulTypedName",
                          "src": "11031:8:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "11111:18:39",
                      "value": {
                        "name": "value2_1",
                        "nodeType": "YulIdentifier",
                        "src": "11121:8:39"
                      },
                      "variableNames": [
                        {
                          "name": "value2",
                          "nodeType": "YulIdentifier",
                          "src": "11111:6:39"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "11138:18:39",
                      "value": {
                        "name": "value3_1",
                        "nodeType": "YulIdentifier",
                        "src": "11148:8:39"
                      },
                      "variableNames": [
                        {
                          "name": "value3",
                          "nodeType": "YulIdentifier",
                          "src": "11138:6:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_uint256t_uint8t_string_calldata_ptr",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "10677:9:39",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "10688:7:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "10700:6:39",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "10708:6:39",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "10716:6:39",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "10724:6:39",
                    "type": ""
                  }
                ],
                "src": "10613:549:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "11382:942:39",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "11429:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "11438:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "11441:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "11431:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "11431:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "11431:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "11403:7:39"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11412:9:39"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "11399:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11399:23:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11424:3:39",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "11395:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11395:33:39"
                      },
                      "nodeType": "YulIf",
                      "src": "11392:53:39"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "11454:37:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "11481:9:39"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "11468:12:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11468:23:39"
                      },
                      "variables": [
                        {
                          "name": "offset",
                          "nodeType": "YulTypedName",
                          "src": "11458:6:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "11500:28:39",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "11510:18:39",
                        "type": "",
                        "value": "0xffffffffffffffff"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "11504:2:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "11555:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "11564:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "11567:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "11557:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "11557:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "11557:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "11543:6:39"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "11551:2:39"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "11540:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11540:14:39"
                      },
                      "nodeType": "YulIf",
                      "src": "11537:34:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "11580:71:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11623:9:39"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "11634:6:39"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11619:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11619:22:39"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "11643:7:39"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_array_address_dyn",
                          "nodeType": "YulIdentifier",
                          "src": "11590:28:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11590:61:39"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "11580:6:39"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "11660:48:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11693:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11704:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11689:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11689:18:39"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "11676:12:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11676:32:39"
                      },
                      "variables": [
                        {
                          "name": "offset_1",
                          "nodeType": "YulTypedName",
                          "src": "11664:8:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "11737:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "11746:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "11749:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "11739:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "11739:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "11739:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "offset_1",
                            "nodeType": "YulIdentifier",
                            "src": "11723:8:39"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "11733:2:39"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "11720:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11720:16:39"
                      },
                      "nodeType": "YulIf",
                      "src": "11717:36:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "11762:73:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11805:9:39"
                              },
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "11816:8:39"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11801:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11801:24:39"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "11827:7:39"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_array_uint256_dyn",
                          "nodeType": "YulIdentifier",
                          "src": "11772:28:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11772:63:39"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "11762:6:39"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "11844:48:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11877:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11888:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11873:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11873:18:39"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "11860:12:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11860:32:39"
                      },
                      "variables": [
                        {
                          "name": "offset_2",
                          "nodeType": "YulTypedName",
                          "src": "11848:8:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "11921:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "11930:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "11933:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "11923:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "11923:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "11923:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "offset_2",
                            "nodeType": "YulIdentifier",
                            "src": "11907:8:39"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "11917:2:39"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "11904:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11904:16:39"
                      },
                      "nodeType": "YulIf",
                      "src": "11901:36:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "11946:71:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11987:9:39"
                              },
                              {
                                "name": "offset_2",
                                "nodeType": "YulIdentifier",
                                "src": "11998:8:39"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11983:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11983:24:39"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "12009:7:39"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_array_bytes_dyn",
                          "nodeType": "YulIdentifier",
                          "src": "11956:26:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11956:61:39"
                      },
                      "variableNames": [
                        {
                          "name": "value2",
                          "nodeType": "YulIdentifier",
                          "src": "11946:6:39"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "12026:48:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12059:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12070:2:39",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12055:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12055:18:39"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "12042:12:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12042:32:39"
                      },
                      "variables": [
                        {
                          "name": "offset_3",
                          "nodeType": "YulTypedName",
                          "src": "12030:8:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "12103:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "12112:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "12115:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "12105:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "12105:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "12105:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "offset_3",
                            "nodeType": "YulIdentifier",
                            "src": "12089:8:39"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "12099:2:39"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "12086:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12086:16:39"
                      },
                      "nodeType": "YulIf",
                      "src": "12083:36:39"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "12128:34:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "12142:9:39"
                          },
                          {
                            "name": "offset_3",
                            "nodeType": "YulIdentifier",
                            "src": "12153:8:39"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "12138:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12138:24:39"
                      },
                      "variables": [
                        {
                          "name": "_2",
                          "nodeType": "YulTypedName",
                          "src": "12132:2:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "12210:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "12219:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "12222:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "12212:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "12212:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "12212:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "12189:2:39"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12193:4:39",
                                    "type": "",
                                    "value": "0x1f"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12185:3:39"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12185:13:39"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "12200:7:39"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "12181:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12181:27:39"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "12174:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12174:35:39"
                      },
                      "nodeType": "YulIf",
                      "src": "12171:55:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "12235:83:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "12283:2:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12287:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12279:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12279:11:39"
                          },
                          {
                            "arguments": [
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "12305:2:39"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "12292:12:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12292:16:39"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "12310:7:39"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_available_length_bytes",
                          "nodeType": "YulIdentifier",
                          "src": "12245:33:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12245:73:39"
                      },
                      "variableNames": [
                        {
                          "name": "value3",
                          "nodeType": "YulIdentifier",
                          "src": "12235:6:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_array$_t_bytes_memory_ptr_$dyn_memory_ptrt_string_memory_ptr",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "11324:9:39",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "11335:7:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "11347:6:39",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "11355:6:39",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "11363:6:39",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "11371:6:39",
                    "type": ""
                  }
                ],
                "src": "11167:1157:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "12390:374:39",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "12400:26:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "12420:5:39"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "12414:5:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12414:12:39"
                      },
                      "variables": [
                        {
                          "name": "length",
                          "nodeType": "YulTypedName",
                          "src": "12404:6:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "12442:3:39"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "12447:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "12435:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12435:19:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "12435:19:39"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "12463:14:39",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "12473:4:39",
                        "type": "",
                        "value": "0x20"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "12467:2:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "12486:19:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "12497:3:39"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "12502:2:39"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "12493:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12493:12:39"
                      },
                      "variableNames": [
                        {
                          "name": "pos",
                          "nodeType": "YulIdentifier",
                          "src": "12486:3:39"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "12514:28:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "12532:5:39"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "12539:2:39"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "12528:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12528:14:39"
                      },
                      "variables": [
                        {
                          "name": "srcPtr",
                          "nodeType": "YulTypedName",
                          "src": "12518:6:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "12551:10:39",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "12560:1:39",
                        "type": "",
                        "value": "0"
                      },
                      "variables": [
                        {
                          "name": "i",
                          "nodeType": "YulTypedName",
                          "src": "12555:1:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "12619:120:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulIdentifier",
                                  "src": "12640:3:39"
                                },
                                {
                                  "arguments": [
                                    {
                                      "name": "srcPtr",
                                      "nodeType": "YulIdentifier",
                                      "src": "12651:6:39"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "12645:5:39"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12645:13:39"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "12633:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "12633:26:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "12633:26:39"
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "12672:19:39",
                            "value": {
                              "arguments": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulIdentifier",
                                  "src": "12683:3:39"
                                },
                                {
                                  "name": "_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "12688:2:39"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "12679:3:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "12679:12:39"
                            },
                            "variableNames": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "12672:3:39"
                              }
                            ]
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "12704:25:39",
                            "value": {
                              "arguments": [
                                {
                                  "name": "srcPtr",
                                  "nodeType": "YulIdentifier",
                                  "src": "12718:6:39"
                                },
                                {
                                  "name": "_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "12726:2:39"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "12714:3:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "12714:15:39"
                            },
                            "variableNames": [
                              {
                                "name": "srcPtr",
                                "nodeType": "YulIdentifier",
                                "src": "12704:6:39"
                              }
                            ]
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "i",
                            "nodeType": "YulIdentifier",
                            "src": "12581:1:39"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "12584:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "12578:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12578:13:39"
                      },
                      "nodeType": "YulForLoop",
                      "post": {
                        "nodeType": "YulBlock",
                        "src": "12592:18:39",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "12594:14:39",
                            "value": {
                              "arguments": [
                                {
                                  "name": "i",
                                  "nodeType": "YulIdentifier",
                                  "src": "12603:1:39"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "12606:1:39",
                                  "type": "",
                                  "value": "1"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "12599:3:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "12599:9:39"
                            },
                            "variableNames": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "12594:1:39"
                              }
                            ]
                          }
                        ]
                      },
                      "pre": {
                        "nodeType": "YulBlock",
                        "src": "12574:3:39",
                        "statements": []
                      },
                      "src": "12570:169:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "12748:10:39",
                      "value": {
                        "name": "pos",
                        "nodeType": "YulIdentifier",
                        "src": "12755:3:39"
                      },
                      "variableNames": [
                        {
                          "name": "end",
                          "nodeType": "YulIdentifier",
                          "src": "12748:3:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_array_uint256_dyn",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "12367:5:39",
                    "type": ""
                  },
                  {
                    "name": "pos",
                    "nodeType": "YulTypedName",
                    "src": "12374:3:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "end",
                    "nodeType": "YulTypedName",
                    "src": "12382:3:39",
                    "type": ""
                  }
                ],
                "src": "12329:435:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "13126:563:39",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "13143:9:39"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "13158:6:39"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13170:3:39",
                                    "type": "",
                                    "value": "248"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13175:3:39",
                                    "type": "",
                                    "value": "255"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "13166:3:39"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13166:13:39"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "13154:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13154:26:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13136:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13136:45:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13136:45:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13201:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13212:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13197:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13197:18:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "13217:3:39",
                            "type": "",
                            "value": "224"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13190:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13190:31:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13190:31:39"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "13230:60:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "13262:6:39"
                          },
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13274:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13285:3:39",
                                "type": "",
                                "value": "224"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13270:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13270:19:39"
                          }
                        ],
                        "functionName": {
                          "name": "abi_encode_string",
                          "nodeType": "YulIdentifier",
                          "src": "13244:17:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13244:46:39"
                      },
                      "variables": [
                        {
                          "name": "tail_1",
                          "nodeType": "YulTypedName",
                          "src": "13234:6:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13310:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13321:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13306:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13306:18:39"
                          },
                          {
                            "arguments": [
                              {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "13330:6:39"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13338:9:39"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "13326:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13326:22:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13299:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13299:50:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13299:50:39"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "13358:47:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "value2",
                            "nodeType": "YulIdentifier",
                            "src": "13390:6:39"
                          },
                          {
                            "name": "tail_1",
                            "nodeType": "YulIdentifier",
                            "src": "13398:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "abi_encode_string",
                          "nodeType": "YulIdentifier",
                          "src": "13372:17:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13372:33:39"
                      },
                      "variables": [
                        {
                          "name": "tail_2",
                          "nodeType": "YulTypedName",
                          "src": "13362:6:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13425:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13436:2:39",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13421:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13421:18:39"
                          },
                          {
                            "name": "value3",
                            "nodeType": "YulIdentifier",
                            "src": "13441:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13414:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13414:34:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13414:34:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13468:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13479:3:39",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13464:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13464:19:39"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value4",
                                "nodeType": "YulIdentifier",
                                "src": "13489:6:39"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "13505:3:39",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "13510:1:39",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "13501:3:39"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13501:11:39"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13514:1:39",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "13497:3:39"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13497:19:39"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "13485:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13485:32:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13457:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13457:61:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13457:61:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13538:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13549:3:39",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13534:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13534:19:39"
                          },
                          {
                            "name": "value5",
                            "nodeType": "YulIdentifier",
                            "src": "13555:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13527:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13527:35:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13527:35:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13582:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13593:3:39",
                                "type": "",
                                "value": "192"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13578:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13578:19:39"
                          },
                          {
                            "arguments": [
                              {
                                "name": "tail_2",
                                "nodeType": "YulIdentifier",
                                "src": "13603:6:39"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13611:9:39"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "13599:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13599:22:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13571:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13571:51:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13571:51:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "13631:52:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "value6",
                            "nodeType": "YulIdentifier",
                            "src": "13668:6:39"
                          },
                          {
                            "name": "tail_2",
                            "nodeType": "YulIdentifier",
                            "src": "13676:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "abi_encode_array_uint256_dyn",
                          "nodeType": "YulIdentifier",
                          "src": "13639:28:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13639:44:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "13631:4:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "13047:9:39",
                    "type": ""
                  },
                  {
                    "name": "value6",
                    "nodeType": "YulTypedName",
                    "src": "13058:6:39",
                    "type": ""
                  },
                  {
                    "name": "value5",
                    "nodeType": "YulTypedName",
                    "src": "13066:6:39",
                    "type": ""
                  },
                  {
                    "name": "value4",
                    "nodeType": "YulTypedName",
                    "src": "13074:6:39",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "13082:6:39",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "13090:6:39",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "13098:6:39",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "13106:6:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "13117:4:39",
                    "type": ""
                  }
                ],
                "src": "12769:920:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "13793:97:39",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "13803:26:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "13815:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "13826:2:39",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "13811:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13811:18:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "13803:4:39"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "13845:9:39"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "13860:6:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13868:14:39",
                                "type": "",
                                "value": "0xffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "13856:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13856:27:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13838:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13838:46:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13838:46:39"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint48__to_t_uint48__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "13762:9:39",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "13773:6:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "13784:4:39",
                    "type": ""
                  }
                ],
                "src": "13694:196:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "14008:410:39",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "14054:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "14063:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "14066:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "14056:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "14056:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "14056:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "14029:7:39"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14038:9:39"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "14025:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14025:23:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14050:2:39",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "14021:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14021:32:39"
                      },
                      "nodeType": "YulIf",
                      "src": "14018:52:39"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "14079:36:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "14105:9:39"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "14092:12:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14092:23:39"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "14083:5:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "14149:5:39"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_address",
                          "nodeType": "YulIdentifier",
                          "src": "14124:24:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14124:31:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14124:31:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "14164:15:39",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "14174:5:39"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "14164:6:39"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "14188:42:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14215:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14226:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14211:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14211:18:39"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "14198:12:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14198:32:39"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "14188:6:39"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "14239:46:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14270:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14281:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14266:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14266:18:39"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "14253:12:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14253:32:39"
                      },
                      "variables": [
                        {
                          "name": "offset",
                          "nodeType": "YulTypedName",
                          "src": "14243:6:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "14328:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "14337:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "14340:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "14330:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "14330:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "14330:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "14300:6:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14308:18:39",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "14297:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14297:30:39"
                      },
                      "nodeType": "YulIf",
                      "src": "14294:50:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "14353:59:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14384:9:39"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "14395:6:39"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14380:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14380:22:39"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "14404:7:39"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_bytes",
                          "nodeType": "YulIdentifier",
                          "src": "14363:16:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14363:49:39"
                      },
                      "variableNames": [
                        {
                          "name": "value2",
                          "nodeType": "YulIdentifier",
                          "src": "14353:6:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_addresst_uint256t_bytes_memory_ptr",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "13958:9:39",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "13969:7:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "13981:6:39",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "13989:6:39",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "13997:6:39",
                    "type": ""
                  }
                ],
                "src": "13895:523:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "14520:177:39",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "14566:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "14575:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "14578:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "14568:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "14568:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "14568:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "14541:7:39"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14550:9:39"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "14537:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14537:23:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14562:2:39",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "14533:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14533:32:39"
                      },
                      "nodeType": "YulIf",
                      "src": "14530:52:39"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "14591:36:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "14617:9:39"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "14604:12:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14604:23:39"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "14595:5:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "14661:5:39"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_address",
                          "nodeType": "YulIdentifier",
                          "src": "14636:24:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14636:31:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14636:31:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "14676:15:39",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "14686:5:39"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "14676:6:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_contract$_TimelockController_$4634",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "14486:9:39",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "14497:7:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "14509:6:39",
                    "type": ""
                  }
                ],
                "src": "14423:274:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "14825:490:39",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "14871:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "14880:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "14883:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "14873:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "14873:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "14873:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "14846:7:39"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14855:9:39"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "14842:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14842:23:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14867:2:39",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "14838:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14838:32:39"
                      },
                      "nodeType": "YulIf",
                      "src": "14835:52:39"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "14896:36:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "14922:9:39"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "14909:12:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14909:23:39"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "14900:5:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "14966:5:39"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_address",
                          "nodeType": "YulIdentifier",
                          "src": "14941:24:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14941:31:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14941:31:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "14981:15:39",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "14991:5:39"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "14981:6:39"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "15005:42:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15032:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15043:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15028:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15028:18:39"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "15015:12:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15015:32:39"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "15005:6:39"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "15056:46:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15087:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15098:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15083:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15083:18:39"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "15070:12:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15070:32:39"
                      },
                      "variables": [
                        {
                          "name": "offset",
                          "nodeType": "YulTypedName",
                          "src": "15060:6:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "15145:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "15154:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "15157:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "15147:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "15147:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "15147:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "15117:6:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "15125:18:39",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "15114:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15114:30:39"
                      },
                      "nodeType": "YulIf",
                      "src": "15111:50:39"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "15170:85:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15227:9:39"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "15238:6:39"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15223:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15223:22:39"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "15247:7:39"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_string_calldata",
                          "nodeType": "YulIdentifier",
                          "src": "15196:26:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15196:59:39"
                      },
                      "variables": [
                        {
                          "name": "value2_1",
                          "nodeType": "YulTypedName",
                          "src": "15174:8:39",
                          "type": ""
                        },
                        {
                          "name": "value3_1",
                          "nodeType": "YulTypedName",
                          "src": "15184:8:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "15264:18:39",
                      "value": {
                        "name": "value2_1",
                        "nodeType": "YulIdentifier",
                        "src": "15274:8:39"
                      },
                      "variableNames": [
                        {
                          "name": "value2",
                          "nodeType": "YulIdentifier",
                          "src": "15264:6:39"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "15291:18:39",
                      "value": {
                        "name": "value3_1",
                        "nodeType": "YulIdentifier",
                        "src": "15301:8:39"
                      },
                      "variableNames": [
                        {
                          "name": "value3",
                          "nodeType": "YulIdentifier",
                          "src": "15291:6:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_addresst_uint256t_bytes_calldata_ptr",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "14767:9:39",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "14778:7:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "14790:6:39",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "14798:6:39",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "14806:6:39",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "14814:6:39",
                    "type": ""
                  }
                ],
                "src": "14702:613:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "15421:102:39",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "15431:26:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "15443:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "15454:2:39",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "15439:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15439:18:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "15431:4:39"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "15473:9:39"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "15488:6:39"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "15504:3:39",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "15509:1:39",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "15500:3:39"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "15500:11:39"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15513:1:39",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "15496:3:39"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15496:19:39"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "15484:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15484:32:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "15466:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15466:51:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "15466:51:39"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "15390:9:39",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "15401:6:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "15412:4:39",
                    "type": ""
                  }
                ],
                "src": "15320:203:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "15615:228:39",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "15661:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "15670:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "15673:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "15663:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "15663:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "15663:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "15636:7:39"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15645:9:39"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "15632:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15632:23:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "15657:2:39",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "15628:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15628:32:39"
                      },
                      "nodeType": "YulIf",
                      "src": "15625:52:39"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "15686:36:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "15712:9:39"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "15699:12:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15699:23:39"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "15690:5:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "15756:5:39"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_address",
                          "nodeType": "YulIdentifier",
                          "src": "15731:24:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15731:31:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "15731:31:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "15771:15:39",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "15781:5:39"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "15771:6:39"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "15795:42:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15822:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15833:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15818:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15818:18:39"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "15805:12:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15805:32:39"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "15795:6:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_addresst_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "15573:9:39",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "15584:7:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "15596:6:39",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "15604:6:39",
                    "type": ""
                  }
                ],
                "src": "15528:315:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "15966:102:39",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "15976:26:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "15988:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "15999:2:39",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "15984:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15984:18:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "15976:4:39"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "16018:9:39"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "16033:6:39"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "16049:3:39",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "16054:1:39",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "16045:3:39"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "16045:11:39"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16058:1:39",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "16041:3:39"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16041:19:39"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "16029:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16029:32:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16011:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16011:51:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16011:51:39"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_contract$_IERC5805_$5701__to_t_address__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "15935:9:39",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "15946:6:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "15957:4:39",
                    "type": ""
                  }
                ],
                "src": "15848:220:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "16220:124:39",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "16243:3:39"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "16248:6:39"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "16256:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "calldatacopy",
                          "nodeType": "YulIdentifier",
                          "src": "16230:12:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16230:33:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16230:33:39"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "16272:26:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "16286:3:39"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "16291:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "16282:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16282:16:39"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "16276:2:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "16314:2:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16318:1:39",
                            "type": "",
                            "value": "0"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16307:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16307:13:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16307:13:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "16329:9:39",
                      "value": {
                        "name": "_1",
                        "nodeType": "YulIdentifier",
                        "src": "16336:2:39"
                      },
                      "variableNames": [
                        {
                          "name": "end",
                          "nodeType": "YulIdentifier",
                          "src": "16329:3:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_packed_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "pos",
                    "nodeType": "YulTypedName",
                    "src": "16188:3:39",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "16193:6:39",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "16201:6:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "end",
                    "nodeType": "YulTypedName",
                    "src": "16212:3:39",
                    "type": ""
                  }
                ],
                "src": "16073:271:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "16558:261:39",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "16568:27:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "16580:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16591:3:39",
                            "type": "",
                            "value": "160"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "16576:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16576:19:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "16568:4:39"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "16611:9:39"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "16622:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16604:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16604:25:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16604:25:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16649:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16660:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16645:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16645:18:39"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "16665:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16638:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16638:34:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16638:34:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16692:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16703:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16688:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16688:18:39"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "16712:6:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16720:4:39",
                                "type": "",
                                "value": "0xff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "16708:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16708:17:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16681:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16681:45:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16681:45:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16746:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16757:2:39",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16742:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16742:18:39"
                          },
                          {
                            "name": "value3",
                            "nodeType": "YulIdentifier",
                            "src": "16762:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16735:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16735:34:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16735:34:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16789:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16800:3:39",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16785:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16785:19:39"
                          },
                          {
                            "name": "value4",
                            "nodeType": "YulIdentifier",
                            "src": "16806:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16778:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16778:35:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16778:35:39"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_bytes32_t_uint256_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint256_t_uint8_t_bytes32_t_bytes32__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "16495:9:39",
                    "type": ""
                  },
                  {
                    "name": "value4",
                    "nodeType": "YulTypedName",
                    "src": "16506:6:39",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "16514:6:39",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "16522:6:39",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "16530:6:39",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "16538:6:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "16549:4:39",
                    "type": ""
                  }
                ],
                "src": "16349:470:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "16998:174:39",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "17015:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17026:2:39",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "17008:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17008:21:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17008:21:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17049:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17060:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17045:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17045:18:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17065:2:39",
                            "type": "",
                            "value": "24"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "17038:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17038:30:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17038:30:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17088:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17099:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17084:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17084:18:39"
                          },
                          {
                            "hexValue": "476f7665726e6f723a206f6e6c79476f7665726e616e6365",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "17104:26:39",
                            "type": "",
                            "value": "Governor: onlyGovernance"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "17077:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17077:54:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17077:54:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "17140:26:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "17152:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17163:2:39",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "17148:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17148:18:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "17140:4:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_01397b9b23826f2770c44682f6f60114915147b09511a75fee3231adbc22847f__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "16975:9:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "16989:4:39",
                    "type": ""
                  }
                ],
                "src": "16824:348:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "17232:325:39",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "17242:22:39",
                      "value": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17256:1:39",
                            "type": "",
                            "value": "1"
                          },
                          {
                            "name": "data",
                            "nodeType": "YulIdentifier",
                            "src": "17259:4:39"
                          }
                        ],
                        "functionName": {
                          "name": "shr",
                          "nodeType": "YulIdentifier",
                          "src": "17252:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17252:12:39"
                      },
                      "variableNames": [
                        {
                          "name": "length",
                          "nodeType": "YulIdentifier",
                          "src": "17242:6:39"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "17273:38:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "data",
                            "nodeType": "YulIdentifier",
                            "src": "17303:4:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17309:1:39",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "and",
                          "nodeType": "YulIdentifier",
                          "src": "17299:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17299:12:39"
                      },
                      "variables": [
                        {
                          "name": "outOfPlaceEncoding",
                          "nodeType": "YulTypedName",
                          "src": "17277:18:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "17350:31:39",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "17352:27:39",
                            "value": {
                              "arguments": [
                                {
                                  "name": "length",
                                  "nodeType": "YulIdentifier",
                                  "src": "17366:6:39"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "17374:4:39",
                                  "type": "",
                                  "value": "0x7f"
                                }
                              ],
                              "functionName": {
                                "name": "and",
                                "nodeType": "YulIdentifier",
                                "src": "17362:3:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "17362:17:39"
                            },
                            "variableNames": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "17352:6:39"
                              }
                            ]
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "outOfPlaceEncoding",
                            "nodeType": "YulIdentifier",
                            "src": "17330:18:39"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "17323:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17323:26:39"
                      },
                      "nodeType": "YulIf",
                      "src": "17320:61:39"
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "17440:111:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "17461:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "17468:3:39",
                                      "type": "",
                                      "value": "224"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "17473:10:39",
                                      "type": "",
                                      "value": "0x4e487b71"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shl",
                                    "nodeType": "YulIdentifier",
                                    "src": "17464:3:39"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "17464:20:39"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "17454:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "17454:31:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "17454:31:39"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "17505:1:39",
                                  "type": "",
                                  "value": "4"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "17508:4:39",
                                  "type": "",
                                  "value": "0x22"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "17498:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "17498:15:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "17498:15:39"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "17533:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "17536:4:39",
                                  "type": "",
                                  "value": "0x24"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "17526:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "17526:15:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "17526:15:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "outOfPlaceEncoding",
                            "nodeType": "YulIdentifier",
                            "src": "17396:18:39"
                          },
                          {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "17419:6:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17427:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "17416:2:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17416:14:39"
                          }
                        ],
                        "functionName": {
                          "name": "eq",
                          "nodeType": "YulIdentifier",
                          "src": "17393:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17393:38:39"
                      },
                      "nodeType": "YulIf",
                      "src": "17390:161:39"
                    }
                  ]
                },
                "name": "extract_byte_array_length",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "data",
                    "nodeType": "YulTypedName",
                    "src": "17212:4:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "length",
                    "nodeType": "YulTypedName",
                    "src": "17221:6:39",
                    "type": ""
                  }
                ],
                "src": "17177:380:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "17736:223:39",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "17753:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17764:2:39",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "17746:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17746:21:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17746:21:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17787:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17798:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17783:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17783:18:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17803:2:39",
                            "type": "",
                            "value": "33"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "17776:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17776:30:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17776:30:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17826:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17837:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17822:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17822:18:39"
                          },
                          {
                            "hexValue": "476f7665726e6f723a2070726f706f73616c206e6f7420737563636573736675",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "17842:34:39",
                            "type": "",
                            "value": "Governor: proposal not successfu"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "17815:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17815:62:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17815:62:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17897:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17908:2:39",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17893:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17893:18:39"
                          },
                          {
                            "hexValue": "6c",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "17913:3:39",
                            "type": "",
                            "value": "l"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "17886:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17886:31:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17886:31:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "17926:27:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "17938:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17949:3:39",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "17934:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17934:19:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "17926:4:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_a608627370ddd238e48feab42026732822e64969fe5a8155723eaa5f397576d9__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "17713:9:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "17727:4:39",
                    "type": ""
                  }
                ],
                "src": "17562:397:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "18045:103:39",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "18091:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "18100:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "18103:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "18093:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "18093:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "18093:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "18066:7:39"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18075:9:39"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "18062:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18062:23:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "18087:2:39",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "18058:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18058:32:39"
                      },
                      "nodeType": "YulIf",
                      "src": "18055:52:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "18116:26:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "18132:9:39"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "18126:5:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18126:16:39"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "18116:6:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_uint256_fromMemory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "18011:9:39",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "18022:7:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "18034:6:39",
                    "type": ""
                  }
                ],
                "src": "17964:184:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "18214:400:39",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "18224:26:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "18244:5:39"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "18238:5:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18238:12:39"
                      },
                      "variables": [
                        {
                          "name": "length",
                          "nodeType": "YulTypedName",
                          "src": "18228:6:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "18266:3:39"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "18271:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "18259:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18259:19:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "18259:19:39"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "18287:14:39",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "18297:4:39",
                        "type": "",
                        "value": "0x20"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "18291:2:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "18310:19:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "18321:3:39"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "18326:2:39"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "18317:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18317:12:39"
                      },
                      "variableNames": [
                        {
                          "name": "pos",
                          "nodeType": "YulIdentifier",
                          "src": "18310:3:39"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "18338:28:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "18356:5:39"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "18363:2:39"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "18352:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18352:14:39"
                      },
                      "variables": [
                        {
                          "name": "srcPtr",
                          "nodeType": "YulTypedName",
                          "src": "18342:6:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "18375:10:39",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "18384:1:39",
                        "type": "",
                        "value": "0"
                      },
                      "variables": [
                        {
                          "name": "i",
                          "nodeType": "YulTypedName",
                          "src": "18379:1:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "18443:146:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulIdentifier",
                                  "src": "18464:3:39"
                                },
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "srcPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "18479:6:39"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "18473:5:39"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "18473:13:39"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "18496:3:39",
                                              "type": "",
                                              "value": "160"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "18501:1:39",
                                              "type": "",
                                              "value": "1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "shl",
                                            "nodeType": "YulIdentifier",
                                            "src": "18492:3:39"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "18492:11:39"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "18505:1:39",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sub",
                                        "nodeType": "YulIdentifier",
                                        "src": "18488:3:39"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "18488:19:39"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "18469:3:39"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "18469:39:39"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "18457:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "18457:52:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "18457:52:39"
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "18522:19:39",
                            "value": {
                              "arguments": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulIdentifier",
                                  "src": "18533:3:39"
                                },
                                {
                                  "name": "_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "18538:2:39"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "18529:3:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "18529:12:39"
                            },
                            "variableNames": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "18522:3:39"
                              }
                            ]
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "18554:25:39",
                            "value": {
                              "arguments": [
                                {
                                  "name": "srcPtr",
                                  "nodeType": "YulIdentifier",
                                  "src": "18568:6:39"
                                },
                                {
                                  "name": "_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "18576:2:39"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "18564:3:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "18564:15:39"
                            },
                            "variableNames": [
                              {
                                "name": "srcPtr",
                                "nodeType": "YulIdentifier",
                                "src": "18554:6:39"
                              }
                            ]
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "i",
                            "nodeType": "YulIdentifier",
                            "src": "18405:1:39"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "18408:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "18402:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18402:13:39"
                      },
                      "nodeType": "YulForLoop",
                      "post": {
                        "nodeType": "YulBlock",
                        "src": "18416:18:39",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "18418:14:39",
                            "value": {
                              "arguments": [
                                {
                                  "name": "i",
                                  "nodeType": "YulIdentifier",
                                  "src": "18427:1:39"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "18430:1:39",
                                  "type": "",
                                  "value": "1"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "18423:3:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "18423:9:39"
                            },
                            "variableNames": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "18418:1:39"
                              }
                            ]
                          }
                        ]
                      },
                      "pre": {
                        "nodeType": "YulBlock",
                        "src": "18398:3:39",
                        "statements": []
                      },
                      "src": "18394:195:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "18598:10:39",
                      "value": {
                        "name": "pos",
                        "nodeType": "YulIdentifier",
                        "src": "18605:3:39"
                      },
                      "variableNames": [
                        {
                          "name": "end",
                          "nodeType": "YulIdentifier",
                          "src": "18598:3:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_array_address_dyn",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "18191:5:39",
                    "type": ""
                  },
                  {
                    "name": "pos",
                    "nodeType": "YulTypedName",
                    "src": "18198:3:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "end",
                    "nodeType": "YulTypedName",
                    "src": "18206:3:39",
                    "type": ""
                  }
                ],
                "src": "18153:461:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "18678:556:39",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "18688:26:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "18708:5:39"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "18702:5:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18702:12:39"
                      },
                      "variables": [
                        {
                          "name": "length",
                          "nodeType": "YulTypedName",
                          "src": "18692:6:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "18730:3:39"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "18735:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "18723:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18723:19:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "18723:19:39"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "18751:14:39",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "18761:4:39",
                        "type": "",
                        "value": "0x20"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "18755:2:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "18774:31:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "18797:3:39"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "18802:2:39"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "18793:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18793:12:39"
                      },
                      "variables": [
                        {
                          "name": "updated_pos",
                          "nodeType": "YulTypedName",
                          "src": "18778:11:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "18814:24:39",
                      "value": {
                        "name": "updated_pos",
                        "nodeType": "YulIdentifier",
                        "src": "18827:11:39"
                      },
                      "variables": [
                        {
                          "name": "pos_1",
                          "nodeType": "YulTypedName",
                          "src": "18818:5:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "18847:18:39",
                      "value": {
                        "name": "updated_pos",
                        "nodeType": "YulIdentifier",
                        "src": "18854:11:39"
                      },
                      "variableNames": [
                        {
                          "name": "pos",
                          "nodeType": "YulIdentifier",
                          "src": "18847:3:39"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "18874:38:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "pos_1",
                            "nodeType": "YulIdentifier",
                            "src": "18890:5:39"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18901:1:39",
                                "type": "",
                                "value": "5"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "18904:6:39"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "18897:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18897:14:39"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "18886:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18886:26:39"
                      },
                      "variables": [
                        {
                          "name": "tail",
                          "nodeType": "YulTypedName",
                          "src": "18878:4:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "18921:28:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "18939:5:39"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "18946:2:39"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "18935:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18935:14:39"
                      },
                      "variables": [
                        {
                          "name": "srcPtr",
                          "nodeType": "YulTypedName",
                          "src": "18925:6:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "18958:10:39",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "18967:1:39",
                        "type": "",
                        "value": "0"
                      },
                      "variables": [
                        {
                          "name": "i",
                          "nodeType": "YulTypedName",
                          "src": "18962:1:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "19026:182:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulIdentifier",
                                  "src": "19047:3:39"
                                },
                                {
                                  "arguments": [
                                    {
                                      "name": "tail",
                                      "nodeType": "YulIdentifier",
                                      "src": "19056:4:39"
                                    },
                                    {
                                      "name": "pos_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "19062:5:39"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "sub",
                                    "nodeType": "YulIdentifier",
                                    "src": "19052:3:39"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "19052:16:39"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "19040:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "19040:29:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "19040:29:39"
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "19082:46:39",
                            "value": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "srcPtr",
                                      "nodeType": "YulIdentifier",
                                      "src": "19114:6:39"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "19108:5:39"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "19108:13:39"
                                },
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "19123:4:39"
                                }
                              ],
                              "functionName": {
                                "name": "abi_encode_string",
                                "nodeType": "YulIdentifier",
                                "src": "19090:17:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "19090:38:39"
                            },
                            "variableNames": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "19082:4:39"
                              }
                            ]
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "19141:25:39",
                            "value": {
                              "arguments": [
                                {
                                  "name": "srcPtr",
                                  "nodeType": "YulIdentifier",
                                  "src": "19155:6:39"
                                },
                                {
                                  "name": "_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "19163:2:39"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "19151:3:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "19151:15:39"
                            },
                            "variableNames": [
                              {
                                "name": "srcPtr",
                                "nodeType": "YulIdentifier",
                                "src": "19141:6:39"
                              }
                            ]
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "19179:19:39",
                            "value": {
                              "arguments": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulIdentifier",
                                  "src": "19190:3:39"
                                },
                                {
                                  "name": "_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "19195:2:39"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "19186:3:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "19186:12:39"
                            },
                            "variableNames": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "19179:3:39"
                              }
                            ]
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "i",
                            "nodeType": "YulIdentifier",
                            "src": "18988:1:39"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "18991:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "18985:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18985:13:39"
                      },
                      "nodeType": "YulForLoop",
                      "post": {
                        "nodeType": "YulBlock",
                        "src": "18999:18:39",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "19001:14:39",
                            "value": {
                              "arguments": [
                                {
                                  "name": "i",
                                  "nodeType": "YulIdentifier",
                                  "src": "19010:1:39"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "19013:1:39",
                                  "type": "",
                                  "value": "1"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "19006:3:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "19006:9:39"
                            },
                            "variableNames": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "19001:1:39"
                              }
                            ]
                          }
                        ]
                      },
                      "pre": {
                        "nodeType": "YulBlock",
                        "src": "18981:3:39",
                        "statements": []
                      },
                      "src": "18977:231:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "19217:11:39",
                      "value": {
                        "name": "tail",
                        "nodeType": "YulIdentifier",
                        "src": "19224:4:39"
                      },
                      "variableNames": [
                        {
                          "name": "end",
                          "nodeType": "YulIdentifier",
                          "src": "19217:3:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_array_bytes_dyn",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "18655:5:39",
                    "type": ""
                  },
                  {
                    "name": "pos",
                    "nodeType": "YulTypedName",
                    "src": "18662:3:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "end",
                    "nodeType": "YulTypedName",
                    "src": "18670:3:39",
                    "type": ""
                  }
                ],
                "src": "18619:615:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "19628:449:39",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "19645:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19656:3:39",
                            "type": "",
                            "value": "160"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "19638:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19638:22:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "19638:22:39"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "19669:71:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "19712:6:39"
                          },
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19724:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19735:3:39",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19720:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19720:19:39"
                          }
                        ],
                        "functionName": {
                          "name": "abi_encode_array_address_dyn",
                          "nodeType": "YulIdentifier",
                          "src": "19683:28:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19683:57:39"
                      },
                      "variables": [
                        {
                          "name": "tail_1",
                          "nodeType": "YulTypedName",
                          "src": "19673:6:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19760:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19771:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19756:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19756:18:39"
                          },
                          {
                            "arguments": [
                              {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "19780:6:39"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19788:9:39"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "19776:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19776:22:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "19749:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19749:50:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "19749:50:39"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "19808:58:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "19851:6:39"
                          },
                          {
                            "name": "tail_1",
                            "nodeType": "YulIdentifier",
                            "src": "19859:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "abi_encode_array_uint256_dyn",
                          "nodeType": "YulIdentifier",
                          "src": "19822:28:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19822:44:39"
                      },
                      "variables": [
                        {
                          "name": "tail_2",
                          "nodeType": "YulTypedName",
                          "src": "19812:6:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19886:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19897:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19882:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19882:18:39"
                          },
                          {
                            "arguments": [
                              {
                                "name": "tail_2",
                                "nodeType": "YulIdentifier",
                                "src": "19906:6:39"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19914:9:39"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "19902:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19902:22:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "19875:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19875:50:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "19875:50:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "19934:50:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "value2",
                            "nodeType": "YulIdentifier",
                            "src": "19969:6:39"
                          },
                          {
                            "name": "tail_2",
                            "nodeType": "YulIdentifier",
                            "src": "19977:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "abi_encode_array_bytes_dyn",
                          "nodeType": "YulIdentifier",
                          "src": "19942:26:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19942:42:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "19934:4:39"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20004:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20015:2:39",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20000:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20000:18:39"
                          },
                          {
                            "name": "value3",
                            "nodeType": "YulIdentifier",
                            "src": "20020:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "19993:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19993:34:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "19993:34:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20047:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20058:3:39",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20043:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20043:19:39"
                          },
                          {
                            "name": "value4",
                            "nodeType": "YulIdentifier",
                            "src": "20064:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "20036:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20036:35:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "20036:35:39"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_rational_0_by_1_t_bytes32__to_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_bytes32_t_bytes32__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "19565:9:39",
                    "type": ""
                  },
                  {
                    "name": "value4",
                    "nodeType": "YulTypedName",
                    "src": "19576:6:39",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "19584:6:39",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "19592:6:39",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "19600:6:39",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "19608:6:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "19619:4:39",
                    "type": ""
                  }
                ],
                "src": "19239:838:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "20163:103:39",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "20209:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "20218:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "20221:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "20211:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "20211:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "20211:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "20184:7:39"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20193:9:39"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "20180:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20180:23:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "20205:2:39",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "20176:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20176:32:39"
                      },
                      "nodeType": "YulIf",
                      "src": "20173:52:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "20234:26:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "20250:9:39"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "20244:5:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20244:16:39"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "20234:6:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_bytes32_fromMemory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "20129:9:39",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "20140:7:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "20152:6:39",
                    "type": ""
                  }
                ],
                "src": "20082:184:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "20688:493:39",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "20705:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "20716:3:39",
                            "type": "",
                            "value": "192"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "20698:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20698:22:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "20698:22:39"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "20729:71:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "20772:6:39"
                          },
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20784:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20795:3:39",
                                "type": "",
                                "value": "192"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20780:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20780:19:39"
                          }
                        ],
                        "functionName": {
                          "name": "abi_encode_array_address_dyn",
                          "nodeType": "YulIdentifier",
                          "src": "20743:28:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20743:57:39"
                      },
                      "variables": [
                        {
                          "name": "tail_1",
                          "nodeType": "YulTypedName",
                          "src": "20733:6:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20820:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20831:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20816:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20816:18:39"
                          },
                          {
                            "arguments": [
                              {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "20840:6:39"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20848:9:39"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "20836:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20836:22:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "20809:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20809:50:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "20809:50:39"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "20868:58:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "20911:6:39"
                          },
                          {
                            "name": "tail_1",
                            "nodeType": "YulIdentifier",
                            "src": "20919:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "abi_encode_array_uint256_dyn",
                          "nodeType": "YulIdentifier",
                          "src": "20882:28:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20882:44:39"
                      },
                      "variables": [
                        {
                          "name": "tail_2",
                          "nodeType": "YulTypedName",
                          "src": "20872:6:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20946:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20957:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20942:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20942:18:39"
                          },
                          {
                            "arguments": [
                              {
                                "name": "tail_2",
                                "nodeType": "YulIdentifier",
                                "src": "20966:6:39"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20974:9:39"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "20962:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20962:22:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "20935:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20935:50:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "20935:50:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "20994:50:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "value2",
                            "nodeType": "YulIdentifier",
                            "src": "21029:6:39"
                          },
                          {
                            "name": "tail_2",
                            "nodeType": "YulIdentifier",
                            "src": "21037:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "abi_encode_array_bytes_dyn",
                          "nodeType": "YulIdentifier",
                          "src": "21002:26:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21002:42:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "20994:4:39"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21064:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21075:2:39",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21060:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21060:18:39"
                          },
                          {
                            "name": "value3",
                            "nodeType": "YulIdentifier",
                            "src": "21080:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "21053:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21053:34:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "21053:34:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21107:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21118:3:39",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21103:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21103:19:39"
                          },
                          {
                            "name": "value4",
                            "nodeType": "YulIdentifier",
                            "src": "21124:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "21096:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21096:35:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "21096:35:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21151:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21162:3:39",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21147:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21147:19:39"
                          },
                          {
                            "name": "value5",
                            "nodeType": "YulIdentifier",
                            "src": "21168:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "21140:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21140:35:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "21140:35:39"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_rational_0_by_1_t_bytes32_t_uint256__to_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_bytes32_t_bytes32_t_uint256__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "20617:9:39",
                    "type": ""
                  },
                  {
                    "name": "value5",
                    "nodeType": "YulTypedName",
                    "src": "20628:6:39",
                    "type": ""
                  },
                  {
                    "name": "value4",
                    "nodeType": "YulTypedName",
                    "src": "20636:6:39",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "20644:6:39",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "20652:6:39",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "20660:6:39",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "20668:6:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "20679:4:39",
                    "type": ""
                  }
                ],
                "src": "20271:910:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "21218:95:39",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "21235:1:39",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21242:3:39",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21247:10:39",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "21238:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21238:20:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "21228:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21228:31:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "21228:31:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "21275:1:39",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "21278:4:39",
                            "type": "",
                            "value": "0x11"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "21268:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21268:15:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "21268:15:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "21299:1:39",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "21302:4:39",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "21292:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21292:15:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "21292:15:39"
                    }
                  ]
                },
                "name": "panic_error_0x11",
                "nodeType": "YulFunctionDefinition",
                "src": "21186:127:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "21366:77:39",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "21376:16:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "21387:1:39"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "21390:1:39"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "21383:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21383:9:39"
                      },
                      "variableNames": [
                        {
                          "name": "sum",
                          "nodeType": "YulIdentifier",
                          "src": "21376:3:39"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "21415:22:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "21417:16:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "21417:18:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "21417:18:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "21407:1:39"
                          },
                          {
                            "name": "sum",
                            "nodeType": "YulIdentifier",
                            "src": "21410:3:39"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "21404:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21404:10:39"
                      },
                      "nodeType": "YulIf",
                      "src": "21401:36:39"
                    }
                  ]
                },
                "name": "checked_add_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "21349:1:39",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "21352:1:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "sum",
                    "nodeType": "YulTypedName",
                    "src": "21358:3:39",
                    "type": ""
                  }
                ],
                "src": "21318:125:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "21577:119:39",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "21587:26:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "21599:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "21610:2:39",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "21595:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21595:18:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "21587:4:39"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "21629:9:39"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "21640:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "21622:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21622:25:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "21622:25:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21667:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21678:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21663:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21663:18:39"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "21683:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "21656:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21656:34:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "21656:34:39"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "21538:9:39",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "21549:6:39",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "21557:6:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "21568:4:39",
                    "type": ""
                  }
                ],
                "src": "21448:248:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "21854:173:39",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "21864:26:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "21876:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "21887:2:39",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "21872:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21872:18:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "21864:4:39"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "21906:9:39"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "21917:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "21899:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21899:25:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "21899:25:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21944:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21955:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21940:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21940:18:39"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "21960:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "21933:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21933:34:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "21933:34:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21987:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21998:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21983:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21983:18:39"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "22007:6:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22015:4:39",
                                "type": "",
                                "value": "0xff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "22003:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22003:17:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "21976:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21976:45:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "21976:45:39"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_bytes32_t_uint256_t_uint8__to_t_bytes32_t_uint256_t_uint8__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "21807:9:39",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "21818:6:39",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "21826:6:39",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "21834:6:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "21845:4:39",
                    "type": ""
                  }
                ],
                "src": "21701:326:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "22206:178:39",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "22223:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "22234:2:39",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "22216:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "22216:21:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "22216:21:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22257:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22268:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "22253:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22253:18:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "22273:2:39",
                            "type": "",
                            "value": "28"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "22246:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "22246:30:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "22246:30:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22296:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22307:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "22292:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22292:18:39"
                          },
                          {
                            "hexValue": "476f7665726e6f723a20746f6f206c61746520746f2063616e63656c",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "22312:30:39",
                            "type": "",
                            "value": "Governor: too late to cancel"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "22285:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "22285:58:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "22285:58:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "22352:26:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "22364:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "22375:2:39",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "22360:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "22360:18:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "22352:4:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_397853bd9e6f0888f5fdcc37d267617a8f74b5e4540887757482a2da22f4cdfc__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "22183:9:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "22197:4:39",
                    "type": ""
                  }
                ],
                "src": "22032:352:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "22563:224:39",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "22580:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "22591:2:39",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "22573:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "22573:21:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "22573:21:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22614:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22625:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "22610:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22610:18:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "22630:2:39",
                            "type": "",
                            "value": "34"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "22603:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "22603:30:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "22603:30:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22653:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22664:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "22649:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22649:18:39"
                          },
                          {
                            "hexValue": "476f7665726e6f723a206f6e6c792070726f706f7365722063616e2063616e63",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "22669:34:39",
                            "type": "",
                            "value": "Governor: only proposer can canc"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "22642:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "22642:62:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "22642:62:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22724:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22735:2:39",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "22720:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22720:18:39"
                          },
                          {
                            "hexValue": "656c",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "22740:4:39",
                            "type": "",
                            "value": "el"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "22713:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "22713:32:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "22713:32:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "22754:27:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "22766:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "22777:3:39",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "22762:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "22762:19:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "22754:4:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_e3fd25dc9791b847d14d0815e84967e87bbf815be3a68ecdd58e99f67196ddc7__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "22540:9:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "22554:4:39",
                    "type": ""
                  }
                ],
                "src": "22389:398:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "22883:557:39",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "22929:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "22938:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "22941:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "22931:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "22931:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "22931:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "22904:7:39"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22913:9:39"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "22900:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22900:23:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "22925:2:39",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "22896:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "22896:32:39"
                      },
                      "nodeType": "YulIf",
                      "src": "22893:52:39"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "22954:30:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "22974:9:39"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "22968:5:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "22968:16:39"
                      },
                      "variables": [
                        {
                          "name": "offset",
                          "nodeType": "YulTypedName",
                          "src": "22958:6:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "23027:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "23036:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "23039:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "23029:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "23029:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "23029:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "22999:6:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "23007:18:39",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "22996:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "22996:30:39"
                      },
                      "nodeType": "YulIf",
                      "src": "22993:50:39"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "23052:32:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "23066:9:39"
                          },
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "23077:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "23062:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "23062:22:39"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "23056:2:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "23132:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "23141:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "23144:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "23134:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "23134:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "23134:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "23111:2:39"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23115:4:39",
                                    "type": "",
                                    "value": "0x1f"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23107:3:39"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23107:13:39"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "23122:7:39"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "23103:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23103:27:39"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "23096:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "23096:35:39"
                      },
                      "nodeType": "YulIf",
                      "src": "23093:55:39"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "23157:19:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "23173:2:39"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "23167:5:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "23167:9:39"
                      },
                      "variables": [
                        {
                          "name": "_2",
                          "nodeType": "YulTypedName",
                          "src": "23161:2:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "23185:61:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "23242:2:39"
                              }
                            ],
                            "functionName": {
                              "name": "array_allocation_size_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "23214:27:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23214:31:39"
                          }
                        ],
                        "functionName": {
                          "name": "allocate_memory",
                          "nodeType": "YulIdentifier",
                          "src": "23198:15:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "23198:48:39"
                      },
                      "variables": [
                        {
                          "name": "array",
                          "nodeType": "YulTypedName",
                          "src": "23189:5:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "array",
                            "nodeType": "YulIdentifier",
                            "src": "23262:5:39"
                          },
                          {
                            "name": "_2",
                            "nodeType": "YulIdentifier",
                            "src": "23269:2:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "23255:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "23255:17:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "23255:17:39"
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "23318:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "23327:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "23330:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "23320:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "23320:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "23320:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "23295:2:39"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "23299:2:39"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23291:3:39"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23291:11:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23304:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "23287:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23287:20:39"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "23309:7:39"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "23284:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "23284:33:39"
                      },
                      "nodeType": "YulIf",
                      "src": "23281:53:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "23382:2:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23386:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "23378:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23378:11:39"
                          },
                          {
                            "arguments": [
                              {
                                "name": "array",
                                "nodeType": "YulIdentifier",
                                "src": "23395:5:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23402:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "23391:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23391:14:39"
                          },
                          {
                            "name": "_2",
                            "nodeType": "YulIdentifier",
                            "src": "23407:2:39"
                          }
                        ],
                        "functionName": {
                          "name": "copy_memory_to_memory_with_cleanup",
                          "nodeType": "YulIdentifier",
                          "src": "23343:34:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "23343:67:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "23343:67:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "23419:15:39",
                      "value": {
                        "name": "array",
                        "nodeType": "YulIdentifier",
                        "src": "23429:5:39"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "23419:6:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_string_memory_ptr_fromMemory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "22849:9:39",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "22860:7:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "22872:6:39",
                    "type": ""
                  }
                ],
                "src": "22792:648:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "23494:79:39",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "23504:17:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "23516:1:39"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "23519:1:39"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "23512:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "23512:9:39"
                      },
                      "variableNames": [
                        {
                          "name": "diff",
                          "nodeType": "YulIdentifier",
                          "src": "23504:4:39"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "23545:22:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "23547:16:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "23547:18:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "23547:18:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "diff",
                            "nodeType": "YulIdentifier",
                            "src": "23536:4:39"
                          },
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "23542:1:39"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "23533:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "23533:11:39"
                      },
                      "nodeType": "YulIf",
                      "src": "23530:37:39"
                    }
                  ]
                },
                "name": "checked_sub_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "23476:1:39",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "23479:1:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "diff",
                    "nodeType": "YulTypedName",
                    "src": "23485:4:39",
                    "type": ""
                  }
                ],
                "src": "23445:128:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "23610:95:39",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "23627:1:39",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23634:3:39",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23639:10:39",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "23630:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23630:20:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "23620:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "23620:31:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "23620:31:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "23667:1:39",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "23670:4:39",
                            "type": "",
                            "value": "0x32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "23660:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "23660:15:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "23660:15:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "23691:1:39",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "23694:4:39",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "23684:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "23684:15:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "23684:15:39"
                    }
                  ]
                },
                "name": "panic_error_0x32",
                "nodeType": "YulFunctionDefinition",
                "src": "23578:127:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "23790:204:39",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "23836:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "23845:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "23848:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "23838:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "23838:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "23838:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "23811:7:39"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "23820:9:39"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "23807:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23807:23:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "23832:2:39",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "23803:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "23803:32:39"
                      },
                      "nodeType": "YulIf",
                      "src": "23800:52:39"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "23861:29:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "23880:9:39"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "23874:5:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "23874:16:39"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "23865:5:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "23948:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "23957:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "23960:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "23950:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "23950:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "23950:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "23912:5:39"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "23923:5:39"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23930:14:39",
                                    "type": "",
                                    "value": "0xffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "23919:3:39"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23919:26:39"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "23909:2:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23909:37:39"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "23902:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "23902:45:39"
                      },
                      "nodeType": "YulIf",
                      "src": "23899:65:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "23973:15:39",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "23983:5:39"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "23973:6:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_uint48_fromMemory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "23756:9:39",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "23767:7:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "23779:6:39",
                    "type": ""
                  }
                ],
                "src": "23710:284:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "24352:405:39",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "24369:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "24380:3:39",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "24362:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "24362:22:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "24362:22:39"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "24393:71:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "24436:6:39"
                          },
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24448:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24459:3:39",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "24444:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24444:19:39"
                          }
                        ],
                        "functionName": {
                          "name": "abi_encode_array_address_dyn",
                          "nodeType": "YulIdentifier",
                          "src": "24407:28:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "24407:57:39"
                      },
                      "variables": [
                        {
                          "name": "tail_1",
                          "nodeType": "YulTypedName",
                          "src": "24397:6:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24484:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24495:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "24480:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24480:18:39"
                          },
                          {
                            "arguments": [
                              {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "24504:6:39"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24512:9:39"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "24500:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24500:22:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "24473:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "24473:50:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "24473:50:39"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "24532:58:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "24575:6:39"
                          },
                          {
                            "name": "tail_1",
                            "nodeType": "YulIdentifier",
                            "src": "24583:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "abi_encode_array_uint256_dyn",
                          "nodeType": "YulIdentifier",
                          "src": "24546:28:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "24546:44:39"
                      },
                      "variables": [
                        {
                          "name": "tail_2",
                          "nodeType": "YulTypedName",
                          "src": "24536:6:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24610:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24621:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "24606:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24606:18:39"
                          },
                          {
                            "arguments": [
                              {
                                "name": "tail_2",
                                "nodeType": "YulIdentifier",
                                "src": "24630:6:39"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24638:9:39"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "24626:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24626:22:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "24599:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "24599:50:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "24599:50:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "24658:50:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "value2",
                            "nodeType": "YulIdentifier",
                            "src": "24693:6:39"
                          },
                          {
                            "name": "tail_2",
                            "nodeType": "YulIdentifier",
                            "src": "24701:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "abi_encode_array_bytes_dyn",
                          "nodeType": "YulIdentifier",
                          "src": "24666:26:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "24666:42:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "24658:4:39"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24728:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24739:2:39",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "24724:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24724:18:39"
                          },
                          {
                            "name": "value3",
                            "nodeType": "YulIdentifier",
                            "src": "24744:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "24717:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "24717:34:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "24717:34:39"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_bytes32__to_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_bytes32__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "24297:9:39",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "24308:6:39",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "24316:6:39",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "24324:6:39",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "24332:6:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "24343:4:39",
                    "type": ""
                  }
                ],
                "src": "23999:758:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "24818:65:39",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "24835:1:39",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "name": "ptr",
                            "nodeType": "YulIdentifier",
                            "src": "24838:3:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "24828:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "24828:14:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "24828:14:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "24851:26:39",
                      "value": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "24869:1:39",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "24872:4:39",
                            "type": "",
                            "value": "0x20"
                          }
                        ],
                        "functionName": {
                          "name": "keccak256",
                          "nodeType": "YulIdentifier",
                          "src": "24859:9:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "24859:18:39"
                      },
                      "variableNames": [
                        {
                          "name": "data",
                          "nodeType": "YulIdentifier",
                          "src": "24851:4:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "array_dataslot_string_storage",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "ptr",
                    "nodeType": "YulTypedName",
                    "src": "24801:3:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "data",
                    "nodeType": "YulTypedName",
                    "src": "24809:4:39",
                    "type": ""
                  }
                ],
                "src": "24762:121:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "24969:464:39",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "25002:425:39",
                        "statements": [
                          {
                            "nodeType": "YulVariableDeclaration",
                            "src": "25016:11:39",
                            "value": {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "25026:1:39",
                              "type": "",
                              "value": "0"
                            },
                            "variables": [
                              {
                                "name": "_1",
                                "nodeType": "YulTypedName",
                                "src": "25020:2:39",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "25047:2:39"
                                },
                                {
                                  "name": "array",
                                  "nodeType": "YulIdentifier",
                                  "src": "25051:5:39"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "25040:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "25040:17:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "25040:17:39"
                          },
                          {
                            "nodeType": "YulVariableDeclaration",
                            "src": "25070:31:39",
                            "value": {
                              "arguments": [
                                {
                                  "name": "_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "25092:2:39"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "25096:4:39",
                                  "type": "",
                                  "value": "0x20"
                                }
                              ],
                              "functionName": {
                                "name": "keccak256",
                                "nodeType": "YulIdentifier",
                                "src": "25082:9:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "25082:19:39"
                            },
                            "variables": [
                              {
                                "name": "data",
                                "nodeType": "YulTypedName",
                                "src": "25074:4:39",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "nodeType": "YulVariableDeclaration",
                            "src": "25114:57:39",
                            "value": {
                              "arguments": [
                                {
                                  "name": "data",
                                  "nodeType": "YulIdentifier",
                                  "src": "25137:4:39"
                                },
                                {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "25147:1:39",
                                      "type": "",
                                      "value": "5"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "startIndex",
                                          "nodeType": "YulIdentifier",
                                          "src": "25154:10:39"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "25166:2:39",
                                          "type": "",
                                          "value": "31"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "25150:3:39"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "25150:19:39"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shr",
                                    "nodeType": "YulIdentifier",
                                    "src": "25143:3:39"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "25143:27:39"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "25133:3:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "25133:38:39"
                            },
                            "variables": [
                              {
                                "name": "deleteStart",
                                "nodeType": "YulTypedName",
                                "src": "25118:11:39",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "body": {
                              "nodeType": "YulBlock",
                              "src": "25208:23:39",
                              "statements": [
                                {
                                  "nodeType": "YulAssignment",
                                  "src": "25210:19:39",
                                  "value": {
                                    "name": "data",
                                    "nodeType": "YulIdentifier",
                                    "src": "25225:4:39"
                                  },
                                  "variableNames": [
                                    {
                                      "name": "deleteStart",
                                      "nodeType": "YulIdentifier",
                                      "src": "25210:11:39"
                                    }
                                  ]
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "name": "startIndex",
                                  "nodeType": "YulIdentifier",
                                  "src": "25190:10:39"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "25202:4:39",
                                  "type": "",
                                  "value": "0x20"
                                }
                              ],
                              "functionName": {
                                "name": "lt",
                                "nodeType": "YulIdentifier",
                                "src": "25187:2:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "25187:20:39"
                            },
                            "nodeType": "YulIf",
                            "src": "25184:47:39"
                          },
                          {
                            "nodeType": "YulVariableDeclaration",
                            "src": "25244:41:39",
                            "value": {
                              "arguments": [
                                {
                                  "name": "data",
                                  "nodeType": "YulIdentifier",
                                  "src": "25258:4:39"
                                },
                                {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "25268:1:39",
                                      "type": "",
                                      "value": "5"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "len",
                                          "nodeType": "YulIdentifier",
                                          "src": "25275:3:39"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "25280:2:39",
                                          "type": "",
                                          "value": "31"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "25271:3:39"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "25271:12:39"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shr",
                                    "nodeType": "YulIdentifier",
                                    "src": "25264:3:39"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "25264:20:39"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "25254:3:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "25254:31:39"
                            },
                            "variables": [
                              {
                                "name": "_2",
                                "nodeType": "YulTypedName",
                                "src": "25248:2:39",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "nodeType": "YulVariableDeclaration",
                            "src": "25298:24:39",
                            "value": {
                              "name": "deleteStart",
                              "nodeType": "YulIdentifier",
                              "src": "25311:11:39"
                            },
                            "variables": [
                              {
                                "name": "start",
                                "nodeType": "YulTypedName",
                                "src": "25302:5:39",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "body": {
                              "nodeType": "YulBlock",
                              "src": "25396:21:39",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "name": "start",
                                        "nodeType": "YulIdentifier",
                                        "src": "25405:5:39"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "25412:2:39"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sstore",
                                      "nodeType": "YulIdentifier",
                                      "src": "25398:6:39"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "25398:17:39"
                                  },
                                  "nodeType": "YulExpressionStatement",
                                  "src": "25398:17:39"
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "name": "start",
                                  "nodeType": "YulIdentifier",
                                  "src": "25346:5:39"
                                },
                                {
                                  "name": "_2",
                                  "nodeType": "YulIdentifier",
                                  "src": "25353:2:39"
                                }
                              ],
                              "functionName": {
                                "name": "lt",
                                "nodeType": "YulIdentifier",
                                "src": "25343:2:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "25343:13:39"
                            },
                            "nodeType": "YulForLoop",
                            "post": {
                              "nodeType": "YulBlock",
                              "src": "25357:26:39",
                              "statements": [
                                {
                                  "nodeType": "YulAssignment",
                                  "src": "25359:22:39",
                                  "value": {
                                    "arguments": [
                                      {
                                        "name": "start",
                                        "nodeType": "YulIdentifier",
                                        "src": "25372:5:39"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "25379:1:39",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "25368:3:39"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "25368:13:39"
                                  },
                                  "variableNames": [
                                    {
                                      "name": "start",
                                      "nodeType": "YulIdentifier",
                                      "src": "25359:5:39"
                                    }
                                  ]
                                }
                              ]
                            },
                            "pre": {
                              "nodeType": "YulBlock",
                              "src": "25339:3:39",
                              "statements": []
                            },
                            "src": "25335:82:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "len",
                            "nodeType": "YulIdentifier",
                            "src": "24985:3:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "24990:2:39",
                            "type": "",
                            "value": "31"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "24982:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "24982:11:39"
                      },
                      "nodeType": "YulIf",
                      "src": "24979:448:39"
                    }
                  ]
                },
                "name": "clean_up_bytearray_end_slots_string_storage",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "array",
                    "nodeType": "YulTypedName",
                    "src": "24941:5:39",
                    "type": ""
                  },
                  {
                    "name": "len",
                    "nodeType": "YulTypedName",
                    "src": "24948:3:39",
                    "type": ""
                  },
                  {
                    "name": "startIndex",
                    "nodeType": "YulTypedName",
                    "src": "24953:10:39",
                    "type": ""
                  }
                ],
                "src": "24888:545:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "25523:81:39",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "25533:65:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "25548:4:39"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "25566:1:39",
                                            "type": "",
                                            "value": "3"
                                          },
                                          {
                                            "name": "len",
                                            "nodeType": "YulIdentifier",
                                            "src": "25569:3:39"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "25562:3:39"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "25562:11:39"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "25579:1:39",
                                            "type": "",
                                            "value": "0"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "25575:3:39"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "25575:6:39"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shr",
                                      "nodeType": "YulIdentifier",
                                      "src": "25558:3:39"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "25558:24:39"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "25554:3:39"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25554:29:39"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "25544:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25544:40:39"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25590:1:39",
                                "type": "",
                                "value": "1"
                              },
                              {
                                "name": "len",
                                "nodeType": "YulIdentifier",
                                "src": "25593:3:39"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "25586:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25586:11:39"
                          }
                        ],
                        "functionName": {
                          "name": "or",
                          "nodeType": "YulIdentifier",
                          "src": "25541:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "25541:57:39"
                      },
                      "variableNames": [
                        {
                          "name": "used",
                          "nodeType": "YulIdentifier",
                          "src": "25533:4:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "extract_used_part_and_set_length_of_short_byte_array",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "data",
                    "nodeType": "YulTypedName",
                    "src": "25500:4:39",
                    "type": ""
                  },
                  {
                    "name": "len",
                    "nodeType": "YulTypedName",
                    "src": "25506:3:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "used",
                    "nodeType": "YulTypedName",
                    "src": "25514:4:39",
                    "type": ""
                  }
                ],
                "src": "25438:166:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "25705:1256:39",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "25715:24:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "src",
                            "nodeType": "YulIdentifier",
                            "src": "25735:3:39"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "25729:5:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "25729:10:39"
                      },
                      "variables": [
                        {
                          "name": "newLen",
                          "nodeType": "YulTypedName",
                          "src": "25719:6:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "25782:22:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x41",
                                "nodeType": "YulIdentifier",
                                "src": "25784:16:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "25784:18:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "25784:18:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "newLen",
                            "nodeType": "YulIdentifier",
                            "src": "25754:6:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "25762:18:39",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "25751:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "25751:30:39"
                      },
                      "nodeType": "YulIf",
                      "src": "25748:56:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "slot",
                            "nodeType": "YulIdentifier",
                            "src": "25857:4:39"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "slot",
                                    "nodeType": "YulIdentifier",
                                    "src": "25895:4:39"
                                  }
                                ],
                                "functionName": {
                                  "name": "sload",
                                  "nodeType": "YulIdentifier",
                                  "src": "25889:5:39"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25889:11:39"
                              }
                            ],
                            "functionName": {
                              "name": "extract_byte_array_length",
                              "nodeType": "YulIdentifier",
                              "src": "25863:25:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25863:38:39"
                          },
                          {
                            "name": "newLen",
                            "nodeType": "YulIdentifier",
                            "src": "25903:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "clean_up_bytearray_end_slots_string_storage",
                          "nodeType": "YulIdentifier",
                          "src": "25813:43:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "25813:97:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "25813:97:39"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "25919:18:39",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "25936:1:39",
                        "type": "",
                        "value": "0"
                      },
                      "variables": [
                        {
                          "name": "srcOffset",
                          "nodeType": "YulTypedName",
                          "src": "25923:9:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "25946:23:39",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "25965:4:39",
                        "type": "",
                        "value": "0x20"
                      },
                      "variables": [
                        {
                          "name": "srcOffset_1",
                          "nodeType": "YulTypedName",
                          "src": "25950:11:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "25978:24:39",
                      "value": {
                        "name": "srcOffset_1",
                        "nodeType": "YulIdentifier",
                        "src": "25991:11:39"
                      },
                      "variableNames": [
                        {
                          "name": "srcOffset",
                          "nodeType": "YulIdentifier",
                          "src": "25978:9:39"
                        }
                      ]
                    },
                    {
                      "cases": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "26048:656:39",
                            "statements": [
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "26062:35:39",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "newLen",
                                      "nodeType": "YulIdentifier",
                                      "src": "26081:6:39"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "26093:2:39",
                                          "type": "",
                                          "value": "31"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "not",
                                        "nodeType": "YulIdentifier",
                                        "src": "26089:3:39"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "26089:7:39"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "26077:3:39"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "26077:20:39"
                                },
                                "variables": [
                                  {
                                    "name": "loopEnd",
                                    "nodeType": "YulTypedName",
                                    "src": "26066:7:39",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "26110:49:39",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "slot",
                                      "nodeType": "YulIdentifier",
                                      "src": "26154:4:39"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "array_dataslot_string_storage",
                                    "nodeType": "YulIdentifier",
                                    "src": "26124:29:39"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "26124:35:39"
                                },
                                "variables": [
                                  {
                                    "name": "dstPtr",
                                    "nodeType": "YulTypedName",
                                    "src": "26114:6:39",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "26172:10:39",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "26181:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                "variables": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulTypedName",
                                    "src": "26176:1:39",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "26259:172:39",
                                  "statements": [
                                    {
                                      "expression": {
                                        "arguments": [
                                          {
                                            "name": "dstPtr",
                                            "nodeType": "YulIdentifier",
                                            "src": "26284:6:39"
                                          },
                                          {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "src",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "26302:3:39"
                                                  },
                                                  {
                                                    "name": "srcOffset",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "26307:9:39"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "26298:3:39"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "26298:19:39"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mload",
                                              "nodeType": "YulIdentifier",
                                              "src": "26292:5:39"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "26292:26:39"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sstore",
                                          "nodeType": "YulIdentifier",
                                          "src": "26277:6:39"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "26277:42:39"
                                      },
                                      "nodeType": "YulExpressionStatement",
                                      "src": "26277:42:39"
                                    },
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "26336:24:39",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "dstPtr",
                                            "nodeType": "YulIdentifier",
                                            "src": "26350:6:39"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "26358:1:39",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "26346:3:39"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "26346:14:39"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "dstPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "26336:6:39"
                                        }
                                      ]
                                    },
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "26377:40:39",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "srcOffset",
                                            "nodeType": "YulIdentifier",
                                            "src": "26394:9:39"
                                          },
                                          {
                                            "name": "srcOffset_1",
                                            "nodeType": "YulIdentifier",
                                            "src": "26405:11:39"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "26390:3:39"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "26390:27:39"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "srcOffset",
                                          "nodeType": "YulIdentifier",
                                          "src": "26377:9:39"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "26206:1:39"
                                    },
                                    {
                                      "name": "loopEnd",
                                      "nodeType": "YulIdentifier",
                                      "src": "26209:7:39"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "lt",
                                    "nodeType": "YulIdentifier",
                                    "src": "26203:2:39"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "26203:14:39"
                                },
                                "nodeType": "YulForLoop",
                                "post": {
                                  "nodeType": "YulBlock",
                                  "src": "26218:28:39",
                                  "statements": [
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "26220:24:39",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "i",
                                            "nodeType": "YulIdentifier",
                                            "src": "26229:1:39"
                                          },
                                          {
                                            "name": "srcOffset_1",
                                            "nodeType": "YulIdentifier",
                                            "src": "26232:11:39"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "26225:3:39"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "26225:19:39"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "26220:1:39"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "pre": {
                                  "nodeType": "YulBlock",
                                  "src": "26199:3:39",
                                  "statements": []
                                },
                                "src": "26195:236:39"
                              },
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "26479:166:39",
                                  "statements": [
                                    {
                                      "nodeType": "YulVariableDeclaration",
                                      "src": "26497:43:39",
                                      "value": {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "name": "src",
                                                "nodeType": "YulIdentifier",
                                                "src": "26524:3:39"
                                              },
                                              {
                                                "name": "srcOffset",
                                                "nodeType": "YulIdentifier",
                                                "src": "26529:9:39"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "26520:3:39"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "26520:19:39"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "mload",
                                          "nodeType": "YulIdentifier",
                                          "src": "26514:5:39"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "26514:26:39"
                                      },
                                      "variables": [
                                        {
                                          "name": "lastValue",
                                          "nodeType": "YulTypedName",
                                          "src": "26501:9:39",
                                          "type": ""
                                        }
                                      ]
                                    },
                                    {
                                      "expression": {
                                        "arguments": [
                                          {
                                            "name": "dstPtr",
                                            "nodeType": "YulIdentifier",
                                            "src": "26564:6:39"
                                          },
                                          {
                                            "arguments": [
                                              {
                                                "name": "lastValue",
                                                "nodeType": "YulIdentifier",
                                                "src": "26576:9:39"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "arguments": [
                                                      {
                                                        "arguments": [
                                                          {
                                                            "arguments": [
                                                              {
                                                                "kind": "number",
                                                                "nodeType": "YulLiteral",
                                                                "src": "26603:1:39",
                                                                "type": "",
                                                                "value": "3"
                                                              },
                                                              {
                                                                "name": "newLen",
                                                                "nodeType": "YulIdentifier",
                                                                "src": "26606:6:39"
                                                              }
                                                            ],
                                                            "functionName": {
                                                              "name": "shl",
                                                              "nodeType": "YulIdentifier",
                                                              "src": "26599:3:39"
                                                            },
                                                            "nodeType": "YulFunctionCall",
                                                            "src": "26599:14:39"
                                                          },
                                                          {
                                                            "kind": "number",
                                                            "nodeType": "YulLiteral",
                                                            "src": "26615:3:39",
                                                            "type": "",
                                                            "value": "248"
                                                          }
                                                        ],
                                                        "functionName": {
                                                          "name": "and",
                                                          "nodeType": "YulIdentifier",
                                                          "src": "26595:3:39"
                                                        },
                                                        "nodeType": "YulFunctionCall",
                                                        "src": "26595:24:39"
                                                      },
                                                      {
                                                        "arguments": [
                                                          {
                                                            "kind": "number",
                                                            "nodeType": "YulLiteral",
                                                            "src": "26625:1:39",
                                                            "type": "",
                                                            "value": "0"
                                                          }
                                                        ],
                                                        "functionName": {
                                                          "name": "not",
                                                          "nodeType": "YulIdentifier",
                                                          "src": "26621:3:39"
                                                        },
                                                        "nodeType": "YulFunctionCall",
                                                        "src": "26621:6:39"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "shr",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "26591:3:39"
                                                    },
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "26591:37:39"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "not",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "26587:3:39"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "26587:42:39"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "and",
                                              "nodeType": "YulIdentifier",
                                              "src": "26572:3:39"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "26572:58:39"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sstore",
                                          "nodeType": "YulIdentifier",
                                          "src": "26557:6:39"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "26557:74:39"
                                      },
                                      "nodeType": "YulExpressionStatement",
                                      "src": "26557:74:39"
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "loopEnd",
                                      "nodeType": "YulIdentifier",
                                      "src": "26450:7:39"
                                    },
                                    {
                                      "name": "newLen",
                                      "nodeType": "YulIdentifier",
                                      "src": "26459:6:39"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "lt",
                                    "nodeType": "YulIdentifier",
                                    "src": "26447:2:39"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "26447:19:39"
                                },
                                "nodeType": "YulIf",
                                "src": "26444:201:39"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "slot",
                                      "nodeType": "YulIdentifier",
                                      "src": "26665:4:39"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "26679:1:39",
                                              "type": "",
                                              "value": "1"
                                            },
                                            {
                                              "name": "newLen",
                                              "nodeType": "YulIdentifier",
                                              "src": "26682:6:39"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "shl",
                                            "nodeType": "YulIdentifier",
                                            "src": "26675:3:39"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "26675:14:39"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "26691:1:39",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "26671:3:39"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "26671:22:39"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "sstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "26658:6:39"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "26658:36:39"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "26658:36:39"
                              }
                            ]
                          },
                          "nodeType": "YulCase",
                          "src": "26041:663:39",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "26046:1:39",
                            "type": "",
                            "value": "1"
                          }
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "26721:234:39",
                            "statements": [
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "26735:14:39",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "26748:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                "variables": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulTypedName",
                                    "src": "26739:5:39",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "26784:67:39",
                                  "statements": [
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "26802:35:39",
                                      "value": {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "name": "src",
                                                "nodeType": "YulIdentifier",
                                                "src": "26821:3:39"
                                              },
                                              {
                                                "name": "srcOffset",
                                                "nodeType": "YulIdentifier",
                                                "src": "26826:9:39"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "26817:3:39"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "26817:19:39"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "mload",
                                          "nodeType": "YulIdentifier",
                                          "src": "26811:5:39"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "26811:26:39"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "value",
                                          "nodeType": "YulIdentifier",
                                          "src": "26802:5:39"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "condition": {
                                  "name": "newLen",
                                  "nodeType": "YulIdentifier",
                                  "src": "26765:6:39"
                                },
                                "nodeType": "YulIf",
                                "src": "26762:89:39"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "slot",
                                      "nodeType": "YulIdentifier",
                                      "src": "26871:4:39"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "value",
                                          "nodeType": "YulIdentifier",
                                          "src": "26930:5:39"
                                        },
                                        {
                                          "name": "newLen",
                                          "nodeType": "YulIdentifier",
                                          "src": "26937:6:39"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "extract_used_part_and_set_length_of_short_byte_array",
                                        "nodeType": "YulIdentifier",
                                        "src": "26877:52:39"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "26877:67:39"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "sstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "26864:6:39"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "26864:81:39"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "26864:81:39"
                              }
                            ]
                          },
                          "nodeType": "YulCase",
                          "src": "26713:242:39",
                          "value": "default"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "name": "newLen",
                            "nodeType": "YulIdentifier",
                            "src": "26021:6:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "26029:2:39",
                            "type": "",
                            "value": "31"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "26018:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "26018:14:39"
                      },
                      "nodeType": "YulSwitch",
                      "src": "26011:944:39"
                    }
                  ]
                },
                "name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "slot",
                    "nodeType": "YulTypedName",
                    "src": "25690:4:39",
                    "type": ""
                  },
                  {
                    "name": "src",
                    "nodeType": "YulTypedName",
                    "src": "25696:3:39",
                    "type": ""
                  }
                ],
                "src": "25609:1352:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "27140:229:39",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "27157:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "27168:2:39",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "27150:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "27150:21:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "27150:21:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "27191:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27202:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "27187:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27187:18:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "27207:2:39",
                            "type": "",
                            "value": "39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "27180:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "27180:30:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "27180:30:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "27230:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27241:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "27226:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27226:18:39"
                          },
                          {
                            "hexValue": "53616665436173743a2076616c756520646f65736e27742066697420696e2032",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "27246:34:39",
                            "type": "",
                            "value": "SafeCast: value doesn't fit in 2"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "27219:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "27219:62:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "27219:62:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "27301:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27312:2:39",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "27297:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27297:18:39"
                          },
                          {
                            "hexValue": "32342062697473",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "27317:9:39",
                            "type": "",
                            "value": "24 bits"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "27290:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "27290:37:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "27290:37:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "27336:27:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "27348:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "27359:3:39",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "27344:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "27344:19:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "27336:4:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_9d2acf551b2466898443b9bc3a403a4d86037386bc5a8960c1bbb0f204e69b79__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "27117:9:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "27131:4:39",
                    "type": ""
                  }
                ],
                "src": "26966:403:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "27548:228:39",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "27565:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "27576:2:39",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "27558:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "27558:21:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "27558:21:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "27599:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27610:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "27595:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27595:18:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "27615:2:39",
                            "type": "",
                            "value": "38"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "27588:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "27588:30:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "27588:30:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "27638:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27649:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "27634:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27634:18:39"
                          },
                          {
                            "hexValue": "53616665436173743a2076616c756520646f65736e27742066697420696e2033",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "27654:34:39",
                            "type": "",
                            "value": "SafeCast: value doesn't fit in 3"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "27627:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "27627:62:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "27627:62:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "27709:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27720:2:39",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "27705:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27705:18:39"
                          },
                          {
                            "hexValue": "322062697473",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "27725:8:39",
                            "type": "",
                            "value": "2 bits"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "27698:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "27698:36:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "27698:36:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "27743:27:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "27755:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "27766:3:39",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "27751:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "27751:19:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "27743:4:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_c907489dafcfb622d3b83f2657a14d6da2f59e0de3116af0d6a80554c1a7cb19__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "27525:9:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "27539:4:39",
                    "type": ""
                  }
                ],
                "src": "27374:402:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "27955:228:39",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "27972:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "27983:2:39",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "27965:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "27965:21:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "27965:21:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "28006:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28017:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "28002:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28002:18:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "28022:2:39",
                            "type": "",
                            "value": "38"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "27995:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "27995:30:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "27995:30:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "28045:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28056:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "28041:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28041:18:39"
                          },
                          {
                            "hexValue": "53616665436173743a2076616c756520646f65736e27742066697420696e2034",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "28061:34:39",
                            "type": "",
                            "value": "SafeCast: value doesn't fit in 4"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "28034:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "28034:62:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "28034:62:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "28116:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28127:2:39",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "28112:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28112:18:39"
                          },
                          {
                            "hexValue": "382062697473",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "28132:8:39",
                            "type": "",
                            "value": "8 bits"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "28105:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "28105:36:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "28105:36:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "28150:27:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "28162:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "28173:3:39",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "28158:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "28158:19:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "28150:4:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_599034f9324dd4e988c6cea5a00a30f53147fec1b01559682f18cd840028f495__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "27932:9:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "27946:4:39",
                    "type": ""
                  }
                ],
                "src": "27781:402:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "28362:225:39",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "28379:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "28390:2:39",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "28372:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "28372:21:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "28372:21:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "28413:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28424:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "28409:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28409:18:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "28429:2:39",
                            "type": "",
                            "value": "35"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "28402:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "28402:30:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "28402:30:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "28452:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28463:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "28448:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28448:18:39"
                          },
                          {
                            "hexValue": "476f7665726e6f723a20766f7465206e6f742063757272656e746c7920616374",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "28468:34:39",
                            "type": "",
                            "value": "Governor: vote not currently act"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "28441:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "28441:62:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "28441:62:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "28523:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28534:2:39",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "28519:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28519:18:39"
                          },
                          {
                            "hexValue": "697665",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "28539:5:39",
                            "type": "",
                            "value": "ive"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "28512:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "28512:33:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "28512:33:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "28554:27:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "28566:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "28577:3:39",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "28562:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "28562:19:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "28554:4:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_5b1e239298a1362f9b5245bd4e9393de28380a12326aa31532e03fe3f1061d80__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "28339:9:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "28353:4:39",
                    "type": ""
                  }
                ],
                "src": "28188:399:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "28793:241:39",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "28810:9:39"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "28821:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "28803:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "28803:25:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "28803:25:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "28848:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28859:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "28844:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28844:18:39"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "28868:6:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28876:4:39",
                                "type": "",
                                "value": "0xff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "28864:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28864:17:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "28837:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "28837:45:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "28837:45:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "28902:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28913:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "28898:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28898:18:39"
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulIdentifier",
                            "src": "28918:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "28891:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "28891:34:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "28891:34:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "28945:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28956:2:39",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "28941:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28941:18:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "28961:3:39",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "28934:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "28934:31:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "28934:31:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "28974:54:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "value3",
                            "nodeType": "YulIdentifier",
                            "src": "29000:6:39"
                          },
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "29012:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29023:3:39",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "29008:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29008:19:39"
                          }
                        ],
                        "functionName": {
                          "name": "abi_encode_string",
                          "nodeType": "YulIdentifier",
                          "src": "28982:17:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "28982:46:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "28974:4:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint256_t_uint8_t_uint256_t_string_memory_ptr__to_t_uint256_t_uint8_t_uint256_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "28738:9:39",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "28749:6:39",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "28757:6:39",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "28765:6:39",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "28773:6:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "28784:4:39",
                    "type": ""
                  }
                ],
                "src": "28592:442:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "29286:357:39",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "29303:9:39"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "29314:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "29296:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "29296:25:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "29296:25:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "29341:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29352:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "29337:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29337:18:39"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "29361:6:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29369:4:39",
                                "type": "",
                                "value": "0xff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "29357:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29357:17:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "29330:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "29330:45:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "29330:45:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "29395:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29406:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "29391:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29391:18:39"
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulIdentifier",
                            "src": "29411:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "29384:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "29384:34:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "29384:34:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "29438:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29449:2:39",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "29434:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29434:18:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "29454:3:39",
                            "type": "",
                            "value": "160"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "29427:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "29427:31:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "29427:31:39"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "29467:60:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "value3",
                            "nodeType": "YulIdentifier",
                            "src": "29499:6:39"
                          },
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "29511:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29522:3:39",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "29507:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29507:19:39"
                          }
                        ],
                        "functionName": {
                          "name": "abi_encode_string",
                          "nodeType": "YulIdentifier",
                          "src": "29481:17:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "29481:46:39"
                      },
                      "variables": [
                        {
                          "name": "tail_1",
                          "nodeType": "YulTypedName",
                          "src": "29471:6:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "29547:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29558:3:39",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "29543:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29543:19:39"
                          },
                          {
                            "arguments": [
                              {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "29568:6:39"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "29576:9:39"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "29564:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29564:22:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "29536:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "29536:51:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "29536:51:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "29596:41:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "value4",
                            "nodeType": "YulIdentifier",
                            "src": "29622:6:39"
                          },
                          {
                            "name": "tail_1",
                            "nodeType": "YulIdentifier",
                            "src": "29630:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "abi_encode_string",
                          "nodeType": "YulIdentifier",
                          "src": "29604:17:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "29604:33:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "29596:4:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint256_t_uint8_t_uint256_t_string_memory_ptr_t_bytes_memory_ptr__to_t_uint256_t_uint8_t_uint256_t_string_memory_ptr_t_bytes_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "29223:9:39",
                    "type": ""
                  },
                  {
                    "name": "value4",
                    "nodeType": "YulTypedName",
                    "src": "29234:6:39",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "29242:6:39",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "29250:6:39",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "29258:6:39",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "29266:6:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "29277:4:39",
                    "type": ""
                  }
                ],
                "src": "29039:604:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "29822:297:39",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "29839:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "29850:2:39",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "29832:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "29832:21:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "29832:21:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "29873:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29884:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "29869:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29869:18:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "29889:2:39",
                            "type": "",
                            "value": "67"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "29862:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "29862:30:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "29862:30:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "29912:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29923:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "29908:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29908:18:39"
                          },
                          {
                            "hexValue": "476f7665726e6f72566f74657351756f72756d4672616374696f6e3a2071756f",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "29928:34:39",
                            "type": "",
                            "value": "GovernorVotesQuorumFraction: quo"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "29901:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "29901:62:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "29901:62:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "29983:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29994:2:39",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "29979:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29979:18:39"
                          },
                          {
                            "hexValue": "72756d4e756d657261746f72206f7665722071756f72756d44656e6f6d696e61",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "29999:34:39",
                            "type": "",
                            "value": "rumNumerator over quorumDenomina"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "29972:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "29972:62:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "29972:62:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "30054:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "30065:3:39",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "30050:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30050:19:39"
                          },
                          {
                            "hexValue": "746f72",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "30071:5:39",
                            "type": "",
                            "value": "tor"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "30043:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "30043:34:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "30043:34:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "30086:27:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "30098:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "30109:3:39",
                            "type": "",
                            "value": "160"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "30094:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "30094:19:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "30086:4:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_0687f8064c09ccf183090b5092c4485c730072a161487645a7e37b56cef356bb__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "29799:9:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "29813:4:39",
                    "type": ""
                  }
                ],
                "src": "29648:471:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "30171:88:39",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "30202:22:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "30204:16:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "30204:18:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "30204:18:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "30187:5:39"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "30198:1:39",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "not",
                              "nodeType": "YulIdentifier",
                              "src": "30194:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30194:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "eq",
                          "nodeType": "YulIdentifier",
                          "src": "30184:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "30184:17:39"
                      },
                      "nodeType": "YulIf",
                      "src": "30181:43:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "30233:20:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "30244:5:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "30251:1:39",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "30240:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "30240:13:39"
                      },
                      "variableNames": [
                        {
                          "name": "ret",
                          "nodeType": "YulIdentifier",
                          "src": "30233:3:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "increment_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "30153:5:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "ret",
                    "nodeType": "YulTypedName",
                    "src": "30163:3:39",
                    "type": ""
                  }
                ],
                "src": "30124:135:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "30342:199:39",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "30388:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "30397:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "30400:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "30390:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "30390:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "30390:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "30363:7:39"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "30372:9:39"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "30359:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30359:23:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "30384:2:39",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "30355:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "30355:32:39"
                      },
                      "nodeType": "YulIf",
                      "src": "30352:52:39"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "30413:29:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "30432:9:39"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "30426:5:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "30426:16:39"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "30417:5:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "30495:16:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "30504:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "30507:1:39",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "30497:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "30497:12:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "30497:12:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "30464:5:39"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "30485:5:39"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "30478:6:39"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "30478:13:39"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "30471:6:39"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "30471:21:39"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "30461:2:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30461:32:39"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "30454:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "30454:40:39"
                      },
                      "nodeType": "YulIf",
                      "src": "30451:60:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "30520:15:39",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "30530:5:39"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "30520:6:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_bool_fromMemory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "30308:9:39",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "30319:7:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "30331:6:39",
                    "type": ""
                  }
                ],
                "src": "30264:277:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "30720:239:39",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "30737:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "30748:2:39",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "30730:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "30730:21:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "30730:21:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "30771:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "30782:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "30767:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30767:18:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "30787:2:39",
                            "type": "",
                            "value": "49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "30760:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "30760:30:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "30760:30:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "30810:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "30821:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "30806:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30806:18:39"
                          },
                          {
                            "hexValue": "476f7665726e6f723a2070726f706f73657220766f7465732062656c6f772070",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "30826:34:39",
                            "type": "",
                            "value": "Governor: proposer votes below p"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "30799:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "30799:62:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "30799:62:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "30881:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "30892:2:39",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "30877:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30877:18:39"
                          },
                          {
                            "hexValue": "726f706f73616c207468726573686f6c64",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "30897:19:39",
                            "type": "",
                            "value": "roposal threshold"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "30870:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "30870:47:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "30870:47:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "30926:27:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "30938:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "30949:3:39",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "30934:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "30934:19:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "30926:4:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_df78ee0077e11770202b643d4ac130b9964a5ac311c9b8d8ed6242eb4e2dcf86__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "30697:9:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "30711:4:39",
                    "type": ""
                  }
                ],
                "src": "30546:413:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "31138:223:39",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "31155:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "31166:2:39",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "31148:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "31148:21:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "31148:21:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "31189:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "31200:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "31185:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31185:18:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "31205:2:39",
                            "type": "",
                            "value": "33"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "31178:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "31178:30:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "31178:30:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "31228:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "31239:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "31224:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31224:18:39"
                          },
                          {
                            "hexValue": "476f7665726e6f723a20696e76616c69642070726f706f73616c206c656e6774",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "31244:34:39",
                            "type": "",
                            "value": "Governor: invalid proposal lengt"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "31217:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "31217:62:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "31217:62:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "31299:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "31310:2:39",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "31295:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31295:18:39"
                          },
                          {
                            "hexValue": "68",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "31315:3:39",
                            "type": "",
                            "value": "h"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "31288:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "31288:31:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "31288:31:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "31328:27:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "31340:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "31351:3:39",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "31336:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "31336:19:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "31328:4:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_35c793b1b5a6be245307722bba06fa552ac609ebfd70358ab0b3220eed40db4d__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "31115:9:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "31129:4:39",
                    "type": ""
                  }
                ],
                "src": "30964:397:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "31540:174:39",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "31557:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "31568:2:39",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "31550:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "31550:21:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "31550:21:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "31591:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "31602:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "31587:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31587:18:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "31607:2:39",
                            "type": "",
                            "value": "24"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "31580:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "31580:30:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "31580:30:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "31630:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "31641:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "31626:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31626:18:39"
                          },
                          {
                            "hexValue": "476f7665726e6f723a20656d7074792070726f706f73616c",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "31646:26:39",
                            "type": "",
                            "value": "Governor: empty proposal"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "31619:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "31619:54:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "31619:54:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "31682:26:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "31694:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "31705:2:39",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "31690:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "31690:18:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "31682:4:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_8400b334e0df18026c76df742cddc258619f9923d5f5b8ba67cd6eec1d1f3513__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "31517:9:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "31531:4:39",
                    "type": ""
                  }
                ],
                "src": "31366:348:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "31893:223:39",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "31910:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "31921:2:39",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "31903:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "31903:21:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "31903:21:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "31944:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "31955:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "31940:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31940:18:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "31960:2:39",
                            "type": "",
                            "value": "33"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "31933:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "31933:30:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "31933:30:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "31983:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "31994:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "31979:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31979:18:39"
                          },
                          {
                            "hexValue": "476f7665726e6f723a2070726f706f73616c20616c7265616479206578697374",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "31999:34:39",
                            "type": "",
                            "value": "Governor: proposal already exist"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "31972:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "31972:62:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "31972:62:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "32054:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "32065:2:39",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "32050:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32050:18:39"
                          },
                          {
                            "hexValue": "73",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "32070:3:39",
                            "type": "",
                            "value": "s"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "32043:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "32043:31:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "32043:31:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "32083:27:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "32095:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "32106:3:39",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "32091:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "32091:19:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "32083:4:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_c1bb0f67bc14091429c4b8b5d74e1f929b2838d72b5fb3c5a2cbef13b2faab40__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "31870:9:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "31884:4:39",
                    "type": ""
                  }
                ],
                "src": "31719:397:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "32704:1281:39",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "32714:13:39",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "32724:3:39",
                        "type": "",
                        "value": "288"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "32718:2:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "32743:9:39"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "32754:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "32736:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "32736:25:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "32736:25:39"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "32770:12:39",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "32780:2:39",
                        "type": "",
                        "value": "32"
                      },
                      "variables": [
                        {
                          "name": "_2",
                          "nodeType": "YulTypedName",
                          "src": "32774:2:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "32802:9:39"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "32813:2:39"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "32798:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32798:18:39"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "32822:6:39"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "32838:3:39",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "32843:1:39",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "32834:3:39"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "32834:11:39"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "32847:1:39",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "32830:3:39"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "32830:19:39"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "32818:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32818:32:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "32791:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "32791:60:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "32791:60:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "32871:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "32882:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "32867:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32867:18:39"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "32887:2:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "32860:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "32860:30:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "32860:30:39"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "32899:70:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "value2",
                            "nodeType": "YulIdentifier",
                            "src": "32942:6:39"
                          },
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "32954:9:39"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "32965:2:39"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "32950:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32950:18:39"
                          }
                        ],
                        "functionName": {
                          "name": "abi_encode_array_address_dyn",
                          "nodeType": "YulIdentifier",
                          "src": "32913:28:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "32913:56:39"
                      },
                      "variables": [
                        {
                          "name": "tail_1",
                          "nodeType": "YulTypedName",
                          "src": "32903:6:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "32989:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "33000:2:39",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "32985:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32985:18:39"
                          },
                          {
                            "arguments": [
                              {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "33009:6:39"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "33017:9:39"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "33005:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33005:22:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "32978:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "32978:50:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "32978:50:39"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "33037:58:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "value3",
                            "nodeType": "YulIdentifier",
                            "src": "33080:6:39"
                          },
                          {
                            "name": "tail_1",
                            "nodeType": "YulIdentifier",
                            "src": "33088:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "abi_encode_array_uint256_dyn",
                          "nodeType": "YulIdentifier",
                          "src": "33051:28:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "33051:44:39"
                      },
                      "variables": [
                        {
                          "name": "tail_2",
                          "nodeType": "YulTypedName",
                          "src": "33041:6:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "33115:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "33126:3:39",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "33111:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33111:19:39"
                          },
                          {
                            "arguments": [
                              {
                                "name": "tail_2",
                                "nodeType": "YulIdentifier",
                                "src": "33136:6:39"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "33144:9:39"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "33132:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33132:22:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "33104:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "33104:51:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "33104:51:39"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "33164:17:39",
                      "value": {
                        "name": "tail_2",
                        "nodeType": "YulIdentifier",
                        "src": "33175:6:39"
                      },
                      "variables": [
                        {
                          "name": "pos",
                          "nodeType": "YulTypedName",
                          "src": "33168:3:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "33190:27:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "value4",
                            "nodeType": "YulIdentifier",
                            "src": "33210:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "33204:5:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "33204:13:39"
                      },
                      "variables": [
                        {
                          "name": "length",
                          "nodeType": "YulTypedName",
                          "src": "33194:6:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "tail_2",
                            "nodeType": "YulIdentifier",
                            "src": "33233:6:39"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "33241:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "33226:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "33226:22:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "33226:22:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "33257:22:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "tail_2",
                            "nodeType": "YulIdentifier",
                            "src": "33268:6:39"
                          },
                          {
                            "name": "_2",
                            "nodeType": "YulIdentifier",
                            "src": "33276:2:39"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "33264:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "33264:15:39"
                      },
                      "variableNames": [
                        {
                          "name": "pos",
                          "nodeType": "YulIdentifier",
                          "src": "33257:3:39"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "33288:50:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "tail_2",
                                "nodeType": "YulIdentifier",
                                "src": "33310:6:39"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "33322:1:39",
                                    "type": "",
                                    "value": "5"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "33325:6:39"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "33318:3:39"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "33318:14:39"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "33306:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33306:27:39"
                          },
                          {
                            "name": "_2",
                            "nodeType": "YulIdentifier",
                            "src": "33335:2:39"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "33302:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "33302:36:39"
                      },
                      "variables": [
                        {
                          "name": "tail_3",
                          "nodeType": "YulTypedName",
                          "src": "33292:6:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "33347:29:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "value4",
                            "nodeType": "YulIdentifier",
                            "src": "33365:6:39"
                          },
                          {
                            "name": "_2",
                            "nodeType": "YulIdentifier",
                            "src": "33373:2:39"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "33361:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "33361:15:39"
                      },
                      "variables": [
                        {
                          "name": "srcPtr",
                          "nodeType": "YulTypedName",
                          "src": "33351:6:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "33385:10:39",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "33394:1:39",
                        "type": "",
                        "value": "0"
                      },
                      "variables": [
                        {
                          "name": "i",
                          "nodeType": "YulTypedName",
                          "src": "33389:1:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "33453:203:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulIdentifier",
                                  "src": "33474:3:39"
                                },
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "tail_3",
                                          "nodeType": "YulIdentifier",
                                          "src": "33487:6:39"
                                        },
                                        {
                                          "name": "tail_2",
                                          "nodeType": "YulIdentifier",
                                          "src": "33495:6:39"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sub",
                                        "nodeType": "YulIdentifier",
                                        "src": "33483:3:39"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "33483:19:39"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "33508:2:39",
                                          "type": "",
                                          "value": "31"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "not",
                                        "nodeType": "YulIdentifier",
                                        "src": "33504:3:39"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "33504:7:39"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "33479:3:39"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "33479:33:39"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "33467:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "33467:46:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "33467:46:39"
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "33526:50:39",
                            "value": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "srcPtr",
                                      "nodeType": "YulIdentifier",
                                      "src": "33560:6:39"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "33554:5:39"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "33554:13:39"
                                },
                                {
                                  "name": "tail_3",
                                  "nodeType": "YulIdentifier",
                                  "src": "33569:6:39"
                                }
                              ],
                              "functionName": {
                                "name": "abi_encode_string",
                                "nodeType": "YulIdentifier",
                                "src": "33536:17:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "33536:40:39"
                            },
                            "variableNames": [
                              {
                                "name": "tail_3",
                                "nodeType": "YulIdentifier",
                                "src": "33526:6:39"
                              }
                            ]
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "33589:25:39",
                            "value": {
                              "arguments": [
                                {
                                  "name": "srcPtr",
                                  "nodeType": "YulIdentifier",
                                  "src": "33603:6:39"
                                },
                                {
                                  "name": "_2",
                                  "nodeType": "YulIdentifier",
                                  "src": "33611:2:39"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "33599:3:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "33599:15:39"
                            },
                            "variableNames": [
                              {
                                "name": "srcPtr",
                                "nodeType": "YulIdentifier",
                                "src": "33589:6:39"
                              }
                            ]
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "33627:19:39",
                            "value": {
                              "arguments": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulIdentifier",
                                  "src": "33638:3:39"
                                },
                                {
                                  "name": "_2",
                                  "nodeType": "YulIdentifier",
                                  "src": "33643:2:39"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "33634:3:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "33634:12:39"
                            },
                            "variableNames": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "33627:3:39"
                              }
                            ]
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "i",
                            "nodeType": "YulIdentifier",
                            "src": "33415:1:39"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "33418:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "33412:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "33412:13:39"
                      },
                      "nodeType": "YulForLoop",
                      "post": {
                        "nodeType": "YulBlock",
                        "src": "33426:18:39",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "33428:14:39",
                            "value": {
                              "arguments": [
                                {
                                  "name": "i",
                                  "nodeType": "YulIdentifier",
                                  "src": "33437:1:39"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "33440:1:39",
                                  "type": "",
                                  "value": "1"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "33433:3:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "33433:9:39"
                            },
                            "variableNames": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "33428:1:39"
                              }
                            ]
                          }
                        ]
                      },
                      "pre": {
                        "nodeType": "YulBlock",
                        "src": "33408:3:39",
                        "statements": []
                      },
                      "src": "33404:252:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "33676:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "33687:3:39",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "33672:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33672:19:39"
                          },
                          {
                            "arguments": [
                              {
                                "name": "tail_3",
                                "nodeType": "YulIdentifier",
                                "src": "33697:6:39"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "33705:9:39"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "33693:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33693:22:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "33665:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "33665:51:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "33665:51:39"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "33725:56:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "value5",
                            "nodeType": "YulIdentifier",
                            "src": "33766:6:39"
                          },
                          {
                            "name": "tail_3",
                            "nodeType": "YulIdentifier",
                            "src": "33774:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "abi_encode_array_bytes_dyn",
                          "nodeType": "YulIdentifier",
                          "src": "33739:26:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "33739:42:39"
                      },
                      "variables": [
                        {
                          "name": "tail_4",
                          "nodeType": "YulTypedName",
                          "src": "33729:6:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "33801:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "33812:3:39",
                                "type": "",
                                "value": "192"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "33797:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33797:19:39"
                          },
                          {
                            "name": "value6",
                            "nodeType": "YulIdentifier",
                            "src": "33818:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "33790:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "33790:35:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "33790:35:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "33845:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "33856:3:39",
                                "type": "",
                                "value": "224"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "33841:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33841:19:39"
                          },
                          {
                            "name": "value7",
                            "nodeType": "YulIdentifier",
                            "src": "33862:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "33834:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "33834:35:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "33834:35:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "33889:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "33900:3:39",
                                "type": "",
                                "value": "256"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "33885:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33885:19:39"
                          },
                          {
                            "arguments": [
                              {
                                "name": "tail_4",
                                "nodeType": "YulIdentifier",
                                "src": "33910:6:39"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "33918:9:39"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "33906:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33906:22:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "33878:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "33878:51:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "33878:51:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "33938:41:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "value8",
                            "nodeType": "YulIdentifier",
                            "src": "33964:6:39"
                          },
                          {
                            "name": "tail_4",
                            "nodeType": "YulIdentifier",
                            "src": "33972:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "abi_encode_string",
                          "nodeType": "YulIdentifier",
                          "src": "33946:17:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "33946:33:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "33938:4:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint256_t_address_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_string_memory_ptr_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_uint256_t_uint256_t_string_memory_ptr__to_t_uint256_t_address_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_string_memory_ptr_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_uint256_t_uint256_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "32609:9:39",
                    "type": ""
                  },
                  {
                    "name": "value8",
                    "nodeType": "YulTypedName",
                    "src": "32620:6:39",
                    "type": ""
                  },
                  {
                    "name": "value7",
                    "nodeType": "YulTypedName",
                    "src": "32628:6:39",
                    "type": ""
                  },
                  {
                    "name": "value6",
                    "nodeType": "YulTypedName",
                    "src": "32636:6:39",
                    "type": ""
                  },
                  {
                    "name": "value5",
                    "nodeType": "YulTypedName",
                    "src": "32644:6:39",
                    "type": ""
                  },
                  {
                    "name": "value4",
                    "nodeType": "YulTypedName",
                    "src": "32652:6:39",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "32660:6:39",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "32668:6:39",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "32676:6:39",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "32684:6:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "32695:4:39",
                    "type": ""
                  }
                ],
                "src": "32121:1864:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "34119:145:39",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "34129:26:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "34141:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "34152:2:39",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "34137:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "34137:18:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "34129:4:39"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "34171:9:39"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "34186:6:39"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "34202:3:39",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "34207:1:39",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "34198:3:39"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "34198:11:39"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "34211:1:39",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "34194:3:39"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "34194:19:39"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "34182:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34182:32:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "34164:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "34164:51:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "34164:51:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "34235:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "34246:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "34231:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34231:18:39"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "34251:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "34224:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "34224:34:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "34224:34:39"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "34080:9:39",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "34091:6:39",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "34099:6:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "34110:4:39",
                    "type": ""
                  }
                ],
                "src": "33990:274:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "34398:175:39",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "34408:26:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "34420:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "34431:2:39",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "34416:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "34416:18:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "34408:4:39"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "34443:29:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "34461:3:39",
                                "type": "",
                                "value": "160"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "34466:1:39",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "34457:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34457:11:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "34470:1:39",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "34453:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "34453:19:39"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "34447:2:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "34488:9:39"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "34503:6:39"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "34511:2:39"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "34499:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34499:15:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "34481:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "34481:34:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "34481:34:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "34535:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "34546:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "34531:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34531:18:39"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "34555:6:39"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "34563:2:39"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "34551:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34551:15:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "34524:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "34524:43:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "34524:43:39"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "34359:9:39",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "34370:6:39",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "34378:6:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "34389:4:39",
                    "type": ""
                  }
                ],
                "src": "34269:304:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "34752:229:39",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "34769:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "34780:2:39",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "34762:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "34762:21:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "34762:21:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "34803:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "34814:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "34799:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34799:18:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "34819:2:39",
                            "type": "",
                            "value": "39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "34792:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "34792:30:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "34792:30:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "34842:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "34853:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "34838:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34838:18:39"
                          },
                          {
                            "hexValue": "476f7665726e6f7253657474696e67733a20766f74696e6720706572696f6420",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "34858:34:39",
                            "type": "",
                            "value": "GovernorSettings: voting period "
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "34831:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "34831:62:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "34831:62:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "34913:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "34924:2:39",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "34909:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34909:18:39"
                          },
                          {
                            "hexValue": "746f6f206c6f77",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "34929:9:39",
                            "type": "",
                            "value": "too low"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "34902:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "34902:37:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "34902:37:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "34948:27:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "34960:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "34971:3:39",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "34956:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "34956:19:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "34948:4:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_3f314603cb191f371d117be724372820f824fc7fbb608c5408b31620bafe9a83__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "34729:9:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "34743:4:39",
                    "type": ""
                  }
                ],
                "src": "34578:403:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "35038:116:39",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "35048:20:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "35063:1:39"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "35066:1:39"
                          }
                        ],
                        "functionName": {
                          "name": "mul",
                          "nodeType": "YulIdentifier",
                          "src": "35059:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "35059:9:39"
                      },
                      "variableNames": [
                        {
                          "name": "product",
                          "nodeType": "YulIdentifier",
                          "src": "35048:7:39"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "35126:22:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "35128:16:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "35128:18:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "35128:18:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "35097:1:39"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "35090:6:39"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "35090:9:39"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "35104:1:39"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "product",
                                        "nodeType": "YulIdentifier",
                                        "src": "35111:7:39"
                                      },
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "35120:1:39"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "div",
                                      "nodeType": "YulIdentifier",
                                      "src": "35107:3:39"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "35107:15:39"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "35101:2:39"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "35101:22:39"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "35087:2:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "35087:37:39"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "35080:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "35080:45:39"
                      },
                      "nodeType": "YulIf",
                      "src": "35077:71:39"
                    }
                  ]
                },
                "name": "checked_mul_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "35017:1:39",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "35020:1:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "product",
                    "nodeType": "YulTypedName",
                    "src": "35026:7:39",
                    "type": ""
                  }
                ],
                "src": "34986:168:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "35191:95:39",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "35208:1:39",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "35215:3:39",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "35220:10:39",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "35211:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "35211:20:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "35201:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "35201:31:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "35201:31:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "35248:1:39",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "35251:4:39",
                            "type": "",
                            "value": "0x12"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "35241:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "35241:15:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "35241:15:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "35272:1:39",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "35275:4:39",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "35265:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "35265:15:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "35265:15:39"
                    }
                  ]
                },
                "name": "panic_error_0x12",
                "nodeType": "YulFunctionDefinition",
                "src": "35159:127:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "35337:171:39",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "35368:111:39",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "35389:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "35396:3:39",
                                      "type": "",
                                      "value": "224"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "35401:10:39",
                                      "type": "",
                                      "value": "0x4e487b71"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shl",
                                    "nodeType": "YulIdentifier",
                                    "src": "35392:3:39"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "35392:20:39"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "35382:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "35382:31:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "35382:31:39"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "35433:1:39",
                                  "type": "",
                                  "value": "4"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "35436:4:39",
                                  "type": "",
                                  "value": "0x12"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "35426:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "35426:15:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "35426:15:39"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "35461:1:39",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "35464:4:39",
                                  "type": "",
                                  "value": "0x24"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "35454:6:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "35454:15:39"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "35454:15:39"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "35357:1:39"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "35350:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "35350:9:39"
                      },
                      "nodeType": "YulIf",
                      "src": "35347:132:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "35488:14:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "35497:1:39"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "35500:1:39"
                          }
                        ],
                        "functionName": {
                          "name": "div",
                          "nodeType": "YulIdentifier",
                          "src": "35493:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "35493:9:39"
                      },
                      "variableNames": [
                        {
                          "name": "r",
                          "nodeType": "YulIdentifier",
                          "src": "35488:1:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_div_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "35322:1:39",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "35325:1:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "r",
                    "nodeType": "YulTypedName",
                    "src": "35331:1:39",
                    "type": ""
                  }
                ],
                "src": "35291:217:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "35607:203:39",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "35617:26:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "array",
                            "nodeType": "YulIdentifier",
                            "src": "35637:5:39"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "35631:5:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "35631:12:39"
                      },
                      "variables": [
                        {
                          "name": "length",
                          "nodeType": "YulTypedName",
                          "src": "35621:6:39",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "35652:32:39",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "array",
                                "nodeType": "YulIdentifier",
                                "src": "35671:5:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "35678:4:39",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "35667:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "35667:16:39"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "35661:5:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "35661:23:39"
                      },
                      "variableNames": [
                        {
                          "name": "value",
                          "nodeType": "YulIdentifier",
                          "src": "35652:5:39"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "35721:83:39",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "35735:59:39",
                            "value": {
                              "arguments": [
                                {
                                  "name": "value",
                                  "nodeType": "YulIdentifier",
                                  "src": "35748:5:39"
                                },
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "35763:1:39",
                                          "type": "",
                                          "value": "3"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "35770:4:39",
                                              "type": "",
                                              "value": "0x20"
                                            },
                                            {
                                              "name": "length",
                                              "nodeType": "YulIdentifier",
                                              "src": "35776:6:39"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "sub",
                                            "nodeType": "YulIdentifier",
                                            "src": "35766:3:39"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "35766:17:39"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "35759:3:39"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "35759:25:39"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "35790:1:39",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "not",
                                        "nodeType": "YulIdentifier",
                                        "src": "35786:3:39"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "35786:6:39"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shl",
                                    "nodeType": "YulIdentifier",
                                    "src": "35755:3:39"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "35755:38:39"
                                }
                              ],
                              "functionName": {
                                "name": "and",
                                "nodeType": "YulIdentifier",
                                "src": "35744:3:39"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "35744:50:39"
                            },
                            "variableNames": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "35735:5:39"
                              }
                            ]
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "35699:6:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "35707:4:39",
                            "type": "",
                            "value": "0x20"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "35696:2:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "35696:16:39"
                      },
                      "nodeType": "YulIf",
                      "src": "35693:111:39"
                    }
                  ]
                },
                "name": "convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "array",
                    "nodeType": "YulTypedName",
                    "src": "35587:5:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "35597:5:39",
                    "type": ""
                  }
                ],
                "src": "35513:297:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "35989:177:39",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "36006:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "36017:2:39",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "35999:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "35999:21:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "35999:21:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "36040:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "36051:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "36036:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36036:18:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "36056:2:39",
                            "type": "",
                            "value": "27"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "36029:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "36029:30:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "36029:30:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "36079:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "36090:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "36075:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36075:18:39"
                          },
                          {
                            "hexValue": "436865636b706f696e743a2064656372656173696e67206b657973",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "36095:29:39",
                            "type": "",
                            "value": "Checkpoint: decreasing keys"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "36068:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "36068:57:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "36068:57:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "36134:26:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "36146:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "36157:2:39",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "36142:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "36142:18:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "36134:4:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_4f6b1769383e9e01fad001f10d4f9180a25f63424c2597419936b157d29f34ec__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "35966:9:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "35980:4:39",
                    "type": ""
                  }
                ],
                "src": "35815:351:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "36352:217:39",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "36362:27:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "36374:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "36385:3:39",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "36370:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "36370:19:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "36362:4:39"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "36405:9:39"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "36416:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "36398:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "36398:25:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "36398:25:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "36443:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "36454:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "36439:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36439:18:39"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "36463:6:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "36471:4:39",
                                "type": "",
                                "value": "0xff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "36459:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36459:17:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "36432:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "36432:45:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "36432:45:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "36497:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "36508:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "36493:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36493:18:39"
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulIdentifier",
                            "src": "36513:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "36486:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "36486:34:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "36486:34:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "36540:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "36551:2:39",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "36536:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36536:18:39"
                          },
                          {
                            "name": "value3",
                            "nodeType": "YulIdentifier",
                            "src": "36556:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "36529:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "36529:34:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "36529:34:39"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "36297:9:39",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "36308:6:39",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "36316:6:39",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "36324:6:39",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "36332:6:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "36343:4:39",
                    "type": ""
                  }
                ],
                "src": "36171:398:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "36748:174:39",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "36765:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "36776:2:39",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "36758:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "36758:21:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "36758:21:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "36799:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "36810:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "36795:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36795:18:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "36815:2:39",
                            "type": "",
                            "value": "24"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "36788:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "36788:30:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "36788:30:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "36838:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "36849:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "36834:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36834:18:39"
                          },
                          {
                            "hexValue": "45434453413a20696e76616c6964207369676e6174757265",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "36854:26:39",
                            "type": "",
                            "value": "ECDSA: invalid signature"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "36827:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "36827:54:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "36827:54:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "36890:26:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "36902:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "36913:2:39",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "36898:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "36898:18:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "36890:4:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "36725:9:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "36739:4:39",
                    "type": ""
                  }
                ],
                "src": "36574:348:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "37101:181:39",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "37118:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "37129:2:39",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "37111:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "37111:21:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "37111:21:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "37152:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "37163:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "37148:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37148:18:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "37168:2:39",
                            "type": "",
                            "value": "31"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "37141:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "37141:30:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "37141:30:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "37191:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "37202:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "37187:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37187:18:39"
                          },
                          {
                            "hexValue": "45434453413a20696e76616c6964207369676e6174757265206c656e677468",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "37207:33:39",
                            "type": "",
                            "value": "ECDSA: invalid signature length"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "37180:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "37180:61:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "37180:61:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "37250:26:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "37262:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "37273:2:39",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "37258:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "37258:18:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "37250:4:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "37078:9:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "37092:4:39",
                    "type": ""
                  }
                ],
                "src": "36927:355:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "37461:224:39",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "37478:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "37489:2:39",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "37471:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "37471:21:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "37471:21:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "37512:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "37523:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "37508:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37508:18:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "37528:2:39",
                            "type": "",
                            "value": "34"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "37501:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "37501:30:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "37501:30:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "37551:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "37562:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "37547:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37547:18:39"
                          },
                          {
                            "hexValue": "45434453413a20696e76616c6964207369676e6174757265202773272076616c",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "37567:34:39",
                            "type": "",
                            "value": "ECDSA: invalid signature 's' val"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "37540:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "37540:62:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "37540:62:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "37622:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "37633:2:39",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "37618:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37618:18:39"
                          },
                          {
                            "hexValue": "7565",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "37638:4:39",
                            "type": "",
                            "value": "ue"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "37611:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "37611:32:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "37611:32:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "37652:27:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "37664:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "37675:3:39",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "37660:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "37660:19:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "37652:4:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "37438:9:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "37452:4:39",
                    "type": ""
                  }
                ],
                "src": "37287:398:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "37864:229:39",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "37881:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "37892:2:39",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "37874:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "37874:21:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "37874:21:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "37915:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "37926:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "37911:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37911:18:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "37931:2:39",
                            "type": "",
                            "value": "39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "37904:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "37904:30:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "37904:30:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "37954:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "37965:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "37950:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37950:18:39"
                          },
                          {
                            "hexValue": "476f7665726e6f72566f74696e6753696d706c653a20766f746520616c726561",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "37970:34:39",
                            "type": "",
                            "value": "GovernorVotingSimple: vote alrea"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "37943:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "37943:62:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "37943:62:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "38025:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "38036:2:39",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "38021:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "38021:18:39"
                          },
                          {
                            "hexValue": "64792063617374",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "38041:9:39",
                            "type": "",
                            "value": "dy cast"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "38014:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "38014:37:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "38014:37:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "38060:27:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "38072:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "38083:3:39",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "38068:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "38068:19:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "38060:4:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_52977fe78dd360b196702e8b1aa8e7d06cd560911da4c4d483548d7b2d1a38d8__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "37841:9:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "37855:4:39",
                    "type": ""
                  }
                ],
                "src": "37690:403:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "38272:243:39",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "38289:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "38300:2:39",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "38282:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "38282:21:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "38282:21:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "38323:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "38334:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "38319:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "38319:18:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "38339:2:39",
                            "type": "",
                            "value": "53"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "38312:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "38312:30:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "38312:30:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "38362:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "38373:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "38358:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "38358:18:39"
                          },
                          {
                            "hexValue": "476f7665726e6f72566f74696e6753696d706c653a20696e76616c6964207661",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "38378:34:39",
                            "type": "",
                            "value": "GovernorVotingSimple: invalid va"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "38351:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "38351:62:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "38351:62:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "38433:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "38444:2:39",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "38429:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "38429:18:39"
                          },
                          {
                            "hexValue": "6c756520666f7220656e756d20566f746554797065",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "38449:23:39",
                            "type": "",
                            "value": "lue for enum VoteType"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "38422:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "38422:51:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "38422:51:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "38482:27:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "38494:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "38505:3:39",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "38490:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "38490:19:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "38482:4:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_c16dd4ca2a7081ef35bfb3860532c95d6b1aacddadf6f22f1058fc06b5718887__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "38249:9:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "38263:4:39",
                    "type": ""
                  }
                ],
                "src": "38098:417:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "38694:179:39",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "38711:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "38722:2:39",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "38704:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "38704:21:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "38704:21:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "38745:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "38756:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "38741:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "38741:18:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "38761:2:39",
                            "type": "",
                            "value": "29"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "38734:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "38734:30:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "38734:30:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "38784:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "38795:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "38780:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "38780:18:39"
                          },
                          {
                            "hexValue": "476f7665726e6f723a20756e6b6e6f776e2070726f706f73616c206964",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "38800:31:39",
                            "type": "",
                            "value": "Governor: unknown proposal id"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "38773:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "38773:59:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "38773:59:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "38841:26:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "38853:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "38864:2:39",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "38849:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "38849:18:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "38841:4:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_be0e8e67d15e920d3846a46401854a27a676d8965bbdde05e68fc2cc5672c892__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "38671:9:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "38685:4:39",
                    "type": ""
                  }
                ],
                "src": "38520:353:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "39052:228:39",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "39069:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "39080:2:39",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "39062:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "39062:21:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "39062:21:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "39103:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "39114:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "39099:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "39099:18:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "39119:2:39",
                            "type": "",
                            "value": "38"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "39092:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "39092:30:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "39092:30:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "39142:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "39153:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "39138:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "39138:18:39"
                          },
                          {
                            "hexValue": "53616665436173743a2076616c756520646f65736e27742066697420696e2036",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "39158:34:39",
                            "type": "",
                            "value": "SafeCast: value doesn't fit in 6"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "39131:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "39131:62:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "39131:62:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "39213:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "39224:2:39",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "39209:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "39209:18:39"
                          },
                          {
                            "hexValue": "342062697473",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "39229:8:39",
                            "type": "",
                            "value": "4 bits"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "39202:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "39202:36:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "39202:36:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "39247:27:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "39259:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "39270:3:39",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "39255:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "39255:19:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "39247:4:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_93ae0c6bf6ffaece591a770b1865daa9f65157e541970aa9d8dc5f89a9490939__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "39029:9:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "39043:4:39",
                    "type": ""
                  }
                ],
                "src": "38878:402:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "39459:179:39",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "39476:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "39487:2:39",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "39469:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "39469:21:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "39469:21:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "39510:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "39521:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "39506:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "39506:18:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "39526:2:39",
                            "type": "",
                            "value": "29"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "39499:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "39499:30:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "39499:30:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "39549:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "39560:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "39545:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "39545:18:39"
                          },
                          {
                            "hexValue": "476f7665726e6f723a2070726f706f73616c206e6f7420616374697665",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "39565:31:39",
                            "type": "",
                            "value": "Governor: proposal not active"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "39538:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "39538:59:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "39538:59:39"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "39606:26:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "39618:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "39629:2:39",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "39614:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "39614:18:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "39606:4:39"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_9df62e32cc9e9c02131fa3d2189c515bf05634e5979aec1a0e5b3a9e44a36d0b__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "39436:9:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "39450:4:39",
                    "type": ""
                  }
                ],
                "src": "39285:353:39"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "39856:276:39",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "39866:27:39",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "39878:9:39"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "39889:3:39",
                            "type": "",
                            "value": "160"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "39874:3:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "39874:19:39"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "39866:4:39"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "39909:9:39"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "39920:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "39902:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "39902:25:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "39902:25:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "39947:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "39958:2:39",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "39943:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "39943:18:39"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "39963:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "39936:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "39936:34:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "39936:34:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "39990:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "40001:2:39",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "39986:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "39986:18:39"
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulIdentifier",
                            "src": "40006:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "39979:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "39979:34:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "39979:34:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "40033:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "40044:2:39",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "40029:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "40029:18:39"
                          },
                          {
                            "name": "value3",
                            "nodeType": "YulIdentifier",
                            "src": "40049:6:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "40022:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "40022:34:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "40022:34:39"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "40076:9:39"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "40087:3:39",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "40072:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "40072:19:39"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value4",
                                "nodeType": "YulIdentifier",
                                "src": "40097:6:39"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "40113:3:39",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "40118:1:39",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "40109:3:39"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "40109:11:39"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "40122:1:39",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "40105:3:39"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "40105:19:39"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "40093:3:39"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "40093:32:39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "40065:6:39"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "40065:61:39"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "40065:61:39"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "39793:9:39",
                    "type": ""
                  },
                  {
                    "name": "value4",
                    "nodeType": "YulTypedName",
                    "src": "39804:6:39",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "39812:6:39",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "39820:6:39",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "39828:6:39",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "39836:6:39",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "39847:4:39",
                    "type": ""
                  }
                ],
                "src": "39643:489:39"
              }
            ]
          },
          "contents": "{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_uint8(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xff))) { revert(0, 0) }\n    }\n    function abi_decode_string_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_bytes(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(and(add(length, 31), not(31)), 0x20)\n    }\n    function abi_decode_available_length_bytes(src, length, end) -> array\n    {\n        array := allocate_memory(array_allocation_size_bytes(length))\n        mstore(array, length)\n        if gt(add(src, length), end) { revert(0, 0) }\n        calldatacopy(add(array, 0x20), src, length)\n        mstore(add(add(array, length), 0x20), 0)\n    }\n    function abi_decode_bytes(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        array := abi_decode_available_length_bytes(add(offset, 0x20), calldataload(offset), end)\n    }\n    function abi_decode_tuple_t_uint256t_uint8t_string_calldata_ptrt_bytes_memory_ptrt_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7\n    {\n        if slt(sub(dataEnd, headStart), 224) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_uint8(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_string_calldata(add(headStart, offset), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value4 := abi_decode_bytes(add(headStart, offset_1), dataEnd)\n        value5 := abi_decode_uint8(add(headStart, 128))\n        value6 := calldataload(add(headStart, 160))\n        value7 := calldataload(add(headStart, 192))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function array_allocation_size_array_address_dyn(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(shl(5, length), 0x20)\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_array_address_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_address_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            let value := calldataload(src)\n            validator_revert_address(value)\n            mstore(dst, value)\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_array_uint256_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_address_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_array_bytes_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_address_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            let innerOffset := calldataload(src)\n            if gt(innerOffset, 0xffffffffffffffff)\n            {\n                let _3 := 0\n                revert(_3, _3)\n            }\n            mstore(dst, abi_decode_bytes(add(add(offset, innerOffset), _2), end))\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_array$_t_bytes_memory_ptr_$dyn_memory_ptrt_bytes32(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_array_address_dyn(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        value2 := abi_decode_array_bytes_dyn(add(headStart, offset_2), dataEnd)\n        value3 := calldataload(add(headStart, 96))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256t_uint8t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_uint8(add(headStart, 32))\n        value2 := abi_decode_uint8(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        value4 := calldataload(add(headStart, 128))\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_enum$_ProposalState_$3447__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        if iszero(lt(value0, 8))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x21)\n            revert(0, 0x24)\n        }\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_decode_tuple_t_uint256t_uint8(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_uint8(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256t_uint8t_string_calldata_ptrt_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_uint8(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_string_calldata(add(headStart, offset), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value4 := abi_decode_bytes(add(headStart, offset_1), dataEnd)\n    }\n    function abi_decode_tuple_t_uint256t_uint8t_string_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_uint8(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_string_calldata(add(headStart, offset), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_array$_t_bytes_memory_ptr_$dyn_memory_ptrt_string_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_array_address_dyn(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        value2 := abi_decode_array_bytes_dyn(add(headStart, offset_2), dataEnd)\n        let offset_3 := calldataload(add(headStart, 96))\n        if gt(offset_3, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset_3)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        value3 := abi_decode_available_length_bytes(add(_2, 32), calldataload(_2), dataEnd)\n    }\n    function abi_encode_array_uint256_dyn(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let _1 := 0x20\n        pos := add(pos, _1)\n        let srcPtr := add(value, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        end := pos\n    }\n    function abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, shl(248, 255)))\n        mstore(add(headStart, 32), 224)\n        let tail_1 := abi_encode_string(value1, add(headStart, 224))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        let tail_2 := abi_encode_string(value2, tail_1)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 160), value5)\n        mstore(add(headStart, 192), sub(tail_2, headStart))\n        tail := abi_encode_array_uint256_dyn(value6, tail_2)\n    }\n    function abi_encode_tuple_t_uint48__to_t_uint48__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffff))\n    }\n    function abi_decode_tuple_t_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value2 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_tuple_t_contract$_TimelockController_$4634(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_addresst_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_string_calldata(add(headStart, offset), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_contract$_IERC5805_$5701__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_packed_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        calldatacopy(pos, value0, value1)\n        let _1 := add(pos, value1)\n        mstore(_1, 0)\n        end := _1\n    }\n    function abi_encode_tuple_t_bytes32_t_uint256_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint256_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), and(value2, 0xff))\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n    }\n    function abi_encode_tuple_t_stringliteral_01397b9b23826f2770c44682f6f60114915147b09511a75fee3231adbc22847f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"Governor: onlyGovernance\")\n        tail := add(headStart, 96)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_a608627370ddd238e48feab42026732822e64969fe5a8155723eaa5f397576d9__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"Governor: proposal not successfu\")\n        mstore(add(headStart, 96), \"l\")\n        tail := add(headStart, 128)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_array_address_dyn(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let _1 := 0x20\n        pos := add(pos, _1)\n        let srcPtr := add(value, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, and(mload(srcPtr), sub(shl(160, 1), 1)))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        end := pos\n    }\n    function abi_encode_array_bytes_dyn(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let _1 := 0x20\n        let updated_pos := add(pos, _1)\n        let pos_1 := updated_pos\n        pos := updated_pos\n        let tail := add(pos_1, shl(5, length))\n        let srcPtr := add(value, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, sub(tail, pos_1))\n            tail := abi_encode_string(mload(srcPtr), tail)\n            srcPtr := add(srcPtr, _1)\n            pos := add(pos, _1)\n        }\n        end := tail\n    }\n    function abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_rational_0_by_1_t_bytes32__to_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_bytes32_t_bytes32__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 160)\n        let tail_1 := abi_encode_array_address_dyn(value0, add(headStart, 160))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        let tail_2 := abi_encode_array_uint256_dyn(value1, tail_1)\n        mstore(add(headStart, 64), sub(tail_2, headStart))\n        tail := abi_encode_array_bytes_dyn(value2, tail_2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_rational_0_by_1_t_bytes32_t_uint256__to_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_bytes32_t_bytes32_t_uint256__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 192)\n        let tail_1 := abi_encode_array_address_dyn(value0, add(headStart, 192))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        let tail_2 := abi_encode_array_uint256_dyn(value1, tail_1)\n        mstore(add(headStart, 64), sub(tail_2, headStart))\n        tail := abi_encode_array_bytes_dyn(value2, tail_2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint256_t_uint8__to_t_bytes32_t_uint256_t_uint8__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), and(value2, 0xff))\n    }\n    function abi_encode_tuple_t_stringliteral_397853bd9e6f0888f5fdcc37d267617a8f74b5e4540887757482a2da22f4cdfc__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"Governor: too late to cancel\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_e3fd25dc9791b847d14d0815e84967e87bbf815be3a68ecdd58e99f67196ddc7__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"Governor: only proposer can canc\")\n        mstore(add(headStart, 96), \"el\")\n        tail := add(headStart, 128)\n    }\n    function abi_decode_tuple_t_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := mload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        let _2 := mload(_1)\n        let array := allocate_memory(array_allocation_size_bytes(_2))\n        mstore(array, _2)\n        if gt(add(add(_1, _2), 32), dataEnd) { revert(0, 0) }\n        copy_memory_to_memory_with_cleanup(add(_1, 32), add(array, 32), _2)\n        value0 := array\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_uint48_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, 0xffffffffffff))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_bytes32__to_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_bytes32__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 128)\n        let tail_1 := abi_encode_array_address_dyn(value0, add(headStart, 128))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        let tail_2 := abi_encode_array_uint256_dyn(value1, tail_1)\n        mstore(add(headStart, 64), sub(tail_2, headStart))\n        tail := abi_encode_array_bytes_dyn(value2, tail_2)\n        mstore(add(headStart, 96), value3)\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_9d2acf551b2466898443b9bc3a403a4d86037386bc5a8960c1bbb0f204e69b79__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 39)\n        mstore(add(headStart, 64), \"SafeCast: value doesn't fit in 2\")\n        mstore(add(headStart, 96), \"24 bits\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c907489dafcfb622d3b83f2657a14d6da2f59e0de3116af0d6a80554c1a7cb19__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"SafeCast: value doesn't fit in 3\")\n        mstore(add(headStart, 96), \"2 bits\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_599034f9324dd4e988c6cea5a00a30f53147fec1b01559682f18cd840028f495__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"SafeCast: value doesn't fit in 4\")\n        mstore(add(headStart, 96), \"8 bits\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_5b1e239298a1362f9b5245bd4e9393de28380a12326aa31532e03fe3f1061d80__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"Governor: vote not currently act\")\n        mstore(add(headStart, 96), \"ive\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256_t_uint8_t_uint256_t_string_memory_ptr__to_t_uint256_t_uint8_t_uint256_t_string_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string(value3, add(headStart, 128))\n    }\n    function abi_encode_tuple_t_uint256_t_uint8_t_uint256_t_string_memory_ptr_t_bytes_memory_ptr__to_t_uint256_t_uint8_t_uint256_t_string_memory_ptr_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 160)\n        let tail_1 := abi_encode_string(value3, add(headStart, 160))\n        mstore(add(headStart, 128), sub(tail_1, headStart))\n        tail := abi_encode_string(value4, tail_1)\n    }\n    function abi_encode_tuple_t_stringliteral_0687f8064c09ccf183090b5092c4485c730072a161487645a7e37b56cef356bb__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 67)\n        mstore(add(headStart, 64), \"GovernorVotesQuorumFraction: quo\")\n        mstore(add(headStart, 96), \"rumNumerator over quorumDenomina\")\n        mstore(add(headStart, 128), \"tor\")\n        tail := add(headStart, 160)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_df78ee0077e11770202b643d4ac130b9964a5ac311c9b8d8ed6242eb4e2dcf86__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 49)\n        mstore(add(headStart, 64), \"Governor: proposer votes below p\")\n        mstore(add(headStart, 96), \"roposal threshold\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_35c793b1b5a6be245307722bba06fa552ac609ebfd70358ab0b3220eed40db4d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"Governor: invalid proposal lengt\")\n        mstore(add(headStart, 96), \"h\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_8400b334e0df18026c76df742cddc258619f9923d5f5b8ba67cd6eec1d1f3513__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"Governor: empty proposal\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_c1bb0f67bc14091429c4b8b5d74e1f929b2838d72b5fb3c5a2cbef13b2faab40__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"Governor: proposal already exist\")\n        mstore(add(headStart, 96), \"s\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256_t_address_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_string_memory_ptr_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_uint256_t_uint256_t_string_memory_ptr__to_t_uint256_t_address_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_string_memory_ptr_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_uint256_t_uint256_t_string_memory_ptr__fromStack_reversed(headStart, value8, value7, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 288\n        mstore(headStart, value0)\n        let _2 := 32\n        mstore(add(headStart, _2), and(value1, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 64), _1)\n        let tail_1 := abi_encode_array_address_dyn(value2, add(headStart, _1))\n        mstore(add(headStart, 96), sub(tail_1, headStart))\n        let tail_2 := abi_encode_array_uint256_dyn(value3, tail_1)\n        mstore(add(headStart, 128), sub(tail_2, headStart))\n        let pos := tail_2\n        let length := mload(value4)\n        mstore(tail_2, length)\n        pos := add(tail_2, _2)\n        let tail_3 := add(add(tail_2, shl(5, length)), _2)\n        let srcPtr := add(value4, _2)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, add(sub(tail_3, tail_2), not(31)))\n            tail_3 := abi_encode_string(mload(srcPtr), tail_3)\n            srcPtr := add(srcPtr, _2)\n            pos := add(pos, _2)\n        }\n        mstore(add(headStart, 160), sub(tail_3, headStart))\n        let tail_4 := abi_encode_array_bytes_dyn(value5, tail_3)\n        mstore(add(headStart, 192), value6)\n        mstore(add(headStart, 224), value7)\n        mstore(add(headStart, 256), sub(tail_4, headStart))\n        tail := abi_encode_string(value8, tail_4)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_encode_tuple_t_stringliteral_3f314603cb191f371d117be724372820f824fc7fbb608c5408b31620bafe9a83__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 39)\n        mstore(add(headStart, 64), \"GovernorSettings: voting period \")\n        mstore(add(headStart, 96), \"too low\")\n        tail := add(headStart, 128)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32(array) -> value\n    {\n        let length := mload(array)\n        value := mload(add(array, 0x20))\n        if lt(length, 0x20)\n        {\n            value := and(value, shl(shl(3, sub(0x20, length)), not(0)))\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_4f6b1769383e9e01fad001f10d4f9180a25f63424c2597419936b157d29f34ec__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 27)\n        mstore(add(headStart, 64), \"Checkpoint: decreasing keys\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature length\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature 's' val\")\n        mstore(add(headStart, 96), \"ue\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_52977fe78dd360b196702e8b1aa8e7d06cd560911da4c4d483548d7b2d1a38d8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 39)\n        mstore(add(headStart, 64), \"GovernorVotingSimple: vote alrea\")\n        mstore(add(headStart, 96), \"dy cast\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c16dd4ca2a7081ef35bfb3860532c95d6b1aacddadf6f22f1058fc06b5718887__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 53)\n        mstore(add(headStart, 64), \"GovernorVotingSimple: invalid va\")\n        mstore(add(headStart, 96), \"lue for enum VoteType\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_be0e8e67d15e920d3846a46401854a27a676d8965bbdde05e68fc2cc5672c892__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Governor: unknown proposal id\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_93ae0c6bf6ffaece591a770b1865daa9f65157e541970aa9d8dc5f89a9490939__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"SafeCast: value doesn't fit in 6\")\n        mstore(add(headStart, 96), \"4 bits\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9df62e32cc9e9c02131fa3d2189c515bf05634e5979aec1a0e5b3a9e44a36d0b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Governor: proposal not active\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, sub(shl(160, 1), 1)))\n    }\n}",
          "id": 39,
          "language": "Yul",
          "name": "#utility.yul"
        }
      ],
      "immutableReferences": {
        "5248": [
          {
            "length": 32,
            "start": 2258
          },
          {
            "length": 32,
            "start": 4058
          },
          {
            "length": 32,
            "start": 4910
          },
          {
            "length": 32,
            "start": 9396
          },
          {
            "length": 32,
            "start": 10074
          }
        ],
        "9093": [
          {
            "length": 32,
            "start": 10863
          }
        ],
        "9095": [
          {
            "length": 32,
            "start": 10821
          }
        ],
        "9097": [
          {
            "length": 32,
            "start": 10779
          }
        ],
        "9100": [
          {
            "length": 32,
            "start": 4784
          }
        ],
        "9103": [
          {
            "length": 32,
            "start": 4826
          }
        ],
        "9109": [
          {
            "length": 32,
            "start": 10944
          }
        ],
        "9111": [
          {
            "length": 32,
            "start": 10984
          }
        ]
      },
      "linkReferences": {},
      "object": "60806040526004361061026b5760003560e01c80637b3c71d311610144578063c28bc2fa116100b6578063deaaa7cc1161007a578063deaaa7cc1461080c578063ea0217cf14610840578063eb9019d414610860578063ece40cc114610880578063f8ce560a146108a0578063fc0c546a146108c057600080fd5b8063c28bc2fa14610741578063c59057e414610754578063cd4265a514610774578063d33219b414610794578063dd4e2ba5146107c657600080fd5b80639a802a6d116101085780639a802a6d1461067e578063a7713a701461069e578063a890c910146106b3578063ab58fb8e146106d3578063b58131b0146106f3578063c01f9e371461070857600080fd5b80637b3c71d3146105d65780637d5e81e2146105f657806384b0196e1461061657806391ddadf41461063e57806397c3d3341461066a57600080fd5b80633e4f49e6116101dd578063544ffc9c116101a1578063544ffc9c146104d757806354fd4d501461052c57806356781388146105565780635f398a141461057657806360c4247f1461059657806370b0f660146105b657600080fd5b80633e4f49e61461041f578063417491db1461044c5780634385963214610458578063452115d6146104a25780634bf5d7e9146104c257600080fd5b8063160cbed71161022f578063160cbed71461034d5780632656227d1461036d5780632d63f693146103805780632fe3e261146103b65780633932abb1146103ea5780633bccf4fd146103ff57600080fd5b806301ffc9a71461029357806302a251a3146102c857806303420181146102eb57806306f3f9e61461030b57806306fdde031461032b57600080fd5b3661028e57306102796108f4565b6001600160a01b03161461028c57600080fd5b005b600080fd5b34801561029f57600080fd5b506102b36102ae3660046134db565b61090d565b60405190151581526020015b60405180910390f35b3480156102d457600080fd5b506102dd61091e565b6040519081526020016102bf565b3480156102f757600080fd5b506102dd610306366004613629565b610929565b34801561031757600080fd5b5061028c6103263660046136cf565b610a21565b34801561033757600080fd5b50610340610ab4565b6040516102bf9190613738565b34801561035957600080fd5b506102dd6103683660046138cc565b610b46565b6102dd61037b3660046138cc565b610d47565b34801561038c57600080fd5b506102dd61039b3660046136cf565b6000908152600360205260409020546001600160401b031690565b3480156103c257600080fd5b506102dd7f899f067f60f2c931e7c0101a76deed5359d3888d391b6f78fb75402bb24d0eff81565b3480156103f657600080fd5b506102dd610e39565b34801561040b57600080fd5b506102dd61041a36600461395b565b610e44565b34801561042b57600080fd5b5061043f61043a3660046136cf565b610eba565b6040516102bf91906139bf565b34801561028c57600080fd5b34801561046457600080fd5b506102b36104733660046139e7565b60008281526009602090815260408083206001600160a01b038516845260030190915290205460ff1692915050565b3480156104ae57600080fd5b506102dd6104bd3660046138cc565b610ec5565b3480156104ce57600080fd5b50610340610fd6565b3480156104e357600080fd5b506105116104f23660046136cf565b6000908152600960205260409020805460018201546002909201549092565b604080519384526020840192909252908201526060016102bf565b34801561053857600080fd5b506040805180820190915260018152603160f81b6020820152610340565b34801561056257600080fd5b506102dd610571366004613a17565b611098565b34801561058257600080fd5b506102dd610591366004613a43565b6110c1565b3480156105a257600080fd5b506102dd6105b13660046136cf565b61110b565b3480156105c257600080fd5b5061028c6105d13660046136cf565b6111bc565b3480156105e257600080fd5b506102dd6105f1366004613ac6565b611243565b34801561060257600080fd5b506102dd610611366004613b1f565b61128b565b34801561062257600080fd5b5061062b6112a2565b6040516102bf9796959493929190613c1a565b34801561064a57600080fd5b5061065361132a565b60405165ffffffffffff90911681526020016102bf565b34801561067657600080fd5b5060646102dd565b34801561068a57600080fd5b506102dd610699366004613c7c565b6113b3565b3480156106aa57600080fd5b506102dd6113ca565b3480156106bf57600080fd5b5061028c6106ce366004613cd4565b6113f4565b3480156106df57600080fd5b506102dd6106ee3660046136cf565b61147b565b3480156106ff57600080fd5b506102dd611515565b34801561071457600080fd5b506102dd6107233660046136cf565b6000908152600360205260409020600101546001600160401b031690565b61028c61074f366004613cf1565b611520565b34801561076057600080fd5b506102dd61076f3660046138cc565b61162f565b34801561078057600080fd5b506102dd61078f3660046138cc565b611669565b3480156107a057600080fd5b50600c546001600160a01b03165b6040516001600160a01b0390911681526020016102bf565b3480156107d257600080fd5b506040805180820190915260208082527f737570706f72743d627261766f2671756f72756d3d666f722c6162737461696e90820152610340565b34801561081857600080fd5b506102dd7f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f81565b34801561084c57600080fd5b5061028c61085b3660046136cf565b611677565b34801561086c57600080fd5b506102dd61087b366004613d34565b6116fe565b34801561088c57600080fd5b5061028c61089b3660046136cf565b61171f565b3480156108ac57600080fd5b506102dd6108bb3660046136cf565b6117a6565b3480156108cc57600080fd5b506107ae7f000000000000000000000000000000000000000000000000000000000000000081565b6000610908600c546001600160a01b031690565b905090565b600061091882611977565b92915050565b600061090860075490565b6000806109cd6109c57f899f067f60f2c931e7c0101a76deed5359d3888d391b6f78fb75402bb24d0eff8c8c8c8c604051610965929190613d60565b60405180910390208b805190602001206040516020016109aa959493929190948552602085019390935260ff9190911660408401526060830152608082015260a00190565b6040516020818303038152906040528051906020012061199c565b8686866119c9565b9050610a138a828b8b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508d92506119e7915050565b9a9950505050505050505050565b610a296108f4565b6001600160a01b0316336001600160a01b031614610a625760405162461bcd60e51b8152600401610a5990613d70565b60405180910390fd5b30610a6b6108f4565b6001600160a01b031614610aa85760008036604051610a8b929190613d60565b604051809103902090505b80610aa16004611b3c565b03610a9657505b610ab181611bbb565b50565b606060028054610ac390613da7565b80601f0160208091040260200160405190810160405280929190818152602001828054610aef90613da7565b8015610b3c5780601f10610b1157610100808354040283529160200191610b3c565b820191906000526020600020905b815481529060010190602001808311610b1f57829003601f168201915b5050505050905090565b600080610b558686868661162f565b90506004610b6282610eba565b6007811115610b7357610b736139a9565b14610b905760405162461bcd60e51b8152600401610a5990613de1565b600c546040805163793d064960e11b815290516000926001600160a01b03169163f27a0c929160048083019260209291908290030181865afa158015610bda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfe9190613e22565b600c5460405163b1c5f42760e01b81529192506001600160a01b03169063b1c5f42790610c38908a908a908a906000908b90600401613ec9565b602060405180830381865afa158015610c55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c799190613e22565b6000838152600d602052604080822092909255600c5491516308f2a0bb60e41b81526001600160a01b0390921691638f2a0bb091610cc4918b918b918b91908b908990600401613f17565b600060405180830381600087803b158015610cde57600080fd5b505af1158015610cf2573d6000803e3d6000fd5b505050507f9a2e42fd6722813d69113e7d0079d3d940171428df7373df9c7f7617cfda2892828242610d249190613f85565b604080519283526020830191909152015b60405180910390a15095945050505050565b600080610d568686868661162f565b90506000610d6382610eba565b90506004816007811115610d7957610d796139a9565b1480610d9657506005816007811115610d9457610d946139a9565b145b610db25760405162461bcd60e51b8152600401610a5990613de1565b60008281526003602052604090819020600201805460ff19166001179055517f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f90610e009084815260200190565b60405180910390a1610e158288888888611d29565b610e228288888888611dcb565b610e2f8288888888611dd8565b5095945050505050565b600061090860065490565b604080517f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f602082015290810186905260ff851660608201526000908190610e92906109c5906080016109aa565b9050610eaf87828860405180602001604052806000815250611e11565b979650505050505050565b600061091882611e34565b600080610ed48686868661162f565b90506000610ee182610eba565b6007811115610ef257610ef26139a9565b14610f3f5760405162461bcd60e51b815260206004820152601c60248201527f476f7665726e6f723a20746f6f206c61746520746f2063616e63656c000000006044820152606401610a59565b600081815260036020526040902054600160401b90046001600160a01b0316336001600160a01b031614610fc05760405162461bcd60e51b815260206004820152602260248201527f476f7665726e6f723a206f6e6c792070726f706f7365722063616e2063616e63604482015261195b60f21b6064820152608401610a59565b610fcc86868686611669565b9695505050505050565b60607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634bf5d7e96040518163ffffffff1660e01b8152600401600060405180830381865afa92505050801561105757506040513d6000823e601f3d908101601f191682016040526110549190810190613f98565b60015b611093575060408051808201909152601d81527f6d6f64653d626c6f636b6e756d6265722666726f6d3d64656661756c74000000602082015290565b919050565b6000803390506110b984828560405180602001604052806000815250611e11565b949350505050565b600080339050610eaf87828888888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a92506119e7915050565b600b54600090808203611122575050600a54919050565b6000600b611131600184614005565b8154811061114157611141614018565b60009182526020918290206040805180820190915291015463ffffffff8116808352600160201b9091046001600160e01b0316928201929092529150841061119757602001516001600160e01b03169392505050565b6111ab6111a385611852565b600b90611f7e565b6001600160e01b0316949350505050565b6111c46108f4565b6001600160a01b0316336001600160a01b0316146111f45760405162461bcd60e51b8152600401610a5990613d70565b306111fd6108f4565b6001600160a01b03161461123a576000803660405161121d929190613d60565b604051809103902090505b806112336004611b3c565b0361122857505b610ab181612023565b600080339050610fcc86828787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611e1192505050565b600061129985858585612064565b95945050505050565b6000606080828080836112d57f0000000000000000000000000000000000000000000000000000000000000000836123e6565b6113007f000000000000000000000000000000000000000000000000000000000000000060016123e6565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166391ddadf46040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156113a6575060408051601f3d908101601f191682019092526113a39181019061402e565b60015b6110935761090843611910565b60006113c084848461248b565b90505b9392505050565b600b54600090156113ed576113df600b6118d2565b6001600160e01b0316905090565b50600a5490565b6113fc6108f4565b6001600160a01b0316336001600160a01b03161461142c5760405162461bcd60e51b8152600401610a5990613d70565b306114356108f4565b6001600160a01b0316146114725760008036604051611455929190613d60565b604051809103902090505b8061146b6004611b3c565b0361146057505b610ab181612521565b600c546000828152600d602052604080822054905163d45c443560e01b81526004810191909152909182916001600160a01b039091169063d45c443590602401602060405180830381865afa1580156114d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fc9190613e22565b90508060011461150c57806113c3565b60009392505050565b600061090860085490565b6115286108f4565b6001600160a01b0316336001600160a01b0316146115585760405162461bcd60e51b8152600401610a5990613d70565b306115616108f4565b6001600160a01b03161461159e5760008036604051611581929190613d60565b604051809103902090505b806115976004611b3c565b0361158c57505b600080856001600160a01b03168585856040516115bc929190613d60565b60006040518083038185875af1925050503d80600081146115f9576040519150601f19603f3d011682016040523d82523d6000602084013e6115fe565b606091505b509150915061162682826040518060600160405280602881526020016143e06028913961258a565b50505050505050565b6000848484846040516020016116489493929190614056565b60408051601f19818403018152919052805160209091012095945050505050565b6000611299858585856125a3565b61167f6108f4565b6001600160a01b0316336001600160a01b0316146116af5760405162461bcd60e51b8152600401610a5990613d70565b306116b86108f4565b6001600160a01b0316146116f557600080366040516116d8929190613d60565b604051809103902090505b806116ee6004611b3c565b036116e357505b610ab181612655565b60006113c3838361171a60408051602081019091526000815290565b61248b565b6117276108f4565b6001600160a01b0316336001600160a01b0316146117575760405162461bcd60e51b8152600401610a5990613d70565b306117606108f4565b6001600160a01b03161461179d5760008036604051611780929190613d60565b604051809103902090505b806117966004611b3c565b0361178b57505b610ab1816126f6565b600061091882612737565b60006020835110156117cd576117c6836127e1565b9050610918565b816117d884826140ec565b5060009050610918565b90565b60006001600160e01b0382111561184e5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b6064820152608401610a59565b5090565b600063ffffffff82111561184e5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b6064820152608401610a59565b6000806118c585858561281f565b915091505b935093915050565b8054600090801561150c576118fa836118ec600184614005565b600091825260209091200190565b54600160201b90046001600160e01b03166113c3565b600065ffffffffffff82111561184e5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203460448201526538206269747360d01b6064820152608401610a59565b60006001600160e01b03198216636e665ced60e01b14806109185750610918826129be565b60006109186119a9612a0e565b8360405161190160f01b8152600281019290925260228201526042902090565b60008060006119da87878787612b39565b91509150610e2f81612bfd565b60008581526003602052604081206001611a0088610eba565b6007811115611a1157611a116139a9565b14611a6a5760405162461bcd60e51b815260206004820152602360248201527f476f7665726e6f723a20766f7465206e6f742063757272656e746c792061637460448201526269766560e81b6064820152608401610a59565b8054600090611a849088906001600160401b03168661248b565b9050611a938888888488612d47565b8351600003611ae857866001600160a01b03167fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda489888489604051611adb94939291906141ab565b60405180910390a2610eaf565b866001600160a01b03167fe2babfbac5889a709b63bb7f598b324e08bc5a4fb9ec647fb3cbc9ec07eb87128988848989604051611b299594939291906141d3565b60405180910390a2979650505050505050565b6000611b578254600f81810b600160801b909204900b131590565b15611b7557604051631ed9509560e11b815260040160405180910390fd5b508054600f0b6000818152600180840160205260408220805492905583546fffffffffffffffffffffffffffffffff191692016001600160801b03169190911790915590565b6064811115611c3e5760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72566f74657351756f72756d4672616374696f6e3a2071756f60448201527f72756d4e756d657261746f72206f7665722071756f72756d44656e6f6d696e616064820152623a37b960e91b608482015260a401610a59565b6000611c486113ca565b90508015801590611c595750600b54155b15611cbd576040805180820190915260008152600b9060208101611c7c846117e5565b6001600160e01b039081169091528254600181018455600093845260209384902083519490930151909116600160201b0263ffffffff909316929092179101555b611cea611cd8611ccb61132a565b65ffffffffffff16611852565b611ce1846117e5565b600b91906118b7565b505060408051828152602081018490527f0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b4633997910160405180910390a15050565b30611d326108f4565b6001600160a01b031614611dc45760005b8451811015611dc257306001600160a01b0316858281518110611d6857611d68614018565b60200260200101516001600160a01b031603611db257611db2838281518110611d9357611d93614018565b6020026020010151805190602001206004612ec190919063ffffffff16565b611dbb81614219565b9050611d43565b505b5050505050565b611dc48585858585612efd565b30611de16108f4565b6001600160a01b031614611dc457600454600f81810b600160801b909204900b1315611dc4576000600455611dc4565b600061129985858585611e2f60408051602081019091526000815290565b6119e7565b600080611e4083612f71565b90506004816007811115611e5657611e566139a9565b14611e615792915050565b6000838152600d602052604090205480611e7c575092915050565b600c54604051632ab0f52960e01b8152600481018390526001600160a01b0390911690632ab0f52990602401602060405180830381865afa158015611ec5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee99190614232565b15611ef8575060079392505050565b600c54604051632c258a9f60e11b8152600481018390526001600160a01b039091169063584b153e90602401602060405180830381865afa158015611f41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f659190614232565b15611f74575060059392505050565b5060029392505050565b815460009081816005811115611fdb576000611f99846130b1565b611fa39085614005565b60008881526020902090915081015463ffffffff9081169087161015611fcb57809150611fd9565b611fd6816001613f85565b92505b505b6000611fe987878585613199565b9050801561201657612000876118ec600184614005565b54600160201b90046001600160e01b0316610eaf565b6000979650505050505050565b60065460408051918252602082018390527fc565b045403dc03c2eea82b81a0465edad9e2e7fc4d97e11421c209da93d7a93910160405180910390a1600655565b6000338161207061132a565b65ffffffffffff169050612082611515565b6120918361087b600185614005565b10156120f95760405162461bcd60e51b815260206004820152603160248201527f476f7665726e6f723a2070726f706f73657220766f7465732062656c6f7720706044820152701c9bdc1bdcd85b081d1a1c995cda1bdb19607a1b6064820152608401610a59565b600061210e888888888051906020012061162f565b905086518851146121315760405162461bcd60e51b8152600401610a5990614254565b85518851146121525760405162461bcd60e51b8152600401610a5990614254565b60008851116121a35760405162461bcd60e51b815260206004820152601860248201527f476f7665726e6f723a20656d7074792070726f706f73616c00000000000000006044820152606401610a59565b6000818152600360205260409020546001600160401b0316156122125760405162461bcd60e51b815260206004820152602160248201527f476f7665726e6f723a2070726f706f73616c20616c72656164792065786973746044820152607360f81b6064820152608401610a59565b600061221c610e39565b6122269084613f85565b9050600061223261091e565b61223c9083613f85565b90506040518060e00160405280612252846131f7565b6001600160401b031681526001600160a01b03871660208201526000604082015260600161227f836131f7565b6001600160401b039081168252600060208084018290526040808501839052606094850183905288835260038252918290208551815492870151878501519186166001600160e01b031990941693909317600160401b6001600160a01b039094168402176001600160e01b0316600160e01b60e09290921c91909102178155938501516080860151908416921c0217600183015560a08301516002909201805460c09094015161ffff1990941692151561ff00191692909217610100931515939093029290921790558a517f7d84a6263ae0d98d3329bd7b46bb4e8d6f98cd35a7adb45c274c8b7fd5ebd5e091859188918e918e918111156123835761238361355e565b6040519080825280602002602001820160405280156123b657816020015b60608152602001906001900390816123a15790505b508d88888f6040516123d099989796959493929190614295565b60405180910390a1509098975050505050505050565b606060ff8316156123fa576117c68361325f565b81805461240690613da7565b80601f016020809104026020016040519081016040528092919081815260200182805461243290613da7565b801561247f5780601f106124545761010080835404028352916020019161247f565b820191906000526020600020905b81548152906001019060200180831161246257829003601f168201915b50505050509050610918565b604051630748d63560e31b81526001600160a01b038481166004830152602482018490526000917f000000000000000000000000000000000000000000000000000000000000000090911690633a46b1a890604401602060405180830381865afa1580156124fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c09190613e22565b600c54604080516001600160a01b03928316815291831660208301527f08f74ea46ef7894f65eabfb5e6e695de773a000b47c529ab559178069b226401910160405180910390a1600c80546001600160a01b0319166001600160a01b0392909216919091179055565b606083156125995750816113c3565b6113c38383613294565b6000806125b2868686866132be565b6000818152600d60205260409020549091501561129957600c546000828152600d60205260409081902054905163c4d252f560e01b81526001600160a01b039092169163c4d252f59161260b9160040190815260200190565b600060405180830381600087803b15801561262557600080fd5b505af1158015612639573d6000803e3d6000fd5b5050506000828152600d60205260408120555095945050505050565b600081116126b55760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f7253657474696e67733a20766f74696e6720706572696f6420604482015266746f6f206c6f7760c81b6064820152608401610a59565b60075460408051918252602082018390527f7e3f7f0708a84de9203036abaa450dccc85ad5ff52f78c170f3edb55cf5e8828910160405180910390a1600755565b60085460408051918252602082018390527fccb45da8d5717e6c4544694297c4ba5cf151d455c9bb0ed4fc7a38411bc05461910160405180910390a1600855565b600060646127448361110b565b604051632394e7a360e21b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638e539e8c90602401602060405180830381865afa1580156127a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127cd9190613e22565b6127d7919061436c565b6109189190614399565b600080829050601f8151111561280c578260405163305a27a960e01b8152600401610a599190613738565b8051612817826143bb565b179392505050565b82546000908190801561296557600061283d876118ec600185614005565b60408051808201909152905463ffffffff808216808452600160201b9092046001600160e01b0316602084015291925090871610156128be5760405162461bcd60e51b815260206004820152601b60248201527f436865636b706f696e743a2064656372656173696e67206b65797300000000006044820152606401610a59565b805163ffffffff80881691160361290657846128df886118ec600186614005565b80546001600160e01b0392909216600160201b0263ffffffff909216919091179055612955565b6040805180820190915263ffffffff80881682526001600160e01b0380881660208085019182528b54600181018d5560008d81529190912094519151909216600160201b029216919091179101555b6020015192508391506118ca9050565b50506040805180820190915263ffffffff80851682526001600160e01b0380851660208085019182528854600181018a5560008a815291822095519251909316600160201b0291909316179201919091559050816118ca565b60006001600160e01b03198216635e326c8b60e11b14806129ef57506001600160e01b031982166379dd796f60e01b145b8061091857506301ffc9a760e01b6001600160e01b0319831614610918565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015612a6757507f000000000000000000000000000000000000000000000000000000000000000046145b15612a9157507f000000000000000000000000000000000000000000000000000000000000000090565b610908604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612b705750600090506003612bf4565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612bc4573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612bed57600060019250925050612bf4565b9150600090505b94509492505050565b6000816004811115612c1157612c116139a9565b03612c195750565b6001816004811115612c2d57612c2d6139a9565b03612c7a5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610a59565b6002816004811115612c8e57612c8e6139a9565b03612cdb5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610a59565b6003816004811115612cef57612cef6139a9565b03610ab15760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610a59565b60008581526009602090815260408083206001600160a01b0388168452600381019092529091205460ff1615612dcf5760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f72566f74696e6753696d706c653a20766f746520616c726561604482015266191e4818d85cdd60ca1b6064820152608401610a59565b6001600160a01b03851660009081526003820160205260409020805460ff1916600117905560ff8416612e1b5782816000016000828254612e109190613f85565b90915550611dc29050565b60001960ff851601612e3b5782816001016000828254612e109190613f85565b60011960ff851601612e5b5782816002016000828254612e109190613f85565b60405162461bcd60e51b815260206004820152603560248201527f476f7665726e6f72566f74696e6753696d706c653a20696e76616c69642076616044820152746c756520666f7220656e756d20566f74655479706560581b6064820152608401610a59565b8154600160801b90819004600f0b6000818152600180860160205260409091209390935583546001600160801b03908116939091011602179055565b600c5460405163e38335e560e01b81526001600160a01b039091169063e38335e5903490612f38908890889088906000908990600401613ec9565b6000604051808303818588803b158015612f5157600080fd5b505af1158015612f65573d6000803e3d6000fd5b50505050505050505050565b6000818152600360205260408120600281015460ff1615612f955750600792915050565b6002810154610100900460ff1615612fb05750600292915050565b6000838152600360205260408120546001600160401b0316908190036130185760405162461bcd60e51b815260206004820152601d60248201527f476f7665726e6f723a20756e6b6e6f776e2070726f706f73616c2069640000006044820152606401610a59565b600061302261132a565b65ffffffffffff16905080821061303e57506000949350505050565b6000858152600360205260409020600101546001600160401b031681811061306c5750600195945050505050565b613075866133ca565b8015613094575060008681526009602052604090208054600190910154115b156130a55750600495945050505050565b50600395945050505050565b6000816000036130c357506000919050565b600060016130d084613416565b901c6001901b905060018184816130e9576130e9614383565b048201901c9050600181848161310157613101614383565b048201901c9050600181848161311957613119614383565b048201901c9050600181848161313157613131614383565b048201901c9050600181848161314957613149614383565b048201901c9050600181848161316157613161614383565b048201901c9050600181848161317957613179614383565b048201901c90506113c38182858161319357613193614383565b046134aa565b60005b818310156131ef5760006131b084846134c0565b60008781526020902090915063ffffffff86169082015463ffffffff1611156131db578092506131e9565b6131e6816001613f85565b93505b5061319c565b509392505050565b60006001600160401b0382111561184e5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b6064820152608401610a59565b60408051602080825281830190925260609160ff84169160009180820181803683375050509182525060208101929092525090565b8151156132a45781518083602001fd5b8060405162461bcd60e51b8152600401610a599190613738565b6000806132cd8686868661162f565b905060006132da82610eba565b905060028160078111156132f0576132f06139a9565b141580156133105750600681600781111561330d5761330d6139a9565b14155b801561332e5750600781600781111561332b5761332b6139a9565b14155b61337a5760405162461bcd60e51b815260206004820152601d60248201527f476f7665726e6f723a2070726f706f73616c206e6f74206163746976650000006044820152606401610a59565b60008281526003602052604090819020600201805461ff001916610100179055517f789cf55be980739dad1d0699b93b58e806b51c9d96619bfa8fe0a28abaa7b30c90610d359084815260200190565b6000818152600960205260408120600281015460018201546133ec9190613f85565b60008481526003602052604090205461340d906001600160401b03166117a6565b11159392505050565b600080608083901c1561342b57608092831c92015b604083901c1561343d57604092831c92015b602083901c1561344f57602092831c92015b601083901c1561346157601092831c92015b600883901c1561347357600892831c92015b600483901c1561348557600492831c92015b600283901c1561349757600292831c92015b600183901c156109185760010192915050565b60008183106134b957816113c3565b5090919050565b60006134cf6002848418614399565b6113c390848416613f85565b6000602082840312156134ed57600080fd5b81356001600160e01b0319811681146113c357600080fd5b803560ff8116811461109357600080fd5b60008083601f84011261352857600080fd5b5081356001600160401b0381111561353f57600080fd5b60208301915083602082850101111561355757600080fd5b9250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561359c5761359c61355e565b604052919050565b60006001600160401b038211156135bd576135bd61355e565b50601f01601f191660200190565b60006135de6135d9846135a4565b613574565b90508281528383830111156135f257600080fd5b828260208301376000602084830101529392505050565b600082601f83011261361a57600080fd5b6113c3838335602085016135cb565b60008060008060008060008060e0898b03121561364557600080fd5b8835975061365560208a01613505565b965060408901356001600160401b038082111561367157600080fd5b61367d8c838d01613516565b909850965060608b013591508082111561369657600080fd5b506136a38b828c01613609565b9450506136b260808a01613505565b925060a0890135915060c089013590509295985092959890939650565b6000602082840312156136e157600080fd5b5035919050565b60005b838110156137035781810151838201526020016136eb565b50506000910152565b600081518084526137248160208601602086016136e8565b601f01601f19169290920160200192915050565b6020815260006113c3602083018461370c565b60006001600160401b038211156137645761376461355e565b5060051b60200190565b6001600160a01b0381168114610ab157600080fd5b600082601f83011261379457600080fd5b813560206137a46135d98361374b565b82815260059290921b840181019181810190868411156137c357600080fd5b8286015b848110156137e75780356137da8161376e565b83529183019183016137c7565b509695505050505050565b600082601f83011261380357600080fd5b813560206138136135d98361374b565b82815260059290921b8401810191818101908684111561383257600080fd5b8286015b848110156137e75780358352918301918301613836565b600082601f83011261385e57600080fd5b8135602061386e6135d98361374b565b82815260059290921b8401810191818101908684111561388d57600080fd5b8286015b848110156137e75780356001600160401b038111156138b05760008081fd5b6138be8986838b0101613609565b845250918301918301613891565b600080600080608085870312156138e257600080fd5b84356001600160401b03808211156138f957600080fd5b61390588838901613783565b9550602087013591508082111561391b57600080fd5b613927888389016137f2565b9450604087013591508082111561393d57600080fd5b5061394a8782880161384d565b949793965093946060013593505050565b600080600080600060a0868803121561397357600080fd5b8535945061398360208701613505565b935061399160408701613505565b94979396509394606081013594506080013592915050565b634e487b7160e01b600052602160045260246000fd5b60208101600883106139e157634e487b7160e01b600052602160045260246000fd5b91905290565b600080604083850312156139fa57600080fd5b823591506020830135613a0c8161376e565b809150509250929050565b60008060408385031215613a2a57600080fd5b82359150613a3a60208401613505565b90509250929050565b600080600080600060808688031215613a5b57600080fd5b85359450613a6b60208701613505565b935060408601356001600160401b0380821115613a8757600080fd5b613a9389838a01613516565b90955093506060880135915080821115613aac57600080fd5b50613ab988828901613609565b9150509295509295909350565b60008060008060608587031215613adc57600080fd5b84359350613aec60208601613505565b925060408501356001600160401b03811115613b0757600080fd5b613b1387828801613516565b95989497509550505050565b60008060008060808587031215613b3557600080fd5b84356001600160401b0380821115613b4c57600080fd5b613b5888838901613783565b95506020870135915080821115613b6e57600080fd5b613b7a888389016137f2565b94506040870135915080821115613b9057600080fd5b613b9c8883890161384d565b93506060870135915080821115613bb257600080fd5b508501601f81018713613bc457600080fd5b613bd3878235602084016135cb565b91505092959194509250565b600081518084526020808501945080840160005b83811015613c0f57815187529582019590820190600101613bf3565b509495945050505050565b60ff60f81b8816815260e060208201526000613c3960e083018961370c565b8281036040840152613c4b818961370c565b606084018890526001600160a01b038716608085015260a0840186905283810360c08501529050610a138185613bdf565b600080600060608486031215613c9157600080fd5b8335613c9c8161376e565b92506020840135915060408401356001600160401b03811115613cbe57600080fd5b613cca86828701613609565b9150509250925092565b600060208284031215613ce657600080fd5b81356113c38161376e565b60008060008060608587031215613d0757600080fd5b8435613d128161376e565b93506020850135925060408501356001600160401b03811115613b0757600080fd5b60008060408385031215613d4757600080fd5b8235613d528161376e565b946020939093013593505050565b8183823760009101908152919050565b60208082526018908201527f476f7665726e6f723a206f6e6c79476f7665726e616e63650000000000000000604082015260600190565b600181811c90821680613dbb57607f821691505b602082108103613ddb57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526021908201527f476f7665726e6f723a2070726f706f73616c206e6f74207375636365737366756040820152601b60fa1b606082015260800190565b600060208284031215613e3457600080fd5b5051919050565b600081518084526020808501945080840160005b83811015613c0f5781516001600160a01b031687529582019590820190600101613e4f565b600081518084526020808501808196508360051b8101915082860160005b85811015613ebc578284038952613eaa84835161370c565b98850198935090840190600101613e92565b5091979650505050505050565b60a081526000613edc60a0830188613e3b565b8281036020840152613eee8188613bdf565b90508281036040840152613f028187613e74565b60608401959095525050608001529392505050565b60c081526000613f2a60c0830189613e3b565b8281036020840152613f3c8189613bdf565b90508281036040840152613f508188613e74565b60608401969096525050608081019290925260a0909101529392505050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561091857610918613f6f565b600060208284031215613faa57600080fd5b81516001600160401b03811115613fc057600080fd5b8201601f81018413613fd157600080fd5b8051613fdf6135d9826135a4565b818152856020838501011115613ff457600080fd5b6112998260208301602086016136e8565b8181038181111561091857610918613f6f565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561404057600080fd5b815165ffffffffffff811681146113c357600080fd5b6080815260006140696080830187613e3b565b828103602084015261407b8187613bdf565b9050828103604084015261408f8186613e74565b91505082606083015295945050505050565b601f8211156140e757600081815260208120601f850160051c810160208610156140c85750805b601f850160051c820191505b81811015611dc2578281556001016140d4565b505050565b81516001600160401b038111156141055761410561355e565b614119816141138454613da7565b846140a1565b602080601f83116001811461414e57600084156141365750858301515b600019600386901b1c1916600185901b178555611dc2565b600085815260208120601f198616915b8281101561417d5788860151825594840194600190910190840161415e565b508582101561419b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b84815260ff84166020820152826040820152608060608201526000610fcc608083018461370c565b85815260ff8516602082015283604082015260a0606082015260006141fb60a083018561370c565b828103608084015261420d818561370c565b98975050505050505050565b60006001820161422b5761422b613f6f565b5060010190565b60006020828403121561424457600080fd5b815180151581146113c357600080fd5b60208082526021908201527f476f7665726e6f723a20696e76616c69642070726f706f73616c206c656e67746040820152600d60fb1b606082015260800190565b60006101208b8352602060018060a01b038c16818501528160408501526142be8285018c613e3b565b915083820360608501526142d2828b613bdf565b915083820360808501528189518084528284019150828160051b850101838c0160005b8381101561432357601f1987840301855261431183835161370c565b948601949250908501906001016142f5565b505086810360a0880152614337818c613e74565b9450505050508560c08401528460e084015282810361010084015261435c818561370c565b9c9b505050505050505050505050565b808202811582820484141761091857610918613f6f565b634e487b7160e01b600052601260045260246000fd5b6000826143b657634e487b7160e01b600052601260045260246000fd5b500490565b80516020808301519190811015613ddb5760001960209190910360031b1b1691905056fe476f7665726e6f723a2072656c617920726576657274656420776974686f7574206d657373616765a26469706673582212206b9906be57a4cad5ec0139f5459c9a06655642a449defd1476e20f15f1755a5164736f6c63430008110033",
      "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x26B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7B3C71D3 GT PUSH2 0x144 JUMPI DUP1 PUSH4 0xC28BC2FA GT PUSH2 0xB6 JUMPI DUP1 PUSH4 0xDEAAA7CC GT PUSH2 0x7A JUMPI DUP1 PUSH4 0xDEAAA7CC EQ PUSH2 0x80C JUMPI DUP1 PUSH4 0xEA0217CF EQ PUSH2 0x840 JUMPI DUP1 PUSH4 0xEB9019D4 EQ PUSH2 0x860 JUMPI DUP1 PUSH4 0xECE40CC1 EQ PUSH2 0x880 JUMPI DUP1 PUSH4 0xF8CE560A EQ PUSH2 0x8A0 JUMPI DUP1 PUSH4 0xFC0C546A EQ PUSH2 0x8C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xC28BC2FA EQ PUSH2 0x741 JUMPI DUP1 PUSH4 0xC59057E4 EQ PUSH2 0x754 JUMPI DUP1 PUSH4 0xCD4265A5 EQ PUSH2 0x774 JUMPI DUP1 PUSH4 0xD33219B4 EQ PUSH2 0x794 JUMPI DUP1 PUSH4 0xDD4E2BA5 EQ PUSH2 0x7C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9A802A6D GT PUSH2 0x108 JUMPI DUP1 PUSH4 0x9A802A6D EQ PUSH2 0x67E JUMPI DUP1 PUSH4 0xA7713A70 EQ PUSH2 0x69E JUMPI DUP1 PUSH4 0xA890C910 EQ PUSH2 0x6B3 JUMPI DUP1 PUSH4 0xAB58FB8E EQ PUSH2 0x6D3 JUMPI DUP1 PUSH4 0xB58131B0 EQ PUSH2 0x6F3 JUMPI DUP1 PUSH4 0xC01F9E37 EQ PUSH2 0x708 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7B3C71D3 EQ PUSH2 0x5D6 JUMPI DUP1 PUSH4 0x7D5E81E2 EQ PUSH2 0x5F6 JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x616 JUMPI DUP1 PUSH4 0x91DDADF4 EQ PUSH2 0x63E JUMPI DUP1 PUSH4 0x97C3D334 EQ PUSH2 0x66A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3E4F49E6 GT PUSH2 0x1DD JUMPI DUP1 PUSH4 0x544FFC9C GT PUSH2 0x1A1 JUMPI DUP1 PUSH4 0x544FFC9C EQ PUSH2 0x4D7 JUMPI DUP1 PUSH4 0x54FD4D50 EQ PUSH2 0x52C JUMPI DUP1 PUSH4 0x56781388 EQ PUSH2 0x556 JUMPI DUP1 PUSH4 0x5F398A14 EQ PUSH2 0x576 JUMPI DUP1 PUSH4 0x60C4247F EQ PUSH2 0x596 JUMPI DUP1 PUSH4 0x70B0F660 EQ PUSH2 0x5B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3E4F49E6 EQ PUSH2 0x41F JUMPI DUP1 PUSH4 0x417491DB EQ PUSH2 0x44C JUMPI DUP1 PUSH4 0x43859632 EQ PUSH2 0x458 JUMPI DUP1 PUSH4 0x452115D6 EQ PUSH2 0x4A2 JUMPI DUP1 PUSH4 0x4BF5D7E9 EQ PUSH2 0x4C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x160CBED7 GT PUSH2 0x22F JUMPI DUP1 PUSH4 0x160CBED7 EQ PUSH2 0x34D JUMPI DUP1 PUSH4 0x2656227D EQ PUSH2 0x36D JUMPI DUP1 PUSH4 0x2D63F693 EQ PUSH2 0x380 JUMPI DUP1 PUSH4 0x2FE3E261 EQ PUSH2 0x3B6 JUMPI DUP1 PUSH4 0x3932ABB1 EQ PUSH2 0x3EA JUMPI DUP1 PUSH4 0x3BCCF4FD EQ PUSH2 0x3FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x293 JUMPI DUP1 PUSH4 0x2A251A3 EQ PUSH2 0x2C8 JUMPI DUP1 PUSH4 0x3420181 EQ PUSH2 0x2EB JUMPI DUP1 PUSH4 0x6F3F9E6 EQ PUSH2 0x30B JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x32B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0x28E JUMPI ADDRESS PUSH2 0x279 PUSH2 0x8F4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x28C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x29F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B3 PUSH2 0x2AE CALLDATASIZE PUSH1 0x4 PUSH2 0x34DB JUMP JUMPDEST PUSH2 0x90D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DD PUSH2 0x91E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2BF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DD PUSH2 0x306 CALLDATASIZE PUSH1 0x4 PUSH2 0x3629 JUMP JUMPDEST PUSH2 0x929 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x317 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28C PUSH2 0x326 CALLDATASIZE PUSH1 0x4 PUSH2 0x36CF JUMP JUMPDEST PUSH2 0xA21 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x337 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x340 PUSH2 0xAB4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2BF SWAP2 SWAP1 PUSH2 0x3738 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x359 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DD PUSH2 0x368 CALLDATASIZE PUSH1 0x4 PUSH2 0x38CC JUMP JUMPDEST PUSH2 0xB46 JUMP JUMPDEST PUSH2 0x2DD PUSH2 0x37B CALLDATASIZE PUSH1 0x4 PUSH2 0x38CC JUMP JUMPDEST PUSH2 0xD47 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x38C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DD PUSH2 0x39B CALLDATASIZE PUSH1 0x4 PUSH2 0x36CF JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DD PUSH32 0x899F067F60F2C931E7C0101A76DEED5359D3888D391B6F78FB75402BB24D0EFF DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DD PUSH2 0xE39 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x40B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DD PUSH2 0x41A CALLDATASIZE PUSH1 0x4 PUSH2 0x395B JUMP JUMPDEST PUSH2 0xE44 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x43F PUSH2 0x43A CALLDATASIZE PUSH1 0x4 PUSH2 0x36CF JUMP JUMPDEST PUSH2 0xEBA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2BF SWAP2 SWAP1 PUSH2 0x39BF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x464 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B3 PUSH2 0x473 CALLDATASIZE PUSH1 0x4 PUSH2 0x39E7 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE PUSH1 0x3 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DD PUSH2 0x4BD CALLDATASIZE PUSH1 0x4 PUSH2 0x38CC JUMP JUMPDEST PUSH2 0xEC5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x340 PUSH2 0xFD6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x511 PUSH2 0x4F2 CALLDATASIZE PUSH1 0x4 PUSH2 0x36CF JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x2BF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x538 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x31 PUSH1 0xF8 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x340 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x562 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DD PUSH2 0x571 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A17 JUMP JUMPDEST PUSH2 0x1098 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x582 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DD PUSH2 0x591 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A43 JUMP JUMPDEST PUSH2 0x10C1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DD PUSH2 0x5B1 CALLDATASIZE PUSH1 0x4 PUSH2 0x36CF JUMP JUMPDEST PUSH2 0x110B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28C PUSH2 0x5D1 CALLDATASIZE PUSH1 0x4 PUSH2 0x36CF JUMP JUMPDEST PUSH2 0x11BC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DD PUSH2 0x5F1 CALLDATASIZE PUSH1 0x4 PUSH2 0x3AC6 JUMP JUMPDEST PUSH2 0x1243 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x602 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DD PUSH2 0x611 CALLDATASIZE PUSH1 0x4 PUSH2 0x3B1F JUMP JUMPDEST PUSH2 0x128B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x622 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62B PUSH2 0x12A2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2BF SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3C1A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x64A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x653 PUSH2 0x132A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH6 0xFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2BF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x676 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x64 PUSH2 0x2DD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x68A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DD PUSH2 0x699 CALLDATASIZE PUSH1 0x4 PUSH2 0x3C7C JUMP JUMPDEST PUSH2 0x13B3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DD PUSH2 0x13CA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28C PUSH2 0x6CE CALLDATASIZE PUSH1 0x4 PUSH2 0x3CD4 JUMP JUMPDEST PUSH2 0x13F4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DD PUSH2 0x6EE CALLDATASIZE PUSH1 0x4 PUSH2 0x36CF JUMP JUMPDEST PUSH2 0x147B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DD PUSH2 0x1515 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x714 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DD PUSH2 0x723 CALLDATASIZE PUSH1 0x4 PUSH2 0x36CF JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x28C PUSH2 0x74F CALLDATASIZE PUSH1 0x4 PUSH2 0x3CF1 JUMP JUMPDEST PUSH2 0x1520 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x760 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DD PUSH2 0x76F CALLDATASIZE PUSH1 0x4 PUSH2 0x38CC JUMP JUMPDEST PUSH2 0x162F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x780 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DD PUSH2 0x78F CALLDATASIZE PUSH1 0x4 PUSH2 0x38CC JUMP JUMPDEST PUSH2 0x1669 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xC SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2BF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP1 DUP3 MSTORE PUSH32 0x737570706F72743D627261766F2671756F72756D3D666F722C6162737461696E SWAP1 DUP3 ADD MSTORE PUSH2 0x340 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x818 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DD PUSH32 0x150214D74D59B7D1E90C73FC22EF3D991DD0A76B046543D4D80AB92D2A50328F DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x84C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28C PUSH2 0x85B CALLDATASIZE PUSH1 0x4 PUSH2 0x36CF JUMP JUMPDEST PUSH2 0x1677 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x86C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DD PUSH2 0x87B CALLDATASIZE PUSH1 0x4 PUSH2 0x3D34 JUMP JUMPDEST PUSH2 0x16FE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x88C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28C PUSH2 0x89B CALLDATASIZE PUSH1 0x4 PUSH2 0x36CF JUMP JUMPDEST PUSH2 0x171F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DD PUSH2 0x8BB CALLDATASIZE PUSH1 0x4 PUSH2 0x36CF JUMP JUMPDEST PUSH2 0x17A6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7AE PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x908 PUSH1 0xC SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x918 DUP3 PUSH2 0x1977 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x908 PUSH1 0x7 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x9CD PUSH2 0x9C5 PUSH32 0x899F067F60F2C931E7C0101A76DEED5359D3888D391B6F78FB75402BB24D0EFF DUP13 DUP13 DUP13 DUP13 PUSH1 0x40 MLOAD PUSH2 0x965 SWAP3 SWAP2 SWAP1 PUSH2 0x3D60 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP12 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x9AA SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0x199C JUMP JUMPDEST DUP7 DUP7 DUP7 PUSH2 0x19C9 JUMP JUMPDEST SWAP1 POP PUSH2 0xA13 DUP11 DUP3 DUP12 DUP12 DUP12 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP14 SWAP3 POP PUSH2 0x19E7 SWAP2 POP POP JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xA29 PUSH2 0x8F4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xA62 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA59 SWAP1 PUSH2 0x3D70 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST ADDRESS PUSH2 0xA6B PUSH2 0x8F4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xAA8 JUMPI PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x40 MLOAD PUSH2 0xA8B SWAP3 SWAP2 SWAP1 PUSH2 0x3D60 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 SWAP1 POP JUMPDEST DUP1 PUSH2 0xAA1 PUSH1 0x4 PUSH2 0x1B3C JUMP JUMPDEST SUB PUSH2 0xA96 JUMPI POP JUMPDEST PUSH2 0xAB1 DUP2 PUSH2 0x1BBB JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0xAC3 SWAP1 PUSH2 0x3DA7 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xAEF SWAP1 PUSH2 0x3DA7 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xB3C JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xB11 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xB3C JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xB1F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xB55 DUP7 DUP7 DUP7 DUP7 PUSH2 0x162F JUMP JUMPDEST SWAP1 POP PUSH1 0x4 PUSH2 0xB62 DUP3 PUSH2 0xEBA JUMP JUMPDEST PUSH1 0x7 DUP2 GT ISZERO PUSH2 0xB73 JUMPI PUSH2 0xB73 PUSH2 0x39A9 JUMP JUMPDEST EQ PUSH2 0xB90 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA59 SWAP1 PUSH2 0x3DE1 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x793D0649 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0xF27A0C92 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xBDA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xBFE SWAP2 SWAP1 PUSH2 0x3E22 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x40 MLOAD PUSH4 0xB1C5F427 PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xB1C5F427 SWAP1 PUSH2 0xC38 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x0 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x3EC9 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC55 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC79 SWAP2 SWAP1 PUSH2 0x3E22 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE PUSH1 0xC SLOAD SWAP2 MLOAD PUSH4 0x8F2A0BB PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0x8F2A0BB0 SWAP2 PUSH2 0xCC4 SWAP2 DUP12 SWAP2 DUP12 SWAP2 DUP12 SWAP2 SWAP1 DUP12 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x3F17 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCDE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xCF2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH32 0x9A2E42FD6722813D69113E7D0079D3D940171428DF7373DF9C7F7617CFDA2892 DUP3 DUP3 TIMESTAMP PUSH2 0xD24 SWAP2 SWAP1 PUSH2 0x3F85 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xD56 DUP7 DUP7 DUP7 DUP7 PUSH2 0x162F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xD63 DUP3 PUSH2 0xEBA JUMP JUMPDEST SWAP1 POP PUSH1 0x4 DUP2 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0xD79 JUMPI PUSH2 0xD79 PUSH2 0x39A9 JUMP JUMPDEST EQ DUP1 PUSH2 0xD96 JUMPI POP PUSH1 0x5 DUP2 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0xD94 JUMPI PUSH2 0xD94 PUSH2 0x39A9 JUMP JUMPDEST EQ JUMPDEST PUSH2 0xDB2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA59 SWAP1 PUSH2 0x3DE1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD PUSH32 0x712AE1383F79AC853F8D882153778E0260EF8F03B504E2866E0593E04D2B291F SWAP1 PUSH2 0xE00 SWAP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0xE15 DUP3 DUP9 DUP9 DUP9 DUP9 PUSH2 0x1D29 JUMP JUMPDEST PUSH2 0xE22 DUP3 DUP9 DUP9 DUP9 DUP9 PUSH2 0x1DCB JUMP JUMPDEST PUSH2 0xE2F DUP3 DUP9 DUP9 DUP9 DUP9 PUSH2 0x1DD8 JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x908 PUSH1 0x6 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x150214D74D59B7D1E90C73FC22EF3D991DD0A76B046543D4D80AB92D2A50328F PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xFF DUP6 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH2 0xE92 SWAP1 PUSH2 0x9C5 SWAP1 PUSH1 0x80 ADD PUSH2 0x9AA JUMP JUMPDEST SWAP1 POP PUSH2 0xEAF DUP8 DUP3 DUP9 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1E11 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x918 DUP3 PUSH2 0x1E34 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xED4 DUP7 DUP7 DUP7 DUP7 PUSH2 0x162F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xEE1 DUP3 PUSH2 0xEBA JUMP JUMPDEST PUSH1 0x7 DUP2 GT ISZERO PUSH2 0xEF2 JUMPI PUSH2 0xEF2 PUSH2 0x39A9 JUMP JUMPDEST EQ PUSH2 0xF3F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F723A20746F6F206C61746520746F2063616E63656C00000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA59 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xFC0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F723A206F6E6C792070726F706F7365722063616E2063616E63 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x195B PUSH1 0xF2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA59 JUMP JUMPDEST PUSH2 0xFCC DUP7 DUP7 DUP7 DUP7 PUSH2 0x1669 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x4BF5D7E9 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1057 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1054 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x3F98 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1093 JUMPI POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1D DUP2 MSTORE PUSH32 0x6D6F64653D626C6F636B6E756D6265722666726F6D3D64656661756C74000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER SWAP1 POP PUSH2 0x10B9 DUP5 DUP3 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1E11 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER SWAP1 POP PUSH2 0xEAF DUP8 DUP3 DUP9 DUP9 DUP9 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP11 SWAP3 POP PUSH2 0x19E7 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x0 SWAP1 DUP1 DUP3 SUB PUSH2 0x1122 JUMPI POP POP PUSH1 0xA SLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xB PUSH2 0x1131 PUSH1 0x1 DUP5 PUSH2 0x4005 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x1141 JUMPI PUSH2 0x1141 PUSH2 0x4018 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE SWAP2 ADD SLOAD PUSH4 0xFFFFFFFF DUP2 AND DUP1 DUP4 MSTORE PUSH1 0x1 PUSH1 0x20 SHL SWAP1 SWAP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP2 POP DUP5 LT PUSH2 0x1197 JUMPI PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x11AB PUSH2 0x11A3 DUP6 PUSH2 0x1852 JUMP JUMPDEST PUSH1 0xB SWAP1 PUSH2 0x1F7E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x11C4 PUSH2 0x8F4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x11F4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA59 SWAP1 PUSH2 0x3D70 JUMP JUMPDEST ADDRESS PUSH2 0x11FD PUSH2 0x8F4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x123A JUMPI PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x40 MLOAD PUSH2 0x121D SWAP3 SWAP2 SWAP1 PUSH2 0x3D60 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 SWAP1 POP JUMPDEST DUP1 PUSH2 0x1233 PUSH1 0x4 PUSH2 0x1B3C JUMP JUMPDEST SUB PUSH2 0x1228 JUMPI POP JUMPDEST PUSH2 0xAB1 DUP2 PUSH2 0x2023 JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER SWAP1 POP PUSH2 0xFCC DUP7 DUP3 DUP8 DUP8 DUP8 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x1E11 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1299 DUP6 DUP6 DUP6 DUP6 PUSH2 0x2064 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 DUP3 DUP1 DUP1 DUP4 PUSH2 0x12D5 PUSH32 0x0 DUP4 PUSH2 0x23E6 JUMP JUMPDEST PUSH2 0x1300 PUSH32 0x0 PUSH1 0x1 PUSH2 0x23E6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0xF PUSH1 0xF8 SHL SWAP12 SWAP4 SWAP11 POP SWAP2 SWAP9 POP CHAINID SWAP8 POP ADDRESS SWAP7 POP SWAP5 POP SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x91DDADF4 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x13A6 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x13A3 SWAP2 DUP2 ADD SWAP1 PUSH2 0x402E JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1093 JUMPI PUSH2 0x908 NUMBER PUSH2 0x1910 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13C0 DUP5 DUP5 DUP5 PUSH2 0x248B JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x0 SWAP1 ISZERO PUSH2 0x13ED JUMPI PUSH2 0x13DF PUSH1 0xB PUSH2 0x18D2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND SWAP1 POP SWAP1 JUMP JUMPDEST POP PUSH1 0xA SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x13FC PUSH2 0x8F4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x142C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA59 SWAP1 PUSH2 0x3D70 JUMP JUMPDEST ADDRESS PUSH2 0x1435 PUSH2 0x8F4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1472 JUMPI PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x40 MLOAD PUSH2 0x1455 SWAP3 SWAP2 SWAP1 PUSH2 0x3D60 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 SWAP1 POP JUMPDEST DUP1 PUSH2 0x146B PUSH1 0x4 PUSH2 0x1B3C JUMP JUMPDEST SUB PUSH2 0x1460 JUMPI POP JUMPDEST PUSH2 0xAB1 DUP2 PUSH2 0x2521 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SLOAD SWAP1 MLOAD PUSH4 0xD45C4435 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP2 DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xD45C4435 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x14D8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x14FC SWAP2 SWAP1 PUSH2 0x3E22 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 EQ PUSH2 0x150C JUMPI DUP1 PUSH2 0x13C3 JUMP JUMPDEST PUSH1 0x0 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x908 PUSH1 0x8 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1528 PUSH2 0x8F4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1558 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA59 SWAP1 PUSH2 0x3D70 JUMP JUMPDEST ADDRESS PUSH2 0x1561 PUSH2 0x8F4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x159E JUMPI PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x40 MLOAD PUSH2 0x1581 SWAP3 SWAP2 SWAP1 PUSH2 0x3D60 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 SWAP1 POP JUMPDEST DUP1 PUSH2 0x1597 PUSH1 0x4 PUSH2 0x1B3C JUMP JUMPDEST SUB PUSH2 0x158C JUMPI POP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x15BC SWAP3 SWAP2 SWAP1 PUSH2 0x3D60 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x15F9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x15FE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1626 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x43E0 PUSH1 0x28 SWAP2 CODECOPY PUSH2 0x258A JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1648 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4056 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1299 DUP6 DUP6 DUP6 DUP6 PUSH2 0x25A3 JUMP JUMPDEST PUSH2 0x167F PUSH2 0x8F4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x16AF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA59 SWAP1 PUSH2 0x3D70 JUMP JUMPDEST ADDRESS PUSH2 0x16B8 PUSH2 0x8F4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x16F5 JUMPI PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x40 MLOAD PUSH2 0x16D8 SWAP3 SWAP2 SWAP1 PUSH2 0x3D60 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 SWAP1 POP JUMPDEST DUP1 PUSH2 0x16EE PUSH1 0x4 PUSH2 0x1B3C JUMP JUMPDEST SUB PUSH2 0x16E3 JUMPI POP JUMPDEST PUSH2 0xAB1 DUP2 PUSH2 0x2655 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13C3 DUP4 DUP4 PUSH2 0x171A PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x248B JUMP JUMPDEST PUSH2 0x1727 PUSH2 0x8F4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1757 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA59 SWAP1 PUSH2 0x3D70 JUMP JUMPDEST ADDRESS PUSH2 0x1760 PUSH2 0x8F4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x179D JUMPI PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x40 MLOAD PUSH2 0x1780 SWAP3 SWAP2 SWAP1 PUSH2 0x3D60 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 SWAP1 POP JUMPDEST DUP1 PUSH2 0x1796 PUSH1 0x4 PUSH2 0x1B3C JUMP JUMPDEST SUB PUSH2 0x178B JUMPI POP JUMPDEST PUSH2 0xAB1 DUP2 PUSH2 0x26F6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x918 DUP3 PUSH2 0x2737 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP4 MLOAD LT ISZERO PUSH2 0x17CD JUMPI PUSH2 0x17C6 DUP4 PUSH2 0x27E1 JUMP JUMPDEST SWAP1 POP PUSH2 0x918 JUMP JUMPDEST DUP2 PUSH2 0x17D8 DUP5 DUP3 PUSH2 0x40EC JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP PUSH2 0x918 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP3 GT ISZERO PUSH2 0x184E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53616665436173743A2076616C756520646F65736E27742066697420696E2032 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x32342062697473 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA59 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 GT ISZERO PUSH2 0x184E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53616665436173743A2076616C756520646F65736E27742066697420696E2033 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x322062697473 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA59 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x18C5 DUP6 DUP6 DUP6 PUSH2 0x281F JUMP JUMPDEST SWAP2 POP SWAP2 POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST DUP1 SLOAD PUSH1 0x0 SWAP1 DUP1 ISZERO PUSH2 0x150C JUMPI PUSH2 0x18FA DUP4 PUSH2 0x18EC PUSH1 0x1 DUP5 PUSH2 0x4005 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SWAP1 JUMP JUMPDEST SLOAD PUSH1 0x1 PUSH1 0x20 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH2 0x13C3 JUMP JUMPDEST PUSH1 0x0 PUSH6 0xFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x184E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53616665436173743A2076616C756520646F65736E27742066697420696E2034 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x382062697473 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA59 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x6E665CED PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x918 JUMPI POP PUSH2 0x918 DUP3 PUSH2 0x29BE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x918 PUSH2 0x19A9 PUSH2 0x2A0E JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH2 0x1901 PUSH1 0xF0 SHL DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x19DA DUP8 DUP8 DUP8 DUP8 PUSH2 0x2B39 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0xE2F DUP2 PUSH2 0x2BFD JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 PUSH2 0x1A00 DUP9 PUSH2 0xEBA JUMP JUMPDEST PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x1A11 JUMPI PUSH2 0x1A11 PUSH2 0x39A9 JUMP JUMPDEST EQ PUSH2 0x1A6A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F723A20766F7465206E6F742063757272656E746C7920616374 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x697665 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA59 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x1A84 SWAP1 DUP9 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP7 PUSH2 0x248B JUMP JUMPDEST SWAP1 POP PUSH2 0x1A93 DUP9 DUP9 DUP9 DUP5 DUP9 PUSH2 0x2D47 JUMP JUMPDEST DUP4 MLOAD PUSH1 0x0 SUB PUSH2 0x1AE8 JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xB8E138887D0AA13BAB447E82DE9D5C1777041ECD21CA36BA824FF1E6C07DDDA4 DUP10 DUP9 DUP5 DUP10 PUSH1 0x40 MLOAD PUSH2 0x1ADB SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x41AB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH2 0xEAF JUMP JUMPDEST DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xE2BABFBAC5889A709B63BB7F598B324E08BC5A4FB9EC647FB3CBC9EC07EB8712 DUP10 DUP9 DUP5 DUP10 DUP10 PUSH1 0x40 MLOAD PUSH2 0x1B29 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x41D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B57 DUP3 SLOAD PUSH1 0xF DUP2 DUP2 SIGNEXTEND PUSH1 0x1 PUSH1 0x80 SHL SWAP1 SWAP3 DIV SWAP1 SIGNEXTEND SGT ISZERO SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1B75 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1ED95095 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP DUP1 SLOAD PUSH1 0xF SIGNEXTEND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP1 DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 DUP1 SLOAD SWAP3 SWAP1 SSTORE DUP4 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP3 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE SWAP1 JUMP JUMPDEST PUSH1 0x64 DUP2 GT ISZERO PUSH2 0x1C3E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x43 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F72566F74657351756F72756D4672616374696F6E3A2071756F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x72756D4E756D657261746F72206F7665722071756F72756D44656E6F6D696E61 PUSH1 0x64 DUP3 ADD MSTORE PUSH3 0x3A37B9 PUSH1 0xE9 SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH2 0xA59 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C48 PUSH2 0x13CA JUMP JUMPDEST SWAP1 POP DUP1 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x1C59 JUMPI POP PUSH1 0xB SLOAD ISZERO JUMPDEST ISZERO PUSH2 0x1CBD JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0xB SWAP1 PUSH1 0x20 DUP2 ADD PUSH2 0x1C7C DUP5 PUSH2 0x17E5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP1 DUP2 AND SWAP1 SWAP2 MSTORE DUP3 SLOAD PUSH1 0x1 DUP2 ADD DUP5 SSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x20 SWAP4 DUP5 SWAP1 KECCAK256 DUP4 MLOAD SWAP5 SWAP1 SWAP4 ADD MLOAD SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0x20 SHL MUL PUSH4 0xFFFFFFFF SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP2 ADD SSTORE JUMPDEST PUSH2 0x1CEA PUSH2 0x1CD8 PUSH2 0x1CCB PUSH2 0x132A JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND PUSH2 0x1852 JUMP JUMPDEST PUSH2 0x1CE1 DUP5 PUSH2 0x17E5 JUMP JUMPDEST PUSH1 0xB SWAP2 SWAP1 PUSH2 0x18B7 JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0x553476BF02EF2726E8CE5CED78D63E26E602E4A2257B1F559418E24B4633997 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST ADDRESS PUSH2 0x1D32 PUSH2 0x8F4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1DC4 JUMPI PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x1DC2 JUMPI ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1D68 JUMPI PUSH2 0x1D68 PUSH2 0x4018 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x1DB2 JUMPI PUSH2 0x1DB2 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1D93 JUMPI PUSH2 0x1D93 PUSH2 0x4018 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x4 PUSH2 0x2EC1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1DBB DUP2 PUSH2 0x4219 JUMP JUMPDEST SWAP1 POP PUSH2 0x1D43 JUMP JUMPDEST POP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1DC4 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x2EFD JUMP JUMPDEST ADDRESS PUSH2 0x1DE1 PUSH2 0x8F4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1DC4 JUMPI PUSH1 0x4 SLOAD PUSH1 0xF DUP2 DUP2 SIGNEXTEND PUSH1 0x1 PUSH1 0x80 SHL SWAP1 SWAP3 DIV SWAP1 SIGNEXTEND SGT ISZERO PUSH2 0x1DC4 JUMPI PUSH1 0x0 PUSH1 0x4 SSTORE PUSH2 0x1DC4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1299 DUP6 DUP6 DUP6 DUP6 PUSH2 0x1E2F PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x19E7 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1E40 DUP4 PUSH2 0x2F71 JUMP JUMPDEST SWAP1 POP PUSH1 0x4 DUP2 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x1E56 JUMPI PUSH2 0x1E56 PUSH2 0x39A9 JUMP JUMPDEST EQ PUSH2 0x1E61 JUMPI SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP1 PUSH2 0x1E7C JUMPI POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x40 MLOAD PUSH4 0x2AB0F529 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x2AB0F529 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1EC5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1EE9 SWAP2 SWAP1 PUSH2 0x4232 JUMP JUMPDEST ISZERO PUSH2 0x1EF8 JUMPI POP PUSH1 0x7 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x40 MLOAD PUSH4 0x2C258A9F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x584B153E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1F41 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1F65 SWAP2 SWAP1 PUSH2 0x4232 JUMP JUMPDEST ISZERO PUSH2 0x1F74 JUMPI POP PUSH1 0x5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST POP PUSH1 0x2 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 SLOAD PUSH1 0x0 SWAP1 DUP2 DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x1FDB JUMPI PUSH1 0x0 PUSH2 0x1F99 DUP5 PUSH2 0x30B1 JUMP JUMPDEST PUSH2 0x1FA3 SWAP1 DUP6 PUSH2 0x4005 JUMP JUMPDEST PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 SWAP1 SWAP2 POP DUP2 ADD SLOAD PUSH4 0xFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP8 AND LT ISZERO PUSH2 0x1FCB JUMPI DUP1 SWAP2 POP PUSH2 0x1FD9 JUMP JUMPDEST PUSH2 0x1FD6 DUP2 PUSH1 0x1 PUSH2 0x3F85 JUMP JUMPDEST SWAP3 POP JUMPDEST POP JUMPDEST PUSH1 0x0 PUSH2 0x1FE9 DUP8 DUP8 DUP6 DUP6 PUSH2 0x3199 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x2016 JUMPI PUSH2 0x2000 DUP8 PUSH2 0x18EC PUSH1 0x1 DUP5 PUSH2 0x4005 JUMP JUMPDEST SLOAD PUSH1 0x1 PUSH1 0x20 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH2 0xEAF JUMP JUMPDEST PUSH1 0x0 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP4 SWAP1 MSTORE PUSH32 0xC565B045403DC03C2EEA82B81A0465EDAD9E2E7FC4D97E11421C209DA93D7A93 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x6 SSTORE JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x2070 PUSH2 0x132A JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND SWAP1 POP PUSH2 0x2082 PUSH2 0x1515 JUMP JUMPDEST PUSH2 0x2091 DUP4 PUSH2 0x87B PUSH1 0x1 DUP6 PUSH2 0x4005 JUMP JUMPDEST LT ISZERO PUSH2 0x20F9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x31 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F723A2070726F706F73657220766F7465732062656C6F772070 PUSH1 0x44 DUP3 ADD MSTORE PUSH17 0x1C9BDC1BDCD85B081D1A1C995CDA1BDB19 PUSH1 0x7A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA59 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x210E DUP9 DUP9 DUP9 DUP9 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0x162F JUMP JUMPDEST SWAP1 POP DUP7 MLOAD DUP9 MLOAD EQ PUSH2 0x2131 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA59 SWAP1 PUSH2 0x4254 JUMP JUMPDEST DUP6 MLOAD DUP9 MLOAD EQ PUSH2 0x2152 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA59 SWAP1 PUSH2 0x4254 JUMP JUMPDEST PUSH1 0x0 DUP9 MLOAD GT PUSH2 0x21A3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F723A20656D7074792070726F706F73616C0000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA59 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND ISZERO PUSH2 0x2212 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F723A2070726F706F73616C20616C7265616479206578697374 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA59 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x221C PUSH2 0xE39 JUMP JUMPDEST PUSH2 0x2226 SWAP1 DUP5 PUSH2 0x3F85 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2232 PUSH2 0x91E JUMP JUMPDEST PUSH2 0x223C SWAP1 DUP4 PUSH2 0x3F85 JUMP JUMPDEST SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x2252 DUP5 PUSH2 0x31F7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x227F DUP4 PUSH2 0x31F7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x0 PUSH1 0x20 DUP1 DUP5 ADD DUP3 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP6 ADD DUP4 SWAP1 MSTORE PUSH1 0x60 SWAP5 DUP6 ADD DUP4 SWAP1 MSTORE DUP9 DUP4 MSTORE PUSH1 0x3 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 MLOAD DUP2 SLOAD SWAP3 DUP8 ADD MLOAD DUP8 DUP6 ADD MLOAD SWAP2 DUP7 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR PUSH1 0x1 PUSH1 0x40 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND DUP5 MUL OR PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0xE0 SWAP3 SWAP1 SWAP3 SHR SWAP2 SWAP1 SWAP2 MUL OR DUP2 SSTORE SWAP4 DUP6 ADD MLOAD PUSH1 0x80 DUP7 ADD MLOAD SWAP1 DUP5 AND SWAP3 SHR MUL OR PUSH1 0x1 DUP4 ADD SSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0x2 SWAP1 SWAP3 ADD DUP1 SLOAD PUSH1 0xC0 SWAP1 SWAP5 ADD MLOAD PUSH2 0xFFFF NOT SWAP1 SWAP5 AND SWAP3 ISZERO ISZERO PUSH2 0xFF00 NOT AND SWAP3 SWAP1 SWAP3 OR PUSH2 0x100 SWAP4 ISZERO ISZERO SWAP4 SWAP1 SWAP4 MUL SWAP3 SWAP1 SWAP3 OR SWAP1 SSTORE DUP11 MLOAD PUSH32 0x7D84A6263AE0D98D3329BD7B46BB4E8D6F98CD35A7ADB45C274C8B7FD5EBD5E0 SWAP2 DUP6 SWAP2 DUP9 SWAP2 DUP15 SWAP2 DUP15 SWAP2 DUP2 GT ISZERO PUSH2 0x2383 JUMPI PUSH2 0x2383 PUSH2 0x355E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x23B6 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x23A1 JUMPI SWAP1 POP JUMPDEST POP DUP14 DUP9 DUP9 DUP16 PUSH1 0x40 MLOAD PUSH2 0x23D0 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4295 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xFF DUP4 AND ISZERO PUSH2 0x23FA JUMPI PUSH2 0x17C6 DUP4 PUSH2 0x325F JUMP JUMPDEST DUP2 DUP1 SLOAD PUSH2 0x2406 SWAP1 PUSH2 0x3DA7 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2432 SWAP1 PUSH2 0x3DA7 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x247F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2454 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x247F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2462 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH2 0x918 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x748D635 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0x0 SWAP2 PUSH32 0x0 SWAP1 SWAP2 AND SWAP1 PUSH4 0x3A46B1A8 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x24FD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x13C0 SWAP2 SWAP1 PUSH2 0x3E22 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 DUP4 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0x8F74EA46EF7894F65EABFB5E6E695DE773A000B47C529AB559178069B226401 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0xC DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x2599 JUMPI POP DUP2 PUSH2 0x13C3 JUMP JUMPDEST PUSH2 0x13C3 DUP4 DUP4 PUSH2 0x3294 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x25B2 DUP7 DUP7 DUP7 DUP7 PUSH2 0x32BE JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x1299 JUMPI PUSH1 0xC SLOAD PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 MLOAD PUSH4 0xC4D252F5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0xC4D252F5 SWAP2 PUSH2 0x260B SWAP2 PUSH1 0x4 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2625 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2639 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0x26B5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F7253657474696E67733A20766F74696E6720706572696F6420 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x746F6F206C6F77 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA59 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP4 SWAP1 MSTORE PUSH32 0x7E3F7F0708A84DE9203036ABAA450DCCC85AD5FF52F78C170F3EDB55CF5E8828 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x7 SSTORE JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP4 SWAP1 MSTORE PUSH32 0xCCB45DA8D5717E6C4544694297C4BA5CF151D455C9BB0ED4FC7A38411BC05461 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x8 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x64 PUSH2 0x2744 DUP4 PUSH2 0x110B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2394E7A3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x8E539E8C SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x27A9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x27CD SWAP2 SWAP1 PUSH2 0x3E22 JUMP JUMPDEST PUSH2 0x27D7 SWAP2 SWAP1 PUSH2 0x436C JUMP JUMPDEST PUSH2 0x918 SWAP2 SWAP1 PUSH2 0x4399 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SWAP1 POP PUSH1 0x1F DUP2 MLOAD GT ISZERO PUSH2 0x280C JUMPI DUP3 PUSH1 0x40 MLOAD PUSH4 0x305A27A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA59 SWAP2 SWAP1 PUSH2 0x3738 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x2817 DUP3 PUSH2 0x43BB JUMP JUMPDEST OR SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP1 ISZERO PUSH2 0x2965 JUMPI PUSH1 0x0 PUSH2 0x283D DUP8 PUSH2 0x18EC PUSH1 0x1 DUP6 PUSH2 0x4005 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE SWAP1 SLOAD PUSH4 0xFFFFFFFF DUP1 DUP3 AND DUP1 DUP5 MSTORE PUSH1 0x1 PUSH1 0x20 SHL SWAP1 SWAP3 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x20 DUP5 ADD MSTORE SWAP2 SWAP3 POP SWAP1 DUP8 AND LT ISZERO PUSH2 0x28BE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436865636B706F696E743A2064656372656173696E67206B6579730000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA59 JUMP JUMPDEST DUP1 MLOAD PUSH4 0xFFFFFFFF DUP1 DUP9 AND SWAP2 AND SUB PUSH2 0x2906 JUMPI DUP5 PUSH2 0x28DF DUP9 PUSH2 0x18EC PUSH1 0x1 DUP7 PUSH2 0x4005 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x20 SHL MUL PUSH4 0xFFFFFFFF SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x2955 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH4 0xFFFFFFFF DUP1 DUP9 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP1 DUP9 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 DUP3 MSTORE DUP12 SLOAD PUSH1 0x1 DUP2 ADD DUP14 SSTORE PUSH1 0x0 DUP14 DUP2 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SWAP5 MLOAD SWAP2 MLOAD SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x20 SHL MUL SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP2 ADD SSTORE JUMPDEST PUSH1 0x20 ADD MLOAD SWAP3 POP DUP4 SWAP2 POP PUSH2 0x18CA SWAP1 POP JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH4 0xFFFFFFFF DUP1 DUP6 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP1 DUP6 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 DUP3 MSTORE DUP9 SLOAD PUSH1 0x1 DUP2 ADD DUP11 SSTORE PUSH1 0x0 DUP11 DUP2 MSTORE SWAP2 DUP3 KECCAK256 SWAP6 MLOAD SWAP3 MLOAD SWAP1 SWAP4 AND PUSH1 0x1 PUSH1 0x20 SHL MUL SWAP2 SWAP1 SWAP4 AND OR SWAP3 ADD SWAP2 SWAP1 SWAP2 SSTORE SWAP1 POP DUP2 PUSH2 0x18CA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5E326C8B PUSH1 0xE1 SHL EQ DUP1 PUSH2 0x29EF JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x79DD796F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x918 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x918 JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ DUP1 ISZERO PUSH2 0x2A67 JUMPI POP PUSH32 0x0 CHAINID EQ JUMPDEST ISZERO PUSH2 0x2A91 JUMPI POP PUSH32 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x908 PUSH1 0x40 DUP1 MLOAD PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x0 SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x0 PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT ISZERO PUSH2 0x2B70 JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x3 PUSH2 0x2BF4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP10 SWAP1 MSTORE PUSH1 0xFF DUP9 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2BC4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x2BED JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x2BF4 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2C11 JUMPI PUSH2 0x2C11 PUSH2 0x39A9 JUMP JUMPDEST SUB PUSH2 0x2C19 JUMPI POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2C2D JUMPI PUSH2 0x2C2D PUSH2 0x39A9 JUMP JUMPDEST SUB PUSH2 0x2C7A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA59 JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2C8E JUMPI PUSH2 0x2C8E PUSH2 0x39A9 JUMP JUMPDEST SUB PUSH2 0x2CDB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA59 JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2CEF JUMPI PUSH2 0x2CEF PUSH2 0x39A9 JUMP JUMPDEST SUB PUSH2 0xAB1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA59 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP5 MSTORE PUSH1 0x3 DUP2 ADD SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x2DCF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F72566F74696E6753696D706C653A20766F746520616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x191E4818D85CDD PUSH1 0xCA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA59 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 DUP3 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH1 0xFF DUP5 AND PUSH2 0x2E1B JUMPI DUP3 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x2E10 SWAP2 SWAP1 PUSH2 0x3F85 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x1DC2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 NOT PUSH1 0xFF DUP6 AND ADD PUSH2 0x2E3B JUMPI DUP3 DUP2 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x2E10 SWAP2 SWAP1 PUSH2 0x3F85 JUMP JUMPDEST PUSH1 0x1 NOT PUSH1 0xFF DUP6 AND ADD PUSH2 0x2E5B JUMPI DUP3 DUP2 PUSH1 0x2 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x2E10 SWAP2 SWAP1 PUSH2 0x3F85 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x35 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F72566F74696E6753696D706C653A20696E76616C6964207661 PUSH1 0x44 DUP3 ADD MSTORE PUSH21 0x6C756520666F7220656E756D20566F746554797065 PUSH1 0x58 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA59 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DUP2 SWAP1 DIV PUSH1 0xF SIGNEXTEND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP1 DUP7 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE DUP4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP1 DUP2 AND SWAP4 SWAP1 SWAP2 ADD AND MUL OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x40 MLOAD PUSH4 0xE38335E5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xE38335E5 SWAP1 CALLVALUE SWAP1 PUSH2 0x2F38 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x0 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x3EC9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2F51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2F65 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x2F95 JUMPI POP PUSH1 0x7 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 DUP2 ADD SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x2FB0 JUMPI POP PUSH1 0x2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x3018 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F723A20756E6B6E6F776E2070726F706F73616C206964000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA59 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3022 PUSH2 0x132A JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND SWAP1 POP DUP1 DUP3 LT PUSH2 0x303E JUMPI POP PUSH1 0x0 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP2 DUP2 LT PUSH2 0x306C JUMPI POP PUSH1 0x1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x3075 DUP7 PUSH2 0x33CA JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3094 JUMPI POP PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD GT JUMPDEST ISZERO PUSH2 0x30A5 JUMPI POP PUSH1 0x4 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST POP PUSH1 0x3 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 SUB PUSH2 0x30C3 JUMPI POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH2 0x30D0 DUP5 PUSH2 0x3416 JUMP JUMPDEST SWAP1 SHR PUSH1 0x1 SWAP1 SHL SWAP1 POP PUSH1 0x1 DUP2 DUP5 DUP2 PUSH2 0x30E9 JUMPI PUSH2 0x30E9 PUSH2 0x4383 JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH1 0x1 DUP2 DUP5 DUP2 PUSH2 0x3101 JUMPI PUSH2 0x3101 PUSH2 0x4383 JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH1 0x1 DUP2 DUP5 DUP2 PUSH2 0x3119 JUMPI PUSH2 0x3119 PUSH2 0x4383 JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH1 0x1 DUP2 DUP5 DUP2 PUSH2 0x3131 JUMPI PUSH2 0x3131 PUSH2 0x4383 JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH1 0x1 DUP2 DUP5 DUP2 PUSH2 0x3149 JUMPI PUSH2 0x3149 PUSH2 0x4383 JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH1 0x1 DUP2 DUP5 DUP2 PUSH2 0x3161 JUMPI PUSH2 0x3161 PUSH2 0x4383 JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH1 0x1 DUP2 DUP5 DUP2 PUSH2 0x3179 JUMPI PUSH2 0x3179 PUSH2 0x4383 JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH2 0x13C3 DUP2 DUP3 DUP6 DUP2 PUSH2 0x3193 JUMPI PUSH2 0x3193 PUSH2 0x4383 JUMP JUMPDEST DIV PUSH2 0x34AA JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP4 LT ISZERO PUSH2 0x31EF JUMPI PUSH1 0x0 PUSH2 0x31B0 DUP5 DUP5 PUSH2 0x34C0 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 SWAP1 SWAP2 POP PUSH4 0xFFFFFFFF DUP7 AND SWAP1 DUP3 ADD SLOAD PUSH4 0xFFFFFFFF AND GT ISZERO PUSH2 0x31DB JUMPI DUP1 SWAP3 POP PUSH2 0x31E9 JUMP JUMPDEST PUSH2 0x31E6 DUP2 PUSH1 0x1 PUSH2 0x3F85 JUMP JUMPDEST SWAP4 POP JUMPDEST POP PUSH2 0x319C JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x184E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53616665436173743A2076616C756520646F65736E27742066697420696E2036 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x342062697473 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA59 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0xFF DUP5 AND SWAP2 PUSH1 0x0 SWAP2 DUP1 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP POP POP SWAP2 DUP3 MSTORE POP PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP1 JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0x32A4 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA59 SWAP2 SWAP1 PUSH2 0x3738 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x32CD DUP7 DUP7 DUP7 DUP7 PUSH2 0x162F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x32DA DUP3 PUSH2 0xEBA JUMP JUMPDEST SWAP1 POP PUSH1 0x2 DUP2 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x32F0 JUMPI PUSH2 0x32F0 PUSH2 0x39A9 JUMP JUMPDEST EQ ISZERO DUP1 ISZERO PUSH2 0x3310 JUMPI POP PUSH1 0x6 DUP2 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x330D JUMPI PUSH2 0x330D PUSH2 0x39A9 JUMP JUMPDEST EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x332E JUMPI POP PUSH1 0x7 DUP2 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x332B JUMPI PUSH2 0x332B PUSH2 0x39A9 JUMP JUMPDEST EQ ISZERO JUMPDEST PUSH2 0x337A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F723A2070726F706F73616C206E6F7420616374697665000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA59 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE MLOAD PUSH32 0x789CF55BE980739DAD1D0699B93B58E806B51C9D96619BFA8FE0A28ABAA7B30C SWAP1 PUSH2 0xD35 SWAP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH2 0x33EC SWAP2 SWAP1 PUSH2 0x3F85 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x340D SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH2 0x17A6 JUMP JUMPDEST GT ISZERO SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x80 DUP4 SWAP1 SHR ISZERO PUSH2 0x342B JUMPI PUSH1 0x80 SWAP3 DUP4 SHR SWAP3 ADD JUMPDEST PUSH1 0x40 DUP4 SWAP1 SHR ISZERO PUSH2 0x343D JUMPI PUSH1 0x40 SWAP3 DUP4 SHR SWAP3 ADD JUMPDEST PUSH1 0x20 DUP4 SWAP1 SHR ISZERO PUSH2 0x344F JUMPI PUSH1 0x20 SWAP3 DUP4 SHR SWAP3 ADD JUMPDEST PUSH1 0x10 DUP4 SWAP1 SHR ISZERO PUSH2 0x3461 JUMPI PUSH1 0x10 SWAP3 DUP4 SHR SWAP3 ADD JUMPDEST PUSH1 0x8 DUP4 SWAP1 SHR ISZERO PUSH2 0x3473 JUMPI PUSH1 0x8 SWAP3 DUP4 SHR SWAP3 ADD JUMPDEST PUSH1 0x4 DUP4 SWAP1 SHR ISZERO PUSH2 0x3485 JUMPI PUSH1 0x4 SWAP3 DUP4 SHR SWAP3 ADD JUMPDEST PUSH1 0x2 DUP4 SWAP1 SHR ISZERO PUSH2 0x3497 JUMPI PUSH1 0x2 SWAP3 DUP4 SHR SWAP3 ADD JUMPDEST PUSH1 0x1 DUP4 SWAP1 SHR ISZERO PUSH2 0x918 JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x34B9 JUMPI DUP2 PUSH2 0x13C3 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x34CF PUSH1 0x2 DUP5 DUP5 XOR PUSH2 0x4399 JUMP JUMPDEST PUSH2 0x13C3 SWAP1 DUP5 DUP5 AND PUSH2 0x3F85 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x34ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x13C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x1093 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x3528 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x353F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x3557 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x359C JUMPI PUSH2 0x359C PUSH2 0x355E JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x35BD JUMPI PUSH2 0x35BD PUSH2 0x355E JUMP JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x35DE PUSH2 0x35D9 DUP5 PUSH2 0x35A4 JUMP JUMPDEST PUSH2 0x3574 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE DUP4 DUP4 DUP4 ADD GT ISZERO PUSH2 0x35F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP3 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x361A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x13C3 DUP4 DUP4 CALLDATALOAD PUSH1 0x20 DUP6 ADD PUSH2 0x35CB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xE0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x3645 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 CALLDATALOAD SWAP8 POP PUSH2 0x3655 PUSH1 0x20 DUP11 ADD PUSH2 0x3505 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x3671 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x367D DUP13 DUP4 DUP14 ADD PUSH2 0x3516 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3696 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x36A3 DUP12 DUP3 DUP13 ADD PUSH2 0x3609 JUMP JUMPDEST SWAP5 POP POP PUSH2 0x36B2 PUSH1 0x80 DUP11 ADD PUSH2 0x3505 JUMP JUMPDEST SWAP3 POP PUSH1 0xA0 DUP10 ADD CALLDATALOAD SWAP2 POP PUSH1 0xC0 DUP10 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 SWAP1 SWAP4 SWAP7 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x36E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3703 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x36EB JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x3724 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x36E8 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x13C3 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x370C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x3764 JUMPI PUSH2 0x3764 PUSH2 0x355E JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xAB1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3794 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x37A4 PUSH2 0x35D9 DUP4 PUSH2 0x374B JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x37C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x37E7 JUMPI DUP1 CALLDATALOAD PUSH2 0x37DA DUP2 PUSH2 0x376E JUMP JUMPDEST DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x37C7 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3803 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x3813 PUSH2 0x35D9 DUP4 PUSH2 0x374B JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x3832 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x37E7 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x3836 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x385E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x386E PUSH2 0x35D9 DUP4 PUSH2 0x374B JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x388D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x37E7 JUMPI DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x38B0 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0x38BE DUP10 DUP7 DUP4 DUP12 ADD ADD PUSH2 0x3609 JUMP JUMPDEST DUP5 MSTORE POP SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x3891 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x38E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x38F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3905 DUP9 DUP4 DUP10 ADD PUSH2 0x3783 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x391B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3927 DUP9 DUP4 DUP10 ADD PUSH2 0x37F2 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x393D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x394A DUP8 DUP3 DUP9 ADD PUSH2 0x384D JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP4 SWAP5 PUSH1 0x60 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x3973 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH2 0x3983 PUSH1 0x20 DUP8 ADD PUSH2 0x3505 JUMP JUMPDEST SWAP4 POP PUSH2 0x3991 PUSH1 0x40 DUP8 ADD PUSH2 0x3505 JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP4 SWAP5 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP2 ADD PUSH1 0x8 DUP4 LT PUSH2 0x39E1 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x39FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x3A0C DUP2 PUSH2 0x376E JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3A2A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x3A3A PUSH1 0x20 DUP5 ADD PUSH2 0x3505 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x3A5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH2 0x3A6B PUSH1 0x20 DUP8 ADD PUSH2 0x3505 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x3A87 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3A93 DUP10 DUP4 DUP11 ADD PUSH2 0x3516 JUMP JUMPDEST SWAP1 SWAP6 POP SWAP4 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3AAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AB9 DUP9 DUP3 DUP10 ADD PUSH2 0x3609 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3ADC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH2 0x3AEC PUSH1 0x20 DUP7 ADD PUSH2 0x3505 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x3B07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3B13 DUP8 DUP3 DUP9 ADD PUSH2 0x3516 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3B35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x3B4C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3B58 DUP9 DUP4 DUP10 ADD PUSH2 0x3783 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3B6E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3B7A DUP9 DUP4 DUP10 ADD PUSH2 0x37F2 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3B90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3B9C DUP9 DUP4 DUP10 ADD PUSH2 0x384D JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3BB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP6 ADD PUSH1 0x1F DUP2 ADD DUP8 SGT PUSH2 0x3BC4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3BD3 DUP8 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x35CB JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3C0F JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3BF3 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0xFF PUSH1 0xF8 SHL DUP9 AND DUP2 MSTORE PUSH1 0xE0 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x3C39 PUSH1 0xE0 DUP4 ADD DUP10 PUSH2 0x370C JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x3C4B DUP2 DUP10 PUSH2 0x370C JUMP JUMPDEST PUSH1 0x60 DUP5 ADD DUP9 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD DUP7 SWAP1 MSTORE DUP4 DUP2 SUB PUSH1 0xC0 DUP6 ADD MSTORE SWAP1 POP PUSH2 0xA13 DUP2 DUP6 PUSH2 0x3BDF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3C91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x3C9C DUP2 PUSH2 0x376E JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x3CBE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3CCA DUP7 DUP3 DUP8 ADD PUSH2 0x3609 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3CE6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x13C3 DUP2 PUSH2 0x376E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3D07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x3D12 DUP2 PUSH2 0x376E JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x3B07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3D47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x3D52 DUP2 PUSH2 0x376E JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST DUP2 DUP4 DUP3 CALLDATACOPY PUSH1 0x0 SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F723A206F6E6C79476F7665726E616E63650000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x3DBB JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x3DDB JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x21 SWAP1 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F723A2070726F706F73616C206E6F7420737563636573736675 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0xFA SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3E34 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3C0F JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3E4F JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD DUP1 DUP2 SWAP7 POP DUP4 PUSH1 0x5 SHL DUP2 ADD SWAP2 POP DUP3 DUP7 ADD PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x3EBC JUMPI DUP3 DUP5 SUB DUP10 MSTORE PUSH2 0x3EAA DUP5 DUP4 MLOAD PUSH2 0x370C JUMP JUMPDEST SWAP9 DUP6 ADD SWAP9 SWAP4 POP SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3E92 JUMP JUMPDEST POP SWAP2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xA0 DUP2 MSTORE PUSH1 0x0 PUSH2 0x3EDC PUSH1 0xA0 DUP4 ADD DUP9 PUSH2 0x3E3B JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x3EEE DUP2 DUP9 PUSH2 0x3BDF JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x3F02 DUP2 DUP8 PUSH2 0x3E74 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD SWAP6 SWAP1 SWAP6 MSTORE POP POP PUSH1 0x80 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0xC0 DUP2 MSTORE PUSH1 0x0 PUSH2 0x3F2A PUSH1 0xC0 DUP4 ADD DUP10 PUSH2 0x3E3B JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x3F3C DUP2 DUP10 PUSH2 0x3BDF JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x3F50 DUP2 DUP9 PUSH2 0x3E74 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD SWAP7 SWAP1 SWAP7 MSTORE POP POP PUSH1 0x80 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xA0 SWAP1 SWAP2 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x918 JUMPI PUSH2 0x918 PUSH2 0x3F6F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3FAA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x3FC0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD PUSH1 0x1F DUP2 ADD DUP5 SGT PUSH2 0x3FD1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x3FDF PUSH2 0x35D9 DUP3 PUSH2 0x35A4 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP6 PUSH1 0x20 DUP4 DUP6 ADD ADD GT ISZERO PUSH2 0x3FF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1299 DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x36E8 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x918 JUMPI PUSH2 0x918 PUSH2 0x3F6F JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4040 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH6 0xFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x13C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x80 DUP2 MSTORE PUSH1 0x0 PUSH2 0x4069 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x3E3B JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x407B DUP2 DUP8 PUSH2 0x3BDF JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x408F DUP2 DUP7 PUSH2 0x3E74 JUMP JUMPDEST SWAP2 POP POP DUP3 PUSH1 0x60 DUP4 ADD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x40E7 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x40C8 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1DC2 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x40D4 JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x4105 JUMPI PUSH2 0x4105 PUSH2 0x355E JUMP JUMPDEST PUSH2 0x4119 DUP2 PUSH2 0x4113 DUP5 SLOAD PUSH2 0x3DA7 JUMP JUMPDEST DUP5 PUSH2 0x40A1 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x414E JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x4136 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x1DC2 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x417D JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x415E JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x419B JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST DUP5 DUP2 MSTORE PUSH1 0xFF DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0xFCC PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x370C JUMP JUMPDEST DUP6 DUP2 MSTORE PUSH1 0xFF DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE DUP4 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x41FB PUSH1 0xA0 DUP4 ADD DUP6 PUSH2 0x370C JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x420D DUP2 DUP6 PUSH2 0x370C JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x422B JUMPI PUSH2 0x422B PUSH2 0x3F6F JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4244 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x13C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x21 SWAP1 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F723A20696E76616C69642070726F706F73616C206C656E6774 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0xFB SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x120 DUP12 DUP4 MSTORE PUSH1 0x20 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP13 AND DUP2 DUP6 ADD MSTORE DUP2 PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x42BE DUP3 DUP6 ADD DUP13 PUSH2 0x3E3B JUMP JUMPDEST SWAP2 POP DUP4 DUP3 SUB PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0x42D2 DUP3 DUP12 PUSH2 0x3BDF JUMP JUMPDEST SWAP2 POP DUP4 DUP3 SUB PUSH1 0x80 DUP6 ADD MSTORE DUP2 DUP10 MLOAD DUP1 DUP5 MSTORE DUP3 DUP5 ADD SWAP2 POP DUP3 DUP2 PUSH1 0x5 SHL DUP6 ADD ADD DUP4 DUP13 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4323 JUMPI PUSH1 0x1F NOT DUP8 DUP5 SUB ADD DUP6 MSTORE PUSH2 0x4311 DUP4 DUP4 MLOAD PUSH2 0x370C JUMP JUMPDEST SWAP5 DUP7 ADD SWAP5 SWAP3 POP SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x42F5 JUMP JUMPDEST POP POP DUP7 DUP2 SUB PUSH1 0xA0 DUP9 ADD MSTORE PUSH2 0x4337 DUP2 DUP13 PUSH2 0x3E74 JUMP JUMPDEST SWAP5 POP POP POP POP POP DUP6 PUSH1 0xC0 DUP5 ADD MSTORE DUP5 PUSH1 0xE0 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH2 0x100 DUP5 ADD MSTORE PUSH2 0x435C DUP2 DUP6 PUSH2 0x370C JUMP JUMPDEST SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x918 JUMPI PUSH2 0x918 PUSH2 0x3F6F JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x43B6 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x3DDB JUMPI PUSH1 0x0 NOT PUSH1 0x20 SWAP2 SWAP1 SWAP2 SUB PUSH1 0x3 SHL SHL AND SWAP2 SWAP1 POP JUMP INVALID SELFBALANCE PUSH16 0x7665726E6F723A2072656C6179207265 PUSH23 0x657274656420776974686F7574206D657373616765A264 PUSH10 0x706673582212206B9906 0xBE JUMPI LOG4 0xCA 0xD5 0xEC ADD CODECOPY CREATE2 GASLIMIT SWAP13 SWAP11 MOD PUSH6 0x5642A449DEFD EQ PUSH23 0xE20F15F1755A5164736F6C634300081100330000000000 ",
      "sourceMap": "388:3041:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1614:4:8;1591:11;:9;:11::i;:::-;-1:-1:-1;;;;;1591:28:8;;1583:37;;;;;;388:3041:7;;;;;3213:214;;;;;;;;;;-1:-1:-1;3213:214:7;;;;;:::i;:::-;;:::i;:::-;;;470:14:39;;463:22;445:41;;433:2;418:18;3213:214:7;;;;;;;;1356:172;;;;;;;;;;;;;:::i;:::-;;;643:25:39;;;631:2;616:18;1356:172:7;497:177:39;11234:784:8;;;;;;;;;;-1:-1:-1;11234:784:8;;;;;:::i;:::-;;:::i;3240:150:15:-;;;;;;;;;;-1:-1:-1;3240:150:15;;;;;:::i;:::-;;:::i;2197:98:8:-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;3613:739:13:-;;;;;;;;;;-1:-1:-1;3613:739:13;;;;;:::i;:::-;;:::i;6282:867:8:-;;;;;;:::i;:::-;;:::i;3787:149::-;;;;;;;;;;-1:-1:-1;3787:149:8;;;;;:::i;:::-;3871:7;3897:22;;;:10;:22;;;;;:32;-1:-1:-1;;;;;3897:32:8;;3787:149;638:141;;;;;;;;;;;;689:90;638:141;;1180:170:7;;;;;;;;;;;;;:::i;10796:427:8:-;;;;;;;;;;-1:-1:-1;10796:427:8;;;;;:::i;:::-;;:::i;1741:198:7:-;;;;;;;;;;-1:-1:-1;1741:198:7;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1063:44::-;;;;;;;;;1040:167:12;;;;;;;;;;-1:-1:-1;1040:167:12;;;;;:::i;:::-;1133:4;1156:26;;;:14;:26;;;;;;;;-1:-1:-1;;;;;1156:44:12;;;;:35;;:44;;;;;;;;1040:167;;;;;7151:519:8;;;;;;;;;;-1:-1:-1;7151:519:8;;;;;:::i;:::-;;:::i;1032:259:14:-;;;;;;;;;;;;;:::i;1279:321:12:-;;;;;;;;;;-1:-1:-1;1279:321:12;;;;;:::i;:::-;1365:20;1473:26;;;:14;:26;;;;;1517:25;;1544:21;;;;1567:25;;;;;1517;;1279:321;;;;;9462:25:39;;;9518:2;9503:18;;9496:34;;;;9546:18;;;9539:34;9450:2;9435:18;1279:321:12;9260:319:39;2301:99:8;;;;;;;;;;-1:-1:-1;2383:10:8;;;;;;;;;;;;-1:-1:-1;;;2383:10:8;;;;2301:99;;9992:198;;;;;;;;;;-1:-1:-1;9992:198:8;;;;;:::i;:::-;;:::i;10473:312::-;;;;;;;;;;-1:-1:-1;10473:312:8;;;;;:::i;:::-;;:::i;1779:656:15:-;;;;;;;;;;-1:-1:-1;1779:656:15;;;;;:::i;:::-;;:::i;1143:126:9:-;;;;;;;;;;-1:-1:-1;1143:126:9;;;;;:::i;:::-;;:::i;10197:266:8:-;;;;;;;;;;-1:-1:-1;10197:266:8;;;;;:::i;:::-;;:::i;1945:282:7:-;;;;;;;;;;-1:-1:-1;1945:282:7;;;;;:::i;:::-;;:::i;4910:633:33:-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;642:235:14:-;;;;;;;;;;;;;:::i;:::-;;;13868:14:39;13856:27;;;13838:46;;13826:2;13811:18;642:235:14;13694:196:39;2541:94:15;;;;;;;;;;-1:-1:-1;2625:3:15;2541:94;;9761:223:8;;;;;;;;;;-1:-1:-1;9761:223:8;;;;;:::i;:::-;;:::i;1475:191:15:-;;;;;;;;;;;;;:::i;6250:133:13:-;;;;;;;;;;-1:-1:-1;6250:133:13;;;;;:::i;:::-;;:::i;3274:259::-;;;;;;;;;;-1:-1:-1;3274:259:13;;;;;:::i;:::-;;:::i;2233:181:7:-;;;;;;;;;;;;;:::i;3944:147:8:-;;;;;;;;;;-1:-1:-1;3944:147:8;;;;;:::i;:::-;4028:7;4054:22;;;:10;:22;;;;;:30;;;-1:-1:-1;;;;;4054:30:8;;3944:147;13042:296;;;;;;:::i;:::-;;:::i;2406:308::-;;;;;;;;;;-1:-1:-1;2406:308:8;;;;;:::i;:::-;;:::i;798:262:7:-;;;;;;;;;;-1:-1:-1;798:262:7;;;;;:::i;:::-;;:::i;3077:109:13:-;;;;;;;;;;-1:-1:-1;3169:9:13;;-1:-1:-1;;;;;3169:9:13;3077:109;;;-1:-1:-1;;;;;15484:32:39;;;15466:51;;15454:2;15439:18;3077:109:13;15320:203:39;844:136:12;;;;;;;;;;-1:-1:-1;932:41:12;;;;;;;;;;;;;;;;;;844:136;;537:95:8;;;;;;;;;;;;579:53;537:95;;1275:130:9;;;;;;;;;;-1:-1:-1;1275:130:9;;;;;:::i;:::-;;:::i;9581:172:8:-;;;;;;;;;;-1:-1:-1;9581:172:8;;;;;:::i;:::-;;:::i;1411:150:9:-;;;;;;;;;;-1:-1:-1;1411:150:9;;;;;:::i;:::-;;:::i;1534:201:7:-;;;;;;;;;;-1:-1:-1;1534:201:7;;;;;:::i;:::-;;:::i;338:31:14:-;;;;;;;;;;;;;;;3033:174:7;3153:7;3183:17;3169:9:13;;-1:-1:-1;;;;;3169:9:13;;3077:109;3183:17:7;3176:24;;3033:174;:::o;3213:214::-;3357:4;3384:36;3408:11;3384:23;:36::i;:::-;3377:43;3213:214;-1:-1:-1;;3213:214:7:o;1356:172::-;1471:7;1501:20;993:13:9;;;905:108;11234:784:8;11482:7;11501:13;11517:423;11544:341;689:90;11695:10;11731:7;11780:6;;11764:24;;;;;;;:::i;:::-;;;;;;;;11824:6;11814:17;;;;;;11609:244;;;;;;;;;;;16604:25:39;;;16660:2;16645:18;;16638:34;;;;16720:4;16708:17;;;;16703:2;16688:18;;16681:45;16757:2;16742:18;;16735:34;16800:3;16785:19;;16778:35;16591:3;16576:19;;16349:470;11609:244:8;;;;;;;;;;;;;11578:293;;;;;;11544:16;:341::i;:::-;11899:1;11914;11929;11517:13;:423::i;:::-;11501:439;;11958:53;11968:10;11980:5;11987:7;11996:6;;11958:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12004:6:8;;-1:-1:-1;11958:9:8;;-1:-1:-1;;11958:53:8:i;:::-;11951:60;11234:784;-1:-1:-1;;;;;;;;;;11234:784:8:o;3240:150:15:-;1206:11:8;:9;:11::i;:::-;-1:-1:-1;;;;;1190:27:8;176:10:25;-1:-1:-1;;;;;1190:27:8;;1182:64;;;;-1:-1:-1;;;1182:64:8;;;;;;;:::i;:::-;;;;;;;;;1282:4;1259:11;:9;:11::i;:::-;-1:-1:-1;;;;;1259:28:8;;1256:165;;1303:19;;250:14:25;1325:21:8;;;;;;;:::i;:::-;;;;;;;;1303:43;;1360:51;1396:11;1366:26;:15;:24;:26::i;:::-;:41;1360:51;;1289:132;1256:165;3341:42:15::1;3364:18;3341:22;:42::i;:::-;3240:150:::0;:::o;2197:98:8:-;2251:13;2283:5;2276:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2197:98;:::o;3613:739:13:-;3801:7;3820:18;3841:57;3854:7;3863:6;3871:9;3882:15;3841:12;:57::i;:::-;3820:78;-1:-1:-1;3938:23:13;3917:17;3923:10;3917:5;:17::i;:::-;:44;;;;;;;;:::i;:::-;;3909:90;;;;-1:-1:-1;;;3909:90:13;;;;;;;:::i;:::-;4026:9;;:23;;;-1:-1:-1;;;4026:23:13;;;;4010:13;;-1:-1:-1;;;;;4026:9:13;;:21;;:23;;;;;;;;;;;;;;:9;:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4086:9;;:76;;-1:-1:-1;;;4086:76:13;;4010:39;;-1:-1:-1;;;;;;4086:9:13;;:28;;:76;;4115:7;;4124:6;;4132:9;;4086;;4146:15;;4086:76;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4059:24;;;;:12;:24;;;;;;:103;;;;4172:9;;:78;;-1:-1:-1;;;4172:78:13;;-1:-1:-1;;;;;4172:9:13;;;;:23;;:78;;4196:7;;4205:6;;4213:9;;4059:24;4227:15;;4244:5;;4172:78;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4266:51;4281:10;4311:5;4293:15;:23;;;;:::i;:::-;4266:51;;;21622:25:39;;;21678:2;21663:18;;21656:34;;;;21595:18;4266:51:13;;;;;;;;-1:-1:-1;4335:10:13;3613:739;-1:-1:-1;;;;;3613:739:13:o;6282:867:8:-;6480:7;6499:18;6520:57;6533:7;6542:6;6550:9;6561:15;6520:12;:57::i;:::-;6499:78;;6588:20;6611:17;6617:10;6611:5;:17::i;:::-;6588:40;-1:-1:-1;6669:23:8;6659:6;:33;;;;;;;;:::i;:::-;;:67;;;-1:-1:-1;6706:20:8;6696:6;:30;;;;;;;;:::i;:::-;;6659:67;6638:147;;;;-1:-1:-1;;;6638:147:8;;;;;;;:::i;:::-;6795:22;;;;:10;:22;;;;;;;:31;;:38;;-1:-1:-1;;6795:38:8;6829:4;6795:38;;;6849:28;;;;;6806:10;643:25:39;;631:2;616:18;;497:177;6849:28:8;;;;;;;;6888:71;6903:10;6915:7;6924:6;6932:9;6943:15;6888:14;:71::i;:::-;6969:65;6978:10;6990:7;6999:6;7007:9;7018:15;6969:8;:65::i;:::-;7044:70;7058:10;7070:7;7079:6;7087:9;7098:15;7044:13;:70::i;:::-;-1:-1:-1;7132:10:8;6282:867;-1:-1:-1;;;;;6282:867:8:o;1180:170:7:-;1294:7;1324:19;880:12:9;;;793:106;10796:427:8;11053:48;;;579:53;11053:48;;;21899:25:39;21940:18;;;21933:34;;;22015:4;22003:17;;21983:18;;;21976:45;10964:7:8;;;;10999:159;;11026:77;;21872:18:39;;11053:48:8;21701:326:39;10999:159:8;10983:175;;11175:41;11185:10;11197:5;11204:7;11175:41;;;;;;;;;;;;:9;:41::i;:::-;11168:48;10796:427;-1:-1:-1;;;;;;;10796:427:8:o;1741:198:7:-;1873:13;1909:23;1921:10;1909:11;:23::i;7151:519:8:-;7320:7;7335:18;7356:57;7369:7;7378:6;7386:9;7397:15;7356:12;:57::i;:::-;7335:78;-1:-1:-1;7448:21:8;7427:17;7433:10;7427:5;:17::i;:::-;:42;;;;;;;;:::i;:::-;;7419:83;;;;-1:-1:-1;;;7419:83:8;;22234:2:39;7419:83:8;;;22216:21:39;22273:2;22253:18;;;22246:30;22312;22292:18;;;22285:58;22360:18;;7419:83:8;22032:352:39;7419:83:8;7532:22;;;;:10;:22;;;;;:31;-1:-1:-1;;;7532:31:8;;-1:-1:-1;;;;;7532:31:8;176:10:25;-1:-1:-1;;;;;7516:47:8;;7508:93;;;;-1:-1:-1;;;7508:93:8;;22591:2:39;7508:93:8;;;22573:21:39;22630:2;22610:18;;;22603:30;22669:34;22649:18;;;22642:62;-1:-1:-1;;;22720:18:39;;;22713:32;22762:19;;7508:93:8;22389:398:39;7508:93:8;7614:52;7622:7;7631:6;7639:9;7650:15;7614:7;:52::i;:::-;7607:59;7151:519;-1:-1:-1;;;;;;7151:519:8:o;1032:259:14:-;1092:13;1121:5;-1:-1:-1;;;;;1121:16:14;;:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1121:18:14;;;;;;;;;;;;:::i;:::-;;;1117:168;;-1:-1:-1;1236:38:14;;;;;;;;;;;;;;;;;;1032:259::o;1117:168::-;1195:9;1032:259;-1:-1:-1;1032:259:14:o;9992:198:8:-;10078:7;;176:10:25;10097:28:8;;10142:41;10152:10;10164:5;10171:7;10142:41;;;;;;;;;;;;:9;:41::i;:::-;10135:48;9992:198;-1:-1:-1;;;;9992:198:8:o;10473:312::-;10661:7;;176:10:25;10680:28:8;;10725:53;10735:10;10747:5;10754:7;10763:6;;10725:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10771:6:8;;-1:-1:-1;10725:9:8;;-1:-1:-1;;10725:53:8:i;1779:656:15:-;1944:23;:43;1852:7;;2001:11;;;1997:65;;-1:-1:-1;;2035:16:15;;;1779:656;-1:-1:-1;1779:656:15:o;1997:65::-;2130:39;2172:23;2209:10;2218:1;2209:6;:10;:::i;:::-;2172:48;;;;;;;;:::i;:::-;;;;;;;;;;2130:90;;;;;;;;;2172:48;;2130:90;;;;;;;-1:-1:-1;;;2130:90:15;;;-1:-1:-1;;;;;2130:90:15;;;;;;;;;-1:-1:-1;;;2230:75:15;;2281:13;;;-1:-1:-1;;;;;2274:20:15;;1779:656;-1:-1:-1;;;1779:656:15:o;2230:75::-;2365:63;2407:20;:9;:18;:20::i;:::-;2365:23;;:41;:63::i;:::-;-1:-1:-1;;;;;2358:70:15;;1779:656;-1:-1:-1;;;;1779:656:15:o;1143:126:9:-;1206:11:8;:9;:11::i;:::-;-1:-1:-1;;;;;1190:27:8;176:10:25;-1:-1:-1;;;;;1190:27:8;;1182:64;;;;-1:-1:-1;;;1182:64:8;;;;;;;:::i;:::-;1282:4;1259:11;:9;:11::i;:::-;-1:-1:-1;;;;;1259:28:8;;1256:165;;1303:19;;250:14:25;1325:21:8;;;;;;;:::i;:::-;;;;;;;;1303:43;;1360:51;1396:11;1366:26;:15;:24;:26::i;:::-;:41;1360:51;;1289:132;1256:165;1231:31:9::1;1247:14;1231:15;:31::i;10197:266:8:-:0;10347:7;;176:10:25;10366:28:8;;10411:45;10421:10;10433:5;10440:7;10449:6;;10411:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10411:9:8;;-1:-1:-1;;;10411:45:8:i;1945:282:7:-;2136:7;2166:54;2180:7;2189:6;2197:9;2208:11;2166:13;:54::i;:::-;2159:61;1945:282;-1:-1:-1;;;;;1945:282:7:o;4910:633:33:-;5025:13;5052:18;;5025:13;;;5052:18;5316:41;:5;5025:13;5316:26;:41::i;:::-;5371:47;:8;5401:16;5371:29;:47::i;:::-;5510:16;;;5494:1;5510:16;;;;;;;;;-1:-1:-1;;;5265:271:33;;;-1:-1:-1;5265:271:33;;-1:-1:-1;5432:13:33;;-1:-1:-1;5467:4:33;;-1:-1:-1;5494:1:33;-1:-1:-1;5510:16:33;-1:-1:-1;5265:271:33;-1:-1:-1;4910:633:33:o;642:235:14:-;697:6;719:5;-1:-1:-1;;;;;719:11:14;;:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;719:13:14;;;;;;;;-1:-1:-1;;719:13:14;;;;;;;;;;;;:::i;:::-;;;715:156;;829:31;847:12;829:17;:31::i;9761:223:8:-;9914:7;9940:37;9950:7;9959:9;9970:6;9940:9;:37::i;:::-;9933:44;;9761:223;;;;;;:::o;1475:191:15:-;1557:23;:43;1531:7;;1557:48;:102;;1627:32;:23;:30;:32::i;:::-;-1:-1:-1;;;;;1557:102:15;3176:24:7;;3033:174;:::o;1557:102:15:-;-1:-1:-1;1608:16:15;;;1475:191::o;6250:133:13:-;1206:11:8;:9;:11::i;:::-;-1:-1:-1;;;;;1190:27:8;176:10:25;-1:-1:-1;;;;;1190:27:8;;1182:64;;;;-1:-1:-1;;;1182:64:8;;;;;;;:::i;:::-;1282:4;1259:11;:9;:11::i;:::-;-1:-1:-1;;;;;1259:28:8;;1256:165;;1303:19;;250:14:25;1325:21:8;;;;;;;:::i;:::-;;;;;;;;1303:43;;1360:51;1396:11;1366:26;:15;:24;:26::i;:::-;:41;1360:51;;1289:132;1256:165;6348:28:13::1;6364:11;6348:15;:28::i;3274:259::-:0;3386:9;;3353:7;3409:24;;;:12;:24;;;;;;;3386:48;;-1:-1:-1;;;3386:48:13;;;;;643:25:39;;;;3353:7:13;;;;-1:-1:-1;;;;;3386:9:13;;;;:22;;616:18:39;;3386:48:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3372:62;;3451:3;3458:1;3451:8;:18;;3466:3;3451:18;;;3462:1;3444:25;3274:259;-1:-1:-1;;;3274:259:13:o;2233:181:7:-;2352:7;2382:25;1112:18:9;;;1019:118;13042:296:8;1206:11;:9;:11::i;:::-;-1:-1:-1;;;;;1190:27:8;176:10:25;-1:-1:-1;;;;;1190:27:8;;1182:64;;;;-1:-1:-1;;;1182:64:8;;;;;;;:::i;:::-;1282:4;1259:11;:9;:11::i;:::-;-1:-1:-1;;;;;1259:28:8;;1256:165;;1303:19;;250:14:25;1325:21:8;;;;;;;:::i;:::-;;;;;;;;1303:43;;1360:51;1396:11;1366:26;:15;:24;:26::i;:::-;:41;1360:51;;1289:132;1256:165;13160:12:::1;13174:23:::0;13201:6:::1;-1:-1:-1::0;;;;;13201:11:8::1;13220:5;13227:4;;13201:31;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13159:73;;;;13242:89;13267:7;13276:10;13242:89;;;;;;;;;;;;;;;;;:24;:89::i;:::-;;13149:189;;13042:296:::0;;;;:::o;2406:308::-;2606:7;2661;2670:6;2678:9;2689:15;2650:55;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2650:55:8;;;;;;;;;2640:66;;2650:55;2640:66;;;;;2406:308;-1:-1:-1;;;;;2406:308:8:o;798:262:7:-;972:7;998:55;1012:7;1020:6;1027:9;1037:15;998:13;:55::i;1275:130:9:-;1206:11:8;:9;:11::i;:::-;-1:-1:-1;;;;;1190:27:8;176:10:25;-1:-1:-1;;;;;1190:27:8;;1182:64;;;;-1:-1:-1;;;1182:64:8;;;;;;;:::i;:::-;1282:4;1259:11;:9;:11::i;:::-;-1:-1:-1;;;;;1259:28:8;;1256:165;;1303:19;;250:14:25;1325:21:8;;;;;;;:::i;:::-;;;;;;;;1303:43;;1360:51;1396:11;1366:26;:15;:24;:26::i;:::-;:41;1360:51;;1289:132;1256:165;1365:33:9::1;1382:15;1365:16;:33::i;9581:172:8:-:0;9673:7;9699:47;9709:7;9718:9;9729:16;4654:9;;;;;;;;;-1:-1:-1;4654:9:8;;;4573:97;9729:16;9699:9;:47::i;1411:150:9:-;1206:11:8;:9;:11::i;:::-;-1:-1:-1;;;;;1190:27:8;176:10:25;-1:-1:-1;;;;;1190:27:8;;1182:64;;;;-1:-1:-1;;;1182:64:8;;;;;;;:::i;:::-;1282:4;1259:11;:9;:11::i;:::-;-1:-1:-1;;;;;1259:28:8;;1256:165;;1303:19;;250:14:25;1325:21:8;;;;;;;:::i;:::-;;;;;;;;1303:43;;1360:51;1396:11;1366:26;:15;:24;:26::i;:::-;:41;1360:51;;1289:132;1256:165;1511:43:9::1;1533:20;1511:21;:43::i;1534:201:7:-:0;1673:7;1703:25;1716:11;1703:12;:25::i;2194:324:29:-;2290:11;2339:2;2323:5;2317:19;:24;2313:199;;;2364:20;2378:5;2364:13;:20::i;:::-;2357:27;;;;2313:199;2441:5;2415:46;2456:5;2441;2415:46;:::i;:::-;-1:-1:-1;2499:1:29;;-1:-1:-1;2475:26:29;;3159:202:30;3335:10;3159:202::o;1975:192:37:-;2032:7;-1:-1:-1;;;;;2059:26:37;;;2051:78;;;;-1:-1:-1;;;2051:78:37;;27168:2:39;2051:78:37;;;27150:21:39;27207:2;27187:18;;;27180:30;27246:34;27226:18;;;27219:62;-1:-1:-1;;;27297:18:39;;;27290:37;27344:19;;2051:78:37;26966:403:39;2051:78:37;-1:-1:-1;2154:5:37;1975:192::o;14403:187::-;14459:6;14494:16;14485:25;;;14477:76;;;;-1:-1:-1;;;14477:76:37;;27576:2:39;14477:76:37;;;27558:21:39;27615:2;27595:18;;;27588:30;27654:34;27634:18;;;27627:62;-1:-1:-1;;;27705:18:39;;;27698:36;27751:19;;14477:76:37;27374:402:39;8042:162:24;8124:7;;8159:38;8167:4;8186:3;8191:5;8159:7;:38::i;:::-;8152:45;;;;8042:162;;;;;;;:::o;10057:206::-;10152:24;;10119:7;;10193:8;;:63;;10208:41;10222:4;10241:7;10247:1;10241:3;:7;:::i;:::-;13819:28;13882:20;;;13947:4;13934:18;;;13930:28;;13709:265;10208:41;:48;-1:-1:-1;;;10208:48:24;;-1:-1:-1;;;;;10208:48:24;10193:63;;13379:187:37;13435:6;13470:16;13461:25;;;13453:76;;;;-1:-1:-1;;;13453:76:37;;27983:2:39;13453:76:37;;;27965:21:39;28022:2;28002:18;;;27995:30;28061:34;28041:18;;;28034:62;-1:-1:-1;;;28112:18:39;;;28105:36;28158:19;;13453:76:37;27781:402:39;1889:224:13;1993:4;-1:-1:-1;;;;;;2016:50:13;;-1:-1:-1;;;2016:50:13;;:90;;;2070:36;2094:11;2070:23;:36::i;4695:165:33:-;4772:7;4798:55;4820:20;:18;:20::i;:::-;4842:10;8464:4:32;8458:11;-1:-1:-1;;;8482:23:32;;8534:4;8525:14;;8518:39;;;;8586:4;8577:14;;8570:34;8640:4;8625:20;;;8264:397;6526:232;6611:7;6631:17;6650:18;6672:25;6683:4;6689:1;6692;6695;6672:10;:25::i;:::-;6630:67;;;;6707:18;6719:5;6707:11;:18::i;12283:755:8:-;12469:7;12520:22;;;:10;:22;;;;;12581:20;12560:17;12566:10;12560:5;:17::i;:::-;:41;;;;;;;;:::i;:::-;;12552:89;;;;-1:-1:-1;;;12552:89:8;;28390:2:39;12552:89:8;;;28372:21:39;28429:2;28409:18;;;28402:30;28468:34;28448:18;;;28441:62;-1:-1:-1;;;28519:18:39;;;28512:33;28562:19;;12552:89:8;28188:399:39;12552:89:8;12688:18;;12652:14;;12669:46;;12679:7;;-1:-1:-1;;;;;12688:18:8;12708:6;12669:9;:46::i;:::-;12652:63;;12725:56;12736:10;12748:7;12757;12766:6;12774;12725:10;:56::i;:::-;12796:6;:13;12813:1;12796:18;12792:216;;12844:7;-1:-1:-1;;;;;12835:54:8;;12853:10;12865:7;12874:6;12882;12835:54;;;;;;;;;:::i;:::-;;;;;;;;12792:216;;;12944:7;-1:-1:-1;;;;;12925:72:8;;12953:10;12965:7;12974:6;12982;12990;12925:72;;;;;;;;;;:::i;:::-;;;;;;;;13025:6;12283:755;-1:-1:-1;;;;;;;12283:755:8:o;2550:324:38:-;2614:13;2643:12;2649:5;5143:12;;;;;-1:-1:-1;;;5129:10:38;;;;;:26;;;5040:122;2643:12;2639:32;;;2664:7;;-1:-1:-1;;;2664:7:38;;;;;;;;;;;2639:32;-1:-1:-1;2701:12:38;;;;2681:17;2731:23;;;2701:12;2731:11;;;:23;;;;;;;2764:30;;;2828:29;;-1:-1:-1;;2828:29:38;2843:14;;-1:-1:-1;;;;;2828:29:38;;;;;;;;2731:23;2550:324::o;3611:906:15:-;2625:3;3719:18;:41;;3698:155;;;;-1:-1:-1;;;3698:155:15;;29850:2:39;3698:155:15;;;29832:21:39;29889:2;29869:18;;;29862:30;29928:34;29908:18;;;29901:62;29999:34;29979:18;;;29972:62;-1:-1:-1;;;30050:19:39;;;30043:34;30094:19;;3698:155:15;29648:471:39;3698:155:15;3864:26;3893:17;:15;:17::i;:::-;3864:46;-1:-1:-1;4044:23:15;;;;;:75;;-1:-1:-1;4071:23:15;:43;:48;4044:75;4040:255;;;4194:76;;;;;;;;;4135:36;4194:76;;4135:23;;4194:76;;;4238:30;:18;:28;:30::i;:::-;-1:-1:-1;;;;;4194:76:15;;;;;;4135:149;;;;;;;-1:-1:-1;4135:149:15;;;;;;;;;;;;;;;;;;-1:-1:-1;;;4135:149:15;;;;;;;;;;;;4040:255;4352:80;4381:18;:7;:5;:7::i;:::-;:16;;;:18::i;:::-;4401:30;:18;:28;:30::i;:::-;4352:23;;:80;:28;:80::i;:::-;-1:-1:-1;;4448:62:15;;;21622:25:39;;;21678:2;21663:18;;21656:34;;;4448:62:15;;21595:18:39;4448:62:15;;;;;;;3688:829;3611:906;:::o;8183:419:8:-;8369:4;8346:11;:9;:11::i;:::-;-1:-1:-1;;;;;8346:28:8;;8342:258;;8395:9;8390:200;8414:7;:14;8410:1;:18;8390:200;;;8479:4;-1:-1:-1;;;;;8457:27:8;:7;8465:1;8457:10;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;8457:27:8;;8453:123;;8508:49;8543:9;8553:1;8543:12;;;;;;;;:::i;:::-;;;;;;;8533:23;;;;;;8508:15;:24;;:49;;;;:::i;:::-;8430:3;;;:::i;:::-;;;8390:200;;;;8342:258;8183:419;;;;;:::o;2420:301:7:-;2643:71;2658:10;2670:7;2679:6;2687:9;2698:15;2643:14;:71::i;8605:317:8:-;8799:4;8776:11;:9;:11::i;:::-;-1:-1:-1;;;;;8776:28:8;;8772:144;;8825:15;5143:12:38;;;;;-1:-1:-1;;;5129:10:38;;;;;:26;;8820:86:8;;4499:1:38;8868:15:8;4510:14:38;8868:23:8;4422:109:38;12022:255:8;12179:7;12205:65;12215:10;12227:7;12236;12245:6;12253:16;4654:9;;;;;;;;;-1:-1:-1;4654:9:8;;;4573:97;12253:16;12205:9;:65::i;2243:747:13:-;2337:13;2362:20;2385:23;2397:10;2385:11;:23::i;:::-;2362:46;-1:-1:-1;2433:23:13;2423:6;:33;;;;;;;;:::i;:::-;;2419:77;;2479:6;2243:747;-1:-1:-1;;2243:747:13:o;2419:77::-;2606:15;2624:24;;;:12;:24;;;;;;;2658:326;;-1:-1:-1;2706:6:13;2243:747;-1:-1:-1;;2243:747:13:o;2658:326::-;2733:9;;:34;;-1:-1:-1;;;2733:34:13;;;;;643:25:39;;;-1:-1:-1;;;;;2733:9:13;;;;:25;;616:18:39;;2733:34:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2729:255;;;-1:-1:-1;2790:22:13;;2243:747;-1:-1:-1;;;2243:747:13:o;2729:255::-;2833:9;;:37;;-1:-1:-1;;;2833:37:13;;;;;643:25:39;;;-1:-1:-1;;;;;2833:9:13;;;;:28;;616:18:39;;2833:37:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2829:155;;;-1:-1:-1;2893:20:13;;2243:747;-1:-1:-1;;;2243:747:13:o;2829:155::-;-1:-1:-1;2951:22:13;;2243:747;-1:-1:-1;;;2243:747:13:o;9331:606:24:-;9449:24;;9416:7;;;9449:24;9548:1;9542:7;;9538:234;;;9565:11;9585:14;9595:3;9585:9;:14::i;:::-;9579:20;;:3;:20;:::i;:::-;13819:28;13882:20;;;13947:4;13934:18;;9565:34;;-1:-1:-1;13930:28:24;;9623:42;;;;;9617:48;;;;9613:149;;;9692:3;9685:10;;9613:149;;;9740:7;:3;9746:1;9740:7;:::i;:::-;9734:13;;9613:149;9551:221;9538:234;9782:11;9796:53;9815:4;9834:3;9839;9844:4;9796:18;:53::i;:::-;9782:67;-1:-1:-1;9867:8:24;;:63;;9882:41;9896:4;9915:7;9921:1;9915:3;:7;:::i;9882:41::-;:48;-1:-1:-1;;;9882:48:24;;-1:-1:-1;;;;;9882:48:24;9867:63;;;9878:1;9860:70;9331:606;-1:-1:-1;;;;;;;9331:606:24:o;1567:171:9:-;1663:12;;1648:44;;;21622:25:39;;;21678:2;21663:18;;21656:34;;;1648:44:9;;21595:18:39;1648:44:9;;;;;;;1702:12;:29;1567:171::o;4676:1600:8:-;4868:7;176:10:25;4868:7:8;4955;:5;:7::i;:::-;4928:34;;;;5038:19;:17;:19::i;:::-;4994:40;5003:8;5013:20;5032:1;5013:16;:20;:::i;4994:40::-;:63;;4973:159;;;;-1:-1:-1;;;4973:159:8;;30748:2:39;4973:159:8;;;30730:21:39;30787:2;30767:18;;;30760:30;30826:34;30806:18;;;30799:62;-1:-1:-1;;;30877:18:39;;;30870:47;30934:19;;4973:159:8;30546:413:39;4973:159:8;5143:18;5164:71;5177:7;5186:6;5194:9;5221:11;5205:29;;;;;;5164:12;:71::i;:::-;5143:92;;5272:6;:13;5254:7;:14;:31;5246:77;;;;-1:-1:-1;;;5246:77:8;;;;;;;:::i;:::-;5359:9;:16;5341:7;:14;:34;5333:79;;;;-1:-1:-1;;;5333:79:8;;;;;;;:::i;:::-;5447:1;5430:7;:14;:18;5422:55;;;;-1:-1:-1;;;5422:55:8;;31568:2:39;5422:55:8;;;31550:21:39;31607:2;31587:18;;;31580:30;31646:26;31626:18;;;31619:54;31690:18;;5422:55:8;31366:348:39;5422:55:8;5495:22;;;;:10;:22;;;;;:32;-1:-1:-1;;;;;5495:32:8;:37;5487:83;;;;-1:-1:-1;;;5487:83:8;;31921:2:39;5487:83:8;;;31903:21:39;31960:2;31940:18;;;31933:30;31999:34;31979:18;;;31972:62;-1:-1:-1;;;32050:18:39;;;32043:31;32091:19;;5487:83:8;31719:397:39;5487:83:8;5581:16;5619:13;:11;:13::i;:::-;5600:32;;:16;:32;:::i;:::-;5581:51;;5642:16;5672:14;:12;:14::i;:::-;5661:25;;:8;:25;:::i;:::-;5642:44;;5720:260;;;;;;;;5790:19;:8;:17;:19::i;:::-;-1:-1:-1;;;;;5720:260:8;;;-1:-1:-1;;;;;5720:260:8;;;;;;-1:-1:-1;5720:260:8;;;;;;5832:19;:8;:17;:19::i;:::-;-1:-1:-1;;;;;5720:260:8;;;;;5968:1;5720:260;;;;;;;;;;;;;;;;;;;;;5695:22;;;:10;:22;;;;;;:285;;;;;;;;;;;;;;;-1:-1:-1;;;;;;5695:285:8;;;;;;;-1:-1:-1;;;;;;;;5695:285:8;;;;;;-1:-1:-1;;;;;5695:285:8;-1:-1:-1;;;5695:285:8;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5695:285:8;;;;;;;;;;;;;;;;;;-1:-1:-1;;5695:285:8;;;;;;-1:-1:-1;;5695:285:8;;;;;;;;;;;;;;;;;;;6125:14;;5996:246;;5695:22;;6049:8;;6125:14;;6092:6;;6112:28;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6154:9;6177:8;6199;6221:11;5996:246;;;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;6259:10:8;;4676:1600;-1:-1:-1;;;;;;;;4676:1600:8:o;2649:238:29:-;2743:13;2069:4;2033:40;;2772:17;2768:113;;2812:15;2821:5;2812:8;:15::i;2768:113::-;2865:5;2858:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1416:221:14;1592:38;;-1:-1:-1;;;1592:38:14;;-1:-1:-1;;;;;34182:32:39;;;1592:38:14;;;34164:51:39;34231:18;;;34224:34;;;1566:7:14;;1592:5;:18;;;;;;34137::39;;1592:38:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;6389:176:13:-;6492:9;;6469:56;;;-1:-1:-1;;;;;6492:9:13;;;34481:34:39;;34551:15;;;34546:2;34531:18;;34524:43;6469:56:13;;34416:18:39;6469:56:13;;;;;;;6535:9;:23;;-1:-1:-1;;;;;;6535:23:13;-1:-1:-1;;;;;6535:23:13;;;;;;;;;;6389:176::o;3169:295:23:-;3315:12;3343:7;3339:119;;;-1:-1:-1;3373:10:23;3366:17;;3339:119;3414:33;3422:10;3434:12;3414:7;:33::i;5204:482:13:-;5396:7;5415:18;5436:58;5450:7;5459:6;5467:9;5478:15;5436:13;:58::i;:::-;5509:24;;;;:12;:24;;;;;;5415:79;;-1:-1:-1;5509:29:13;5505:147;;5554:9;;;5571:24;;;:12;:24;;;;;;;;5554:42;;-1:-1:-1;;;5554:42:13;;-1:-1:-1;;;;;5554:9:13;;;;:16;;:42;;;;643:25:39;;;631:2;616:18;;497:177;5554:42:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;5617:24:13;;;;:12;:24;;;;;5610:31;-1:-1:-1;5669:10:13;5204:482;-1:-1:-1;;;;;5204:482:13:o;1744:259:9:-;1848:1;1830:15;:19;1822:71;;;;-1:-1:-1;;;1822:71:9;;34780:2:39;1822:71:9;;;34762:21:39;34819:2;34799:18;;;34792:30;34858:34;34838:18;;;34831:62;-1:-1:-1;;;34909:18:39;;;34902:37;34956:19;;1822:71:9;34578:403:39;1822:71:9;1924:13;;1908:47;;;21622:25:39;;;21678:2;21663:18;;21656:34;;;1908:47:9;;21595:18:39;1908:47:9;;;;;;;1965:13;:31;1744:259::o;2009:213::-;2123:18;;2102:62;;;21622:25:39;;;21678:2;21663:18;;21656:34;;;2102:62:9;;21595:18:39;2102:62:9;;;;;;;2174:18;:41;2009:213::o;2770:194:15:-;2843:7;2625:3;2908:26;2924:9;2908:15;:26::i;:::-;2870:35;;-1:-1:-1;;;2870:35:15;;;;;643:25:39;;;2870:5:15;-1:-1:-1;;;;;2870:24:15;;;;616:18:39;;2870:35:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:64;;;;:::i;:::-;2869:88;;;;:::i;1107:286:29:-;1172:11;1195:17;1221:3;1195:30;;1253:2;1239:4;:11;:16;1235:72;;;1292:3;1278:18;;-1:-1:-1;;;1278:18:29;;;;;;;;:::i;1235:72::-;1373:11;;1356:13;1373:4;1356:13;:::i;:::-;1348:36;;1107:286;-1:-1:-1;;;1107:286:29:o;11193:836:24:-;11326:11;;11284:7;;;;11352;;11348:675;;11427:25;11455:28;11469:4;11475:7;11481:1;11475:3;:7;:::i;11455:28::-;11427:56;;;;;;;;;;;;;;;;;;-1:-1:-1;;;11427:56:24;;;-1:-1:-1;;;;;11427:56:24;;;;;;;-1:-1:-1;11561:16:24;;;-1:-1:-1;11561:16:24;11553:56;;;;-1:-1:-1;;;11553:56:24;;36017:2:39;11553:56:24;;;35999:21:39;36056:2;36036:18;;;36029:30;36095:29;36075:18;;;36068:57;36142:18;;11553:56:24;35815:351:39;11553:56:24;11673:9;;:16;;;;;;;11669:189;;11747:5;11709:28;11723:4;11729:7;11735:1;11729:3;:7;:::i;11709:28::-;:43;;-1:-1:-1;;;;;11709:43:24;;;;-1:-1:-1;;;11709:43:24;;;;;;;;;;;11669:189;;;11801:41;;;;;;;;;;;;;;;-1:-1:-1;;;;;11801:41:24;;;;;;;;;;11791:52;;;;;;;-1:-1:-1;11791:52:24;;;;;;;;;;;;;;-1:-1:-1;;;11791:52:24;;;;;;;;;;11669:189;11879:11;;;;-1:-1:-1;11892:5:24;;-1:-1:-1;11871:27:24;;-1:-1:-1;11871:27:24;11348:675;-1:-1:-1;;11939:41:24;;;;;;;;;;;;;;;-1:-1:-1;;;;;11939:41:24;;;;;;;;;;11929:52;;;;;;;-1:-1:-1;11929:52:24;;;;;;;;;;;;;-1:-1:-1;;;11929:52:24;;;;;;;;;;;;-1:-1:-1;;11973:5:24;11995:17;;1633:558:8;1735:4;-1:-1:-1;;;;;;1769:251:8;;-1:-1:-1;;;1769:251:8;;:363;;-1:-1:-1;;;;;;;2036:96:8;;-1:-1:-1;;;2036:96:8;1769:363;:415;;;-1:-1:-1;;;;;;;;;;235:40:34;;;2148:36:8;127:155:34;3622:262:33;3675:7;3706:4;-1:-1:-1;;;;;3715:11:33;3698:28;;:63;;;;;3747:14;3730:13;:31;3698:63;3694:184;;;-1:-1:-1;3784:22:33;;3622:262::o;3694:184::-;3844:23;3981:81;;;1856:95;3981:81;;;39902:25:39;4004:11:33;39943:18:39;;;39936:34;;;;4017:14:33;39986:18:39;;;39979:34;4033:13:33;40029:18:39;;;40022:34;4056:4:33;40072:19:39;;;40065:61;3945:7:33;;39874:19:39;;3981:81:33;;;;;;;;;;;;3971:92;;;;;;3964:99;;3890:180;;4937:1456:32;5025:7;;5949:66;5936:79;;5932:161;;;-1:-1:-1;6047:1:32;;-1:-1:-1;6051:30:32;6031:51;;5932:161;6204:24;;;6187:14;6204:24;;;;;;;;;36398:25:39;;;36471:4;36459:17;;36439:18;;;36432:45;;;;36493:18;;;36486:34;;;36536:18;;;36529:34;;;6204:24:32;;36370:19:39;;6204:24:32;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6204:24:32;;-1:-1:-1;;6204:24:32;;;-1:-1:-1;;;;;;;6242:20:32;;6238:101;;6294:1;6298:29;6278:50;;;;;;;6238:101;6357:6;-1:-1:-1;6365:20:32;;-1:-1:-1;4937:1456:32;;;;;;;;:::o;498:511::-;575:20;566:5;:29;;;;;;;;:::i;:::-;;562:441;;498:511;:::o;562:441::-;671:29;662:5;:38;;;;;;;;:::i;:::-;;658:345;;716:34;;-1:-1:-1;;;716:34:32;;36776:2:39;716:34:32;;;36758:21:39;36815:2;36795:18;;;36788:30;36854:26;36834:18;;;36827:54;36898:18;;716:34:32;36574:348:39;658:345:32;780:35;771:5;:44;;;;;;;;:::i;:::-;;767:236;;831:41;;-1:-1:-1;;;831:41:32;;37129:2:39;831:41:32;;;37111:21:39;37168:2;37148:18;;;37141:30;37207:33;37187:18;;;37180:61;37258:18;;831:41:32;36927:355:39;767:236:32;902:30;893:5;:39;;;;;;;;:::i;:::-;;889:114;;948:44;;-1:-1:-1;;;948:44:32;;37489:2:39;948:44:32;;;37471:21:39;37528:2;37508:18;;;37501:30;37567:34;37547:18;;;37540:62;-1:-1:-1;;;37618:18:39;;;37611:32;37660:19;;948:44:32;37287:398:39;2451:812:12;2645:33;2681:26;;;:14;:26;;;;;;;;-1:-1:-1;;;;;2727:30:12;;;;:21;;;:30;;;;;;;;;2726:31;2718:83;;;;-1:-1:-1;;;2718:83:12;;37892:2:39;2718:83:12;;;37874:21:39;37931:2;37911:18;;;37904:30;37970:34;37950:18;;;37943:62;-1:-1:-1;;;38021:18:39;;;38014:37;38068:19;;2718:83:12;37690:403:39;2718:83:12;-1:-1:-1;;;;;2811:30:12;;;;;;:21;;;:30;;;;;:37;;-1:-1:-1;;2811:37:12;2844:4;2811:37;;;2863:34;;;2859:398;;2942:6;2913:12;:25;;;:35;;;;;;;:::i;:::-;;;;-1:-1:-1;2859:398:12;;-1:-1:-1;2859:398:12;;-1:-1:-1;;2969:30:12;;;;2965:292;;3040:6;3015:12;:21;;;:31;;;;;;;:::i;2965:292::-;-1:-1:-1;;3067:34:12;;;;3063:194;;3146:6;3117:12;:25;;;:35;;;;;;;:::i;3063:194::-;3183:63;;-1:-1:-1;;;3183:63:12;;38300:2:39;3183:63:12;;;38282:21:39;38339:2;38319:18;;;38312:30;38378:34;38358:18;;;38351:62;-1:-1:-1;;;38429:18:39;;;38422:51;38490:19;;3183:63:12;38098:417:39;1351:226:38;1450:10;;-1:-1:-1;;;1450:10:38;;;;;;1431:16;1470:22;;;:11;;;;:22;;;;;;:30;;;;1534:26;;-1:-1:-1;;;;;1534:26:38;;;1547:13;;;;1534:26;;;;;1351:226::o;4473:323:13:-;4701:9;;:88;;-1:-1:-1;;;4701:88:13;;-1:-1:-1;;;;;4701:9:13;;;;:22;;4731:9;;4701:88;;4742:7;;4751:6;;4759:9;;4701;;4773:15;;4701:88;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4473:323;;;;;:::o;2721:961:8:-;2794:13;2851:22;;;:10;:22;;;;;2887:17;;;;;;2884:76;;;-1:-1:-1;2927:22:8;;2721:961;-1:-1:-1;;2721:961:8:o;2884:76::-;2973:17;;;;;;;;;2970:76;;;-1:-1:-1;3013:22:8;;2721:961;-1:-1:-1;;2721:961:8:o;2970:76::-;3056:16;3897:22;;;:10;:22;;;;;:32;-1:-1:-1;;;;;3897:32:8;;3117:13;;;3114:82;;3146:39;;-1:-1:-1;;;3146:39:8;;38722:2:39;3146:39:8;;;38704:21:39;38761:2;38741:18;;;38734:30;38800:31;38780:18;;;38773:59;38849:18;;3146:39:8;38520:353:39;3114:82:8;3206:24;3233:7;:5;:7::i;:::-;3206:34;;;;3266:16;3254:8;:28;3251:86;;-1:-1:-1;3305:21:8;;2721:961;-1:-1:-1;;;;2721:961:8:o;3251:86::-;3347:16;4054:22;;;:10;:22;;;;;:30;;;-1:-1:-1;;;;;4054:30:8;3408:28;;;3405:85;;-1:-1:-1;3459:20:8;;2721:961;-1:-1:-1;;;;;2721:961:8:o;3405:85::-;3503:26;3518:10;3503:14;:26::i;:::-;:56;;;;-1:-1:-1;2159:4:12;2211:26;;;:14;:26;;;;;2279:25;;2255:21;;;;;:49;3533:26:8;3500:176;;;-1:-1:-1;3582:23:8;;2721:961;-1:-1:-1;;;;;2721:961:8:o;3500:176::-;-1:-1:-1;3643:22:8;;2721:961;-1:-1:-1;;;;;2721:961:8:o;6283:1642:36:-;6331:7;6354:1;6359;6354:6;6350:45;;-1:-1:-1;6383:1:36;;6283:1642;-1:-1:-1;6283:1642:36:o;6350:45::-;7074:14;7108:1;7097:7;7102:1;7097:4;:7::i;:::-;:12;;7091:1;:19;;7074:36;;7569:1;7558:6;7554:1;:10;;;;;:::i;:::-;;7545:6;:19;7544:26;;7535:35;;7618:1;7607:6;7603:1;:10;;;;;:::i;:::-;;7594:6;:19;7593:26;;7584:35;;7667:1;7656:6;7652:1;:10;;;;;:::i;:::-;;7643:6;:19;7642:26;;7633:35;;7716:1;7705:6;7701:1;:10;;;;;:::i;:::-;;7692:6;:19;7691:26;;7682:35;;7765:1;7754:6;7750:1;:10;;;;;:::i;:::-;;7741:6;:19;7740:26;;7731:35;;7814:1;7803:6;7799:1;:10;;;;;:::i;:::-;;7790:6;:19;7789:26;;7780:35;;7863:1;7852:6;7848:1;:10;;;;;:::i;:::-;;7839:6;:19;7838:26;;7829:35;;7885:23;7889:6;7901;7897:1;:10;;;;;:::i;:::-;;7885:3;:23::i;12360:433:24:-;12517:7;12536:230;12549:4;12543:3;:10;12536:230;;;12569:11;12583:23;12596:3;12601:4;12583:12;:23::i;:::-;13819:28;13882:20;;;13947:4;13934:18;;12569:37;;-1:-1:-1;12624:35:24;;;;13930:28;;12624:29;;;:35;12620:136;;;12686:3;12679:10;;12620:136;;;12734:7;:3;12740:1;12734:7;:::i;:::-;12728:13;;12620:136;12555:211;12536:230;;;-1:-1:-1;12782:4:24;12360:433;-1:-1:-1;;;12360:433:24:o;12355:187:37:-;12411:6;-1:-1:-1;;;;;12437:25:37;;;12429:76;;;;-1:-1:-1;;;12429:76:37;;39080:2:39;12429:76:37;;;39062:21:39;39119:2;39099:18;;;39092:30;39158:34;39138:18;;;39131:62;-1:-1:-1;;;39209:18:39;;;39202:36;39255:19;;12429:76:37;38878:402:39;1477:401:29;1695:14;;;1706:2;1695:14;;;;;;;;;1536:13;;2069:4;2033:40;;;1561:11;;1695:14;;;1706:2;;1695:14;;;-1:-1:-1;;;1785:16:29;;;-1:-1:-1;1830:4:29;1821:14;;1814:28;;;;-1:-1:-1;1785:16:29;1477:401::o;3470:343:23:-;3567:17;;:21;3563:244;;3660:10;3654:17;3716:15;3703:10;3699:2;3695:19;3688:44;3563:244;3783:12;3776:20;;-1:-1:-1;;;3776:20:23;;;;;;;;:::i;8929:648:8:-;9112:7;9131:18;9152:57;9165:7;9174:6;9182:9;9193:15;9152:12;:57::i;:::-;9131:78;;9220:20;9243:17;9249:10;9243:5;:17::i;:::-;9220:40;-1:-1:-1;9302:22:8;9292:6;:32;;;;;;;;:::i;:::-;;;:67;;;;-1:-1:-1;9338:21:8;9328:6;:31;;;;;;;;:::i;:::-;;;9292:67;:103;;;;-1:-1:-1;9373:22:8;9363:6;:32;;;;;;;;:::i;:::-;;;9292:103;9271:179;;;;-1:-1:-1;;;9271:179:8;;39487:2:39;9271:179:8;;;39469:21:39;39526:2;39506:18;;;39499:30;39565:31;39545:18;;;39538:59;39614:18;;9271:179:8;39285:353:39;9271:179:8;9460:22;;;;:10;:22;;;;;;;:31;;:38;;-1:-1:-1;;9460:38:8;;;;;9514:28;;;;;9471:10;643:25:39;;631:2;616:18;;497:177;1665:276:12;1749:4;1801:26;;;:14;:26;;;;;1909:25;;;;1885:21;;;;:49;;1909:25;1885:49;:::i;:::-;3871:7:8;3897:22;;;:10;:22;;;;;:32;1845:36:12;;-1:-1:-1;;;;;3897:32:8;1534:201:7;:::i;1845:36:12:-;:89;;;1665:276;-1:-1:-1;;;1665:276:12:o;8386:983:36:-;8438:7;;8522:3;8513:12;;;:16;8509:99;;8559:3;8549:13;;;;8580;8509:99;8634:2;8625:11;;;:15;8621:96;;8670:2;8660:12;;;;8690;8621:96;8743:2;8734:11;;;:15;8730:96;;8779:2;8769:12;;;;8799;8730:96;8852:2;8843:11;;;:15;8839:96;;8888:2;8878:12;;;;8908;8839:96;8961:1;8952:10;;;:14;8948:93;;8996:1;8986:11;;;;9015;8948:93;9067:1;9058:10;;;:14;9054:93;;9102:1;9092:11;;;;9121;9054:93;9173:1;9164:10;;;:14;9160:93;;9208:1;9198:11;;;;9227;9160:93;9279:1;9270:10;;;:14;9266:64;;9314:1;9304:11;9356:6;8386:983;-1:-1:-1;;8386:983:36:o;591:104::-;649:7;679:1;675;:5;:13;;687:1;675:13;;;-1:-1:-1;683:1:36;;591:104;-1:-1:-1;591:104:36:o;808:153::-;870:7;943:11;953:1;944:5;;;943:11;:::i;:::-;933:21;;934:5;;;933:21;:::i;14:286:39:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;167:23;;-1:-1:-1;;;;;;219:32:39;;209:43;;199:71;;266:1;263;256:12;679:156;745:20;;805:4;794:16;;784:27;;774:55;;825:1;822;815:12;840:348;892:8;902:6;956:3;949:4;941:6;937:17;933:27;923:55;;974:1;971;964:12;923:55;-1:-1:-1;997:20:39;;-1:-1:-1;;;;;1029:30:39;;1026:50;;;1072:1;1069;1062:12;1026:50;1109:4;1101:6;1097:17;1085:29;;1161:3;1154:4;1145:6;1137;1133:19;1129:30;1126:39;1123:59;;;1178:1;1175;1168:12;1123:59;840:348;;;;;:::o;1193:127::-;1254:10;1249:3;1245:20;1242:1;1235:31;1285:4;1282:1;1275:15;1309:4;1306:1;1299:15;1325:275;1396:2;1390:9;1461:2;1442:13;;-1:-1:-1;;1438:27:39;1426:40;;-1:-1:-1;;;;;1481:34:39;;1517:22;;;1478:62;1475:88;;;1543:18;;:::i;:::-;1579:2;1572:22;1325:275;;-1:-1:-1;1325:275:39:o;1605:186::-;1653:4;-1:-1:-1;;;;;1678:6:39;1675:30;1672:56;;;1708:18;;:::i;:::-;-1:-1:-1;1774:2:39;1753:15;-1:-1:-1;;1749:29:39;1780:4;1745:40;;1605:186::o;1796:336::-;1860:5;1889:52;1905:35;1933:6;1905:35;:::i;:::-;1889:52;:::i;:::-;1880:61;;1964:6;1957:5;1950:21;2004:3;1995:6;1990:3;1986:16;1983:25;1980:45;;;2021:1;2018;2011:12;1980:45;2070:6;2065:3;2058:4;2051:5;2047:16;2034:43;2124:1;2117:4;2108:6;2101:5;2097:18;2093:29;2086:40;1796:336;;;;;:::o;2137:220::-;2179:5;2232:3;2225:4;2217:6;2213:17;2209:27;2199:55;;2250:1;2247;2240:12;2199:55;2272:79;2347:3;2338:6;2325:20;2318:4;2310:6;2306:17;2272:79;:::i;2362:978::-;2492:6;2500;2508;2516;2524;2532;2540;2548;2601:3;2589:9;2580:7;2576:23;2572:33;2569:53;;;2618:1;2615;2608:12;2569:53;2654:9;2641:23;2631:33;;2683:36;2715:2;2704:9;2700:18;2683:36;:::i;:::-;2673:46;;2770:2;2759:9;2755:18;2742:32;-1:-1:-1;;;;;2834:2:39;2826:6;2823:14;2820:34;;;2850:1;2847;2840:12;2820:34;2889:59;2940:7;2931:6;2920:9;2916:22;2889:59;:::i;:::-;2967:8;;-1:-1:-1;2863:85:39;-1:-1:-1;3055:2:39;3040:18;;3027:32;;-1:-1:-1;3071:16:39;;;3068:36;;;3100:1;3097;3090:12;3068:36;;3123:51;3166:7;3155:8;3144:9;3140:24;3123:51;:::i;:::-;3113:61;;;3193:37;3225:3;3214:9;3210:19;3193:37;:::i;:::-;3183:47;;3277:3;3266:9;3262:19;3249:33;3239:43;;3329:3;3318:9;3314:19;3301:33;3291:43;;2362:978;;;;;;;;;;;:::o;3345:180::-;3404:6;3457:2;3445:9;3436:7;3432:23;3428:32;3425:52;;;3473:1;3470;3463:12;3425:52;-1:-1:-1;3496:23:39;;3345:180;-1:-1:-1;3345:180:39:o;3530:250::-;3615:1;3625:113;3639:6;3636:1;3633:13;3625:113;;;3715:11;;;3709:18;3696:11;;;3689:39;3661:2;3654:10;3625:113;;;-1:-1:-1;;3772:1:39;3754:16;;3747:27;3530:250::o;3785:271::-;3827:3;3865:5;3859:12;3892:6;3887:3;3880:19;3908:76;3977:6;3970:4;3965:3;3961:14;3954:4;3947:5;3943:16;3908:76;:::i;:::-;4038:2;4017:15;-1:-1:-1;;4013:29:39;4004:39;;;;4045:4;4000:50;;3785:271;-1:-1:-1;;3785:271:39:o;4061:220::-;4210:2;4199:9;4192:21;4173:4;4230:45;4271:2;4260:9;4256:18;4248:6;4230:45;:::i;4286:183::-;4346:4;-1:-1:-1;;;;;4371:6:39;4368:30;4365:56;;;4401:18;;:::i;:::-;-1:-1:-1;4446:1:39;4442:14;4458:4;4438:25;;4286:183::o;4474:131::-;-1:-1:-1;;;;;4549:31:39;;4539:42;;4529:70;;4595:1;4592;4585:12;4610:737;4664:5;4717:3;4710:4;4702:6;4698:17;4694:27;4684:55;;4735:1;4732;4725:12;4684:55;4771:6;4758:20;4797:4;4821:60;4837:43;4877:2;4837:43;:::i;4821:60::-;4915:15;;;5001:1;4997:10;;;;4985:23;;4981:32;;;4946:12;;;;5025:15;;;5022:35;;;5053:1;5050;5043:12;5022:35;5089:2;5081:6;5077:15;5101:217;5117:6;5112:3;5109:15;5101:217;;;5197:3;5184:17;5214:31;5239:5;5214:31;:::i;:::-;5258:18;;5296:12;;;;5134;;5101:217;;;-1:-1:-1;5336:5:39;4610:737;-1:-1:-1;;;;;;4610:737:39:o;5352:662::-;5406:5;5459:3;5452:4;5444:6;5440:17;5436:27;5426:55;;5477:1;5474;5467:12;5426:55;5513:6;5500:20;5539:4;5563:60;5579:43;5619:2;5579:43;:::i;5563:60::-;5657:15;;;5743:1;5739:10;;;;5727:23;;5723:32;;;5688:12;;;;5767:15;;;5764:35;;;5795:1;5792;5785:12;5764:35;5831:2;5823:6;5819:15;5843:142;5859:6;5854:3;5851:15;5843:142;;;5925:17;;5913:30;;5963:12;;;;5876;;5843:142;;6019:886;6071:5;6124:3;6117:4;6109:6;6105:17;6101:27;6091:55;;6142:1;6139;6132:12;6091:55;6178:6;6165:20;6204:4;6228:60;6244:43;6284:2;6244:43;:::i;6228:60::-;6322:15;;;6408:1;6404:10;;;;6392:23;;6388:32;;;6353:12;;;;6432:15;;;6429:35;;;6460:1;6457;6450:12;6429:35;6496:2;6488:6;6484:15;6508:368;6524:6;6519:3;6516:15;6508:368;;;6610:3;6597:17;-1:-1:-1;;;;;6633:11:39;6630:35;6627:125;;;6706:1;6735:2;6731;6724:14;6627:125;6777:56;6829:3;6824:2;6810:11;6802:6;6798:24;6794:33;6777:56;:::i;:::-;6765:69;;-1:-1:-1;6854:12:39;;;;6541;;6508:368;;6910:897;7080:6;7088;7096;7104;7157:3;7145:9;7136:7;7132:23;7128:33;7125:53;;;7174:1;7171;7164:12;7125:53;7214:9;7201:23;-1:-1:-1;;;;;7284:2:39;7276:6;7273:14;7270:34;;;7300:1;7297;7290:12;7270:34;7323:61;7376:7;7367:6;7356:9;7352:22;7323:61;:::i;:::-;7313:71;;7437:2;7426:9;7422:18;7409:32;7393:48;;7466:2;7456:8;7453:16;7450:36;;;7482:1;7479;7472:12;7450:36;7505:63;7560:7;7549:8;7538:9;7534:24;7505:63;:::i;:::-;7495:73;;7621:2;7610:9;7606:18;7593:32;7577:48;;7650:2;7640:8;7637:16;7634:36;;;7666:1;7663;7656:12;7634:36;;7689:61;7742:7;7731:8;7720:9;7716:24;7689:61;:::i;:::-;6910:897;;;;-1:-1:-1;7679:71:39;;7797:2;7782:18;7769:32;;-1:-1:-1;;;6910:897:39:o;7994:458::-;8085:6;8093;8101;8109;8117;8170:3;8158:9;8149:7;8145:23;8141:33;8138:53;;;8187:1;8184;8177:12;8138:53;8223:9;8210:23;8200:33;;8252:36;8284:2;8273:9;8269:18;8252:36;:::i;:::-;8242:46;;8307:36;8339:2;8328:9;8324:18;8307:36;:::i;:::-;7994:458;;;;-1:-1:-1;8297:46:39;;8390:2;8375:18;;8362:32;;-1:-1:-1;8441:3:39;8426:19;8413:33;;7994:458;-1:-1:-1;;7994:458:39:o;8457:127::-;8518:10;8513:3;8509:20;8506:1;8499:31;8549:4;8546:1;8539:15;8573:4;8570:1;8563:15;8589:346;8739:2;8724:18;;8772:1;8761:13;;8751:144;;8817:10;8812:3;8808:20;8805:1;8798:31;8852:4;8849:1;8842:15;8880:4;8877:1;8870:15;8751:144;8904:25;;;8589:346;:::o;8940:315::-;9008:6;9016;9069:2;9057:9;9048:7;9044:23;9040:32;9037:52;;;9085:1;9082;9075:12;9037:52;9121:9;9108:23;9098:33;;9181:2;9170:9;9166:18;9153:32;9194:31;9219:5;9194:31;:::i;:::-;9244:5;9234:15;;;8940:315;;;;;:::o;9584:250::-;9650:6;9658;9711:2;9699:9;9690:7;9686:23;9682:32;9679:52;;;9727:1;9724;9717:12;9679:52;9763:9;9750:23;9740:33;;9792:36;9824:2;9813:9;9809:18;9792:36;:::i;:::-;9782:46;;9584:250;;;;;:::o;9839:769::-;9944:6;9952;9960;9968;9976;10029:3;10017:9;10008:7;10004:23;10000:33;9997:53;;;10046:1;10043;10036:12;9997:53;10082:9;10069:23;10059:33;;10111:36;10143:2;10132:9;10128:18;10111:36;:::i;:::-;10101:46;;10198:2;10187:9;10183:18;10170:32;-1:-1:-1;;;;;10262:2:39;10254:6;10251:14;10248:34;;;10278:1;10275;10268:12;10248:34;10317:59;10368:7;10359:6;10348:9;10344:22;10317:59;:::i;:::-;10395:8;;-1:-1:-1;10291:85:39;-1:-1:-1;10483:2:39;10468:18;;10455:32;;-1:-1:-1;10499:16:39;;;10496:36;;;10528:1;10525;10518:12;10496:36;;10551:51;10594:7;10583:8;10572:9;10568:24;10551:51;:::i;:::-;10541:61;;;9839:769;;;;;;;;:::o;10613:549::-;10700:6;10708;10716;10724;10777:2;10765:9;10756:7;10752:23;10748:32;10745:52;;;10793:1;10790;10783:12;10745:52;10829:9;10816:23;10806:33;;10858:36;10890:2;10879:9;10875:18;10858:36;:::i;:::-;10848:46;;10945:2;10934:9;10930:18;10917:32;-1:-1:-1;;;;;10964:6:39;10961:30;10958:50;;;11004:1;11001;10994:12;10958:50;11043:59;11094:7;11085:6;11074:9;11070:22;11043:59;:::i;:::-;10613:549;;;;-1:-1:-1;11121:8:39;-1:-1:-1;;;;10613:549:39:o;11167:1157::-;11347:6;11355;11363;11371;11424:3;11412:9;11403:7;11399:23;11395:33;11392:53;;;11441:1;11438;11431:12;11392:53;11481:9;11468:23;-1:-1:-1;;;;;11551:2:39;11543:6;11540:14;11537:34;;;11567:1;11564;11557:12;11537:34;11590:61;11643:7;11634:6;11623:9;11619:22;11590:61;:::i;:::-;11580:71;;11704:2;11693:9;11689:18;11676:32;11660:48;;11733:2;11723:8;11720:16;11717:36;;;11749:1;11746;11739:12;11717:36;11772:63;11827:7;11816:8;11805:9;11801:24;11772:63;:::i;:::-;11762:73;;11888:2;11877:9;11873:18;11860:32;11844:48;;11917:2;11907:8;11904:16;11901:36;;;11933:1;11930;11923:12;11901:36;11956:61;12009:7;11998:8;11987:9;11983:24;11956:61;:::i;:::-;11946:71;;12070:2;12059:9;12055:18;12042:32;12026:48;;12099:2;12089:8;12086:16;12083:36;;;12115:1;12112;12105:12;12083:36;-1:-1:-1;12138:24:39;;12193:4;12185:13;;12181:27;-1:-1:-1;12171:55:39;;12222:1;12219;12212:12;12171:55;12245:73;12310:7;12305:2;12292:16;12287:2;12283;12279:11;12245:73;:::i;:::-;12235:83;;;11167:1157;;;;;;;:::o;12329:435::-;12382:3;12420:5;12414:12;12447:6;12442:3;12435:19;12473:4;12502:2;12497:3;12493:12;12486:19;;12539:2;12532:5;12528:14;12560:1;12570:169;12584:6;12581:1;12578:13;12570:169;;;12645:13;;12633:26;;12679:12;;;;12714:15;;;;12606:1;12599:9;12570:169;;;-1:-1:-1;12755:3:39;;12329:435;-1:-1:-1;;;;;12329:435:39:o;12769:920::-;13175:3;13170;13166:13;13158:6;13154:26;13143:9;13136:45;13217:3;13212:2;13201:9;13197:18;13190:31;13117:4;13244:46;13285:3;13274:9;13270:19;13262:6;13244:46;:::i;:::-;13338:9;13330:6;13326:22;13321:2;13310:9;13306:18;13299:50;13372:33;13398:6;13390;13372:33;:::i;:::-;13436:2;13421:18;;13414:34;;;-1:-1:-1;;;;;13485:32:39;;13479:3;13464:19;;13457:61;13505:3;13534:19;;13527:35;;;13599:22;;;13593:3;13578:19;;13571:51;13358:47;-1:-1:-1;13639:44:39;13358:47;13668:6;13639:44;:::i;13895:523::-;13981:6;13989;13997;14050:2;14038:9;14029:7;14025:23;14021:32;14018:52;;;14066:1;14063;14056:12;14018:52;14105:9;14092:23;14124:31;14149:5;14124:31;:::i;:::-;14174:5;-1:-1:-1;14226:2:39;14211:18;;14198:32;;-1:-1:-1;14281:2:39;14266:18;;14253:32;-1:-1:-1;;;;;14297:30:39;;14294:50;;;14340:1;14337;14330:12;14294:50;14363:49;14404:7;14395:6;14384:9;14380:22;14363:49;:::i;:::-;14353:59;;;13895:523;;;;;:::o;14423:274::-;14509:6;14562:2;14550:9;14541:7;14537:23;14533:32;14530:52;;;14578:1;14575;14568:12;14530:52;14617:9;14604:23;14636:31;14661:5;14636:31;:::i;14702:613::-;14790:6;14798;14806;14814;14867:2;14855:9;14846:7;14842:23;14838:32;14835:52;;;14883:1;14880;14873:12;14835:52;14922:9;14909:23;14941:31;14966:5;14941:31;:::i;:::-;14991:5;-1:-1:-1;15043:2:39;15028:18;;15015:32;;-1:-1:-1;15098:2:39;15083:18;;15070:32;-1:-1:-1;;;;;15114:30:39;;15111:50;;;15157:1;15154;15147:12;15528:315;15596:6;15604;15657:2;15645:9;15636:7;15632:23;15628:32;15625:52;;;15673:1;15670;15663:12;15625:52;15712:9;15699:23;15731:31;15756:5;15731:31;:::i;:::-;15781:5;15833:2;15818:18;;;;15805:32;;-1:-1:-1;;;15528:315:39:o;16073:271::-;16256:6;16248;16243:3;16230:33;16212:3;16282:16;;16307:13;;;16282:16;16073:271;-1:-1:-1;16073:271:39:o;16824:348::-;17026:2;17008:21;;;17065:2;17045:18;;;17038:30;17104:26;17099:2;17084:18;;17077:54;17163:2;17148:18;;16824:348::o;17177:380::-;17256:1;17252:12;;;;17299;;;17320:61;;17374:4;17366:6;17362:17;17352:27;;17320:61;17427:2;17419:6;17416:14;17396:18;17393:38;17390:161;;17473:10;17468:3;17464:20;17461:1;17454:31;17508:4;17505:1;17498:15;17536:4;17533:1;17526:15;17390:161;;17177:380;;;:::o;17562:397::-;17764:2;17746:21;;;17803:2;17783:18;;;17776:30;17842:34;17837:2;17822:18;;17815:62;-1:-1:-1;;;17908:2:39;17893:18;;17886:31;17949:3;17934:19;;17562:397::o;17964:184::-;18034:6;18087:2;18075:9;18066:7;18062:23;18058:32;18055:52;;;18103:1;18100;18093:12;18055:52;-1:-1:-1;18126:16:39;;17964:184;-1:-1:-1;17964:184:39:o;18153:461::-;18206:3;18244:5;18238:12;18271:6;18266:3;18259:19;18297:4;18326:2;18321:3;18317:12;18310:19;;18363:2;18356:5;18352:14;18384:1;18394:195;18408:6;18405:1;18402:13;18394:195;;;18473:13;;-1:-1:-1;;;;;18469:39:39;18457:52;;18529:12;;;;18564:15;;;;18505:1;18423:9;18394:195;;18619:615;18670:3;18708:5;18702:12;18735:6;18730:3;18723:19;18761:4;18802:2;18797:3;18793:12;18827:11;18854;18847:18;;18904:6;18901:1;18897:14;18890:5;18886:26;18874:38;;18946:2;18939:5;18935:14;18967:1;18977:231;18991:6;18988:1;18985:13;18977:231;;;19062:5;19056:4;19052:16;19047:3;19040:29;19090:38;19123:4;19114:6;19108:13;19090:38;:::i;:::-;19186:12;;;;19082:46;-1:-1:-1;19151:15:39;;;;19013:1;19006:9;18977:231;;;-1:-1:-1;19224:4:39;;18619:615;-1:-1:-1;;;;;;;18619:615:39:o;19239:838::-;19656:3;19645:9;19638:22;19619:4;19683:57;19735:3;19724:9;19720:19;19712:6;19683:57;:::i;:::-;19788:9;19780:6;19776:22;19771:2;19760:9;19756:18;19749:50;19822:44;19859:6;19851;19822:44;:::i;:::-;19808:58;;19914:9;19906:6;19902:22;19897:2;19886:9;19882:18;19875:50;19942:42;19977:6;19969;19942:42;:::i;:::-;20015:2;20000:18;;19993:34;;;;-1:-1:-1;;20058:3:39;20043:19;20036:35;19934:50;19239:838;-1:-1:-1;;;19239:838:39:o;20271:910::-;20716:3;20705:9;20698:22;20679:4;20743:57;20795:3;20784:9;20780:19;20772:6;20743:57;:::i;:::-;20848:9;20840:6;20836:22;20831:2;20820:9;20816:18;20809:50;20882:44;20919:6;20911;20882:44;:::i;:::-;20868:58;;20974:9;20966:6;20962:22;20957:2;20946:9;20942:18;20935:50;21002:42;21037:6;21029;21002:42;:::i;:::-;21075:2;21060:18;;21053:34;;;;-1:-1:-1;;21118:3:39;21103:19;;21096:35;;;;21162:3;21147:19;;;21140:35;20994:50;20271:910;-1:-1:-1;;;20271:910:39:o;21186:127::-;21247:10;21242:3;21238:20;21235:1;21228:31;21278:4;21275:1;21268:15;21302:4;21299:1;21292:15;21318:125;21383:9;;;21404:10;;;21401:36;;;21417:18;;:::i;22792:648::-;22872:6;22925:2;22913:9;22904:7;22900:23;22896:32;22893:52;;;22941:1;22938;22931:12;22893:52;22974:9;22968:16;-1:-1:-1;;;;;22999:6:39;22996:30;22993:50;;;23039:1;23036;23029:12;22993:50;23062:22;;23115:4;23107:13;;23103:27;-1:-1:-1;23093:55:39;;23144:1;23141;23134:12;23093:55;23173:2;23167:9;23198:48;23214:31;23242:2;23214:31;:::i;23198:48::-;23269:2;23262:5;23255:17;23309:7;23304:2;23299;23295;23291:11;23287:20;23284:33;23281:53;;;23330:1;23327;23320:12;23281:53;23343:67;23407:2;23402;23395:5;23391:14;23386:2;23382;23378:11;23343:67;:::i;23445:128::-;23512:9;;;23533:11;;;23530:37;;;23547:18;;:::i;23578:127::-;23639:10;23634:3;23630:20;23627:1;23620:31;23670:4;23667:1;23660:15;23694:4;23691:1;23684:15;23710:284;23779:6;23832:2;23820:9;23811:7;23807:23;23803:32;23800:52;;;23848:1;23845;23838:12;23800:52;23880:9;23874:16;23930:14;23923:5;23919:26;23912:5;23909:37;23899:65;;23960:1;23957;23950:12;23999:758;24380:3;24369:9;24362:22;24343:4;24407:57;24459:3;24448:9;24444:19;24436:6;24407:57;:::i;:::-;24512:9;24504:6;24500:22;24495:2;24484:9;24480:18;24473:50;24546:44;24583:6;24575;24546:44;:::i;:::-;24532:58;;24638:9;24630:6;24626:22;24621:2;24610:9;24606:18;24599:50;24666:42;24701:6;24693;24666:42;:::i;:::-;24658:50;;;24744:6;24739:2;24728:9;24724:18;24717:34;23999:758;;;;;;;:::o;24888:545::-;24990:2;24985:3;24982:11;24979:448;;;25026:1;25051:5;25047:2;25040:17;25096:4;25092:2;25082:19;25166:2;25154:10;25150:19;25147:1;25143:27;25137:4;25133:38;25202:4;25190:10;25187:20;25184:47;;;-1:-1:-1;25225:4:39;25184:47;25280:2;25275:3;25271:12;25268:1;25264:20;25258:4;25254:31;25244:41;;25335:82;25353:2;25346:5;25343:13;25335:82;;;25398:17;;;25379:1;25368:13;25335:82;;24979:448;24888:545;;;:::o;25609:1352::-;25735:3;25729:10;-1:-1:-1;;;;;25754:6:39;25751:30;25748:56;;;25784:18;;:::i;:::-;25813:97;25903:6;25863:38;25895:4;25889:11;25863:38;:::i;:::-;25857:4;25813:97;:::i;:::-;25965:4;;26029:2;26018:14;;26046:1;26041:663;;;;26748:1;26765:6;26762:89;;;-1:-1:-1;26817:19:39;;;26811:26;26762:89;-1:-1:-1;;25566:1:39;25562:11;;;25558:24;25554:29;25544:40;25590:1;25586:11;;;25541:57;26864:81;;26011:944;;26041:663;24835:1;24828:14;;;24872:4;24859:18;;-1:-1:-1;;26077:20:39;;;26195:236;26209:7;26206:1;26203:14;26195:236;;;26298:19;;;26292:26;26277:42;;26390:27;;;;26358:1;26346:14;;;;26225:19;;26195:236;;;26199:3;26459:6;26450:7;26447:19;26444:201;;;26520:19;;;26514:26;-1:-1:-1;;26603:1:39;26599:14;;;26615:3;26595:24;26591:37;26587:42;26572:58;26557:74;;26444:201;-1:-1:-1;;;;;26691:1:39;26675:14;;;26671:22;26658:36;;-1:-1:-1;25609:1352:39:o;28592:442::-;28821:6;28810:9;28803:25;28876:4;28868:6;28864:17;28859:2;28848:9;28844:18;28837:45;28918:6;28913:2;28902:9;28898:18;28891:34;28961:3;28956:2;28945:9;28941:18;28934:31;28784:4;28982:46;29023:3;29012:9;29008:19;29000:6;28982:46;:::i;29039:604::-;29314:6;29303:9;29296:25;29369:4;29361:6;29357:17;29352:2;29341:9;29337:18;29330:45;29411:6;29406:2;29395:9;29391:18;29384:34;29454:3;29449:2;29438:9;29434:18;29427:31;29277:4;29481:46;29522:3;29511:9;29507:19;29499:6;29481:46;:::i;:::-;29576:9;29568:6;29564:22;29558:3;29547:9;29543:19;29536:51;29604:33;29630:6;29622;29604:33;:::i;:::-;29596:41;29039:604;-1:-1:-1;;;;;;;;29039:604:39:o;30124:135::-;30163:3;30184:17;;;30181:43;;30204:18;;:::i;:::-;-1:-1:-1;30251:1:39;30240:13;;30124:135::o;30264:277::-;30331:6;30384:2;30372:9;30363:7;30359:23;30355:32;30352:52;;;30400:1;30397;30390:12;30352:52;30432:9;30426:16;30485:5;30478:13;30471:21;30464:5;30461:32;30451:60;;30507:1;30504;30497:12;30964:397;31166:2;31148:21;;;31205:2;31185:18;;;31178:30;31244:34;31239:2;31224:18;;31217:62;-1:-1:-1;;;31310:2:39;31295:18;;31288:31;31351:3;31336:19;;30964:397::o;32121:1864::-;32695:4;32724:3;32754:6;32743:9;32736:25;32780:2;32847:1;32843;32838:3;32834:11;32830:19;32822:6;32818:32;32813:2;32802:9;32798:18;32791:60;32887:2;32882;32871:9;32867:18;32860:30;32913:56;32965:2;32954:9;32950:18;32942:6;32913:56;:::i;:::-;32899:70;;33017:9;33009:6;33005:22;33000:2;32989:9;32985:18;32978:50;33051:44;33088:6;33080;33051:44;:::i;:::-;33037:58;;33144:9;33136:6;33132:22;33126:3;33115:9;33111:19;33104:51;33175:6;33210;33204:13;33241:6;33233;33226:22;33276:2;33268:6;33264:15;33257:22;;33335:2;33325:6;33322:1;33318:14;33310:6;33306:27;33302:36;33373:2;33365:6;33361:15;33394:1;33404:252;33418:6;33415:1;33412:13;33404:252;;;33508:2;33504:7;33495:6;33487;33483:19;33479:33;33474:3;33467:46;33536:40;33569:6;33560;33554:13;33536:40;:::i;:::-;33634:12;;;;33526:50;-1:-1:-1;33599:15:39;;;;33440:1;33433:9;33404:252;;;33408:3;;33705:9;33697:6;33693:22;33687:3;33676:9;33672:19;33665:51;33739:42;33774:6;33766;33739:42;:::i;:::-;33725:56;;;;;;33818:6;33812:3;33801:9;33797:19;33790:35;33862:6;33856:3;33845:9;33841:19;33834:35;33918:9;33910:6;33906:22;33900:3;33889:9;33885:19;33878:51;33946:33;33972:6;33964;33946:33;:::i;:::-;33938:41;32121:1864;-1:-1:-1;;;;;;;;;;;;32121:1864:39:o;34986:168::-;35059:9;;;35090;;35107:15;;;35101:22;;35087:37;35077:71;;35128:18;;:::i;35159:127::-;35220:10;35215:3;35211:20;35208:1;35201:31;35251:4;35248:1;35241:15;35275:4;35272:1;35265:15;35291:217;35331:1;35357;35347:132;;35401:10;35396:3;35392:20;35389:1;35382:31;35436:4;35433:1;35426:15;35464:4;35461:1;35454:15;35347:132;-1:-1:-1;35493:9:39;;35291:217::o;35513:297::-;35631:12;;35678:4;35667:16;;;35661:23;;35631:12;35696:16;;35693:111;;;-1:-1:-1;;35770:4:39;35766:17;;;;35763:1;35759:25;35755:38;35744:50;;35513:297;-1:-1:-1;35513:297:39:o"
    },
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "3493800",
        "executionCost": "infinite",
        "totalCost": "infinite"
      },
      "external": {
        "BALLOT_TYPEHASH()": "239",
        "CLOCK_MODE()": "infinite",
        "COUNTING_MODE()": "infinite",
        "EXTENDED_BALLOT_TYPEHASH()": "307",
        "cancel(address[],uint256[],bytes[],bytes32)": "infinite",
        "cancel_(address[],uint256[],bytes[],bytes32)": "infinite",
        "castVote(uint256,uint8)": "infinite",
        "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)": "infinite",
        "castVoteWithReason(uint256,uint8,string)": "infinite",
        "castVoteWithReasonAndParams(uint256,uint8,string,bytes)": "infinite",
        "castVoteWithReasonAndParamsBySig(uint256,uint8,string,bytes,uint8,bytes32,bytes32)": "infinite",
        "clock()": "infinite",
        "eip712Domain()": "infinite",
        "execute(address[],uint256[],bytes[],bytes32)": "infinite",
        "getVotes(address,uint256)": "infinite",
        "getVotesWithParams(address,uint256,bytes)": "infinite",
        "hasVoted(uint256,address)": "2738",
        "hashProposal(address[],uint256[],bytes[],bytes32)": "infinite",
        "name()": "infinite",
        "nonGovernanceFunction()": "191",
        "proposalDeadline(uint256)": "2617",
        "proposalEta(uint256)": "infinite",
        "proposalSnapshot(uint256)": "2546",
        "proposalThreshold()": "2463",
        "proposalVotes(uint256)": "6752",
        "propose(address[],uint256[],bytes[],string)": "infinite",
        "queue(address[],uint256[],bytes[],bytes32)": "infinite",
        "quorum(uint256)": "infinite",
        "quorumDenominator()": "326",
        "quorumNumerator()": "6886",
        "quorumNumerator(uint256)": "infinite",
        "relay(address,uint256,bytes)": "infinite",
        "setProposalThreshold(uint256)": "infinite",
        "setVotingDelay(uint256)": "infinite",
        "setVotingPeriod(uint256)": "infinite",
        "state(uint256)": "infinite",
        "supportsInterface(bytes4)": "infinite",
        "timelock()": "2431",
        "token()": "infinite",
        "updateQuorumNumerator(uint256)": "infinite",
        "updateTimelock(address)": "infinite",
        "version()": "infinite",
        "votingDelay()": "2464",
        "votingPeriod()": "2399"
      },
      "internal": {
        "_cancel(address[] memory,uint256[] memory,bytes memory[] memory,bytes32)": "infinite",
        "_execute(uint256,address[] memory,uint256[] memory,bytes memory[] memory,bytes32)": "infinite",
        "_executor()": "2156"
      }
    },
    "methodIdentifiers": {
      "BALLOT_TYPEHASH()": "deaaa7cc",
      "CLOCK_MODE()": "4bf5d7e9",
      "COUNTING_MODE()": "dd4e2ba5",
      "EXTENDED_BALLOT_TYPEHASH()": "2fe3e261",
      "cancel(address[],uint256[],bytes[],bytes32)": "452115d6",
      "cancel_(address[],uint256[],bytes[],bytes32)": "cd4265a5",
      "castVote(uint256,uint8)": "56781388",
      "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)": "3bccf4fd",
      "castVoteWithReason(uint256,uint8,string)": "7b3c71d3",
      "castVoteWithReasonAndParams(uint256,uint8,string,bytes)": "5f398a14",
      "castVoteWithReasonAndParamsBySig(uint256,uint8,string,bytes,uint8,bytes32,bytes32)": "03420181",
      "clock()": "91ddadf4",
      "eip712Domain()": "84b0196e",
      "execute(address[],uint256[],bytes[],bytes32)": "2656227d",
      "getVotes(address,uint256)": "eb9019d4",
      "getVotesWithParams(address,uint256,bytes)": "9a802a6d",
      "hasVoted(uint256,address)": "43859632",
      "hashProposal(address[],uint256[],bytes[],bytes32)": "c59057e4",
      "name()": "06fdde03",
      "nonGovernanceFunction()": "417491db",
      "proposalDeadline(uint256)": "c01f9e37",
      "proposalEta(uint256)": "ab58fb8e",
      "proposalSnapshot(uint256)": "2d63f693",
      "proposalThreshold()": "b58131b0",
      "proposalVotes(uint256)": "544ffc9c",
      "propose(address[],uint256[],bytes[],string)": "7d5e81e2",
      "queue(address[],uint256[],bytes[],bytes32)": "160cbed7",
      "quorum(uint256)": "f8ce560a",
      "quorumDenominator()": "97c3d334",
      "quorumNumerator()": "a7713a70",
      "quorumNumerator(uint256)": "60c4247f",
      "relay(address,uint256,bytes)": "c28bc2fa",
      "setProposalThreshold(uint256)": "ece40cc1",
      "setVotingDelay(uint256)": "70b0f660",
      "setVotingPeriod(uint256)": "ea0217cf",
      "state(uint256)": "3e4f49e6",
      "supportsInterface(bytes4)": "01ffc9a7",
      "timelock()": "d33219b4",
      "token()": "fc0c546a",
      "updateQuorumNumerator(uint256)": "06f3f9e6",
      "updateTimelock(address)": "a890c910",
      "version()": "54fd4d50",
      "votingDelay()": "3932abb1",
      "votingPeriod()": "02a251a3"
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVotes\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract TimelockController\",\"name\":\"_timelock\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Empty\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voteStart\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voteEnd\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"ProposalQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldProposalThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newProposalThreshold\",\"type\":\"uint256\"}],\"name\":\"ProposalThresholdSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldQuorumNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newQuorumNumerator\",\"type\":\"uint256\"}],\"name\":\"QuorumNumeratorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTimelock\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTimelock\",\"type\":\"address\"}],\"name\":\"TimelockChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"VoteCastWithParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldVotingDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVotingDelay\",\"type\":\"uint256\"}],\"name\":\"VotingDelaySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldVotingPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVotingPeriod\",\"type\":\"uint256\"}],\"name\":\"VotingPeriodSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BALLOT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLOCK_MODE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COUNTING_MODE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXTENDED_BALLOT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"descriptionHash\",\"type\":\"bytes32\"}],\"name\":\"cancel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"descriptionHash\",\"type\":\"bytes32\"}],\"name\":\"cancel_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"}],\"name\":\"castVote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"castVoteBySig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"castVoteWithReason\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"castVoteWithReasonAndParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"castVoteWithReasonAndParamsBySig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clock\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"descriptionHash\",\"type\":\"bytes32\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"getVotesWithParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"descriptionHash\",\"type\":\"bytes32\"}],\"name\":\"hashProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonGovernanceFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"proposalDeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"proposalEta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"proposalSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"proposalVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"abstainVotes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"descriptionHash\",\"type\":\"bytes32\"}],\"name\":\"queue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"quorum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorumDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"quorumNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorumNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"relay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newProposalThreshold\",\"type\":\"uint256\"}],\"name\":\"setProposalThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newVotingDelay\",\"type\":\"uint256\"}],\"name\":\"setVotingDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newVotingPeriod\",\"type\":\"uint256\"}],\"name\":\"setVotingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum IGovernor.ProposalState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC5805\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newQuorumNumerator\",\"type\":\"uint256\"}],\"name\":\"updateQuorumNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract TimelockController\",\"name\":\"newTimelock\",\"type\":\"address\"}],\"name\":\"updateTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"Empty()\":[{\"details\":\"An operation (e.g. {front}) couldn't be completed due to the queue being empty.\"}]},\"kind\":\"dev\",\"methods\":{\"CLOCK_MODE()\":{\"details\":\"Machine-readable description of the clock as specified in EIP-6372.\"},\"COUNTING_MODE()\":{\"details\":\"See {IGovernor-COUNTING_MODE}.\"},\"cancel(address[],uint256[],bytes[],bytes32)\":{\"details\":\"Cancel a proposal. A proposal is cancellable by the proposer, but only while it is Pending state, i.e. before the vote starts. Emits a {ProposalCanceled} event.\"},\"castVote(uint256,uint8)\":{\"details\":\"Cast a vote Emits a {VoteCast} event.\"},\"castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)\":{\"details\":\"Cast a vote using the user's cryptographic signature. Emits a {VoteCast} event.\"},\"castVoteWithReason(uint256,uint8,string)\":{\"details\":\"Cast a vote with a reason Emits a {VoteCast} event.\"},\"castVoteWithReasonAndParams(uint256,uint8,string,bytes)\":{\"details\":\"Cast a vote with a reason and additional encoded parameters Emits a {VoteCast} or {VoteCastWithParams} event depending on the length of params.\"},\"castVoteWithReasonAndParamsBySig(uint256,uint8,string,bytes,uint8,bytes32,bytes32)\":{\"details\":\"Cast a vote with a reason and additional encoded parameters using the user's cryptographic signature. Emits a {VoteCast} or {VoteCastWithParams} event depending on the length of params.\"},\"clock()\":{\"details\":\"Clock (as specified in EIP-6372) is set to match the token's clock. Fallback to block numbers if the token does not implement EIP-6372.\"},\"eip712Domain()\":{\"details\":\"See {EIP-5267}.\"},\"execute(address[],uint256[],bytes[],bytes32)\":{\"details\":\"Execute a successful proposal. This requires the quorum to be reached, the vote to be successful, and the deadline to be reached. Emits a {ProposalExecuted} event. Note: some module can modify the requirements for execution, for example by adding an additional timelock.\"},\"getVotes(address,uint256)\":{\"details\":\"Voting power of an `account` at a specific `timepoint`. Note: this can be implemented in a number of ways, for example by reading the delegated balance from one (or multiple), {ERC20Votes} tokens.\"},\"getVotesWithParams(address,uint256,bytes)\":{\"details\":\"Voting power of an `account` at a specific `timepoint` given additional encoded parameters.\"},\"hasVoted(uint256,address)\":{\"details\":\"See {IGovernor-hasVoted}.\"},\"hashProposal(address[],uint256[],bytes[],bytes32)\":{\"details\":\"Hashing function used to (re)build the proposal id from the proposal details..\"},\"name()\":{\"details\":\"Name of the governor instance (used in building the ERC712 domain separator).\"},\"proposalDeadline(uint256)\":{\"details\":\"Timepoint at which votes close. If using block number, votes close at the end of this block, so it is possible to cast a vote during this block.\"},\"proposalEta(uint256)\":{\"details\":\"Public accessor to check the eta of a queued proposal\"},\"proposalSnapshot(uint256)\":{\"details\":\"Timepoint used to retrieve user's votes and quorum. If using block number (as per Compound's Comp), the snapshot is performed at the end of this block. Hence, voting for this proposal starts at the beginning of the following block.\"},\"proposalVotes(uint256)\":{\"details\":\"Accessor to the internal vote counts.\"},\"queue(address[],uint256[],bytes[],bytes32)\":{\"details\":\"Function to queue a proposal to the timelock.\"},\"quorumDenominator()\":{\"details\":\"Returns the quorum denominator. Defaults to 100, but may be overridden.\"},\"quorumNumerator()\":{\"details\":\"Returns the current quorum numerator. See {quorumDenominator}.\"},\"quorumNumerator(uint256)\":{\"details\":\"Returns the quorum numerator at a specific timepoint. See {quorumDenominator}.\"},\"timelock()\":{\"details\":\"Public accessor to check the address of the timelock\"},\"updateQuorumNumerator(uint256)\":{\"details\":\"Changes the quorum numerator. Emits a {QuorumNumeratorUpdated} event. Requirements: - Must be called through a governance proposal. - New numerator must be smaller or equal to the denominator.\"},\"updateTimelock(address)\":{\"details\":\"Public endpoint to update the underlying timelock instance. Restricted to the timelock itself, so updates must be proposed, scheduled, and executed through governance proposals. CAUTION: It is not recommended to change the timelock while there are other queued governance proposals.\"},\"version()\":{\"details\":\"Version of the governor instance (used in building the ERC712 domain separator). Default: \\\"1\\\"\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getVotes(address,uint256)\":{\"notice\":\"module:reputation\"},\"getVotesWithParams(address,uint256,bytes)\":{\"notice\":\"module:reputation\"},\"hashProposal(address[],uint256[],bytes[],bytes32)\":{\"notice\":\"module:core\"},\"name()\":{\"notice\":\"module:core\"},\"proposalDeadline(uint256)\":{\"notice\":\"module:core\"},\"proposalSnapshot(uint256)\":{\"notice\":\"module:core\"},\"version()\":{\"notice\":\"module:core\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Timelock_Governor.sol\":\"Timelock_Governor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Timelock_Governor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\n\\nimport './governance/Governor.sol';\\nimport './governance/GovernorSettings.sol';\\nimport './governance/extensions/GovernorVotes.sol';\\nimport './governance/extensions/GovernorVotesQuorumFraction.sol';\\nimport './governance/extensions/GovernorTimelockControl.sol';\\nimport './governance/extensions/GovernorCountingSimple.sol';\\n\\ncontract Timelock_Governor is Governor, GovernorSettings, GovernorCountingSimple, GovernorVotes, GovernorVotesQuorumFraction, GovernorTimelockControl {\\n    constructor(IVotes _token, TimelockController _timelock)\\n        Governor(\\\"Timelock_Governor\\\")\\n        GovernorSettings(4, 300, 0)\\n        GovernorVotes(_token)\\n        GovernorVotesQuorumFraction(4)\\n        GovernorTimelockControl(_timelock)\\n    {}\\n\\n   function cancel_(\\n         address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public returns (uint256) {\\n        return super._cancel(targets,values,calldatas,descriptionHash);\\n    }\\n\\n function nonGovernanceFunction() external {}\\n    // The following functions are overrides required by Solidity.\\n\\n    function votingDelay()\\n        public\\n        view\\n        override(IGovernor, GovernorSettings)\\n        returns (uint256)\\n    {\\n        return super.votingDelay();\\n    }\\n\\n    function votingPeriod()\\n        public\\n        view\\n        override(IGovernor, GovernorSettings)\\n        returns (uint256)\\n    {\\n        return super.votingPeriod();\\n    }\\n\\n    function quorum(uint256 blockNumber)\\n        public\\n        view\\n        override(IGovernor, GovernorVotesQuorumFraction)\\n        returns (uint256)\\n    {\\n        return super.quorum(blockNumber);\\n    }\\n\\n    function state(uint256 proposalId)\\n        public\\n        view\\n        override(Governor, GovernorTimelockControl)\\n        returns (ProposalState)\\n    {\\n        return super.state(proposalId);\\n    }\\n\\n    function propose(address[] memory targets, uint256[] memory values, bytes[] memory calldatas, string memory description)\\n        public\\n        override(Governor, IGovernor)\\n        returns (uint256)\\n    {\\n        return super.propose(targets, values, calldatas, description);\\n    }\\n\\n    function proposalThreshold()\\n        public\\n        view\\n        override(Governor, GovernorSettings)\\n        returns (uint256)\\n    {\\n        return super.proposalThreshold();\\n    }\\n\\n    function _execute(uint256 proposalId, address[] memory targets, uint256[] memory values, bytes[] memory calldatas, bytes32 descriptionHash)\\n        internal\\n        override(Governor, GovernorTimelockControl)\\n    {\\n        super._execute(proposalId, targets, values, calldatas, descriptionHash);\\n    }\\n\\n    function _cancel(address[] memory targets, uint256[] memory values, bytes[] memory calldatas, bytes32 descriptionHash)\\n        internal\\n        override(Governor, GovernorTimelockControl)\\n        returns (uint256)\\n    {\\n        return super._cancel(targets, values, calldatas, descriptionHash);\\n    }\\n\\n    function _executor()\\n        internal\\n        view\\n        override(Governor, GovernorTimelockControl)\\n        returns (address)\\n    {\\n        return super._executor();\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(Governor, GovernorTimelockControl)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\",\"keccak256\":\"0xeb69c65ca6d1a7504c42722f495039f53ee7dc4767034d63c2b0c3256b1d61f3\",\"license\":\"UNLICENSED\"},\"contracts/governance/Governor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\n\\nimport \\\"../utils/cryptography/EIP712.sol\\\";\\nimport \\\"../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../utils/math/SafeCast.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\nimport \\\"../utils/structs/DoubleEndedQueue.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"./IGovernor.sol\\\";\\n\\n\\nabstract contract Governor  is Context, ERC165, IGovernor, EIP712 {\\n    using DoubleEndedQueue for DoubleEndedQueue.Bytes32Deque;\\n    using SafeCast for uint256;\\n\\n    bytes32 public constant BALLOT_TYPEHASH = keccak256(\\\"Ballot(uint256 proposalId,uint8 support)\\\");\\n    bytes32 public constant EXTENDED_BALLOT_TYPEHASH = keccak256(\\\"ExtendedBallot(uint256 proposalId,uint8 support, string reason, bytes params)\\\");\\n\\n    struct ProposalCore {\\n        uint64 voteStart;\\n        address proposer;\\n        bytes4 __gap_unused0;\\n        uint64 voteEnd;\\n        bytes24 __gap_unused1;\\n        bool executed;\\n        bool canceled;\\n    }\\n\\n    string private _name;\\n\\n    mapping(uint256 => ProposalCore) private _proposals;\\n    DoubleEndedQueue.Bytes32Deque private _governanceCall;\\n\\n    modifier onlyGovernance() {\\n        require(_msgSender() == _executor(), \\\"Governor: onlyGovernance\\\");\\n        if(_executor() != address(this)) {\\n            bytes32 msgDataHash = keccak256(_msgData());\\n            while(_governanceCall.popFront() != msgDataHash) {}\\n        }\\n        _;\\n    }\\n\\n    constructor(string memory name_) EIP712(name_, version()) {\\n        _name = name_;\\n    }\\n\\n    receive() external payable virtual {\\n        require(_executor() == address(this));\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n       return\\n            interfaceId ==\\n            (type(IGovernor).interfaceId ^\\n                type(IERC6372).interfaceId ^\\n                this.cancel.selector ^\\n                this.castVoteWithReasonAndParams.selector ^\\n                this.getVotesWithParams.selector) ||\\n            interfaceId == (type(IGovernor).interfaceId ^ type(IERC6372).interfaceId ^ this.cancel.selector) ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function version() public view virtual override returns (string memory) {\\n        return \\\"1\\\";\\n    }\\n\\n    function hashProposal(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public pure virtual override returns (uint256) {\\n        return uint256(keccak256(abi.encode(targets, values, calldatas, descriptionHash)));\\n    }\\n\\n\\n    function state(uint256 proposalId) public view virtual override returns (ProposalState) {\\n        ProposalCore storage proposal = _proposals[proposalId];\\n\\n        if(proposal.executed) {\\n            return ProposalState.Executed;\\n        }\\n\\n        if(proposal.canceled) {\\n            return ProposalState.Canceled;\\n        }\\n\\n        uint256 snapshot = proposalSnapshot(proposalId);\\n\\n        if(snapshot == 0) {\\n            revert(\\\"Governor: unknown proposal id\\\");\\n        }\\n\\n        uint256 currentTimepoint = clock();\\n\\n        if(snapshot >= currentTimepoint) {\\n            return ProposalState.Pending;\\n        }\\n\\n        uint256 deadline = proposalDeadline(proposalId);\\n\\n        if(deadline >= currentTimepoint) {\\n            return ProposalState.Active;\\n        }\\n\\n        if(_quorumReached(proposalId) && _voteSucceeded(proposalId)) {\\n            return ProposalState.Succeeded;\\n        } else {\\n            return ProposalState.Defeated;\\n        }\\n    } \\n\\n    function proposalThreshold() public view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    function proposalSnapshot(uint256 proposalId) public view virtual override returns (uint256) {\\n        return _proposals[proposalId].voteStart;\\n    }\\n\\n      function proposalDeadline(uint256 proposalId) public view virtual override returns (uint256) {\\n        return _proposals[proposalId].voteEnd;\\n    }\\n\\n    function _quorumReached(uint256 proposalId) internal view virtual returns (bool);\\n\\n      function _voteSucceeded(uint256 proposalId) internal view virtual returns (bool);\\n\\n    function _getVotes(address account,uint256 timepoint, bytes memory params) internal view virtual returns (uint256);\\n\\n    function _countVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 suppport,\\n        uint256 weight,\\n        bytes memory params\\n    ) internal virtual;\\n\\n    function _defaultParams() internal view virtual returns (bytes memory) {\\n        return \\\"\\\";\\n    }\\n\\n    function propose(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) public virtual override returns (uint256) {\\n        address proposer = _msgSender();\\n        uint256 currentTimepoint = clock();\\n\\n        require(\\n            getVotes(proposer, currentTimepoint - 1) >= proposalThreshold(),\\n            \\\"Governor: proposer votes below proposal threshold\\\"\\n        );\\n\\n        uint256 proposalId = hashProposal(targets, values, calldatas, keccak256(bytes(description)));\\n\\n        require(targets.length == values.length, \\\"Governor: invalid proposal length\\\");\\n        require(targets.length == calldatas.length,\\\"Governor: invalid proposal length\\\");\\n        require(targets.length > 0, \\\"Governor: empty proposal\\\");\\n        require(_proposals[proposalId].voteStart == 0, \\\"Governor: proposal already exists\\\");\\n\\n        uint256 snapshot = currentTimepoint + votingDelay();\\n        uint256 deadline = snapshot + votingPeriod();\\n\\n      _proposals[proposalId] = ProposalCore({\\n            proposer: proposer,\\n            voteStart: snapshot.toUint64(),\\n            voteEnd: deadline.toUint64(),\\n            executed: false,\\n            canceled: false,\\n            __gap_unused0: 0,\\n            __gap_unused1: 0\\n        });\\n\\n        emit ProposalCreated(\\n            proposalId,\\n            proposer,\\n            targets,\\n            values,\\n            new string[](targets.length),\\n            calldatas,\\n            snapshot,\\n            deadline,\\n            description\\n        );\\n        return proposalId;\\n    }\\n\\n    function execute(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public payable virtual override returns (uint256) {\\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\\n\\n        ProposalState status = state(proposalId);\\n        require(\\n            status == ProposalState.Succeeded || status == ProposalState.Queued,\\n            \\\"Governor: proposal not successful\\\"\\n        );\\n        _proposals[proposalId].executed = true;\\n\\n        emit ProposalExecuted(proposalId);\\n\\n        _beforeExecute(proposalId, targets, values, calldatas, descriptionHash);\\n        _execute(proposalId, targets, values, calldatas, descriptionHash);\\n        _afterExecute(proposalId, targets, values, calldatas, descriptionHash);\\n\\n        return proposalId;\\n    }\\n\\nfunction cancel(\\n    address[] memory targets,\\n    uint256[] memory values,\\n    bytes[] memory calldatas,\\n    bytes32 descriptionHash\\n) public virtual override returns (uint256) {\\n    uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\\n    require(state(proposalId) == ProposalState.Pending, \\\"Governor: too late to cancel\\\");\\n    require(_msgSender() == _proposals[proposalId].proposer,\\\"Governor: only proposer can cancel\\\");\\n    return _cancel(targets, values, calldatas, descriptionHash);\\n\\n}\\n\\n   function _execute(\\n        uint256 ,\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 \\n    ) internal virtual {\\n        string memory errorMessage = \\\"Governor: call reverted without message\\\";\\n        for (uint256 i = 0; i < targets.length; ++i) {\\n            (bool success, bytes memory returndata) = targets[i].call{value: values[i]}(calldatas[i]);\\n            Address.verifyCallResult(success, returndata, errorMessage);\\n        }\\n    }\\n\\nfunction _beforeExecute(\\n    uint256,\\n    address[] memory targets,\\n    uint256[] memory,\\n    bytes[] memory calldatas,\\n    bytes32\\n) internal virtual {\\n      if (_executor() != address(this)) {\\n            for (uint256 i = 0; i < targets.length; ++i) {\\n                if (targets[i] == address(this)) {\\n                    _governanceCall.pushBack(keccak256(calldatas[i]));\\n                }\\n            }\\n        }\\n}\\n\\n function _afterExecute(\\n        uint256,\\n        address[] memory,\\n        uint256[] memory,\\n        bytes[] memory,\\n        bytes32 \\n    ) internal virtual {\\n        if (_executor() != address(this)) {\\n            if (!_governanceCall.empty()) {\\n                _governanceCall.clear();\\n            }\\n        }\\n    }\\n\\n     function _cancel(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) internal virtual returns (uint256) {\\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\\n\\n        ProposalState status = state(proposalId);\\n\\n        require(\\n            status != ProposalState.Canceled && status != ProposalState.Expired && status != ProposalState.Executed,\\n            \\\"Governor: proposal not active\\\"\\n        );\\n        _proposals[proposalId].canceled = true;\\n\\n        emit ProposalCanceled(proposalId);\\n\\n        return proposalId;\\n    }\\n\\n  function getVotes(address account, uint256 timepoint) public view virtual override returns (uint256) {\\n        return _getVotes(account, timepoint, _defaultParams());\\n    }\\n\\n      function getVotesWithParams(\\n        address account,\\n        uint256 timepoint,\\n        bytes memory params\\n    ) public view virtual override returns (uint256) {\\n        return _getVotes(account, timepoint, params);\\n    }\\n\\n      function castVote(uint256 proposalId, uint8 support) public virtual override returns (uint256) {\\n        address voter = _msgSender();\\n        return _castVote(proposalId, voter, support, \\\"\\\");\\n    }\\n\\n     function castVoteWithReason(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason\\n    ) public virtual override returns (uint256) {\\n        address voter = _msgSender();\\n        return _castVote(proposalId, voter, support, reason);\\n    }\\n\\n\\n\\n      function castVoteWithReasonAndParams(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason,\\n        bytes memory params\\n    ) public virtual override returns (uint256) {\\n        address voter = _msgSender();\\n        return _castVote(proposalId, voter, support, reason, params);\\n    }\\n\\n\\n        function castVoteBySig(\\n        uint256 proposalId,\\n        uint8 support,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override returns (uint256) {\\n        address voter = ECDSA.recover(\\n            _hashTypedDataV4(keccak256(abi.encode(BALLOT_TYPEHASH, proposalId, support))),\\n            v,\\n            r,\\n            s\\n        );\\n        return _castVote(proposalId, voter, support, \\\"\\\");\\n    }\\n\\n\\n        function castVoteWithReasonAndParamsBySig(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason,\\n        bytes memory params,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override returns (uint256) {\\n        address voter = ECDSA.recover(\\n            _hashTypedDataV4(\\n                keccak256(\\n                    abi.encode(\\n                        EXTENDED_BALLOT_TYPEHASH,\\n                        proposalId,\\n                        support,\\n                        keccak256(bytes(reason)),\\n                        keccak256(params)\\n                    )\\n                )\\n            ),\\n            v,\\n            r,\\n            s\\n        );\\n\\n        return _castVote(proposalId, voter, support, reason, params);\\n    }\\n\\n  function _castVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        string memory reason\\n    ) internal virtual returns (uint256) {\\n        return _castVote(proposalId, account, support, reason, _defaultParams());\\n    }\\n\\n    function _castVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        string memory reason,\\n        bytes memory params\\n    ) internal virtual returns (uint256) {\\n        ProposalCore storage proposal = _proposals[proposalId];\\n        require(state(proposalId) == ProposalState.Active, \\\"Governor: vote not currently active\\\");\\n\\n        uint256 weight = _getVotes(account, proposal.voteStart, params);\\n        _countVote(proposalId, account, support, weight, params);\\n\\n        if (params.length == 0) {\\n            emit VoteCast(account, proposalId, support, weight, reason);\\n        } else {\\n            emit VoteCastWithParams(account, proposalId, support, weight, reason, params);\\n        }\\n\\n        return weight;\\n    }\\n\\n\\n function relay(address target, uint256 value, bytes calldata data) external payable virtual onlyGovernance {\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        Address.verifyCallResult(success, returndata, \\\"Governor: relay reverted without message\\\");\\n    }\\n\\n     function _executor() internal view virtual returns (address) {\\n        return address(this);\\n    }\\n    \\n}\",\"keccak256\":\"0x8caca8a1ed2ca51bf3cea183c6e7db81ba3e27919e54571ebde517ea79f23b3a\",\"license\":\"UNLICENSED\"},\"contracts/governance/GovernorSettings.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Governor.sol\\\";\\n\\nabstract contract GovernorSettings is Governor {\\n    uint256 private _votingDelay;\\n    uint256 private _votingPeriod;\\n    uint256 private _proposalThreshold;\\n\\n    event VotingDelaySet(uint256 oldVotingDelay, uint256 newVotingDelay);\\n    event VotingPeriodSet(uint256 oldVotingPeriod, uint256 newVotingPeriod);\\n    event ProposalThresholdSet(uint256 oldProposalThreshold, uint256 newProposalThreshold);\\n\\n    constructor(\\n        uint256 initialVotingDelay,\\n        uint256 initialVotingPeriod,\\n        uint256 initialProposalThreshold\\n    ) {\\n        _setVotingDelay(initialVotingDelay);\\n        _setVotingPeriod(initialVotingPeriod);\\n        _setProposalThreshold(initialProposalThreshold);\\n    }\\n\\n    function votingDelay() public view virtual override returns (uint256) {\\n        return _votingDelay;\\n    }\\n\\n    function votingPeriod() public view virtual override returns (uint256) {\\n        return _votingPeriod;\\n    }\\n\\n    function proposalThreshold() public view virtual override returns (uint256) {\\n        return _proposalThreshold;\\n    }\\n\\n    function setVotingDelay(uint256 newVotingDelay) public virtual onlyGovernance {\\n        _setVotingDelay(newVotingDelay);\\n    }\\n\\n    function setVotingPeriod(uint256 newVotingPeriod) public virtual onlyGovernance {\\n        _setVotingPeriod(newVotingPeriod);\\n    }\\n\\n    function setProposalThreshold(uint256 newProposalThreshold) public virtual onlyGovernance {\\n        _setProposalThreshold(newProposalThreshold);\\n    }\\n\\n    function _setVotingDelay(uint256 newVotingDelay) internal virtual {\\n        emit VotingDelaySet(_votingDelay, newVotingDelay);\\n        _votingDelay = newVotingDelay;\\n    }\\n\\n    function _setVotingPeriod(uint256 newVotingPeriod) internal virtual {\\n        require(newVotingPeriod > 0, \\\"GovernorSettings: voting period too low\\\");\\n        emit VotingPeriodSet(_votingPeriod, newVotingPeriod);\\n        _votingPeriod = newVotingPeriod;\\n    }\\n\\n    function _setProposalThreshold(uint256 newProposalThreshold) internal virtual {\\n        emit ProposalThresholdSet(_proposalThreshold, newProposalThreshold);\\n        _proposalThreshold = newProposalThreshold;\\n    }\\n}\",\"keccak256\":\"0x7d2025e443e238524f34a33326fd2af2f9a565a111b1f3bb7274534877fdf002\",\"license\":\"UNLICENSED\"},\"contracts/governance/IGovernor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\nimport \\\"../interfaces/IERC6372.sol\\\";\\n\\nabstract contract IGovernor is IERC165, IERC6372 {\\n    enum ProposalState {\\n        Pending,\\n        Active,\\n        Canceled,\\n        Defeated,\\n        Succeeded,\\n        Queued,\\n        Expired,\\n        Executed\\n    }\\n\\n    /**\\n     * @dev Emitted when a proposal is created.\\n     */\\n    event ProposalCreated(\\n        uint256 proposalId,\\n        address proposer,\\n        address[] targets,\\n        uint256[] values,\\n        string[] signatures,\\n        bytes[] calldatas,\\n        uint256 voteStart,\\n        uint256 voteEnd,\\n        string description\\n    );\\n\\n    /**\\n     * @dev Emitted when a proposal is canceled.\\n     */\\n    event ProposalCanceled(uint256 proposalId);\\n\\n    /**\\n     * @dev Emitted when a proposal is executed.\\n     */\\n    event ProposalExecuted(uint256 proposalId);\\n\\n    /**\\n     * @dev Emitted when a vote is cast without params.\\n     *\\n     * Note: `support` values should be seen as buckets. Their interpretation depends on the voting module used.\\n     */\\n    event VoteCast(address indexed voter, uint256 proposalId, uint8 support, uint256 weight, string reason);\\n\\n    /**\\n     * @dev Emitted when a vote is cast with params.\\n     *\\n     * Note: `support` values should be seen as buckets. Their interpretation depends on the voting module used.\\n     * `params` are additional encoded parameters. Their interpepretation also depends on the voting module used.\\n     */\\n    event VoteCastWithParams(\\n        address indexed voter,\\n        uint256 proposalId,\\n        uint8 support,\\n        uint256 weight,\\n        string reason,\\n        bytes params\\n    );\\n\\n    /**\\n     * @notice module:core\\n     * @dev Name of the governor instance (used in building the ERC712 domain separator).\\n     */\\n    function name() public view virtual returns (string memory);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Version of the governor instance (used in building the ERC712 domain separator). Default: \\\"1\\\"\\n     */\\n    function version() public view virtual returns (string memory);\\n\\n    /**\\n     * @notice module:core\\n     * @dev See {IERC6372}\\n     */\\n    function clock() public view virtual override returns (uint48);\\n\\n    /**\\n     * @notice module:core\\n     * @dev See EIP-6372.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function CLOCK_MODE() public view virtual override returns (string memory);\\n\\n    /**\\n     * @notice module:voting\\n     * @dev A description of the possible `support` values for {castVote} and the way these votes are counted, meant to\\n     * be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of\\n     * key-value pairs that each describe one aspect, for example `support=bravo&quorum=for,abstain`.\\n     *\\n     * There are 2 standard keys: `support` and `quorum`.\\n     *\\n     * - `support=bravo` refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in `GovernorBravo`.\\n     * - `quorum=bravo` means that only For votes are counted towards quorum.\\n     * - `quorum=for,abstain` means that both For and Abstain votes are counted towards quorum.\\n     *\\n     * If a counting module makes use of encoded `params`, it should  include this under a `params` key with a unique\\n     * name that describes the behavior. For example:\\n     *\\n     * - `params=fractional` might refer to a scheme where votes are divided fractionally between for/against/abstain.\\n     * - `params=erc721` might refer to a scheme where specific NFTs are delegated to vote.\\n     *\\n     * NOTE: The string can be decoded by the standard\\n     * https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[`URLSearchParams`]\\n     * JavaScript class.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function COUNTING_MODE() public view virtual returns (string memory);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Hashing function used to (re)build the proposal id from the proposal details..\\n     */\\n    function hashProposal(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public pure virtual returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Current state of a proposal, following Compound's convention\\n     */\\n    function state(uint256 proposalId) public view virtual returns (ProposalState);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Timepoint used to retrieve user's votes and quorum. If using block number (as per Compound's Comp), the\\n     * snapshot is performed at the end of this block. Hence, voting for this proposal starts at the beginning of the\\n     * following block.\\n     */\\n    function proposalSnapshot(uint256 proposalId) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Timepoint at which votes close. If using block number, votes close at the end of this block, so it is\\n     * possible to cast a vote during this block.\\n     */\\n    function proposalDeadline(uint256 proposalId) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Delay, between the proposal is created and the vote starts. The unit this duration is expressed in depends\\n     * on the clock (see EIP-6372) this contract uses.\\n     *\\n     * This can be increased to leave time for users to buy voting power, or delegate it, before the voting of a\\n     * proposal starts.\\n     */\\n    function votingDelay() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Delay, between the vote start and vote ends. The unit this duration is expressed in depends on the clock\\n     * (see EIP-6372) this contract uses.\\n     *\\n     * NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting\\n     * duration compared to the voting delay.\\n     */\\n    function votingPeriod() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Minimum number of cast voted required for a proposal to be successful.\\n     *\\n     * NOTE: The `timepoint` parameter corresponds to the snapshot used for counting vote. This allows to scale the\\n     * quorum depending on values such as the totalSupply of a token at this timepoint (see {ERC20Votes}).\\n     */\\n    function quorum(uint256 timepoint) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:reputation\\n     * @dev Voting power of an `account` at a specific `timepoint`.\\n     *\\n     * Note: this can be implemented in a number of ways, for example by reading the delegated balance from one (or\\n     * multiple), {ERC20Votes} tokens.\\n     */\\n    function getVotes(address account, uint256 timepoint) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:reputation\\n     * @dev Voting power of an `account` at a specific `timepoint` given additional encoded parameters.\\n     */\\n    function getVotesWithParams(\\n        address account,\\n        uint256 timepoint,\\n        bytes memory params\\n    ) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:voting\\n     * @dev Returns whether `account` has cast a vote on `proposalId`.\\n     */\\n    function hasVoted(uint256 proposalId, address account) public view virtual returns (bool);\\n\\n    /**\\n     * @dev Create a new proposal. Vote start after a delay specified by {IGovernor-votingDelay} and lasts for a\\n     * duration specified by {IGovernor-votingPeriod}.\\n     *\\n     * Emits a {ProposalCreated} event.\\n     */\\n    function propose(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) public virtual returns (uint256 proposalId);\\n\\n    /**\\n     * @dev Execute a successful proposal. This requires the quorum to be reached, the vote to be successful, and the\\n     * deadline to be reached.\\n     *\\n     * Emits a {ProposalExecuted} event.\\n     *\\n     * Note: some module can modify the requirements for execution, for example by adding an additional timelock.\\n     */\\n    function execute(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public payable virtual returns (uint256 proposalId);\\n\\n    /**\\n     * @dev Cancel a proposal. A proposal is cancellable by the proposer, but only while it is Pending state, i.e.\\n     * before the vote starts.\\n     *\\n     * Emits a {ProposalCanceled} event.\\n     */\\n    function cancel(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public virtual returns (uint256 proposalId);\\n\\n    /**\\n     * @dev Cast a vote\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVote(uint256 proposalId, uint8 support) public virtual returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote with a reason\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVoteWithReason(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason\\n    ) public virtual returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote with a reason and additional encoded parameters\\n     *\\n     * Emits a {VoteCast} or {VoteCastWithParams} event depending on the length of params.\\n     */\\n    function castVoteWithReasonAndParams(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason,\\n        bytes memory params\\n    ) public virtual returns (uint256 balance);\\n\\n  /**\\n     * @dev Cast a vote using the user's cryptographic signature.\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVoteBySig(\\n        uint256 proposalId,\\n        uint8 support,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote with a reason and additional encoded parameters using the user's cryptographic signature.\\n     *\\n     * Emits a {VoteCast} or {VoteCastWithParams} event depending on the length of params.\\n     */\\n    function castVoteWithReasonAndParamsBySig(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason,\\n        bytes memory params,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual returns (uint256 balance);\\n}\",\"keccak256\":\"0x11cd2b6146591378b186ff205139d731de8da1cdb0a4719dab832299153a6a48\",\"license\":\"UNLICENSED\"},\"contracts/governance/TimelockController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (governance/TimelockController.sol)\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../utils/AccessControl.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev Contract module which acts as a timelocked controller. When set as the\\n * owner of an `Ownable` smart contract, it enforces a timelock on all\\n * `onlyOwner` maintenance operations. This gives time for users of the\\n * controlled contract to exit before a potentially dangerous maintenance\\n * operation is applied.\\n *\\n * By default, this contract is self administered, meaning administration tasks\\n * have to go through the timelock process. The proposer (resp executor) role\\n * is in charge of proposing (resp executing) operations. A common use case is\\n * to position this {TimelockController} as the owner of a smart contract, with\\n * a multisig or a DAO as the sole proposer.\\n *\\n * _Available since v3.3._\\n */\\ncontract TimelockController is AccessControl {\\n    bytes32 public constant TIMELOCK_ADMIN_ROLE = keccak256(\\\"TIMELOCK_ADMIN_ROLE\\\");\\n    bytes32 public constant PROPOSER_ROLE = keccak256(\\\"PROPOSER_ROLE\\\");\\n    bytes32 public constant EXECUTOR_ROLE = keccak256(\\\"EXECUTOR_ROLE\\\");\\n    bytes32 public constant CANCELLER_ROLE = keccak256(\\\"CANCELLER_ROLE\\\");\\n    uint256 internal constant _DONE_TIMESTAMP = uint256(1);\\n\\n    mapping(bytes32 => uint256) private _timestamps;\\n    uint256 private _minDelay;\\n\\n    /**\\n     * @dev Emitted when a call is scheduled as part of operation `id`.\\n     */\\n    event CallScheduled(\\n        bytes32 indexed id,\\n        uint256 indexed index,\\n        address target,\\n        uint256 value,\\n        bytes data,\\n        bytes32 predecessor,\\n        uint256 delay\\n    );\\n\\n    /**\\n     * @dev Emitted when a call is performed as part of operation `id`.\\n     */\\n    event CallExecuted(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data);\\n\\n     /**\\n     * @dev Emitted when new proposal is scheduled with non-zero salt.\\n     */\\n    event CallSalt(bytes32 indexed id, bytes32 salt);\\n\\n\\n    /**\\n     * @dev Emitted when operation `id` is cancelled.\\n     */\\n    event Cancelled(bytes32 indexed id);\\n\\n    /**\\n     * @dev Emitted when the minimum delay for future operations is modified.\\n     */\\n    event MinDelayChange(uint256 oldDuration, uint256 newDuration);\\n\\n    /**\\n     * @dev Initializes the contract with the following parameters:\\n     *\\n     * - `minDelay`: initial minimum delay for operations\\n     * - `proposers`: accounts to be granted proposer and canceller roles\\n     * - `executors`: accounts to be granted executor role\\n     * - `admin`: optional account to be granted admin role; disable with zero address\\n     *\\n     * IMPORTANT: The optional admin can aid with initial configuration of roles after deployment\\n     * without being subject to delay, but this role should be subsequently renounced in favor of\\n     * administration through timelocked proposals. Previous versions of this contract would assign\\n     * this admin to the deployer automatically and should be renounced as well.\\n     */\\n    constructor(\\n        uint256 minDelay,\\n        address[] memory proposers,\\n        address[] memory executors,\\n        address admin\\n    ) {\\n        _setRoleAdmin(TIMELOCK_ADMIN_ROLE, TIMELOCK_ADMIN_ROLE);\\n        _setRoleAdmin(PROPOSER_ROLE, TIMELOCK_ADMIN_ROLE);\\n        _setRoleAdmin(EXECUTOR_ROLE, TIMELOCK_ADMIN_ROLE);\\n        _setRoleAdmin(CANCELLER_ROLE, TIMELOCK_ADMIN_ROLE);\\n\\n        // self administration\\n        _setupRole(TIMELOCK_ADMIN_ROLE, address(this));\\n\\n        // optional admin\\n        if (admin != address(0)) {\\n            _setupRole(TIMELOCK_ADMIN_ROLE, admin);\\n        }\\n\\n        // register proposers and cancellers\\n        for (uint256 i = 0; i < proposers.length; ++i) {\\n            _setupRole(PROPOSER_ROLE, proposers[i]);\\n            _setupRole(CANCELLER_ROLE, proposers[i]);\\n        }\\n\\n        // register executors\\n        for (uint256 i = 0; i < executors.length; ++i) {\\n            _setupRole(EXECUTOR_ROLE, executors[i]);\\n        }\\n\\n        _minDelay = minDelay;\\n        emit MinDelayChange(0, minDelay);\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only by a certain role. In\\n     * addition to checking the sender's role, `address(0)` 's role is also\\n     * considered. Granting a role to `address(0)` is equivalent to enabling\\n     * this role for everyone.\\n     */\\n    modifier onlyRoleOrOpenRole(bytes32 role) {\\n        if (!hasRole(role, address(0))) {\\n            _checkRole(role, _msgSender());\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Contract might receive/hold ETH as part of the maintenance process.\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n   function supportsInterface(bytes4 interfaceId) public view virtual override(AccessControl) returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns whether an id correspond to a registered operation. This\\n     * includes both Pending, Ready and Done operations.\\n     */\\n    function isOperation(bytes32 id) public view virtual returns (bool registered) {\\n        return getTimestamp(id) > 0;\\n    }\\n\\n    /**\\n     * @dev Returns whether an operation is pending or not.\\n     */\\n    function isOperationPending(bytes32 id) public view virtual returns (bool pending) {\\n        return getTimestamp(id) > _DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev Returns whether an operation is ready or not.\\n     */\\n    function isOperationReady(bytes32 id) public view virtual returns (bool ready) {\\n        uint256 timestamp = getTimestamp(id);\\n        return timestamp > _DONE_TIMESTAMP && timestamp <= block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Returns whether an operation is done or not.\\n     */\\n    function isOperationDone(bytes32 id) public view virtual returns (bool done) {\\n        return getTimestamp(id) == _DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev Returns the timestamp at with an operation becomes ready (0 for\\n     * unset operations, 1 for done operations).\\n     */\\n    function getTimestamp(bytes32 id) public view virtual returns (uint256 timestamp) {\\n        return _timestamps[id];\\n    }\\n\\n    /**\\n     * @dev Returns the minimum delay for an operation to become valid.\\n     *\\n     * This value can be changed by executing an operation that calls `updateDelay`.\\n     */\\n    function getMinDelay() public view virtual returns (uint256 duration) {\\n        return _minDelay;\\n    }\\n\\n    /**\\n     * @dev Returns the identifier of an operation containing a single\\n     * transaction.\\n     */\\n    function hashOperation(\\n        address target,\\n        uint256 value,\\n        bytes calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public pure virtual returns (bytes32 hash) {\\n        return keccak256(abi.encode(target, value, data, predecessor, salt));\\n    }\\n\\n    /**\\n     * @dev Returns the identifier of an operation containing a batch of\\n     * transactions.\\n     */\\n    function hashOperationBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata payloads,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public pure virtual returns (bytes32 hash) {\\n        return keccak256(abi.encode(targets, values, payloads, predecessor, salt));\\n    }\\n\\n    /**\\n     * @dev Schedule an operation containing a single transaction.\\n     *\\n     * Emits a {CallScheduled} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'proposer' role.\\n     */\\n    function schedule(\\n        address target,\\n        uint256 value,\\n        bytes calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt,\\n        uint256 delay\\n    ) public virtual onlyRole(PROPOSER_ROLE) {\\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\\n        _schedule(id, delay);\\n        emit CallScheduled(id, 0, target, value, data, predecessor, delay);\\n          if (salt != bytes32(0)) {\\n            emit CallSalt(id, salt);\\n        }\\n    }\\n\\n    /**\\n     * @dev Schedule an operation containing a batch of transactions.\\n     *\\n     * Emits one {CallScheduled} event per transaction in the batch.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'proposer' role.\\n     */\\n    function scheduleBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata payloads,\\n        bytes32 predecessor,\\n        bytes32 salt,\\n        uint256 delay\\n    ) public virtual onlyRole(PROPOSER_ROLE) {\\n        require(targets.length == values.length, \\\"TimelockController: length mismatch\\\");\\n        require(targets.length == payloads.length, \\\"TimelockController: length mismatch\\\");\\n\\n        bytes32 id = hashOperationBatch(targets, values, payloads, predecessor, salt);\\n        _schedule(id, delay);\\n        for (uint256 i = 0; i < targets.length; ++i) {\\n            emit CallScheduled(id, i, targets[i], values[i], payloads[i], predecessor, delay);\\n        }\\n        if (salt != bytes32(0)) {\\n            emit CallSalt(id, salt);\\n        }\\n    }\\n\\n    /**\\n     * @dev Schedule an operation that is to becomes valid after a given delay.\\n     */\\n    function _schedule(bytes32 id, uint256 delay) private {\\n        require(!isOperation(id), \\\"TimelockController: operation already scheduled\\\");\\n        require(delay >= getMinDelay(), \\\"TimelockController: insufficient delay\\\");\\n        _timestamps[id] = block.timestamp + delay;\\n    }\\n\\n    /**\\n     * @dev Cancel an operation.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'canceller' role.\\n     */\\n    function cancel(bytes32 id) public virtual onlyRole(CANCELLER_ROLE) {\\n        require(isOperationPending(id), \\\"TimelockController: operation cannot be cancelled\\\");\\n        delete _timestamps[id];\\n\\n        emit Cancelled(id);\\n    }\\n\\n    /**\\n     * @dev Execute an (ready) operation containing a single transaction.\\n     *\\n     * Emits a {CallExecuted} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'executor' role.\\n     */\\n    // This function can reenter, but it doesn't pose a risk because _afterCall checks that the proposal is pending,\\n    // thus any modifications to the operation during reentrancy should be caught.\\n    // slither-disable-next-line reentrancy-eth\\n    function execute(\\n        address target,\\n        uint256 value,\\n        bytes calldata payload,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\\n        bytes32 id = hashOperation(target, value, payload, predecessor, salt);\\n\\n        _beforeCall(id, predecessor);\\n        _execute(target, value, payload);\\n        emit CallExecuted(id, 0, target, value, payload);\\n        _afterCall(id);\\n    }\\n\\n    /**\\n     * @dev Execute an (ready) operation containing a batch of transactions.\\n     *\\n     * Emits one {CallExecuted} event per transaction in the batch.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'executor' role.\\n     */\\n    function executeBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata payloads,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\\n        require(targets.length == values.length, \\\"TimelockController: length mismatch\\\");\\n        require(targets.length == payloads.length, \\\"TimelockController: length mismatch\\\");\\n\\n        bytes32 id = hashOperationBatch(targets, values, payloads, predecessor, salt);\\n\\n        _beforeCall(id, predecessor);\\n        for (uint256 i = 0; i < targets.length; ++i) {\\n            address target = targets[i];\\n            uint256 value = values[i];\\n            bytes calldata payload = payloads[i];\\n            _execute(target, value, payload);\\n            emit CallExecuted(id, i, target, value, payload);\\n        }\\n        _afterCall(id);\\n    }\\n\\n    /**\\n     * @dev Execute an operation's call.\\n     */\\n    function _execute(\\n        address target,\\n        uint256 value,\\n        bytes calldata data\\n    ) internal virtual {\\n        (bool success, ) = target.call{value: value}(data);\\n        require(success, \\\"TimelockController: underlying transaction reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Checks before execution of an operation's calls.\\n     */\\n    function _beforeCall(bytes32 id, bytes32 predecessor) private view {\\n        require(isOperationReady(id), \\\"TimelockController: operation is not ready\\\");\\n        require(predecessor == bytes32(0) || isOperationDone(predecessor), \\\"TimelockController: missing dependency\\\");\\n    }\\n\\n    /**\\n     * @dev Checks after execution of an operation's calls.\\n     */\\n    function _afterCall(bytes32 id) private {\\n        require(isOperationReady(id), \\\"TimelockController: operation is not ready\\\");\\n        _timestamps[id] = _DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev Changes the minimum timelock duration for future operations.\\n     *\\n     * Emits a {MinDelayChange} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the timelock itself. This can only be achieved by scheduling and later executing\\n     * an operation where the timelock is the target and the data is the ABI-encoded call to this function.\\n     */\\n    function updateDelay(uint256 newDelay) external virtual {\\n        require(msg.sender == address(this), \\\"TimelockController: caller must be timelock\\\");\\n        emit MinDelayChange(_minDelay, newDelay);\\n        _minDelay = newDelay;\\n    }\\n}\",\"keccak256\":\"0x7f4e51b05bfa6212bfeff97ef134f2196a87d6701c99161a2f696b2c85947648\",\"license\":\"MIT\"},\"contracts/governance/extensions/GovernorCountingSimple.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (governance/extensions/GovernorCountingSimple.sol)\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../Governor.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} for simple, 3 options, vote counting.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract GovernorCountingSimple is Governor {\\n    /**\\n     * @dev Supported vote types. Matches Governor Bravo ordering.\\n     */\\n    enum VoteType {\\n        Against,\\n        For,\\n        Abstain\\n    }\\n\\n    struct ProposalVote {\\n        uint256 againstVotes;\\n        uint256 forVotes;\\n        uint256 abstainVotes;\\n        mapping(address => bool) hasVoted;\\n    }\\n\\n    mapping(uint256 => ProposalVote) private _proposalVotes;\\n\\n    /**\\n     * @dev See {IGovernor-COUNTING_MODE}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function COUNTING_MODE() public pure virtual override returns (string memory) {\\n        return \\\"support=bravo&quorum=for,abstain\\\";\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-hasVoted}.\\n     */\\n    function hasVoted(uint256 proposalId, address account) public view virtual override returns (bool) {\\n        return _proposalVotes[proposalId].hasVoted[account];\\n    }\\n\\n    /**\\n     * @dev Accessor to the internal vote counts.\\n     */\\n    function proposalVotes(\\n        uint256 proposalId\\n    ) public view virtual returns (uint256 againstVotes, uint256 forVotes, uint256 abstainVotes) {\\n        ProposalVote storage proposalVote = _proposalVotes[proposalId];\\n        return (proposalVote.againstVotes, proposalVote.forVotes, proposalVote.abstainVotes);\\n    }\\n\\n    /**\\n     * @dev See {Governor-_quorumReached}.\\n     */\\n    function _quorumReached(uint256 proposalId) internal view virtual override returns (bool) {\\n        ProposalVote storage proposalVote = _proposalVotes[proposalId];\\n\\n        return quorum(proposalSnapshot(proposalId)) <= proposalVote.forVotes + proposalVote.abstainVotes;\\n    }\\n\\n    /**\\n     * @dev See {Governor-_voteSucceeded}. In this module, the forVotes must be strictly over the againstVotes.\\n     */\\n    function _voteSucceeded(uint256 proposalId) internal view virtual override returns (bool) {\\n        ProposalVote storage proposalVote = _proposalVotes[proposalId];\\n\\n        return proposalVote.forVotes > proposalVote.againstVotes;\\n    }\\n\\n    /**\\n     * @dev See {Governor-_countVote}. In this module, the support follows the `VoteType` enum (from Governor Bravo).\\n     */\\n    function _countVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        uint256 weight,\\n        bytes memory // params\\n    ) internal virtual override {\\n        ProposalVote storage proposalVote = _proposalVotes[proposalId];\\n\\n        require(!proposalVote.hasVoted[account], \\\"GovernorVotingSimple: vote already cast\\\");\\n        proposalVote.hasVoted[account] = true;\\n\\n        if (support == uint8(VoteType.Against)) {\\n            proposalVote.againstVotes += weight;\\n        } else if (support == uint8(VoteType.For)) {\\n            proposalVote.forVotes += weight;\\n        } else if (support == uint8(VoteType.Abstain)) {\\n            proposalVote.abstainVotes += weight;\\n        } else {\\n            revert(\\\"GovernorVotingSimple: invalid value for enum VoteType\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0xd22154d52ca25b6d95c9359c3308c9f682e20e8e70f8eef0e0c7697f63ddacaa\",\"license\":\"MIT\"},\"contracts/governance/extensions/GovernorTimelockControl.sol\":{\"content\":\"\\n\\n// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (governance/extensions/GovernorTimelockControl.sol)\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./IGovernorTimelock.sol\\\";\\nimport \\\"../Governor.sol\\\";\\nimport \\\"../TimelockController.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} that binds the execution process to an instance of {TimelockController}. This adds a\\n * delay, enforced by the {TimelockController} to all successful proposal (in addition to the voting duration). The\\n * {Governor} needs the proposer (and ideally the executor) roles for the {Governor} to work properly.\\n *\\n * Using this model means the proposal will be operated by the {TimelockController} and not by the {Governor}. Thus,\\n * the assets and permissions must be attached to the {TimelockController}. Any asset sent to the {Governor} will be\\n * inaccessible.\\n *\\n * WARNING: Setting up the TimelockController to have additional proposers besides the governor is very risky, as it\\n * grants them powers that they must be trusted or known not to use: 1) {onlyGovernance} functions like {relay} are\\n * available to them through the timelock, and 2) approved governance proposals can be blocked by them, effectively\\n * executing a Denial of Service attack. This risk will be mitigated in a future release.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract GovernorTimelockControl is IGovernorTimelock, Governor {\\n    TimelockController private _timelock;\\n    mapping(uint256 => bytes32) private _timelockIds;\\n\\n    /**\\n     * @dev Emitted when the timelock controller used for proposal execution is modified.\\n     */\\n    event TimelockChange(address oldTimelock, address newTimelock);\\n\\n    /**\\n     * @dev Set the timelock.\\n     */\\n    constructor(TimelockController timelockAddress) {\\n        _updateTimelock(timelockAddress);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, Governor) returns (bool) {\\n        return interfaceId == type(IGovernorTimelock).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Overridden version of the {Governor-state} function with added support for the `Queued` status.\\n     */\\n    function state(uint256 proposalId) public view virtual override(IGovernor, Governor) returns (ProposalState) {\\n        ProposalState status = super.state(proposalId);\\n\\n        if (status != ProposalState.Succeeded) {\\n            return status;\\n        }\\n\\n        // core tracks execution, so we just have to check if successful proposal have been queued.\\n        bytes32 queueid = _timelockIds[proposalId];\\n        if (queueid == bytes32(0)) {\\n            return status;\\n        } else if (_timelock.isOperationDone(queueid)) {\\n            return ProposalState.Executed;\\n        } else if (_timelock.isOperationPending(queueid)) {\\n            return ProposalState.Queued;\\n        } else {\\n            return ProposalState.Canceled;\\n        }\\n    }\\n\\n    /**\\n     * @dev Public accessor to check the address of the timelock\\n     */\\n    function timelock() public view virtual override returns (address) {\\n        return address(_timelock);\\n    }\\n\\n    /**\\n     * @dev Public accessor to check the eta of a queued proposal\\n     */\\n    function proposalEta(uint256 proposalId) public view virtual override returns (uint256) {\\n        uint256 eta = _timelock.getTimestamp(_timelockIds[proposalId]);\\n        return eta == 1 ? 0 : eta; // _DONE_TIMESTAMP (1) should be replaced with a 0 value\\n    }\\n\\n    /**\\n     * @dev Function to queue a proposal to the timelock.\\n     */\\n    function queue(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public virtual override returns (uint256) {\\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\\n\\n        require(state(proposalId) == ProposalState.Succeeded, \\\"Governor: proposal not successful\\\");\\n\\n        uint256 delay = _timelock.getMinDelay();\\n        _timelockIds[proposalId] = _timelock.hashOperationBatch(targets, values, calldatas, 0, descriptionHash);\\n        _timelock.scheduleBatch(targets, values, calldatas, 0, descriptionHash, delay);\\n\\n        emit ProposalQueued(proposalId, block.timestamp + delay);\\n\\n        return proposalId;\\n    }\\n\\n    /**\\n     * @dev Overridden execute function that run the already queued proposal through the timelock.\\n     */\\n    function _execute(\\n        uint256, /* proposalId */\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) internal virtual override {\\n        _timelock.executeBatch{value: msg.value}(targets, values, calldatas, 0, descriptionHash);\\n    }\\n\\n    /**\\n     * @dev Overridden version of the {Governor-_cancel} function to cancel the timelocked proposal if it as already\\n     * been queued.\\n     */\\n    // This function can reenter through the external call to the timelock, but we assume the timelock is trusted and\\n    // well behaved (according to TimelockController) and this will not happen.\\n    // slither-disable-next-line reentrancy-no-eth\\n    function _cancel(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) internal virtual override returns (uint256) {\\n        uint256 proposalId = super._cancel(targets, values, calldatas, descriptionHash);\\n\\n        if (_timelockIds[proposalId] != 0) {\\n            _timelock.cancel(_timelockIds[proposalId]);\\n            delete _timelockIds[proposalId];\\n        }\\n\\n        return proposalId;\\n    }\\n\\n    /**\\n     * @dev Address through which the governor executes action. In this case, the timelock.\\n     */\\n    function _executor() internal view virtual override returns (address) {\\n        return address(_timelock);\\n    }\\n\\n    /**\\n     * @dev Public endpoint to update the underlying timelock instance. Restricted to the timelock itself, so updates\\n     * must be proposed, scheduled, and executed through governance proposals.\\n     *\\n     * CAUTION: It is not recommended to change the timelock while there are other queued governance proposals.\\n     */\\n    function updateTimelock(TimelockController newTimelock) external virtual onlyGovernance {\\n        _updateTimelock(newTimelock);\\n    }\\n\\n    function _updateTimelock(TimelockController newTimelock) private {\\n        emit TimelockChange(address(_timelock), address(newTimelock));\\n        _timelock = newTimelock;\\n    }\\n}\",\"keccak256\":\"0xfdb3ab2c2aee1e6ef3cf570be979c0836e026fb5674bb3f7fdd5190c87ab2758\",\"license\":\"MIT\"},\"contracts/governance/extensions/GovernorVotes.sol\":{\"content\":\"\\n\\n// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (governance/extensions/GovernorVotes.sol)\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../Governor.sol\\\";\\nimport \\\"../utils/IVotes.sol\\\";\\nimport '../../interfaces/IERC6372.sol';\\nimport '../../interfaces/IERC5805.sol';\\n\\nabstract contract GovernorVotes is Governor {\\n    IERC5805 public immutable token;\\n\\n    constructor(IVotes tokenAddress) {\\n        token = IERC5805(address(tokenAddress));\\n    }\\n\\n    /**\\n     * @dev Clock (as specified in EIP-6372) is set to match the token's clock. Fallback to block numbers if the token\\n     * does not implement EIP-6372.\\n     */\\n    function clock() public view virtual override returns (uint48) {\\n        try token.clock() returns (uint48 timepoint) {\\n            return timepoint;\\n        } catch {\\n            return SafeCast.toUint48(block.number);\\n        }\\n    }\\n\\n    /**\\n     * @dev Machine-readable description of the clock as specified in EIP-6372.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function CLOCK_MODE() public view virtual override returns (string memory) {\\n        try token.CLOCK_MODE() returns (string memory clockmode) {\\n            return clockmode;\\n        } catch {\\n            return \\\"mode=blocknumber&from=default\\\";\\n        }\\n    }\\n\\n    /**\\n     * Read the voting weight from the token's built in snapshot mechanism (see {Governor-_getVotes}).\\n     */\\n    function _getVotes(\\n        address account,\\n        uint256 timepoint,\\n        bytes memory /*params*/\\n    ) internal view virtual override returns (uint256) {\\n        return token.getPastVotes(account, timepoint);\\n    }\\n}\",\"keccak256\":\"0x7b32ff1c28f9f70cc5040528c1efca3a8aedc0c2c7e9670a374fc72ff5d491ae\",\"license\":\"MIT\"},\"contracts/governance/extensions/GovernorVotesQuorumFraction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (governance/extensions/GovernorVotesQuorumFraction.sol)\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./GovernorVotes.sol\\\";\\nimport \\\"../../utils/Checkpoints.sol\\\";\\nimport \\\"../../utils/math/SafeCast.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} for voting weight extraction from an {ERC20Votes} token and a quorum expressed as a\\n * fraction of the total supply.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract GovernorVotesQuorumFraction is GovernorVotes {\\n    using SafeCast for *;\\n    using Checkpoints for Checkpoints.Trace224;\\n\\n    uint256 private _quorumNumerator; // DEPRECATED in favor of _quorumNumeratorHistory\\n\\n    /// @custom:oz-retyped-from Checkpoints.History\\n    Checkpoints.Trace224 private _quorumNumeratorHistory;\\n\\n    event QuorumNumeratorUpdated(uint256 oldQuorumNumerator, uint256 newQuorumNumerator);\\n\\n    /**\\n     * @dev Initialize quorum as a fraction of the token's total supply.\\n     *\\n     * The fraction is specified as `numerator / denominator`. By default the denominator is 100, so quorum is\\n     * specified as a percent: a numerator of 10 corresponds to quorum being 10% of total supply. The denominator can be\\n     * customized by overriding {quorumDenominator}.\\n     */\\n    constructor(uint256 quorumNumeratorValue) {\\n        _updateQuorumNumerator(quorumNumeratorValue);\\n    }\\n\\n    /**\\n     * @dev Returns the current quorum numerator. See {quorumDenominator}.\\n     */\\n    function quorumNumerator() public view virtual returns (uint256) {\\n        return _quorumNumeratorHistory._checkpoints.length == 0 ? _quorumNumerator : _quorumNumeratorHistory.latest();\\n    }\\n\\n    /**\\n     * @dev Returns the quorum numerator at a specific timepoint. See {quorumDenominator}.\\n     */\\n    function quorumNumerator(uint256 timepoint) public view virtual returns (uint256) {\\n        // If history is empty, fallback to old storage\\n        uint256 length = _quorumNumeratorHistory._checkpoints.length;\\n        if (length == 0) {\\n            return _quorumNumerator;\\n        }\\n\\n        // Optimistic search, check the latest checkpoint\\n        Checkpoints.Checkpoint224 memory latest = _quorumNumeratorHistory._checkpoints[length - 1];\\n        if (latest._key <= timepoint) {\\n            return latest._value;\\n        }\\n\\n        // Otherwise, do the binary search\\n        return _quorumNumeratorHistory.upperLookupRecent(timepoint.toUint32());\\n    }\\n\\n    /**\\n     * @dev Returns the quorum denominator. Defaults to 100, but may be overridden.\\n     */\\n    function quorumDenominator() public view virtual returns (uint256) {\\n        return 100;\\n    }\\n\\n    /**\\n     * @dev Returns the quorum for a timepoint, in terms of number of votes: `supply * numerator / denominator`.\\n     */\\n    function quorum(uint256 timepoint) public view virtual override returns (uint256) {\\n        return (token.getPastTotalSupply(timepoint) * quorumNumerator(timepoint)) / quorumDenominator();\\n    }\\n\\n    /**\\n     * @dev Changes the quorum numerator.\\n     *\\n     * Emits a {QuorumNumeratorUpdated} event.\\n     *\\n     * Requirements:\\n     *\\n     * - Must be called through a governance proposal.\\n     * - New numerator must be smaller or equal to the denominator.\\n     */\\n    function updateQuorumNumerator(uint256 newQuorumNumerator) external virtual onlyGovernance {\\n        _updateQuorumNumerator(newQuorumNumerator);\\n    }\\n\\n    /**\\n     * @dev Changes the quorum numerator.\\n     *\\n     * Emits a {QuorumNumeratorUpdated} event.\\n     *\\n     * Requirements:\\n     *\\n     * - New numerator must be smaller or equal to the denominator.\\n     */\\n    function _updateQuorumNumerator(uint256 newQuorumNumerator) internal virtual {\\n        require(\\n            newQuorumNumerator <= quorumDenominator(),\\n            \\\"GovernorVotesQuorumFraction: quorumNumerator over quorumDenominator\\\"\\n        );\\n\\n        uint256 oldQuorumNumerator = quorumNumerator();\\n\\n        // Make sure we keep track of the original numerator in contracts upgraded from a version without checkpoints.\\n        if (oldQuorumNumerator != 0 && _quorumNumeratorHistory._checkpoints.length == 0) {\\n            _quorumNumeratorHistory._checkpoints.push(\\n                Checkpoints.Checkpoint224({_key: 0, _value: oldQuorumNumerator.toUint224()})\\n            );\\n        }\\n\\n        // Set new quorum for future proposals\\n        _quorumNumeratorHistory.push(clock().toUint32(), newQuorumNumerator.toUint224());\\n\\n        emit QuorumNumeratorUpdated(oldQuorumNumerator, newQuorumNumerator);\\n    }\\n}\",\"keccak256\":\"0x28db30148346147b9d5cc581b187184870ba3771182f88baaaff09ff5637c6b3\",\"license\":\"MIT\"},\"contracts/governance/extensions/IGovernorTimelock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (governance/extensions/IGovernorTimelock.sol)\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../IGovernor.sol\\\";\\n\\n/**\\n * @dev Extension of the {IGovernor} for timelock supporting modules.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract IGovernorTimelock is IGovernor {\\n    event ProposalQueued(uint256 proposalId, uint256 eta);\\n\\n    function timelock() public view virtual returns (address);\\n\\n    function proposalEta(uint256 proposalId) public view virtual returns (uint256);\\n\\n    function queue(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public virtual returns (uint256 proposalId);\\n}\",\"keccak256\":\"0xec4651b99649be980ec8c278f3fa2f1a6490e757f0a202ff374719d1355baf47\",\"license\":\"MIT\"},\"contracts/governance/utils/IVotes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/utils/IVotes.sol)\\npragma solidity ^0.8.17;\\n\\n/**\\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\\n *\\n * _Available since v4.5._\\n */\\ninterface IVotes {\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at the end of a past block (`blockNumber`).\\n     */\\n    function getPastVotes(address account, uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total supply of votes available at the end of a past block (`blockNumber`).\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     */\\n    function getPastTotalSupply(uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the delegate that `account` has chosen.\\n     */\\n    function delegates(address account) external view returns (address);\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`.\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\",\"keccak256\":\"0x6fd4ded78992fe759060ebd17956f940cacb7742594d8e43b1155df6d2f63c62\",\"license\":\"MIT\"},\"contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\",\"keccak256\":\"0x93be4e7e2e2027b78425e8dccc643ddb138ec1a49b805d74f5d3fb41ecc82f49\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IERC5805.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\n\\nimport \\\"../governance/utils/IVotes.sol\\\";\\nimport \\\"./IERC6372.sol\\\";\\n\\ninterface IERC5805 is IERC6372, IVotes {}\",\"keccak256\":\"0x6bcfa2863cc3e23cfadb6fed7e64d8d55ea1461fdd88bc5929126110209a39a7\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IERC6372.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\n\\ninterface IERC6372 {\\n\\n    function clock() external view returns (uint48);\\n\\n// solhint-disable-next-line func-name-mixedcase\\n    function CLOCK_MODE() external view returns (string memory);\\n    \\n}\",\"keccak256\":\"0x0b99edf1135678227968d9916061a9a2c0a4a177e2ff8a3b60993a729f13fa05\",\"license\":\"MIT\"},\"contracts/utils/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\",\"keccak256\":\"0xc4c1493a02dd5f14936751107d35c53319d74a72429450ed55c585912c576dcc\",\"license\":\"MIT\"},\"contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nlibrary Address {\\n   \\n    function isContract(address account) internal view returns (bool) {\\n        return account.code.length > 0;\\n    }\\n\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        if (returndata.length > 0) {\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\",\"keccak256\":\"0x5097ce06a2daff5194456f741bbbfe896bb84fb53733b0187c96f2607a184883\",\"license\":\"UNLICENSED\"},\"contracts/utils/Checkpoints.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (utils/Checkpoints.sol)\\n// This file was procedurally generated from scripts/generate/templates/Checkpoints.js.\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SafeCast.sol\\\";\\n\\n/**\\n * @dev This library defines the `History` struct, for checkpointing values as they change at different points in\\n * time, and later looking up past values by block number. See {Votes} as an example.\\n *\\n * To create a history of checkpoints define a variable type `Checkpoints.History` in your contract, and store a new\\n * checkpoint for the current transaction block using the {push} function.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Checkpoints {\\n    struct History {\\n        Checkpoint[] _checkpoints;\\n    }\\n\\n    struct Checkpoint {\\n        uint32 _blockNumber;\\n        uint224 _value;\\n    }\\n\\n    /**\\n     * @dev Returns the value at a given block number. If a checkpoint is not available at that block, the closest one\\n     * before it is returned, or zero otherwise. Because the number returned corresponds to that at the end of the\\n     * block, the requested block number must be in the past, excluding the current block.\\n     */\\n    function getAtBlock(History storage self, uint256 blockNumber) internal view returns (uint256) {\\n        require(blockNumber < block.number, \\\"Checkpoints: block not yet mined\\\");\\n        uint32 key = SafeCast.toUint32(blockNumber);\\n\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value at a given block number. If a checkpoint is not available at that block, the closest one\\n     * before it is returned, or zero otherwise. Similar to {upperLookup} but optimized for the case when the searched\\n     * checkpoint is probably \\\"recent\\\", defined as being among the last sqrt(N) checkpoints where N is the number of\\n     * checkpoints.\\n     */\\n    function getAtProbablyRecentBlock(History storage self, uint256 blockNumber) internal view returns (uint256) {\\n        require(blockNumber < block.number, \\\"Checkpoints: block not yet mined\\\");\\n        uint32 key = SafeCast.toUint32(blockNumber);\\n\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - Math.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._blockNumber) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Pushes a value onto a History so that it is stored as the checkpoint for the current block.\\n     *\\n     * Returns previous value and new value.\\n     */\\n    function push(History storage self, uint256 value) internal returns (uint256, uint256) {\\n        return _insert(self._checkpoints, SafeCast.toUint32(block.number), SafeCast.toUint224(value));\\n    }\\n\\n    /**\\n     * @dev Pushes a value onto a History, by updating the latest value using binary operation `op`. The new value will\\n     * be set to `op(latest, delta)`.\\n     *\\n     * Returns previous value and new value.\\n     */\\n    function push(\\n        History storage self,\\n        function(uint256, uint256) view returns (uint256) op,\\n        uint256 delta\\n    ) internal returns (uint256, uint256) {\\n        return push(self, op(latest(self), delta));\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(History storage self) internal view returns (uint224) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(\\n        History storage self\\n    ) internal view returns (bool exists, uint32 _blockNumber, uint224 _value) {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._blockNumber, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(History storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(Checkpoint[] storage self, uint32 key, uint224 value) private returns (uint224, uint224) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            // Copying to memory is important here.\\n            Checkpoint memory last = _unsafeAccess(self, pos - 1);\\n\\n            // Checkpoint keys must be non-decreasing.\\n            require(last._blockNumber <= key, \\\"Checkpoint: decreasing keys\\\");\\n\\n            // Update or push new checkpoint\\n            if (last._blockNumber == key) {\\n                _unsafeAccess(self, pos - 1)._value = value;\\n            } else {\\n                self.push(Checkpoint({_blockNumber: key, _value: value}));\\n            }\\n            return (last._value, value);\\n        } else {\\n            self.push(Checkpoint({_blockNumber: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the oldest checkpoint whose key is greater than the search key, or `high` if there is none.\\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._blockNumber > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the oldest checkpoint whose key is greater or equal than the search key, or `high` if there is none.\\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._blockNumber < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(Checkpoint[] storage self, uint256 pos) private pure returns (Checkpoint storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n\\n    struct Trace224 {\\n        Checkpoint224[] _checkpoints;\\n    }\\n\\n    struct Checkpoint224 {\\n        uint32 _key;\\n        uint224 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace224 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     */\\n    function push(Trace224 storage self, uint32 key, uint224 value) internal returns (uint224, uint224) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the oldest checkpoint with key greater or equal than the search key, or zero if there is none.\\n     */\\n    function lowerLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint with key lower or equal than the search key.\\n     */\\n    function upperLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint with key lower or equal than the search key.\\n     *\\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \\\"recent\\\" checkpoint (checkpoints with high keys).\\n     */\\n    function upperLookupRecent(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - Math.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace224 storage self) internal view returns (uint224) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace224 storage self) internal view returns (bool exists, uint32 _key, uint224 _value) {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint224 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace224 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(Checkpoint224[] storage self, uint32 key, uint224 value) private returns (uint224, uint224) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            // Copying to memory is important here.\\n            Checkpoint224 memory last = _unsafeAccess(self, pos - 1);\\n\\n            // Checkpoint keys must be non-decreasing.\\n            require(last._key <= key, \\\"Checkpoint: decreasing keys\\\");\\n\\n            // Update or push new checkpoint\\n            if (last._key == key) {\\n                _unsafeAccess(self, pos - 1)._value = value;\\n            } else {\\n                self.push(Checkpoint224({_key: key, _value: value}));\\n            }\\n            return (last._value, value);\\n        } else {\\n            self.push(Checkpoint224({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the oldest checkpoint whose key is greater than the search key, or `high` if there is none.\\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint224[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the oldest checkpoint whose key is greater or equal than the search key, or `high` if there is none.\\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint224[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(\\n        Checkpoint224[] storage self,\\n        uint256 pos\\n    ) private pure returns (Checkpoint224 storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n\\n    struct Trace160 {\\n        Checkpoint160[] _checkpoints;\\n    }\\n\\n    struct Checkpoint160 {\\n        uint96 _key;\\n        uint160 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace160 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     */\\n    function push(Trace160 storage self, uint96 key, uint160 value) internal returns (uint160, uint160) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the oldest checkpoint with key greater or equal than the search key, or zero if there is none.\\n     */\\n    function lowerLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint with key lower or equal than the search key.\\n     */\\n    function upperLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint with key lower or equal than the search key.\\n     *\\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \\\"recent\\\" checkpoint (checkpoints with high keys).\\n     */\\n    function upperLookupRecent(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - Math.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace160 storage self) internal view returns (uint160) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace160 storage self) internal view returns (bool exists, uint96 _key, uint160 _value) {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint160 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace160 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(Checkpoint160[] storage self, uint96 key, uint160 value) private returns (uint160, uint160) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            // Copying to memory is important here.\\n            Checkpoint160 memory last = _unsafeAccess(self, pos - 1);\\n\\n            // Checkpoint keys must be non-decreasing.\\n            require(last._key <= key, \\\"Checkpoint: decreasing keys\\\");\\n\\n            // Update or push new checkpoint\\n            if (last._key == key) {\\n                _unsafeAccess(self, pos - 1)._value = value;\\n            } else {\\n                self.push(Checkpoint160({_key: key, _value: value}));\\n            }\\n            return (last._value, value);\\n        } else {\\n            self.push(Checkpoint160({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the oldest checkpoint whose key is greater than the search key, or `high` if there is none.\\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint160[] storage self,\\n        uint96 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the oldest checkpoint whose key is greater or equal than the search key, or `high` if there is none.\\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint160[] storage self,\\n        uint96 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(\\n        Checkpoint160[] storage self,\\n        uint256 pos\\n    ) private pure returns (Checkpoint160 storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n}\",\"keccak256\":\"0xaeecdd8f42830a7e1f6d39ede01ef83cec7d81e3db97e8175fcc4bb89fa3f9b1\",\"license\":\"MIT\"},\"contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0x96bbb18a9ad055c99680e2e319d5d51832a31902cf52b39c95c6bf96ccaac4a2\",\"license\":\"UNLICENSED\"},\"contracts/utils/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.17;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\",\"keccak256\":\"0xbc7ea4f3e43efb91dcc9abe2c350c147379a1634a74b9d0adba120c1efbff359\",\"license\":\"MIT\"},\"contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"./StorageSlot.sol\\\";\\n\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n * Strings of arbitrary length can be optimized if they are short enough by\\n * the addition of a storage variable used as fallback.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    error StringTooLong(string str);\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = length(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function length(ShortString sstr) internal pure returns (uint256) {\\n        return uint256(ShortString.unwrap(sstr)) & 0xFF;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (length(value) > 0) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n}\",\"keccak256\":\"0x1aa647d750f89ac910a6b08b63381c935f27bcf7e4ac53e23ded8f6be829675f\",\"license\":\"UNLICENSED\"},\"contracts/utils/StorageSlot.sol\":{\"content\":\"\\n\\n// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\",\"keccak256\":\"0x867acd90e895d2be723bfce358a242da44ddfc01e38c505bd2ca9d43b23fdbd1\",\"license\":\"UNLICENSED\"},\"contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\",\"keccak256\":\"0x9d23bcb9f5207ad37c41ba664df3b991ad3b1020d66992ccfd3fa753ff503795\",\"license\":\"MIT\"},\"contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\",\"keccak256\":\"0xd5b76676ae2bdcdf00d773f283325e31c4a2fc8146aa49c2951215255dbd234e\",\"license\":\"UNLICENSED\"},\"contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../ShortStrings.sol\\\";\\nimport \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _name.toStringWithFallback(_nameFallback),\\n            _version.toStringWithFallback(_versionFallback),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n}\",\"keccak256\":\"0xf9385368e86f7537e31939809b68c4b77a5f701ea299213945627770df9503ea\",\"license\":\"UNLICENSED\"},\"contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\nabstract contract ERC165 is IERC165 {\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\",\"keccak256\":\"0x5fdee66e718c83864cb2abb55f3b2d49abf0a1440a7b448401c6f3dff08bb0e1\",\"license\":\"MIT\"},\"contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\ninterface IERC165 {\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\",\"keccak256\":\"0xdc01ec7743c1661d466150763d7ec01c05e12a9db1c272b5f744d9156fc1ad76\",\"license\":\"MIT\"},\"contracts/utils/math/Math.sol\":{\"content\":\"\\n\\n// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.17;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\",\"keccak256\":\"0xa6198448964b5c5ce657f8deb162f38dd073cf776c71641b437b81943863d297\",\"license\":\"MIT\"},\"contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\n\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\",\"keccak256\":\"0x6d076ee01e7ab8cfc4ddeb27af859dd0cdfa615cd8bcb897a80c64438ff43b92\",\"license\":\"UNLICENSED\"},\"contracts/utils/structs/DoubleEndedQueue.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"../math/SafeCast.sol\\\";\\n\\n\\nlibrary DoubleEndedQueue {\\n    /**\\n     * @dev An operation (e.g. {front}) couldn't be completed due to the queue being empty.\\n     */\\n    error Empty();\\n\\n    /**\\n     * @dev An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\\n     */\\n    error OutOfBounds();\\n\\n    /**\\n     * @dev Indices are signed integers because the queue can grow in any direction. They are 128 bits so begin and end\\n     * are packed in a single storage slot for efficient access. Since the items are added one at a time we can safely\\n     * assume that these 128-bit indices will not overflow, and use unchecked arithmetic.\\n     *\\n     * Struct members have an underscore prefix indicating that they are \\\"private\\\" and should not be read or written to\\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\\n     * lead to unexpected behavior.\\n     *\\n     * Indices are in the range [begin, end) which means the first item is at data[begin] and the last item is at\\n     * data[end - 1].\\n     */\\n    struct Bytes32Deque {\\n        int128 _begin;\\n        int128 _end;\\n        mapping(int128 => bytes32) _data;\\n    }\\n\\n    /**\\n     * @dev Inserts an item at the end of the queue.\\n     */\\n    function pushBack(Bytes32Deque storage deque, bytes32 value) internal {\\n        int128 backIndex = deque._end;\\n        deque._data[backIndex] = value;\\n        unchecked {\\n            deque._end = backIndex + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes the item at the end of the queue and returns it.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function popBack(Bytes32Deque storage deque) internal returns (bytes32 value) {\\n        if (empty(deque)) revert Empty();\\n        int128 backIndex;\\n        unchecked {\\n            backIndex = deque._end - 1;\\n        }\\n        value = deque._data[backIndex];\\n        delete deque._data[backIndex];\\n        deque._end = backIndex;\\n    }\\n\\n    /**\\n     * @dev Inserts an item at the beginning of the queue.\\n     */\\n    function pushFront(Bytes32Deque storage deque, bytes32 value) internal {\\n        int128 frontIndex;\\n        unchecked {\\n            frontIndex = deque._begin - 1;\\n        }\\n        deque._data[frontIndex] = value;\\n        deque._begin = frontIndex;\\n    }\\n\\n    /**\\n     * @dev Removes the item at the beginning of the queue and returns it.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function popFront(Bytes32Deque storage deque) internal returns (bytes32 value) {\\n        if (empty(deque)) revert Empty();\\n        int128 frontIndex = deque._begin;\\n        value = deque._data[frontIndex];\\n        delete deque._data[frontIndex];\\n        unchecked {\\n            deque._begin = frontIndex + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the item at the beginning of the queue.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function front(Bytes32Deque storage deque) internal view returns (bytes32 value) {\\n        if (empty(deque)) revert Empty();\\n        int128 frontIndex = deque._begin;\\n        return deque._data[frontIndex];\\n    }\\n\\n    /**\\n     * @dev Returns the item at the end of the queue.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function back(Bytes32Deque storage deque) internal view returns (bytes32 value) {\\n        if (empty(deque)) revert Empty();\\n        int128 backIndex;\\n        unchecked {\\n            backIndex = deque._end - 1;\\n        }\\n        return deque._data[backIndex];\\n    }\\n\\n    /**\\n     * @dev Return the item at a position in the queue given by `index`, with the first item at 0 and last item at\\n     * `length(deque) - 1`.\\n     *\\n     * Reverts with `OutOfBounds` if the index is out of bounds.\\n     */\\n    function at(Bytes32Deque storage deque, uint256 index) internal view returns (bytes32 value) {\\n        // int256(deque._begin) is a safe upcast\\n        int128 idx = SafeCast.toInt128(int256(deque._begin) + SafeCast.toInt256(index));\\n        if (idx >= deque._end) revert OutOfBounds();\\n        return deque._data[idx];\\n    }\\n\\n    /**\\n     * @dev Resets the queue back to being empty.\\n     *\\n     * NOTE: The current items are left behind in storage. This does not affect the functioning of the queue, but misses\\n     * out on potential gas refunds.\\n     */\\n    function clear(Bytes32Deque storage deque) internal {\\n        deque._begin = 0;\\n        deque._end = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of items in the queue.\\n     */\\n    function length(Bytes32Deque storage deque) internal view returns (uint256) {\\n        // The interface preserves the invariant that begin <= end so we assume this will not overflow.\\n        // We also assume there are at most int256.max items in the queue.\\n        unchecked {\\n            return uint256(int256(deque._end) - int256(deque._begin));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the queue is empty.\\n     */\\n    function empty(Bytes32Deque storage deque) internal view returns (bool) {\\n        return deque._end <= deque._begin;\\n    }\\n}\",\"keccak256\":\"0x16f1a77ea9f30a376df6095fa71b801a69b3f0a02876336751fc4e5695067d5f\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "storageLayout": {
    "storage": [
      {
        "astId": 9105,
        "contract": "contracts/Timelock_Governor.sol:Timelock_Governor",
        "label": "_nameFallback",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 9107,
        "contract": "contracts/Timelock_Governor.sol:Timelock_Governor",
        "label": "_versionFallback",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2057,
        "contract": "contracts/Timelock_Governor.sol:Timelock_Governor",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 2062,
        "contract": "contracts/Timelock_Governor.sol:Timelock_Governor",
        "label": "_proposals",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(ProposalCore)2055_storage)"
      },
      {
        "astId": 2065,
        "contract": "contracts/Timelock_Governor.sol:Timelock_Governor",
        "label": "_governanceCall",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(Bytes32Deque)11735_storage"
      },
      {
        "astId": 3270,
        "contract": "contracts/Timelock_Governor.sol:Timelock_Governor",
        "label": "_votingDelay",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 3272,
        "contract": "contracts/Timelock_Governor.sol:Timelock_Governor",
        "label": "_votingPeriod",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3274,
        "contract": "contracts/Timelock_Governor.sol:Timelock_Governor",
        "label": "_proposalThreshold",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 4660,
        "contract": "contracts/Timelock_Governor.sol:Timelock_Governor",
        "label": "_proposalVotes",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(ProposalVote)4655_storage)"
      },
      {
        "astId": 5351,
        "contract": "contracts/Timelock_Governor.sol:Timelock_Governor",
        "label": "_quorumNumerator",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 5355,
        "contract": "contracts/Timelock_Governor.sol:Timelock_Governor",
        "label": "_quorumNumeratorHistory",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(Trace224)6985_storage"
      },
      {
        "astId": 4873,
        "contract": "contracts/Timelock_Governor.sol:Timelock_Governor",
        "label": "_timelock",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(TimelockController)4634"
      },
      {
        "astId": 4877,
        "contract": "contracts/Timelock_Governor.sol:Timelock_Governor",
        "label": "_timelockIds",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_bytes32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Checkpoint224)6990_storage)dyn_storage": {
        "base": "t_struct(Checkpoint224)6990_storage",
        "encoding": "dynamic_array",
        "label": "struct Checkpoints.Checkpoint224[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes24": {
        "encoding": "inplace",
        "label": "bytes24",
        "numberOfBytes": "24"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_contract(TimelockController)4634": {
        "encoding": "inplace",
        "label": "contract TimelockController",
        "numberOfBytes": "20"
      },
      "t_int128": {
        "encoding": "inplace",
        "label": "int128",
        "numberOfBytes": "16"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_int128,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_int128",
        "label": "mapping(int128 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_struct(ProposalCore)2055_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Governor.ProposalCore)",
        "numberOfBytes": "32",
        "value": "t_struct(ProposalCore)2055_storage"
      },
      "t_mapping(t_uint256,t_struct(ProposalVote)4655_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GovernorCountingSimple.ProposalVote)",
        "numberOfBytes": "32",
        "value": "t_struct(ProposalVote)4655_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Bytes32Deque)11735_storage": {
        "encoding": "inplace",
        "label": "struct DoubleEndedQueue.Bytes32Deque",
        "members": [
          {
            "astId": 11728,
            "contract": "contracts/Timelock_Governor.sol:Timelock_Governor",
            "label": "_begin",
            "offset": 0,
            "slot": "0",
            "type": "t_int128"
          },
          {
            "astId": 11730,
            "contract": "contracts/Timelock_Governor.sol:Timelock_Governor",
            "label": "_end",
            "offset": 16,
            "slot": "0",
            "type": "t_int128"
          },
          {
            "astId": 11734,
            "contract": "contracts/Timelock_Governor.sol:Timelock_Governor",
            "label": "_data",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_int128,t_bytes32)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Checkpoint224)6990_storage": {
        "encoding": "inplace",
        "label": "struct Checkpoints.Checkpoint224",
        "members": [
          {
            "astId": 6987,
            "contract": "contracts/Timelock_Governor.sol:Timelock_Governor",
            "label": "_key",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 6989,
            "contract": "contracts/Timelock_Governor.sol:Timelock_Governor",
            "label": "_value",
            "offset": 4,
            "slot": "0",
            "type": "t_uint224"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ProposalCore)2055_storage": {
        "encoding": "inplace",
        "label": "struct Governor.ProposalCore",
        "members": [
          {
            "astId": 2042,
            "contract": "contracts/Timelock_Governor.sol:Timelock_Governor",
            "label": "voteStart",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2044,
            "contract": "contracts/Timelock_Governor.sol:Timelock_Governor",
            "label": "proposer",
            "offset": 8,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2046,
            "contract": "contracts/Timelock_Governor.sol:Timelock_Governor",
            "label": "__gap_unused0",
            "offset": 28,
            "slot": "0",
            "type": "t_bytes4"
          },
          {
            "astId": 2048,
            "contract": "contracts/Timelock_Governor.sol:Timelock_Governor",
            "label": "voteEnd",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 2050,
            "contract": "contracts/Timelock_Governor.sol:Timelock_Governor",
            "label": "__gap_unused1",
            "offset": 8,
            "slot": "1",
            "type": "t_bytes24"
          },
          {
            "astId": 2052,
            "contract": "contracts/Timelock_Governor.sol:Timelock_Governor",
            "label": "executed",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 2054,
            "contract": "contracts/Timelock_Governor.sol:Timelock_Governor",
            "label": "canceled",
            "offset": 1,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(ProposalVote)4655_storage": {
        "encoding": "inplace",
        "label": "struct GovernorCountingSimple.ProposalVote",
        "members": [
          {
            "astId": 4646,
            "contract": "contracts/Timelock_Governor.sol:Timelock_Governor",
            "label": "againstVotes",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4648,
            "contract": "contracts/Timelock_Governor.sol:Timelock_Governor",
            "label": "forVotes",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4650,
            "contract": "contracts/Timelock_Governor.sol:Timelock_Governor",
            "label": "abstainVotes",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4654,
            "contract": "contracts/Timelock_Governor.sol:Timelock_Governor",
            "label": "hasVoted",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Trace224)6985_storage": {
        "encoding": "inplace",
        "label": "struct Checkpoints.Trace224",
        "members": [
          {
            "astId": 6984,
            "contract": "contracts/Timelock_Governor.sol:Timelock_Governor",
            "label": "_checkpoints",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(Checkpoint224)6990_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getVotes(address,uint256)": {
        "notice": "module:reputation"
      },
      "getVotesWithParams(address,uint256,bytes)": {
        "notice": "module:reputation"
      },
      "hashProposal(address[],uint256[],bytes[],bytes32)": {
        "notice": "module:core"
      },
      "name()": {
        "notice": "module:core"
      },
      "proposalDeadline(uint256)": {
        "notice": "module:core"
      },
      "proposalSnapshot(uint256)": {
        "notice": "module:core"
      },
      "version()": {
        "notice": "module:core"
      }
    },
    "version": 1
  },
  "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"contracts/ERC20/ERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../security/Pausable.sol\\\";\\n\\ncontract ERC20 is Context, IERC20, IERC20Metadata, Pausable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {\\n         require(!paused(), \\\"ERC20Pausable: token transfer while paused\\\");\\n    }\\n\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\"\n    },\n    \"contracts/ERC20/extensions/ERC20Permit.sol\": {\n      \"content\": \"\\n// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\nimport \\\"./IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../utils/cryptography/EIP712.sol\\\";\\nimport \\\"../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /**\\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\\n     * to reserve a slot.\\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\"\n    },\n    \"contracts/ERC20/extensions/ERC20Votes.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\n\\nimport './ERC20Permit.sol';\\nimport \\\"../../interfaces/IERC5805.sol\\\";\\nimport \\\"../../utils/math/Math.sol\\\";\\nimport \\\"../../utils/math/SafeCast.sol\\\";\\nimport \\\"../../utils/cryptography/ECDSA.sol\\\";\\n\\n\\nabstract contract ERC20Votes is ERC20Permit, IERC5805 {\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint224 votes;\\n    }\\n\\n    bytes32 private constant _DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    mapping(address => address) private _delegates;\\n    mapping(address => Checkpoint[]) private _checkpoints;\\n    Checkpoint[] private _totalSupplyCheckpoints;\\n\\n    /**\\n     * @dev Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting).\\n     */\\n    function clock() public view virtual override returns (uint48) {\\n        return SafeCast.toUint48(block.number);\\n    }\\n\\n    /**\\n     * @dev Description of the clock\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function CLOCK_MODE() public view virtual override returns (string memory) {\\n        // Check that the clock was not modified\\n        require(clock() == block.number);\\n        return \\\"mode=blocknumber&from=default\\\";\\n    }\\n\\n    /**\\n     * @dev Get the `pos`-th checkpoint for `account`.\\n     */\\n    function checkpoints(address account, uint32 pos) public view virtual returns (Checkpoint memory) {\\n        return _checkpoints[account][pos];\\n    }\\n\\n    /**\\n     * @dev Get number of checkpoints for `account`.\\n     */\\n    function numCheckpoints(address account) public view virtual returns (uint32) {\\n        return SafeCast.toUint32(_checkpoints[account].length);\\n    }\\n\\n    /**\\n     * @dev Get the address `account` is currently delegating to.\\n     */\\n    function delegates(address account) public view virtual override returns (address) {\\n        return _delegates[account];\\n    }\\n\\n    /**\\n     * @dev Gets the current votes balance for `account`\\n     */\\n    function getVotes(address account) public view virtual override returns (uint256) {\\n        uint256 pos = _checkpoints[account].length;\\n        unchecked {\\n            return pos == 0 ? 0 : _checkpoints[account][pos - 1].votes;\\n        }\\n    }\\n\\n    /**\\n     * @dev Retrieve the number of votes for `account` at the end of `timepoint`.\\n     *\\n     * Requirements:\\n     *\\n     * - `timepoint` must be in the past\\n     */\\n    function getPastVotes(address account, uint256 timepoint) public view virtual override returns (uint256) {\\n        require(timepoint < clock(), \\\"ERC20Votes: future lookup\\\");\\n        return _checkpointsLookup(_checkpoints[account], timepoint);\\n    }\\n\\n    /**\\n     * @dev Retrieve the `totalSupply` at the end of `timepoint`. Note, this value is the sum of all balances.\\n     * It is NOT the sum of all the delegated votes!\\n     *\\n     * Requirements:\\n     *\\n     * - `timepoint` must be in the past\\n     */\\n    function getPastTotalSupply(uint256 timepoint) public view virtual override returns (uint256) {\\n        require(timepoint < clock(), \\\"ERC20Votes: future lookup\\\");\\n        return _checkpointsLookup(_totalSupplyCheckpoints, timepoint);\\n    }\\n\\n    /**\\n     * @dev Lookup a value in a list of (sorted) checkpoints.\\n     */\\n    function _checkpointsLookup(Checkpoint[] storage ckpts, uint256 timepoint) private view returns (uint256) {\\n        // We run a binary search to look for the earliest checkpoint taken after `timepoint`.\\n        //\\n        // Initially we check if the block is recent to narrow the search range.\\n        // During the loop, the index of the wanted checkpoint remains in the range [low-1, high).\\n        // With each iteration, either `low` or `high` is moved towards the middle of the range to maintain the invariant.\\n        // - If the middle checkpoint is after `timepoint`, we look in [low, mid)\\n        // - If the middle checkpoint is before or equal to `timepoint`, we look in [mid+1, high)\\n        // Once we reach a single value (when low == high), we've found the right checkpoint at the index high-1, if not\\n        // out of bounds (in which case we're looking too far in the past and the result is 0).\\n        // Note that if the latest checkpoint available is exactly for `timepoint`, we end up with an index that is\\n        // past the end of the array, so we technically don't find a checkpoint after `timepoint`, but it works out\\n        // the same.\\n        uint256 length = ckpts.length;\\n\\n        uint256 low = 0;\\n        uint256 high = length;\\n\\n        if (length > 5) {\\n            uint256 mid = length - Math.sqrt(length);\\n            if (_unsafeAccess(ckpts, mid).fromBlock > timepoint) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(ckpts, mid).fromBlock > timepoint) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        unchecked {\\n            return high == 0 ? 0 : _unsafeAccess(ckpts, high - 1).votes;\\n        }\\n    }\\n\\n    /**\\n     * @dev Delegate votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) public virtual override {\\n        _delegate(_msgSender(), delegatee);\\n    }\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= expiry, \\\"ERC20Votes: signature expired\\\");\\n        address signer = ECDSA.recover(\\n            _hashTypedDataV4(keccak256(abi.encode(_DELEGATION_TYPEHASH, delegatee, nonce, expiry))),\\n            v,\\n            r,\\n            s\\n        );\\n        require(nonce == _useNonce(signer), \\\"ERC20Votes: invalid nonce\\\");\\n        _delegate(signer, delegatee);\\n    }\\n\\n    /**\\n     * @dev Maximum token supply. Defaults to `type(uint224).max` (2^224^ - 1).\\n     */\\n    function _maxSupply() internal view virtual returns (uint224) {\\n        return type(uint224).max;\\n    }\\n\\n    /**\\n     * @dev Snapshots the totalSupply after it has been increased.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual override {\\n        super._mint(account, amount);\\n        require(totalSupply() <= _maxSupply(), \\\"ERC20Votes: total supply risks overflowing votes\\\");\\n\\n        _writeCheckpoint(_totalSupplyCheckpoints, _add, amount);\\n    }\\n\\n    /**\\n     * @dev Snapshots the totalSupply after it has been decreased.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual override {\\n        super._burn(account, amount);\\n\\n        _writeCheckpoint(_totalSupplyCheckpoints, _subtract, amount);\\n    }\\n\\n    /**\\n     * @dev Move voting power when tokens are transferred.\\n     *\\n     * Emits a {IVotes-DelegateVotesChanged} event.\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\n        super._afterTokenTransfer(from, to, amount);\\n\\n        _moveVotingPower(delegates(from), delegates(to), amount);\\n    }\\n\\n    /**\\n     * @dev Change delegation for `delegator` to `delegatee`.\\n     *\\n     * Emits events {IVotes-DelegateChanged} and {IVotes-DelegateVotesChanged}.\\n     */\\n    function _delegate(address delegator, address delegatee) internal virtual {\\n        address currentDelegate = delegates(delegator);\\n        uint256 delegatorBalance = balanceOf(delegator);\\n        _delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveVotingPower(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _moveVotingPower(address src, address dst, uint256 amount) private {\\n        if (src != dst && amount > 0) {\\n            if (src != address(0)) {\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[src], _subtract, amount);\\n                emit DelegateVotesChanged(src, oldWeight, newWeight);\\n            }\\n\\n            if (dst != address(0)) {\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[dst], _add, amount);\\n                emit DelegateVotesChanged(dst, oldWeight, newWeight);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        Checkpoint[] storage ckpts,\\n        function(uint256, uint256) view returns (uint256) op,\\n        uint256 delta\\n    ) private returns (uint256 oldWeight, uint256 newWeight) {\\n        uint256 pos = ckpts.length;\\n\\n        unchecked {\\n            Checkpoint memory oldCkpt = pos == 0 ? Checkpoint(0, 0) : _unsafeAccess(ckpts, pos - 1);\\n\\n            oldWeight = oldCkpt.votes;\\n            newWeight = op(oldWeight, delta);\\n\\n            if (pos > 0 && oldCkpt.fromBlock == clock()) {\\n                _unsafeAccess(ckpts, pos - 1).votes = SafeCast.toUint224(newWeight);\\n            } else {\\n                ckpts.push(Checkpoint({fromBlock: SafeCast.toUint32(clock()), votes: SafeCast.toUint224(newWeight)}));\\n            }\\n        }\\n    }\\n\\n    function _add(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    function _subtract(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(Checkpoint[] storage ckpts, uint256 pos) private pure returns (Checkpoint storage result) {\\n        assembly {\\n            mstore(0, ckpts.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n}\"\n    },\n    \"contracts/ERC20/extensions/IERC20Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\ninterface IERC20Metadata is IERC20 {\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n    \\n}\"\n    },\n    \"contracts/ERC20/extensions/IERC20Permit.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\"\n    },\n    \"contracts/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\ninterface IERC20 {\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\"\n    },\n    \"contracts/governance/extensions/GovernorCountingSimple.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (governance/extensions/GovernorCountingSimple.sol)\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../Governor.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} for simple, 3 options, vote counting.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract GovernorCountingSimple is Governor {\\n    /**\\n     * @dev Supported vote types. Matches Governor Bravo ordering.\\n     */\\n    enum VoteType {\\n        Against,\\n        For,\\n        Abstain\\n    }\\n\\n    struct ProposalVote {\\n        uint256 againstVotes;\\n        uint256 forVotes;\\n        uint256 abstainVotes;\\n        mapping(address => bool) hasVoted;\\n    }\\n\\n    mapping(uint256 => ProposalVote) private _proposalVotes;\\n\\n    /**\\n     * @dev See {IGovernor-COUNTING_MODE}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function COUNTING_MODE() public pure virtual override returns (string memory) {\\n        return \\\"support=bravo&quorum=for,abstain\\\";\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-hasVoted}.\\n     */\\n    function hasVoted(uint256 proposalId, address account) public view virtual override returns (bool) {\\n        return _proposalVotes[proposalId].hasVoted[account];\\n    }\\n\\n    /**\\n     * @dev Accessor to the internal vote counts.\\n     */\\n    function proposalVotes(\\n        uint256 proposalId\\n    ) public view virtual returns (uint256 againstVotes, uint256 forVotes, uint256 abstainVotes) {\\n        ProposalVote storage proposalVote = _proposalVotes[proposalId];\\n        return (proposalVote.againstVotes, proposalVote.forVotes, proposalVote.abstainVotes);\\n    }\\n\\n    /**\\n     * @dev See {Governor-_quorumReached}.\\n     */\\n    function _quorumReached(uint256 proposalId) internal view virtual override returns (bool) {\\n        ProposalVote storage proposalVote = _proposalVotes[proposalId];\\n\\n        return quorum(proposalSnapshot(proposalId)) <= proposalVote.forVotes + proposalVote.abstainVotes;\\n    }\\n\\n    /**\\n     * @dev See {Governor-_voteSucceeded}. In this module, the forVotes must be strictly over the againstVotes.\\n     */\\n    function _voteSucceeded(uint256 proposalId) internal view virtual override returns (bool) {\\n        ProposalVote storage proposalVote = _proposalVotes[proposalId];\\n\\n        return proposalVote.forVotes > proposalVote.againstVotes;\\n    }\\n\\n    /**\\n     * @dev See {Governor-_countVote}. In this module, the support follows the `VoteType` enum (from Governor Bravo).\\n     */\\n    function _countVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        uint256 weight,\\n        bytes memory // params\\n    ) internal virtual override {\\n        ProposalVote storage proposalVote = _proposalVotes[proposalId];\\n\\n        require(!proposalVote.hasVoted[account], \\\"GovernorVotingSimple: vote already cast\\\");\\n        proposalVote.hasVoted[account] = true;\\n\\n        if (support == uint8(VoteType.Against)) {\\n            proposalVote.againstVotes += weight;\\n        } else if (support == uint8(VoteType.For)) {\\n            proposalVote.forVotes += weight;\\n        } else if (support == uint8(VoteType.Abstain)) {\\n            proposalVote.abstainVotes += weight;\\n        } else {\\n            revert(\\\"GovernorVotingSimple: invalid value for enum VoteType\\\");\\n        }\\n    }\\n}\"\n    },\n    \"contracts/governance/extensions/GovernorTimelockControl.sol\": {\n      \"content\": \"\\n\\n// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (governance/extensions/GovernorTimelockControl.sol)\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./IGovernorTimelock.sol\\\";\\nimport \\\"../Governor.sol\\\";\\nimport \\\"../TimelockController.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} that binds the execution process to an instance of {TimelockController}. This adds a\\n * delay, enforced by the {TimelockController} to all successful proposal (in addition to the voting duration). The\\n * {Governor} needs the proposer (and ideally the executor) roles for the {Governor} to work properly.\\n *\\n * Using this model means the proposal will be operated by the {TimelockController} and not by the {Governor}. Thus,\\n * the assets and permissions must be attached to the {TimelockController}. Any asset sent to the {Governor} will be\\n * inaccessible.\\n *\\n * WARNING: Setting up the TimelockController to have additional proposers besides the governor is very risky, as it\\n * grants them powers that they must be trusted or known not to use: 1) {onlyGovernance} functions like {relay} are\\n * available to them through the timelock, and 2) approved governance proposals can be blocked by them, effectively\\n * executing a Denial of Service attack. This risk will be mitigated in a future release.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract GovernorTimelockControl is IGovernorTimelock, Governor {\\n    TimelockController private _timelock;\\n    mapping(uint256 => bytes32) private _timelockIds;\\n\\n    /**\\n     * @dev Emitted when the timelock controller used for proposal execution is modified.\\n     */\\n    event TimelockChange(address oldTimelock, address newTimelock);\\n\\n    /**\\n     * @dev Set the timelock.\\n     */\\n    constructor(TimelockController timelockAddress) {\\n        _updateTimelock(timelockAddress);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, Governor) returns (bool) {\\n        return interfaceId == type(IGovernorTimelock).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Overridden version of the {Governor-state} function with added support for the `Queued` status.\\n     */\\n    function state(uint256 proposalId) public view virtual override(IGovernor, Governor) returns (ProposalState) {\\n        ProposalState status = super.state(proposalId);\\n\\n        if (status != ProposalState.Succeeded) {\\n            return status;\\n        }\\n\\n        // core tracks execution, so we just have to check if successful proposal have been queued.\\n        bytes32 queueid = _timelockIds[proposalId];\\n        if (queueid == bytes32(0)) {\\n            return status;\\n        } else if (_timelock.isOperationDone(queueid)) {\\n            return ProposalState.Executed;\\n        } else if (_timelock.isOperationPending(queueid)) {\\n            return ProposalState.Queued;\\n        } else {\\n            return ProposalState.Canceled;\\n        }\\n    }\\n\\n    /**\\n     * @dev Public accessor to check the address of the timelock\\n     */\\n    function timelock() public view virtual override returns (address) {\\n        return address(_timelock);\\n    }\\n\\n    /**\\n     * @dev Public accessor to check the eta of a queued proposal\\n     */\\n    function proposalEta(uint256 proposalId) public view virtual override returns (uint256) {\\n        uint256 eta = _timelock.getTimestamp(_timelockIds[proposalId]);\\n        return eta == 1 ? 0 : eta; // _DONE_TIMESTAMP (1) should be replaced with a 0 value\\n    }\\n\\n    /**\\n     * @dev Function to queue a proposal to the timelock.\\n     */\\n    function queue(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public virtual override returns (uint256) {\\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\\n\\n        require(state(proposalId) == ProposalState.Succeeded, \\\"Governor: proposal not successful\\\");\\n\\n        uint256 delay = _timelock.getMinDelay();\\n        _timelockIds[proposalId] = _timelock.hashOperationBatch(targets, values, calldatas, 0, descriptionHash);\\n        _timelock.scheduleBatch(targets, values, calldatas, 0, descriptionHash, delay);\\n\\n        emit ProposalQueued(proposalId, block.timestamp + delay);\\n\\n        return proposalId;\\n    }\\n\\n    /**\\n     * @dev Overridden execute function that run the already queued proposal through the timelock.\\n     */\\n    function _execute(\\n        uint256, /* proposalId */\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) internal virtual override {\\n        _timelock.executeBatch{value: msg.value}(targets, values, calldatas, 0, descriptionHash);\\n    }\\n\\n    /**\\n     * @dev Overridden version of the {Governor-_cancel} function to cancel the timelocked proposal if it as already\\n     * been queued.\\n     */\\n    // This function can reenter through the external call to the timelock, but we assume the timelock is trusted and\\n    // well behaved (according to TimelockController) and this will not happen.\\n    // slither-disable-next-line reentrancy-no-eth\\n    function _cancel(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) internal virtual override returns (uint256) {\\n        uint256 proposalId = super._cancel(targets, values, calldatas, descriptionHash);\\n\\n        if (_timelockIds[proposalId] != 0) {\\n            _timelock.cancel(_timelockIds[proposalId]);\\n            delete _timelockIds[proposalId];\\n        }\\n\\n        return proposalId;\\n    }\\n\\n    /**\\n     * @dev Address through which the governor executes action. In this case, the timelock.\\n     */\\n    function _executor() internal view virtual override returns (address) {\\n        return address(_timelock);\\n    }\\n\\n    /**\\n     * @dev Public endpoint to update the underlying timelock instance. Restricted to the timelock itself, so updates\\n     * must be proposed, scheduled, and executed through governance proposals.\\n     *\\n     * CAUTION: It is not recommended to change the timelock while there are other queued governance proposals.\\n     */\\n    function updateTimelock(TimelockController newTimelock) external virtual onlyGovernance {\\n        _updateTimelock(newTimelock);\\n    }\\n\\n    function _updateTimelock(TimelockController newTimelock) private {\\n        emit TimelockChange(address(_timelock), address(newTimelock));\\n        _timelock = newTimelock;\\n    }\\n}\"\n    },\n    \"contracts/governance/extensions/GovernorVotes.sol\": {\n      \"content\": \"\\n\\n// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (governance/extensions/GovernorVotes.sol)\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../Governor.sol\\\";\\nimport \\\"../utils/IVotes.sol\\\";\\nimport '../../interfaces/IERC6372.sol';\\nimport '../../interfaces/IERC5805.sol';\\n\\nabstract contract GovernorVotes is Governor {\\n    IERC5805 public immutable token;\\n\\n    constructor(IVotes tokenAddress) {\\n        token = IERC5805(address(tokenAddress));\\n    }\\n\\n    /**\\n     * @dev Clock (as specified in EIP-6372) is set to match the token's clock. Fallback to block numbers if the token\\n     * does not implement EIP-6372.\\n     */\\n    function clock() public view virtual override returns (uint48) {\\n        try token.clock() returns (uint48 timepoint) {\\n            return timepoint;\\n        } catch {\\n            return SafeCast.toUint48(block.number);\\n        }\\n    }\\n\\n    /**\\n     * @dev Machine-readable description of the clock as specified in EIP-6372.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function CLOCK_MODE() public view virtual override returns (string memory) {\\n        try token.CLOCK_MODE() returns (string memory clockmode) {\\n            return clockmode;\\n        } catch {\\n            return \\\"mode=blocknumber&from=default\\\";\\n        }\\n    }\\n\\n    /**\\n     * Read the voting weight from the token's built in snapshot mechanism (see {Governor-_getVotes}).\\n     */\\n    function _getVotes(\\n        address account,\\n        uint256 timepoint,\\n        bytes memory /*params*/\\n    ) internal view virtual override returns (uint256) {\\n        return token.getPastVotes(account, timepoint);\\n    }\\n}\"\n    },\n    \"contracts/governance/extensions/GovernorVotesQuorumFraction.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (governance/extensions/GovernorVotesQuorumFraction.sol)\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./GovernorVotes.sol\\\";\\nimport \\\"../../utils/Checkpoints.sol\\\";\\nimport \\\"../../utils/math/SafeCast.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} for voting weight extraction from an {ERC20Votes} token and a quorum expressed as a\\n * fraction of the total supply.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract GovernorVotesQuorumFraction is GovernorVotes {\\n    using SafeCast for *;\\n    using Checkpoints for Checkpoints.Trace224;\\n\\n    uint256 private _quorumNumerator; // DEPRECATED in favor of _quorumNumeratorHistory\\n\\n    /// @custom:oz-retyped-from Checkpoints.History\\n    Checkpoints.Trace224 private _quorumNumeratorHistory;\\n\\n    event QuorumNumeratorUpdated(uint256 oldQuorumNumerator, uint256 newQuorumNumerator);\\n\\n    /**\\n     * @dev Initialize quorum as a fraction of the token's total supply.\\n     *\\n     * The fraction is specified as `numerator / denominator`. By default the denominator is 100, so quorum is\\n     * specified as a percent: a numerator of 10 corresponds to quorum being 10% of total supply. The denominator can be\\n     * customized by overriding {quorumDenominator}.\\n     */\\n    constructor(uint256 quorumNumeratorValue) {\\n        _updateQuorumNumerator(quorumNumeratorValue);\\n    }\\n\\n    /**\\n     * @dev Returns the current quorum numerator. See {quorumDenominator}.\\n     */\\n    function quorumNumerator() public view virtual returns (uint256) {\\n        return _quorumNumeratorHistory._checkpoints.length == 0 ? _quorumNumerator : _quorumNumeratorHistory.latest();\\n    }\\n\\n    /**\\n     * @dev Returns the quorum numerator at a specific timepoint. See {quorumDenominator}.\\n     */\\n    function quorumNumerator(uint256 timepoint) public view virtual returns (uint256) {\\n        // If history is empty, fallback to old storage\\n        uint256 length = _quorumNumeratorHistory._checkpoints.length;\\n        if (length == 0) {\\n            return _quorumNumerator;\\n        }\\n\\n        // Optimistic search, check the latest checkpoint\\n        Checkpoints.Checkpoint224 memory latest = _quorumNumeratorHistory._checkpoints[length - 1];\\n        if (latest._key <= timepoint) {\\n            return latest._value;\\n        }\\n\\n        // Otherwise, do the binary search\\n        return _quorumNumeratorHistory.upperLookupRecent(timepoint.toUint32());\\n    }\\n\\n    /**\\n     * @dev Returns the quorum denominator. Defaults to 100, but may be overridden.\\n     */\\n    function quorumDenominator() public view virtual returns (uint256) {\\n        return 100;\\n    }\\n\\n    /**\\n     * @dev Returns the quorum for a timepoint, in terms of number of votes: `supply * numerator / denominator`.\\n     */\\n    function quorum(uint256 timepoint) public view virtual override returns (uint256) {\\n        return (token.getPastTotalSupply(timepoint) * quorumNumerator(timepoint)) / quorumDenominator();\\n    }\\n\\n    /**\\n     * @dev Changes the quorum numerator.\\n     *\\n     * Emits a {QuorumNumeratorUpdated} event.\\n     *\\n     * Requirements:\\n     *\\n     * - Must be called through a governance proposal.\\n     * - New numerator must be smaller or equal to the denominator.\\n     */\\n    function updateQuorumNumerator(uint256 newQuorumNumerator) external virtual onlyGovernance {\\n        _updateQuorumNumerator(newQuorumNumerator);\\n    }\\n\\n    /**\\n     * @dev Changes the quorum numerator.\\n     *\\n     * Emits a {QuorumNumeratorUpdated} event.\\n     *\\n     * Requirements:\\n     *\\n     * - New numerator must be smaller or equal to the denominator.\\n     */\\n    function _updateQuorumNumerator(uint256 newQuorumNumerator) internal virtual {\\n        require(\\n            newQuorumNumerator <= quorumDenominator(),\\n            \\\"GovernorVotesQuorumFraction: quorumNumerator over quorumDenominator\\\"\\n        );\\n\\n        uint256 oldQuorumNumerator = quorumNumerator();\\n\\n        // Make sure we keep track of the original numerator in contracts upgraded from a version without checkpoints.\\n        if (oldQuorumNumerator != 0 && _quorumNumeratorHistory._checkpoints.length == 0) {\\n            _quorumNumeratorHistory._checkpoints.push(\\n                Checkpoints.Checkpoint224({_key: 0, _value: oldQuorumNumerator.toUint224()})\\n            );\\n        }\\n\\n        // Set new quorum for future proposals\\n        _quorumNumeratorHistory.push(clock().toUint32(), newQuorumNumerator.toUint224());\\n\\n        emit QuorumNumeratorUpdated(oldQuorumNumerator, newQuorumNumerator);\\n    }\\n}\"\n    },\n    \"contracts/governance/extensions/IGovernorTimelock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (governance/extensions/IGovernorTimelock.sol)\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../IGovernor.sol\\\";\\n\\n/**\\n * @dev Extension of the {IGovernor} for timelock supporting modules.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract IGovernorTimelock is IGovernor {\\n    event ProposalQueued(uint256 proposalId, uint256 eta);\\n\\n    function timelock() public view virtual returns (address);\\n\\n    function proposalEta(uint256 proposalId) public view virtual returns (uint256);\\n\\n    function queue(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public virtual returns (uint256 proposalId);\\n}\"\n    },\n    \"contracts/governance/Governor.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\n\\nimport \\\"../utils/cryptography/EIP712.sol\\\";\\nimport \\\"../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../utils/math/SafeCast.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\nimport \\\"../utils/structs/DoubleEndedQueue.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"./IGovernor.sol\\\";\\n\\n\\nabstract contract Governor  is Context, ERC165, IGovernor, EIP712 {\\n    using DoubleEndedQueue for DoubleEndedQueue.Bytes32Deque;\\n    using SafeCast for uint256;\\n\\n    bytes32 public constant BALLOT_TYPEHASH = keccak256(\\\"Ballot(uint256 proposalId,uint8 support)\\\");\\n    bytes32 public constant EXTENDED_BALLOT_TYPEHASH = keccak256(\\\"ExtendedBallot(uint256 proposalId,uint8 support, string reason, bytes params)\\\");\\n\\n    struct ProposalCore {\\n        uint64 voteStart;\\n        address proposer;\\n        bytes4 __gap_unused0;\\n        uint64 voteEnd;\\n        bytes24 __gap_unused1;\\n        bool executed;\\n        bool canceled;\\n    }\\n\\n    string private _name;\\n\\n    mapping(uint256 => ProposalCore) private _proposals;\\n    DoubleEndedQueue.Bytes32Deque private _governanceCall;\\n\\n    modifier onlyGovernance() {\\n        require(_msgSender() == _executor(), \\\"Governor: onlyGovernance\\\");\\n        if(_executor() != address(this)) {\\n            bytes32 msgDataHash = keccak256(_msgData());\\n            while(_governanceCall.popFront() != msgDataHash) {}\\n        }\\n        _;\\n    }\\n\\n    constructor(string memory name_) EIP712(name_, version()) {\\n        _name = name_;\\n    }\\n\\n    receive() external payable virtual {\\n        require(_executor() == address(this));\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n       return\\n            interfaceId ==\\n            (type(IGovernor).interfaceId ^\\n                type(IERC6372).interfaceId ^\\n                this.cancel.selector ^\\n                this.castVoteWithReasonAndParams.selector ^\\n                this.getVotesWithParams.selector) ||\\n            interfaceId == (type(IGovernor).interfaceId ^ type(IERC6372).interfaceId ^ this.cancel.selector) ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function version() public view virtual override returns (string memory) {\\n        return \\\"1\\\";\\n    }\\n\\n    function hashProposal(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public pure virtual override returns (uint256) {\\n        return uint256(keccak256(abi.encode(targets, values, calldatas, descriptionHash)));\\n    }\\n\\n\\n    function state(uint256 proposalId) public view virtual override returns (ProposalState) {\\n        ProposalCore storage proposal = _proposals[proposalId];\\n\\n        if(proposal.executed) {\\n            return ProposalState.Executed;\\n        }\\n\\n        if(proposal.canceled) {\\n            return ProposalState.Canceled;\\n        }\\n\\n        uint256 snapshot = proposalSnapshot(proposalId);\\n\\n        if(snapshot == 0) {\\n            revert(\\\"Governor: unknown proposal id\\\");\\n        }\\n\\n        uint256 currentTimepoint = clock();\\n\\n        if(snapshot >= currentTimepoint) {\\n            return ProposalState.Pending;\\n        }\\n\\n        uint256 deadline = proposalDeadline(proposalId);\\n\\n        if(deadline >= currentTimepoint) {\\n            return ProposalState.Active;\\n        }\\n\\n        if(_quorumReached(proposalId) && _voteSucceeded(proposalId)) {\\n            return ProposalState.Succeeded;\\n        } else {\\n            return ProposalState.Defeated;\\n        }\\n    } \\n\\n    function proposalThreshold() public view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    function proposalSnapshot(uint256 proposalId) public view virtual override returns (uint256) {\\n        return _proposals[proposalId].voteStart;\\n    }\\n\\n      function proposalDeadline(uint256 proposalId) public view virtual override returns (uint256) {\\n        return _proposals[proposalId].voteEnd;\\n    }\\n\\n    function _quorumReached(uint256 proposalId) internal view virtual returns (bool);\\n\\n      function _voteSucceeded(uint256 proposalId) internal view virtual returns (bool);\\n\\n    function _getVotes(address account,uint256 timepoint, bytes memory params) internal view virtual returns (uint256);\\n\\n    function _countVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 suppport,\\n        uint256 weight,\\n        bytes memory params\\n    ) internal virtual;\\n\\n    function _defaultParams() internal view virtual returns (bytes memory) {\\n        return \\\"\\\";\\n    }\\n\\n    function propose(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) public virtual override returns (uint256) {\\n        address proposer = _msgSender();\\n        uint256 currentTimepoint = clock();\\n\\n        require(\\n            getVotes(proposer, currentTimepoint - 1) >= proposalThreshold(),\\n            \\\"Governor: proposer votes below proposal threshold\\\"\\n        );\\n\\n        uint256 proposalId = hashProposal(targets, values, calldatas, keccak256(bytes(description)));\\n\\n        require(targets.length == values.length, \\\"Governor: invalid proposal length\\\");\\n        require(targets.length == calldatas.length,\\\"Governor: invalid proposal length\\\");\\n        require(targets.length > 0, \\\"Governor: empty proposal\\\");\\n        require(_proposals[proposalId].voteStart == 0, \\\"Governor: proposal already exists\\\");\\n\\n        uint256 snapshot = currentTimepoint + votingDelay();\\n        uint256 deadline = snapshot + votingPeriod();\\n\\n      _proposals[proposalId] = ProposalCore({\\n            proposer: proposer,\\n            voteStart: snapshot.toUint64(),\\n            voteEnd: deadline.toUint64(),\\n            executed: false,\\n            canceled: false,\\n            __gap_unused0: 0,\\n            __gap_unused1: 0\\n        });\\n\\n        emit ProposalCreated(\\n            proposalId,\\n            proposer,\\n            targets,\\n            values,\\n            new string[](targets.length),\\n            calldatas,\\n            snapshot,\\n            deadline,\\n            description\\n        );\\n        return proposalId;\\n    }\\n\\n    function execute(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public payable virtual override returns (uint256) {\\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\\n\\n        ProposalState status = state(proposalId);\\n        require(\\n            status == ProposalState.Succeeded || status == ProposalState.Queued,\\n            \\\"Governor: proposal not successful\\\"\\n        );\\n        _proposals[proposalId].executed = true;\\n\\n        emit ProposalExecuted(proposalId);\\n\\n        _beforeExecute(proposalId, targets, values, calldatas, descriptionHash);\\n        _execute(proposalId, targets, values, calldatas, descriptionHash);\\n        _afterExecute(proposalId, targets, values, calldatas, descriptionHash);\\n\\n        return proposalId;\\n    }\\n\\nfunction cancel(\\n    address[] memory targets,\\n    uint256[] memory values,\\n    bytes[] memory calldatas,\\n    bytes32 descriptionHash\\n) public virtual override returns (uint256) {\\n    uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\\n    require(state(proposalId) == ProposalState.Pending, \\\"Governor: too late to cancel\\\");\\n    require(_msgSender() == _proposals[proposalId].proposer,\\\"Governor: only proposer can cancel\\\");\\n    return _cancel(targets, values, calldatas, descriptionHash);\\n\\n}\\n\\n   function _execute(\\n        uint256 ,\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 \\n    ) internal virtual {\\n        string memory errorMessage = \\\"Governor: call reverted without message\\\";\\n        for (uint256 i = 0; i < targets.length; ++i) {\\n            (bool success, bytes memory returndata) = targets[i].call{value: values[i]}(calldatas[i]);\\n            Address.verifyCallResult(success, returndata, errorMessage);\\n        }\\n    }\\n\\nfunction _beforeExecute(\\n    uint256,\\n    address[] memory targets,\\n    uint256[] memory,\\n    bytes[] memory calldatas,\\n    bytes32\\n) internal virtual {\\n      if (_executor() != address(this)) {\\n            for (uint256 i = 0; i < targets.length; ++i) {\\n                if (targets[i] == address(this)) {\\n                    _governanceCall.pushBack(keccak256(calldatas[i]));\\n                }\\n            }\\n        }\\n}\\n\\n function _afterExecute(\\n        uint256,\\n        address[] memory,\\n        uint256[] memory,\\n        bytes[] memory,\\n        bytes32 \\n    ) internal virtual {\\n        if (_executor() != address(this)) {\\n            if (!_governanceCall.empty()) {\\n                _governanceCall.clear();\\n            }\\n        }\\n    }\\n\\n     function _cancel(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) internal virtual returns (uint256) {\\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\\n\\n        ProposalState status = state(proposalId);\\n\\n        require(\\n            status != ProposalState.Canceled && status != ProposalState.Expired && status != ProposalState.Executed,\\n            \\\"Governor: proposal not active\\\"\\n        );\\n        _proposals[proposalId].canceled = true;\\n\\n        emit ProposalCanceled(proposalId);\\n\\n        return proposalId;\\n    }\\n\\n  function getVotes(address account, uint256 timepoint) public view virtual override returns (uint256) {\\n        return _getVotes(account, timepoint, _defaultParams());\\n    }\\n\\n      function getVotesWithParams(\\n        address account,\\n        uint256 timepoint,\\n        bytes memory params\\n    ) public view virtual override returns (uint256) {\\n        return _getVotes(account, timepoint, params);\\n    }\\n\\n      function castVote(uint256 proposalId, uint8 support) public virtual override returns (uint256) {\\n        address voter = _msgSender();\\n        return _castVote(proposalId, voter, support, \\\"\\\");\\n    }\\n\\n     function castVoteWithReason(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason\\n    ) public virtual override returns (uint256) {\\n        address voter = _msgSender();\\n        return _castVote(proposalId, voter, support, reason);\\n    }\\n\\n\\n\\n      function castVoteWithReasonAndParams(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason,\\n        bytes memory params\\n    ) public virtual override returns (uint256) {\\n        address voter = _msgSender();\\n        return _castVote(proposalId, voter, support, reason, params);\\n    }\\n\\n\\n        function castVoteBySig(\\n        uint256 proposalId,\\n        uint8 support,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override returns (uint256) {\\n        address voter = ECDSA.recover(\\n            _hashTypedDataV4(keccak256(abi.encode(BALLOT_TYPEHASH, proposalId, support))),\\n            v,\\n            r,\\n            s\\n        );\\n        return _castVote(proposalId, voter, support, \\\"\\\");\\n    }\\n\\n\\n        function castVoteWithReasonAndParamsBySig(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason,\\n        bytes memory params,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override returns (uint256) {\\n        address voter = ECDSA.recover(\\n            _hashTypedDataV4(\\n                keccak256(\\n                    abi.encode(\\n                        EXTENDED_BALLOT_TYPEHASH,\\n                        proposalId,\\n                        support,\\n                        keccak256(bytes(reason)),\\n                        keccak256(params)\\n                    )\\n                )\\n            ),\\n            v,\\n            r,\\n            s\\n        );\\n\\n        return _castVote(proposalId, voter, support, reason, params);\\n    }\\n\\n  function _castVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        string memory reason\\n    ) internal virtual returns (uint256) {\\n        return _castVote(proposalId, account, support, reason, _defaultParams());\\n    }\\n\\n    function _castVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        string memory reason,\\n        bytes memory params\\n    ) internal virtual returns (uint256) {\\n        ProposalCore storage proposal = _proposals[proposalId];\\n        require(state(proposalId) == ProposalState.Active, \\\"Governor: vote not currently active\\\");\\n\\n        uint256 weight = _getVotes(account, proposal.voteStart, params);\\n        _countVote(proposalId, account, support, weight, params);\\n\\n        if (params.length == 0) {\\n            emit VoteCast(account, proposalId, support, weight, reason);\\n        } else {\\n            emit VoteCastWithParams(account, proposalId, support, weight, reason, params);\\n        }\\n\\n        return weight;\\n    }\\n\\n\\n function relay(address target, uint256 value, bytes calldata data) external payable virtual onlyGovernance {\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        Address.verifyCallResult(success, returndata, \\\"Governor: relay reverted without message\\\");\\n    }\\n\\n     function _executor() internal view virtual returns (address) {\\n        return address(this);\\n    }\\n    \\n}\"\n    },\n    \"contracts/governance/GovernorSettings.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Governor.sol\\\";\\n\\nabstract contract GovernorSettings is Governor {\\n    uint256 private _votingDelay;\\n    uint256 private _votingPeriod;\\n    uint256 private _proposalThreshold;\\n\\n    event VotingDelaySet(uint256 oldVotingDelay, uint256 newVotingDelay);\\n    event VotingPeriodSet(uint256 oldVotingPeriod, uint256 newVotingPeriod);\\n    event ProposalThresholdSet(uint256 oldProposalThreshold, uint256 newProposalThreshold);\\n\\n    constructor(\\n        uint256 initialVotingDelay,\\n        uint256 initialVotingPeriod,\\n        uint256 initialProposalThreshold\\n    ) {\\n        _setVotingDelay(initialVotingDelay);\\n        _setVotingPeriod(initialVotingPeriod);\\n        _setProposalThreshold(initialProposalThreshold);\\n    }\\n\\n    function votingDelay() public view virtual override returns (uint256) {\\n        return _votingDelay;\\n    }\\n\\n    function votingPeriod() public view virtual override returns (uint256) {\\n        return _votingPeriod;\\n    }\\n\\n    function proposalThreshold() public view virtual override returns (uint256) {\\n        return _proposalThreshold;\\n    }\\n\\n    function setVotingDelay(uint256 newVotingDelay) public virtual onlyGovernance {\\n        _setVotingDelay(newVotingDelay);\\n    }\\n\\n    function setVotingPeriod(uint256 newVotingPeriod) public virtual onlyGovernance {\\n        _setVotingPeriod(newVotingPeriod);\\n    }\\n\\n    function setProposalThreshold(uint256 newProposalThreshold) public virtual onlyGovernance {\\n        _setProposalThreshold(newProposalThreshold);\\n    }\\n\\n    function _setVotingDelay(uint256 newVotingDelay) internal virtual {\\n        emit VotingDelaySet(_votingDelay, newVotingDelay);\\n        _votingDelay = newVotingDelay;\\n    }\\n\\n    function _setVotingPeriod(uint256 newVotingPeriod) internal virtual {\\n        require(newVotingPeriod > 0, \\\"GovernorSettings: voting period too low\\\");\\n        emit VotingPeriodSet(_votingPeriod, newVotingPeriod);\\n        _votingPeriod = newVotingPeriod;\\n    }\\n\\n    function _setProposalThreshold(uint256 newProposalThreshold) internal virtual {\\n        emit ProposalThresholdSet(_proposalThreshold, newProposalThreshold);\\n        _proposalThreshold = newProposalThreshold;\\n    }\\n}\"\n    },\n    \"contracts/governance/IGovernor.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\nimport \\\"../interfaces/IERC6372.sol\\\";\\n\\nabstract contract IGovernor is IERC165, IERC6372 {\\n    enum ProposalState {\\n        Pending,\\n        Active,\\n        Canceled,\\n        Defeated,\\n        Succeeded,\\n        Queued,\\n        Expired,\\n        Executed\\n    }\\n\\n    /**\\n     * @dev Emitted when a proposal is created.\\n     */\\n    event ProposalCreated(\\n        uint256 proposalId,\\n        address proposer,\\n        address[] targets,\\n        uint256[] values,\\n        string[] signatures,\\n        bytes[] calldatas,\\n        uint256 voteStart,\\n        uint256 voteEnd,\\n        string description\\n    );\\n\\n    /**\\n     * @dev Emitted when a proposal is canceled.\\n     */\\n    event ProposalCanceled(uint256 proposalId);\\n\\n    /**\\n     * @dev Emitted when a proposal is executed.\\n     */\\n    event ProposalExecuted(uint256 proposalId);\\n\\n    /**\\n     * @dev Emitted when a vote is cast without params.\\n     *\\n     * Note: `support` values should be seen as buckets. Their interpretation depends on the voting module used.\\n     */\\n    event VoteCast(address indexed voter, uint256 proposalId, uint8 support, uint256 weight, string reason);\\n\\n    /**\\n     * @dev Emitted when a vote is cast with params.\\n     *\\n     * Note: `support` values should be seen as buckets. Their interpretation depends on the voting module used.\\n     * `params` are additional encoded parameters. Their interpepretation also depends on the voting module used.\\n     */\\n    event VoteCastWithParams(\\n        address indexed voter,\\n        uint256 proposalId,\\n        uint8 support,\\n        uint256 weight,\\n        string reason,\\n        bytes params\\n    );\\n\\n    /**\\n     * @notice module:core\\n     * @dev Name of the governor instance (used in building the ERC712 domain separator).\\n     */\\n    function name() public view virtual returns (string memory);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Version of the governor instance (used in building the ERC712 domain separator). Default: \\\"1\\\"\\n     */\\n    function version() public view virtual returns (string memory);\\n\\n    /**\\n     * @notice module:core\\n     * @dev See {IERC6372}\\n     */\\n    function clock() public view virtual override returns (uint48);\\n\\n    /**\\n     * @notice module:core\\n     * @dev See EIP-6372.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function CLOCK_MODE() public view virtual override returns (string memory);\\n\\n    /**\\n     * @notice module:voting\\n     * @dev A description of the possible `support` values for {castVote} and the way these votes are counted, meant to\\n     * be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of\\n     * key-value pairs that each describe one aspect, for example `support=bravo&quorum=for,abstain`.\\n     *\\n     * There are 2 standard keys: `support` and `quorum`.\\n     *\\n     * - `support=bravo` refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in `GovernorBravo`.\\n     * - `quorum=bravo` means that only For votes are counted towards quorum.\\n     * - `quorum=for,abstain` means that both For and Abstain votes are counted towards quorum.\\n     *\\n     * If a counting module makes use of encoded `params`, it should  include this under a `params` key with a unique\\n     * name that describes the behavior. For example:\\n     *\\n     * - `params=fractional` might refer to a scheme where votes are divided fractionally between for/against/abstain.\\n     * - `params=erc721` might refer to a scheme where specific NFTs are delegated to vote.\\n     *\\n     * NOTE: The string can be decoded by the standard\\n     * https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[`URLSearchParams`]\\n     * JavaScript class.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function COUNTING_MODE() public view virtual returns (string memory);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Hashing function used to (re)build the proposal id from the proposal details..\\n     */\\n    function hashProposal(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public pure virtual returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Current state of a proposal, following Compound's convention\\n     */\\n    function state(uint256 proposalId) public view virtual returns (ProposalState);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Timepoint used to retrieve user's votes and quorum. If using block number (as per Compound's Comp), the\\n     * snapshot is performed at the end of this block. Hence, voting for this proposal starts at the beginning of the\\n     * following block.\\n     */\\n    function proposalSnapshot(uint256 proposalId) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Timepoint at which votes close. If using block number, votes close at the end of this block, so it is\\n     * possible to cast a vote during this block.\\n     */\\n    function proposalDeadline(uint256 proposalId) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Delay, between the proposal is created and the vote starts. The unit this duration is expressed in depends\\n     * on the clock (see EIP-6372) this contract uses.\\n     *\\n     * This can be increased to leave time for users to buy voting power, or delegate it, before the voting of a\\n     * proposal starts.\\n     */\\n    function votingDelay() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Delay, between the vote start and vote ends. The unit this duration is expressed in depends on the clock\\n     * (see EIP-6372) this contract uses.\\n     *\\n     * NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting\\n     * duration compared to the voting delay.\\n     */\\n    function votingPeriod() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Minimum number of cast voted required for a proposal to be successful.\\n     *\\n     * NOTE: The `timepoint` parameter corresponds to the snapshot used for counting vote. This allows to scale the\\n     * quorum depending on values such as the totalSupply of a token at this timepoint (see {ERC20Votes}).\\n     */\\n    function quorum(uint256 timepoint) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:reputation\\n     * @dev Voting power of an `account` at a specific `timepoint`.\\n     *\\n     * Note: this can be implemented in a number of ways, for example by reading the delegated balance from one (or\\n     * multiple), {ERC20Votes} tokens.\\n     */\\n    function getVotes(address account, uint256 timepoint) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:reputation\\n     * @dev Voting power of an `account` at a specific `timepoint` given additional encoded parameters.\\n     */\\n    function getVotesWithParams(\\n        address account,\\n        uint256 timepoint,\\n        bytes memory params\\n    ) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:voting\\n     * @dev Returns whether `account` has cast a vote on `proposalId`.\\n     */\\n    function hasVoted(uint256 proposalId, address account) public view virtual returns (bool);\\n\\n    /**\\n     * @dev Create a new proposal. Vote start after a delay specified by {IGovernor-votingDelay} and lasts for a\\n     * duration specified by {IGovernor-votingPeriod}.\\n     *\\n     * Emits a {ProposalCreated} event.\\n     */\\n    function propose(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) public virtual returns (uint256 proposalId);\\n\\n    /**\\n     * @dev Execute a successful proposal. This requires the quorum to be reached, the vote to be successful, and the\\n     * deadline to be reached.\\n     *\\n     * Emits a {ProposalExecuted} event.\\n     *\\n     * Note: some module can modify the requirements for execution, for example by adding an additional timelock.\\n     */\\n    function execute(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public payable virtual returns (uint256 proposalId);\\n\\n    /**\\n     * @dev Cancel a proposal. A proposal is cancellable by the proposer, but only while it is Pending state, i.e.\\n     * before the vote starts.\\n     *\\n     * Emits a {ProposalCanceled} event.\\n     */\\n    function cancel(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public virtual returns (uint256 proposalId);\\n\\n    /**\\n     * @dev Cast a vote\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVote(uint256 proposalId, uint8 support) public virtual returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote with a reason\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVoteWithReason(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason\\n    ) public virtual returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote with a reason and additional encoded parameters\\n     *\\n     * Emits a {VoteCast} or {VoteCastWithParams} event depending on the length of params.\\n     */\\n    function castVoteWithReasonAndParams(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason,\\n        bytes memory params\\n    ) public virtual returns (uint256 balance);\\n\\n  /**\\n     * @dev Cast a vote using the user's cryptographic signature.\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVoteBySig(\\n        uint256 proposalId,\\n        uint8 support,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote with a reason and additional encoded parameters using the user's cryptographic signature.\\n     *\\n     * Emits a {VoteCast} or {VoteCastWithParams} event depending on the length of params.\\n     */\\n    function castVoteWithReasonAndParamsBySig(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason,\\n        bytes memory params,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual returns (uint256 balance);\\n}\"\n    },\n    \"contracts/governance/TimelockController.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (governance/TimelockController.sol)\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../utils/AccessControl.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev Contract module which acts as a timelocked controller. When set as the\\n * owner of an `Ownable` smart contract, it enforces a timelock on all\\n * `onlyOwner` maintenance operations. This gives time for users of the\\n * controlled contract to exit before a potentially dangerous maintenance\\n * operation is applied.\\n *\\n * By default, this contract is self administered, meaning administration tasks\\n * have to go through the timelock process. The proposer (resp executor) role\\n * is in charge of proposing (resp executing) operations. A common use case is\\n * to position this {TimelockController} as the owner of a smart contract, with\\n * a multisig or a DAO as the sole proposer.\\n *\\n * _Available since v3.3._\\n */\\ncontract TimelockController is AccessControl {\\n    bytes32 public constant TIMELOCK_ADMIN_ROLE = keccak256(\\\"TIMELOCK_ADMIN_ROLE\\\");\\n    bytes32 public constant PROPOSER_ROLE = keccak256(\\\"PROPOSER_ROLE\\\");\\n    bytes32 public constant EXECUTOR_ROLE = keccak256(\\\"EXECUTOR_ROLE\\\");\\n    bytes32 public constant CANCELLER_ROLE = keccak256(\\\"CANCELLER_ROLE\\\");\\n    uint256 internal constant _DONE_TIMESTAMP = uint256(1);\\n\\n    mapping(bytes32 => uint256) private _timestamps;\\n    uint256 private _minDelay;\\n\\n    /**\\n     * @dev Emitted when a call is scheduled as part of operation `id`.\\n     */\\n    event CallScheduled(\\n        bytes32 indexed id,\\n        uint256 indexed index,\\n        address target,\\n        uint256 value,\\n        bytes data,\\n        bytes32 predecessor,\\n        uint256 delay\\n    );\\n\\n    /**\\n     * @dev Emitted when a call is performed as part of operation `id`.\\n     */\\n    event CallExecuted(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data);\\n\\n     /**\\n     * @dev Emitted when new proposal is scheduled with non-zero salt.\\n     */\\n    event CallSalt(bytes32 indexed id, bytes32 salt);\\n\\n\\n    /**\\n     * @dev Emitted when operation `id` is cancelled.\\n     */\\n    event Cancelled(bytes32 indexed id);\\n\\n    /**\\n     * @dev Emitted when the minimum delay for future operations is modified.\\n     */\\n    event MinDelayChange(uint256 oldDuration, uint256 newDuration);\\n\\n    /**\\n     * @dev Initializes the contract with the following parameters:\\n     *\\n     * - `minDelay`: initial minimum delay for operations\\n     * - `proposers`: accounts to be granted proposer and canceller roles\\n     * - `executors`: accounts to be granted executor role\\n     * - `admin`: optional account to be granted admin role; disable with zero address\\n     *\\n     * IMPORTANT: The optional admin can aid with initial configuration of roles after deployment\\n     * without being subject to delay, but this role should be subsequently renounced in favor of\\n     * administration through timelocked proposals. Previous versions of this contract would assign\\n     * this admin to the deployer automatically and should be renounced as well.\\n     */\\n    constructor(\\n        uint256 minDelay,\\n        address[] memory proposers,\\n        address[] memory executors,\\n        address admin\\n    ) {\\n        _setRoleAdmin(TIMELOCK_ADMIN_ROLE, TIMELOCK_ADMIN_ROLE);\\n        _setRoleAdmin(PROPOSER_ROLE, TIMELOCK_ADMIN_ROLE);\\n        _setRoleAdmin(EXECUTOR_ROLE, TIMELOCK_ADMIN_ROLE);\\n        _setRoleAdmin(CANCELLER_ROLE, TIMELOCK_ADMIN_ROLE);\\n\\n        // self administration\\n        _setupRole(TIMELOCK_ADMIN_ROLE, address(this));\\n\\n        // optional admin\\n        if (admin != address(0)) {\\n            _setupRole(TIMELOCK_ADMIN_ROLE, admin);\\n        }\\n\\n        // register proposers and cancellers\\n        for (uint256 i = 0; i < proposers.length; ++i) {\\n            _setupRole(PROPOSER_ROLE, proposers[i]);\\n            _setupRole(CANCELLER_ROLE, proposers[i]);\\n        }\\n\\n        // register executors\\n        for (uint256 i = 0; i < executors.length; ++i) {\\n            _setupRole(EXECUTOR_ROLE, executors[i]);\\n        }\\n\\n        _minDelay = minDelay;\\n        emit MinDelayChange(0, minDelay);\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only by a certain role. In\\n     * addition to checking the sender's role, `address(0)` 's role is also\\n     * considered. Granting a role to `address(0)` is equivalent to enabling\\n     * this role for everyone.\\n     */\\n    modifier onlyRoleOrOpenRole(bytes32 role) {\\n        if (!hasRole(role, address(0))) {\\n            _checkRole(role, _msgSender());\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Contract might receive/hold ETH as part of the maintenance process.\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n   function supportsInterface(bytes4 interfaceId) public view virtual override(AccessControl) returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns whether an id correspond to a registered operation. This\\n     * includes both Pending, Ready and Done operations.\\n     */\\n    function isOperation(bytes32 id) public view virtual returns (bool registered) {\\n        return getTimestamp(id) > 0;\\n    }\\n\\n    /**\\n     * @dev Returns whether an operation is pending or not.\\n     */\\n    function isOperationPending(bytes32 id) public view virtual returns (bool pending) {\\n        return getTimestamp(id) > _DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev Returns whether an operation is ready or not.\\n     */\\n    function isOperationReady(bytes32 id) public view virtual returns (bool ready) {\\n        uint256 timestamp = getTimestamp(id);\\n        return timestamp > _DONE_TIMESTAMP && timestamp <= block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Returns whether an operation is done or not.\\n     */\\n    function isOperationDone(bytes32 id) public view virtual returns (bool done) {\\n        return getTimestamp(id) == _DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev Returns the timestamp at with an operation becomes ready (0 for\\n     * unset operations, 1 for done operations).\\n     */\\n    function getTimestamp(bytes32 id) public view virtual returns (uint256 timestamp) {\\n        return _timestamps[id];\\n    }\\n\\n    /**\\n     * @dev Returns the minimum delay for an operation to become valid.\\n     *\\n     * This value can be changed by executing an operation that calls `updateDelay`.\\n     */\\n    function getMinDelay() public view virtual returns (uint256 duration) {\\n        return _minDelay;\\n    }\\n\\n    /**\\n     * @dev Returns the identifier of an operation containing a single\\n     * transaction.\\n     */\\n    function hashOperation(\\n        address target,\\n        uint256 value,\\n        bytes calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public pure virtual returns (bytes32 hash) {\\n        return keccak256(abi.encode(target, value, data, predecessor, salt));\\n    }\\n\\n    /**\\n     * @dev Returns the identifier of an operation containing a batch of\\n     * transactions.\\n     */\\n    function hashOperationBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata payloads,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public pure virtual returns (bytes32 hash) {\\n        return keccak256(abi.encode(targets, values, payloads, predecessor, salt));\\n    }\\n\\n    /**\\n     * @dev Schedule an operation containing a single transaction.\\n     *\\n     * Emits a {CallScheduled} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'proposer' role.\\n     */\\n    function schedule(\\n        address target,\\n        uint256 value,\\n        bytes calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt,\\n        uint256 delay\\n    ) public virtual onlyRole(PROPOSER_ROLE) {\\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\\n        _schedule(id, delay);\\n        emit CallScheduled(id, 0, target, value, data, predecessor, delay);\\n          if (salt != bytes32(0)) {\\n            emit CallSalt(id, salt);\\n        }\\n    }\\n\\n    /**\\n     * @dev Schedule an operation containing a batch of transactions.\\n     *\\n     * Emits one {CallScheduled} event per transaction in the batch.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'proposer' role.\\n     */\\n    function scheduleBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata payloads,\\n        bytes32 predecessor,\\n        bytes32 salt,\\n        uint256 delay\\n    ) public virtual onlyRole(PROPOSER_ROLE) {\\n        require(targets.length == values.length, \\\"TimelockController: length mismatch\\\");\\n        require(targets.length == payloads.length, \\\"TimelockController: length mismatch\\\");\\n\\n        bytes32 id = hashOperationBatch(targets, values, payloads, predecessor, salt);\\n        _schedule(id, delay);\\n        for (uint256 i = 0; i < targets.length; ++i) {\\n            emit CallScheduled(id, i, targets[i], values[i], payloads[i], predecessor, delay);\\n        }\\n        if (salt != bytes32(0)) {\\n            emit CallSalt(id, salt);\\n        }\\n    }\\n\\n    /**\\n     * @dev Schedule an operation that is to becomes valid after a given delay.\\n     */\\n    function _schedule(bytes32 id, uint256 delay) private {\\n        require(!isOperation(id), \\\"TimelockController: operation already scheduled\\\");\\n        require(delay >= getMinDelay(), \\\"TimelockController: insufficient delay\\\");\\n        _timestamps[id] = block.timestamp + delay;\\n    }\\n\\n    /**\\n     * @dev Cancel an operation.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'canceller' role.\\n     */\\n    function cancel(bytes32 id) public virtual onlyRole(CANCELLER_ROLE) {\\n        require(isOperationPending(id), \\\"TimelockController: operation cannot be cancelled\\\");\\n        delete _timestamps[id];\\n\\n        emit Cancelled(id);\\n    }\\n\\n    /**\\n     * @dev Execute an (ready) operation containing a single transaction.\\n     *\\n     * Emits a {CallExecuted} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'executor' role.\\n     */\\n    // This function can reenter, but it doesn't pose a risk because _afterCall checks that the proposal is pending,\\n    // thus any modifications to the operation during reentrancy should be caught.\\n    // slither-disable-next-line reentrancy-eth\\n    function execute(\\n        address target,\\n        uint256 value,\\n        bytes calldata payload,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\\n        bytes32 id = hashOperation(target, value, payload, predecessor, salt);\\n\\n        _beforeCall(id, predecessor);\\n        _execute(target, value, payload);\\n        emit CallExecuted(id, 0, target, value, payload);\\n        _afterCall(id);\\n    }\\n\\n    /**\\n     * @dev Execute an (ready) operation containing a batch of transactions.\\n     *\\n     * Emits one {CallExecuted} event per transaction in the batch.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'executor' role.\\n     */\\n    function executeBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata payloads,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\\n        require(targets.length == values.length, \\\"TimelockController: length mismatch\\\");\\n        require(targets.length == payloads.length, \\\"TimelockController: length mismatch\\\");\\n\\n        bytes32 id = hashOperationBatch(targets, values, payloads, predecessor, salt);\\n\\n        _beforeCall(id, predecessor);\\n        for (uint256 i = 0; i < targets.length; ++i) {\\n            address target = targets[i];\\n            uint256 value = values[i];\\n            bytes calldata payload = payloads[i];\\n            _execute(target, value, payload);\\n            emit CallExecuted(id, i, target, value, payload);\\n        }\\n        _afterCall(id);\\n    }\\n\\n    /**\\n     * @dev Execute an operation's call.\\n     */\\n    function _execute(\\n        address target,\\n        uint256 value,\\n        bytes calldata data\\n    ) internal virtual {\\n        (bool success, ) = target.call{value: value}(data);\\n        require(success, \\\"TimelockController: underlying transaction reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Checks before execution of an operation's calls.\\n     */\\n    function _beforeCall(bytes32 id, bytes32 predecessor) private view {\\n        require(isOperationReady(id), \\\"TimelockController: operation is not ready\\\");\\n        require(predecessor == bytes32(0) || isOperationDone(predecessor), \\\"TimelockController: missing dependency\\\");\\n    }\\n\\n    /**\\n     * @dev Checks after execution of an operation's calls.\\n     */\\n    function _afterCall(bytes32 id) private {\\n        require(isOperationReady(id), \\\"TimelockController: operation is not ready\\\");\\n        _timestamps[id] = _DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev Changes the minimum timelock duration for future operations.\\n     *\\n     * Emits a {MinDelayChange} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the timelock itself. This can only be achieved by scheduling and later executing\\n     * an operation where the timelock is the target and the data is the ABI-encoded call to this function.\\n     */\\n    function updateDelay(uint256 newDelay) external virtual {\\n        require(msg.sender == address(this), \\\"TimelockController: caller must be timelock\\\");\\n        emit MinDelayChange(_minDelay, newDelay);\\n        _minDelay = newDelay;\\n    }\\n}\"\n    },\n    \"contracts/governance/utils/IVotes.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/utils/IVotes.sol)\\npragma solidity ^0.8.17;\\n\\n/**\\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\\n *\\n * _Available since v4.5._\\n */\\ninterface IVotes {\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at the end of a past block (`blockNumber`).\\n     */\\n    function getPastVotes(address account, uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total supply of votes available at the end of a past block (`blockNumber`).\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     */\\n    function getPastTotalSupply(uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the delegate that `account` has chosen.\\n     */\\n    function delegates(address account) external view returns (address);\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`.\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\"\n    },\n    \"contracts/Governor_Token.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\n\\nimport './ERC20/ERC20.sol';\\nimport './ERC20/extensions/ERC20Votes.sol';\\nimport './ERC20/extensions/ERC20Permit.sol';\\nimport './utils/Ownable.sol';\\nimport \\\"./utils/cryptography/ECDSA.sol\\\";\\n\\ncontract Governor_Token is ERC20, ERC20Permit, Ownable, ERC20Votes {\\n    constructor() ERC20(\\\"Ink_Votes\\\", \\\"ITK\\\")  ERC20Permit(\\\"Ink_Votes\\\") {}\\n\\n        event Mint(address indexed to, uint _amount);\\n        event Burn(address indexed to, uint _amount);\\n\\n     function mint(address to, uint256 amount) public onlyOwner {\\n        _mint(to, amount);\\n         emit Mint(to, amount);\\n    }\\n\\n     function burn(address to, uint256 amount) public onlyOwner {\\n        _burn(to, amount);\\n         emit Burn(to, amount);\\n    }\\n\\n    function _afterTokenTransfer(address from, address to, uint256 amount)\\n        internal\\n        override(ERC20, ERC20Votes)\\n    {\\n        super._afterTokenTransfer(from, to, amount);\\n    }\\n\\n    function _mint(address to, uint256 amount)\\n        internal\\n        override(ERC20, ERC20Votes)\\n    {\\n        super._mint(to, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount)\\n        internal\\n        override(ERC20, ERC20Votes)\\n    {\\n        super._burn(account, amount);\\n    }\\n}\"\n    },\n    \"contracts/interfaces/IERC5267.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\"\n    },\n    \"contracts/interfaces/IERC5805.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\n\\nimport \\\"../governance/utils/IVotes.sol\\\";\\nimport \\\"./IERC6372.sol\\\";\\n\\ninterface IERC5805 is IERC6372, IVotes {}\"\n    },\n    \"contracts/interfaces/IERC6372.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\n\\ninterface IERC6372 {\\n\\n    function clock() external view returns (uint48);\\n\\n// solhint-disable-next-line func-name-mixedcase\\n    function CLOCK_MODE() external view returns (string memory);\\n    \\n}\"\n    },\n    \"contracts/security/Pausable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\nabstract contract Pausable is Context {\\n   \\n    event Paused(address account);\\n\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\"\n    },\n    \"contracts/Timelock_Governor.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\n\\nimport './governance/Governor.sol';\\nimport './governance/GovernorSettings.sol';\\nimport './governance/extensions/GovernorVotes.sol';\\nimport './governance/extensions/GovernorVotesQuorumFraction.sol';\\nimport './governance/extensions/GovernorTimelockControl.sol';\\nimport './governance/extensions/GovernorCountingSimple.sol';\\n\\ncontract Timelock_Governor is Governor, GovernorSettings, GovernorCountingSimple, GovernorVotes, GovernorVotesQuorumFraction, GovernorTimelockControl {\\n    constructor(IVotes _token, TimelockController _timelock)\\n        Governor(\\\"Timelock_Governor\\\")\\n        GovernorSettings(4, 300, 0)\\n        GovernorVotes(_token)\\n        GovernorVotesQuorumFraction(4)\\n        GovernorTimelockControl(_timelock)\\n    {}\\n\\n   function cancel_(\\n         address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public returns (uint256) {\\n        return super._cancel(targets,values,calldatas,descriptionHash);\\n    }\\n\\n function nonGovernanceFunction() external {}\\n    // The following functions are overrides required by Solidity.\\n\\n    function votingDelay()\\n        public\\n        view\\n        override(IGovernor, GovernorSettings)\\n        returns (uint256)\\n    {\\n        return super.votingDelay();\\n    }\\n\\n    function votingPeriod()\\n        public\\n        view\\n        override(IGovernor, GovernorSettings)\\n        returns (uint256)\\n    {\\n        return super.votingPeriod();\\n    }\\n\\n    function quorum(uint256 blockNumber)\\n        public\\n        view\\n        override(IGovernor, GovernorVotesQuorumFraction)\\n        returns (uint256)\\n    {\\n        return super.quorum(blockNumber);\\n    }\\n\\n    function state(uint256 proposalId)\\n        public\\n        view\\n        override(Governor, GovernorTimelockControl)\\n        returns (ProposalState)\\n    {\\n        return super.state(proposalId);\\n    }\\n\\n    function propose(address[] memory targets, uint256[] memory values, bytes[] memory calldatas, string memory description)\\n        public\\n        override(Governor, IGovernor)\\n        returns (uint256)\\n    {\\n        return super.propose(targets, values, calldatas, description);\\n    }\\n\\n    function proposalThreshold()\\n        public\\n        view\\n        override(Governor, GovernorSettings)\\n        returns (uint256)\\n    {\\n        return super.proposalThreshold();\\n    }\\n\\n    function _execute(uint256 proposalId, address[] memory targets, uint256[] memory values, bytes[] memory calldatas, bytes32 descriptionHash)\\n        internal\\n        override(Governor, GovernorTimelockControl)\\n    {\\n        super._execute(proposalId, targets, values, calldatas, descriptionHash);\\n    }\\n\\n    function _cancel(address[] memory targets, uint256[] memory values, bytes[] memory calldatas, bytes32 descriptionHash)\\n        internal\\n        override(Governor, GovernorTimelockControl)\\n        returns (uint256)\\n    {\\n        return super._cancel(targets, values, calldatas, descriptionHash);\\n    }\\n\\n    function _executor()\\n        internal\\n        view\\n        override(Governor, GovernorTimelockControl)\\n        returns (address)\\n    {\\n        return super._executor();\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(Governor, GovernorTimelockControl)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\"\n    },\n    \"contracts/utils/AccessControl.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\"\n    },\n    \"contracts/utils/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nlibrary Address {\\n   \\n    function isContract(address account) internal view returns (bool) {\\n        return account.code.length > 0;\\n    }\\n\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        if (returndata.length > 0) {\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\"\n    },\n    \"contracts/utils/Checkpoints.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (utils/Checkpoints.sol)\\n// This file was procedurally generated from scripts/generate/templates/Checkpoints.js.\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SafeCast.sol\\\";\\n\\n/**\\n * @dev This library defines the `History` struct, for checkpointing values as they change at different points in\\n * time, and later looking up past values by block number. See {Votes} as an example.\\n *\\n * To create a history of checkpoints define a variable type `Checkpoints.History` in your contract, and store a new\\n * checkpoint for the current transaction block using the {push} function.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Checkpoints {\\n    struct History {\\n        Checkpoint[] _checkpoints;\\n    }\\n\\n    struct Checkpoint {\\n        uint32 _blockNumber;\\n        uint224 _value;\\n    }\\n\\n    /**\\n     * @dev Returns the value at a given block number. If a checkpoint is not available at that block, the closest one\\n     * before it is returned, or zero otherwise. Because the number returned corresponds to that at the end of the\\n     * block, the requested block number must be in the past, excluding the current block.\\n     */\\n    function getAtBlock(History storage self, uint256 blockNumber) internal view returns (uint256) {\\n        require(blockNumber < block.number, \\\"Checkpoints: block not yet mined\\\");\\n        uint32 key = SafeCast.toUint32(blockNumber);\\n\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value at a given block number. If a checkpoint is not available at that block, the closest one\\n     * before it is returned, or zero otherwise. Similar to {upperLookup} but optimized for the case when the searched\\n     * checkpoint is probably \\\"recent\\\", defined as being among the last sqrt(N) checkpoints where N is the number of\\n     * checkpoints.\\n     */\\n    function getAtProbablyRecentBlock(History storage self, uint256 blockNumber) internal view returns (uint256) {\\n        require(blockNumber < block.number, \\\"Checkpoints: block not yet mined\\\");\\n        uint32 key = SafeCast.toUint32(blockNumber);\\n\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - Math.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._blockNumber) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Pushes a value onto a History so that it is stored as the checkpoint for the current block.\\n     *\\n     * Returns previous value and new value.\\n     */\\n    function push(History storage self, uint256 value) internal returns (uint256, uint256) {\\n        return _insert(self._checkpoints, SafeCast.toUint32(block.number), SafeCast.toUint224(value));\\n    }\\n\\n    /**\\n     * @dev Pushes a value onto a History, by updating the latest value using binary operation `op`. The new value will\\n     * be set to `op(latest, delta)`.\\n     *\\n     * Returns previous value and new value.\\n     */\\n    function push(\\n        History storage self,\\n        function(uint256, uint256) view returns (uint256) op,\\n        uint256 delta\\n    ) internal returns (uint256, uint256) {\\n        return push(self, op(latest(self), delta));\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(History storage self) internal view returns (uint224) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(\\n        History storage self\\n    ) internal view returns (bool exists, uint32 _blockNumber, uint224 _value) {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._blockNumber, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(History storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(Checkpoint[] storage self, uint32 key, uint224 value) private returns (uint224, uint224) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            // Copying to memory is important here.\\n            Checkpoint memory last = _unsafeAccess(self, pos - 1);\\n\\n            // Checkpoint keys must be non-decreasing.\\n            require(last._blockNumber <= key, \\\"Checkpoint: decreasing keys\\\");\\n\\n            // Update or push new checkpoint\\n            if (last._blockNumber == key) {\\n                _unsafeAccess(self, pos - 1)._value = value;\\n            } else {\\n                self.push(Checkpoint({_blockNumber: key, _value: value}));\\n            }\\n            return (last._value, value);\\n        } else {\\n            self.push(Checkpoint({_blockNumber: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the oldest checkpoint whose key is greater than the search key, or `high` if there is none.\\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._blockNumber > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the oldest checkpoint whose key is greater or equal than the search key, or `high` if there is none.\\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._blockNumber < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(Checkpoint[] storage self, uint256 pos) private pure returns (Checkpoint storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n\\n    struct Trace224 {\\n        Checkpoint224[] _checkpoints;\\n    }\\n\\n    struct Checkpoint224 {\\n        uint32 _key;\\n        uint224 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace224 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     */\\n    function push(Trace224 storage self, uint32 key, uint224 value) internal returns (uint224, uint224) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the oldest checkpoint with key greater or equal than the search key, or zero if there is none.\\n     */\\n    function lowerLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint with key lower or equal than the search key.\\n     */\\n    function upperLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint with key lower or equal than the search key.\\n     *\\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \\\"recent\\\" checkpoint (checkpoints with high keys).\\n     */\\n    function upperLookupRecent(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - Math.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace224 storage self) internal view returns (uint224) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace224 storage self) internal view returns (bool exists, uint32 _key, uint224 _value) {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint224 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace224 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(Checkpoint224[] storage self, uint32 key, uint224 value) private returns (uint224, uint224) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            // Copying to memory is important here.\\n            Checkpoint224 memory last = _unsafeAccess(self, pos - 1);\\n\\n            // Checkpoint keys must be non-decreasing.\\n            require(last._key <= key, \\\"Checkpoint: decreasing keys\\\");\\n\\n            // Update or push new checkpoint\\n            if (last._key == key) {\\n                _unsafeAccess(self, pos - 1)._value = value;\\n            } else {\\n                self.push(Checkpoint224({_key: key, _value: value}));\\n            }\\n            return (last._value, value);\\n        } else {\\n            self.push(Checkpoint224({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the oldest checkpoint whose key is greater than the search key, or `high` if there is none.\\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint224[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the oldest checkpoint whose key is greater or equal than the search key, or `high` if there is none.\\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint224[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(\\n        Checkpoint224[] storage self,\\n        uint256 pos\\n    ) private pure returns (Checkpoint224 storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n\\n    struct Trace160 {\\n        Checkpoint160[] _checkpoints;\\n    }\\n\\n    struct Checkpoint160 {\\n        uint96 _key;\\n        uint160 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace160 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     */\\n    function push(Trace160 storage self, uint96 key, uint160 value) internal returns (uint160, uint160) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the oldest checkpoint with key greater or equal than the search key, or zero if there is none.\\n     */\\n    function lowerLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint with key lower or equal than the search key.\\n     */\\n    function upperLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint with key lower or equal than the search key.\\n     *\\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \\\"recent\\\" checkpoint (checkpoints with high keys).\\n     */\\n    function upperLookupRecent(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - Math.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace160 storage self) internal view returns (uint160) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace160 storage self) internal view returns (bool exists, uint96 _key, uint160 _value) {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint160 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace160 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(Checkpoint160[] storage self, uint96 key, uint160 value) private returns (uint160, uint160) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            // Copying to memory is important here.\\n            Checkpoint160 memory last = _unsafeAccess(self, pos - 1);\\n\\n            // Checkpoint keys must be non-decreasing.\\n            require(last._key <= key, \\\"Checkpoint: decreasing keys\\\");\\n\\n            // Update or push new checkpoint\\n            if (last._key == key) {\\n                _unsafeAccess(self, pos - 1)._value = value;\\n            } else {\\n                self.push(Checkpoint160({_key: key, _value: value}));\\n            }\\n            return (last._value, value);\\n        } else {\\n            self.push(Checkpoint160({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the oldest checkpoint whose key is greater than the search key, or `high` if there is none.\\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint160[] storage self,\\n        uint96 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the oldest checkpoint whose key is greater or equal than the search key, or `high` if there is none.\\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint160[] storage self,\\n        uint96 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(\\n        Checkpoint160[] storage self,\\n        uint256 pos\\n    ) private pure returns (Checkpoint160 storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n}\"\n    },\n    \"contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\"\n    },\n    \"contracts/utils/Counters.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\"\n    },\n    \"contracts/utils/cryptography/ECDSA.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\"\n    },\n    \"contracts/utils/cryptography/EIP712.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../ShortStrings.sol\\\";\\nimport \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _name.toStringWithFallback(_nameFallback),\\n            _version.toStringWithFallback(_versionFallback),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n}\"\n    },\n    \"contracts/utils/IAccessControl.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.17;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\"\n    },\n    \"contracts/utils/introspection/ERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\nabstract contract ERC165 is IERC165 {\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\"\n    },\n    \"contracts/utils/introspection/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\ninterface IERC165 {\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\"\n    },\n    \"contracts/utils/math/Math.sol\": {\n      \"content\": \"\\n\\n// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.17;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\"\n    },\n    \"contracts/utils/math/SafeCast.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\n\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\"\n    },\n    \"contracts/utils/Ownable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\"\n    },\n    \"contracts/utils/ShortStrings.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"./StorageSlot.sol\\\";\\n\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n * Strings of arbitrary length can be optimized if they are short enough by\\n * the addition of a storage variable used as fallback.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    error StringTooLong(string str);\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = length(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function length(ShortString sstr) internal pure returns (uint256) {\\n        return uint256(ShortString.unwrap(sstr)) & 0xFF;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (length(value) > 0) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n}\"\n    },\n    \"contracts/utils/StorageSlot.sol\": {\n      \"content\": \"\\n\\n// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\"\n    },\n    \"contracts/utils/Strings.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\"\n    },\n    \"contracts/utils/structs/DoubleEndedQueue.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"../math/SafeCast.sol\\\";\\n\\n\\nlibrary DoubleEndedQueue {\\n    /**\\n     * @dev An operation (e.g. {front}) couldn't be completed due to the queue being empty.\\n     */\\n    error Empty();\\n\\n    /**\\n     * @dev An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\\n     */\\n    error OutOfBounds();\\n\\n    /**\\n     * @dev Indices are signed integers because the queue can grow in any direction. They are 128 bits so begin and end\\n     * are packed in a single storage slot for efficient access. Since the items are added one at a time we can safely\\n     * assume that these 128-bit indices will not overflow, and use unchecked arithmetic.\\n     *\\n     * Struct members have an underscore prefix indicating that they are \\\"private\\\" and should not be read or written to\\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\\n     * lead to unexpected behavior.\\n     *\\n     * Indices are in the range [begin, end) which means the first item is at data[begin] and the last item is at\\n     * data[end - 1].\\n     */\\n    struct Bytes32Deque {\\n        int128 _begin;\\n        int128 _end;\\n        mapping(int128 => bytes32) _data;\\n    }\\n\\n    /**\\n     * @dev Inserts an item at the end of the queue.\\n     */\\n    function pushBack(Bytes32Deque storage deque, bytes32 value) internal {\\n        int128 backIndex = deque._end;\\n        deque._data[backIndex] = value;\\n        unchecked {\\n            deque._end = backIndex + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes the item at the end of the queue and returns it.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function popBack(Bytes32Deque storage deque) internal returns (bytes32 value) {\\n        if (empty(deque)) revert Empty();\\n        int128 backIndex;\\n        unchecked {\\n            backIndex = deque._end - 1;\\n        }\\n        value = deque._data[backIndex];\\n        delete deque._data[backIndex];\\n        deque._end = backIndex;\\n    }\\n\\n    /**\\n     * @dev Inserts an item at the beginning of the queue.\\n     */\\n    function pushFront(Bytes32Deque storage deque, bytes32 value) internal {\\n        int128 frontIndex;\\n        unchecked {\\n            frontIndex = deque._begin - 1;\\n        }\\n        deque._data[frontIndex] = value;\\n        deque._begin = frontIndex;\\n    }\\n\\n    /**\\n     * @dev Removes the item at the beginning of the queue and returns it.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function popFront(Bytes32Deque storage deque) internal returns (bytes32 value) {\\n        if (empty(deque)) revert Empty();\\n        int128 frontIndex = deque._begin;\\n        value = deque._data[frontIndex];\\n        delete deque._data[frontIndex];\\n        unchecked {\\n            deque._begin = frontIndex + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the item at the beginning of the queue.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function front(Bytes32Deque storage deque) internal view returns (bytes32 value) {\\n        if (empty(deque)) revert Empty();\\n        int128 frontIndex = deque._begin;\\n        return deque._data[frontIndex];\\n    }\\n\\n    /**\\n     * @dev Returns the item at the end of the queue.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function back(Bytes32Deque storage deque) internal view returns (bytes32 value) {\\n        if (empty(deque)) revert Empty();\\n        int128 backIndex;\\n        unchecked {\\n            backIndex = deque._end - 1;\\n        }\\n        return deque._data[backIndex];\\n    }\\n\\n    /**\\n     * @dev Return the item at a position in the queue given by `index`, with the first item at 0 and last item at\\n     * `length(deque) - 1`.\\n     *\\n     * Reverts with `OutOfBounds` if the index is out of bounds.\\n     */\\n    function at(Bytes32Deque storage deque, uint256 index) internal view returns (bytes32 value) {\\n        // int256(deque._begin) is a safe upcast\\n        int128 idx = SafeCast.toInt128(int256(deque._begin) + SafeCast.toInt256(index));\\n        if (idx >= deque._end) revert OutOfBounds();\\n        return deque._data[idx];\\n    }\\n\\n    /**\\n     * @dev Resets the queue back to being empty.\\n     *\\n     * NOTE: The current items are left behind in storage. This does not affect the functioning of the queue, but misses\\n     * out on potential gas refunds.\\n     */\\n    function clear(Bytes32Deque storage deque) internal {\\n        deque._begin = 0;\\n        deque._end = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of items in the queue.\\n     */\\n    function length(Bytes32Deque storage deque) internal view returns (uint256) {\\n        // The interface preserves the invariant that begin <= end so we assume this will not overflow.\\n        // We also assume there are at most int256.max items in the queue.\\n        unchecked {\\n            return uint256(int256(deque._end) - int256(deque._begin));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the queue is empty.\\n     */\\n    function empty(Bytes32Deque storage deque) internal view returns (bool) {\\n        return deque._end <= deque._begin;\\n    }\\n}\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 200\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
  "solcInputHash": "636f063f1a5a709c88dd2705752922f2",
  "transactionHash": "0x7763da771e124fa54790ab7f50549f7abca0559ce098b151d71d5e51e981cd2f",
  "args": [
    "0x44863F234b137A395e5c98359d16057A9A1fAc55",
    "0x0c03eCB91Cb50835e560a7D52190EB1a5ffba797"
  ],
  "address": "0x1c39BA375faB6a9f6E0c01B9F49d488e101C2011",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x1c39BA375faB6a9f6E0c01B9F49d488e101C2011",
    "transactionIndex": 0,
    "gasUsed": {
      "type": "BigNumber",
      "hex": "0x3d5b4f"
    },
    "logsBloom": "0x
    "blockHash": "0x25d1a26b7059b8aa581c065dd825bfc2a0ec3b20ab6bde0c1d878de2e6e5229b",
    "transactionHash": "0x7763da771e124fa54790ab7f50549f7abca0559ce098b151d71d5e51e981cd2f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 17136588,
        "transactionHash": "0x7763da771e124fa54790ab7f50549f7abca0559ce098b151d71d5e51e981cd2f",
        "address": "0x1c39BA375faB6a9f6E0c01B9F49d488e101C2011",
        "topics": [
          "0xc565b045403dc03c2eea82b81a0465edad9e2e7fc4d97e11421c209da93d7a93"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004",
        "logIndex": 0,
        "blockHash": "0x25d1a26b7059b8aa581c065dd825bfc2a0ec3b20ab6bde0c1d878de2e6e5229b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 17136588,
        "transactionHash": "0x7763da771e124fa54790ab7f50549f7abca0559ce098b151d71d5e51e981cd2f",
        "address": "0x1c39BA375faB6a9f6E0c01B9F49d488e101C2011",
        "topics": [
          "0x7e3f7f0708a84de9203036abaa450dccc85ad5ff52f78c170f3edb55cf5e8828"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012c",
        "logIndex": 1,
        "blockHash": "0x25d1a26b7059b8aa581c065dd825bfc2a0ec3b20ab6bde0c1d878de2e6e5229b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 17136588,
        "transactionHash": "0x7763da771e124fa54790ab7f50549f7abca0559ce098b151d71d5e51e981cd2f",
        "address": "0x1c39BA375faB6a9f6E0c01B9F49d488e101C2011",
        "topics": [
          "0xccb45da8d5717e6c4544694297c4ba5cf151d455c9bb0ed4fc7a38411bc05461"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 2,
        "blockHash": "0x25d1a26b7059b8aa581c065dd825bfc2a0ec3b20ab6bde0c1d878de2e6e5229b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 17136588,
        "transactionHash": "0x7763da771e124fa54790ab7f50549f7abca0559ce098b151d71d5e51e981cd2f",
        "address": "0x1c39BA375faB6a9f6E0c01B9F49d488e101C2011",
        "topics": [
          "0x0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b4633997"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004",
        "logIndex": 3,
        "blockHash": "0x25d1a26b7059b8aa581c065dd825bfc2a0ec3b20ab6bde0c1d878de2e6e5229b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 17136588,
        "transactionHash": "0x7763da771e124fa54790ab7f50549f7abca0559ce098b151d71d5e51e981cd2f",
        "address": "0x1c39BA375faB6a9f6E0c01B9F49d488e101C2011",
        "topics": [
          "0x08f74ea46ef7894f65eabfb5e6e695de773a000b47c529ab559178069b226401"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c03ecb91cb50835e560a7d52190eb1a5ffba797",
        "logIndex": 4,
        "blockHash": "0x25d1a26b7059b8aa581c065dd825bfc2a0ec3b20ab6bde0c1d878de2e6e5229b"
      }
    ],
    "blockNumber": 17136588,
    "confirmations": 1,
    "cumulativeGasUsed": {
      "type": "BigNumber",
      "hex": "0x3d5b4f"
    },
    "effectiveGasPrice": {
      "type": "BigNumber",
      "hex": "0x065c12a15a"
    },
    "status": 1,
    "type": 2,
    "byzantium": true
  },
  "newlyDeployed": true
}