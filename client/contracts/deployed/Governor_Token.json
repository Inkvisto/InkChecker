{
  "_format": "hh-sol-artifact-1",
  "contractName": "Governor_Token",
  "sourceName": "contracts/Governor_Token.sol",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "str",
          "type": "string"
        }
      ],
      "name": "StringTooLong",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromDelegate",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toDelegate",
          "type": "address"
        }
      ],
      "name": "DelegateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "DelegateVotesChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "EIP712DomainChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CLOCK_MODE",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "pos",
          "type": "uint32"
        }
      ],
      "name": "checkpoints",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "fromBlock",
              "type": "uint32"
            },
            {
              "internalType": "uint224",
              "name": "votes",
              "type": "uint224"
            }
          ],
          "internalType": "struct ERC20Votes.Checkpoint",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "clock",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "delegateBySig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "delegates",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eip712Domain",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "fields",
          "type": "bytes1"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "verifyingContract",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "extensions",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timepoint",
          "type": "uint256"
        }
      ],
      "name": "getPastTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timepoint",
          "type": "uint256"
        }
      ],
      "name": "getPastVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "numCheckpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "0x6101606040523480156200001257600080fd5b50604080518082018252600980825268496e6b5f566f74657360b81b60208084018290528451808601865260018152603160f81b8183015285518087018752938452838201929092528451808601909552600385526249544b60e81b908501526000805460ff1916905591928392919060046200009083826200031a565b5060056200009f82826200031a565b505050620000bd6006836200018460201b62000d6e1790919060201c565b60e052620000d981600762000184602090811b62000d6e17901c565b61010052815160208084019190912061012052815190820120610140524660a052620001696101205161014051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60805250503060c052506200017e33620001d4565b6200045b565b6000602083511015620001a4576200019c8362000226565b9050620001ce565b82620001bb836200027260201b62000d9f1760201c565b90620001c890826200031a565b50600090505b92915050565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080829050601f815111156200025d578260405163305a27a960e01b8152600401620002549190620003e6565b60405180910390fd5b80516200026a8262000436565b179392505050565b90565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620002a057607f821691505b602082108103620002c157634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200031557600081815260208120601f850160051c81016020861015620002f05750805b601f850160051c820191505b818110156200031157828155600101620002fc565b5050505b505050565b81516001600160401b0381111562000336576200033662000275565b6200034e816200034784546200028b565b84620002c7565b602080601f8311600181146200038657600084156200036d5750858301515b600019600386901b1c1916600185901b17855562000311565b600085815260208120601f198616915b82811015620003b75788860151825594840194600190910190840162000396565b5085821015620003d65787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208083528351808285015260005b818110156200041557858101830151858201604001528201620003f7565b506000604082860101526040601f19601f8301168501019250505092915050565b80516020808301519190811015620002c15760001960209190910360031b1b16919050565b60805160a05160c05160e051610100516101205161014051612644620004b660003960006111d6015260006111ae015260006107860152600061075b01526000611109015260006111330152600061115d01526126446000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c8063715018a61161010f5780639dc29fac116100a2578063d505accf11610071578063d505accf1461043d578063dd62ed3e14610450578063f1127ed814610463578063f2fde38b146104a057600080fd5b80639dc29fac146103f1578063a457c2d714610404578063a9059cbb14610417578063c3cda5201461042a57600080fd5b80638e539e8c116100de5780638e539e8c146103a457806391ddadf4146103b757806395d89b41146103d65780639ab24eb0146103de57600080fd5b8063715018a61461035d5780637ecebe001461036557806384b0196e146103785780638da5cb5b1461039357600080fd5b80633a46b1a8116101875780635c19a95c116101565780635c19a95c146102ee5780635c975abb146103015780636fcfff451461030c57806370a082311461033457600080fd5b80633a46b1a81461027a57806340c10f191461028d5780634bf5d7e9146102a2578063587cde1e146102aa57600080fd5b806323b872dd116101c357806323b872dd1461023d578063313ce567146102505780633644e5151461025f578063395093511461026757600080fd5b806306fdde03146101ea578063095ea7b31461020857806318160ddd1461022b575b600080fd5b6101f26104b3565b6040516101ff919061214d565b60405180910390f35b61021b61021636600461217c565b610545565b60405190151581526020016101ff565b6003545b6040519081526020016101ff565b61021b61024b3660046121a6565b61055f565b604051601281526020016101ff565b61022f610583565b61021b61027536600461217c565b610592565b61022f61028836600461217c565b6105b4565b6102a061029b36600461217c565b61063e565b005b6101f2610697565b6102d66102b83660046121e2565b6001600160a01b039081166000908152600b60205260409020541690565b6040516001600160a01b0390911681526020016101ff565b6102a06102fc3660046121e2565b6106ec565b60005460ff1661021b565b61031f61031a3660046121e2565b6106f9565b60405163ffffffff90911681526020016101ff565b61022f6103423660046121e2565b6001600160a01b031660009081526001602052604090205490565b6102a061071b565b61022f6103733660046121e2565b61072f565b61038061074d565b6040516101ff97969594939291906121fd565b600a546001600160a01b03166102d6565b61022f6103b2366004612293565b6107d6565b6103bf61083d565b60405165ffffffffffff90911681526020016101ff565b6101f2610848565b61022f6103ec3660046121e2565b610857565b6102a06103ff36600461217c565b6108d9565b61021b61041236600461217c565b610926565b61021b61042536600461217c565b6109a1565b6102a06104383660046122bd565b6109af565b6102a061044b366004612315565b610ae5565b61022f61045e36600461237f565b610c49565b6104766104713660046123b2565b610c74565b60408051825163ffffffff1681526020928301516001600160e01b031692810192909252016101ff565b6102a06104ae3660046121e2565b610cf8565b6060600480546104c2906123f2565b80601f01602080910402602001604051908101604052809291908181526020018280546104ee906123f2565b801561053b5780601f106105105761010080835404028352916020019161053b565b820191906000526020600020905b81548152906001019060200180831161051e57829003601f168201915b5050505050905090565b600033610553818585610da2565b60019150505b92915050565b60003361056d858285610ec6565b610578858585610f40565b506001949350505050565b600061058d6110fc565b905090565b6000336105538185856105a58383610c49565b6105af919061243c565b610da2565b60006105be61083d565b65ffffffffffff1682106106155760405162461bcd60e51b815260206004820152601960248201527804552433230566f7465733a20667574757265206c6f6f6b757603c1b60448201526064015b60405180910390fd5b6001600160a01b0383166000908152600c602052604090206106379083611227565b9392505050565b610646611310565b610650828261136a565b816001600160a01b03167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968858260405161068b91815260200190565b60405180910390a25050565b6060436106a261083d565b65ffffffffffff16146106b457600080fd5b5060408051808201909152601d81527f6d6f64653d626c6f636b6e756d6265722666726f6d3d64656661756c74000000602082015290565b6106f63382611378565b50565b6001600160a01b0381166000908152600c6020526040812054610559906113f2565b610723611310565b61072d600061145b565b565b6001600160a01b038116600090815260086020526040812054610559565b6000606080828080836107817f000000000000000000000000000000000000000000000000000000000000000060066114ad565b6107ac7f000000000000000000000000000000000000000000000000000000000000000060076114ad565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b60006107e061083d565b65ffffffffffff1682106108325760405162461bcd60e51b815260206004820152601960248201527804552433230566f7465733a20667574757265206c6f6f6b757603c1b604482015260640161060c565b610559600d83611227565b600061058d43611552565b6060600580546104c2906123f2565b6001600160a01b0381166000908152600c602052604081205480156108c6576001600160a01b0383166000908152600c60205260409020805460001983019081106108a4576108a4612465565b60009182526020909120015464010000000090046001600160e01b03166108c9565b60005b6001600160e01b03169392505050565b6108e1611310565b6108eb82826115b9565b816001600160a01b03167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58260405161068b91815260200190565b600033816109348286610c49565b9050838110156109945760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161060c565b6105788286868403610da2565b600033610553818585610f40565b834211156109ff5760405162461bcd60e51b815260206004820152601d60248201527f4552433230566f7465733a207369676e61747572652065787069726564000000604482015260640161060c565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60208201526001600160a01b038816918101919091526060810186905260808101859052600090610a7990610a719060a001604051602081830303815290604052805190602001206115c3565b8585856115f0565b9050610a8481611618565b8614610ad25760405162461bcd60e51b815260206004820152601960248201527f4552433230566f7465733a20696e76616c6964206e6f6e636500000000000000604482015260640161060c565b610adc8188611378565b50505050505050565b83421115610b355760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e65000000604482015260640161060c565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9888888610b648c611618565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090506000610bbf826115c3565b90506000610bcf828787876115f0565b9050896001600160a01b0316816001600160a01b031614610c325760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e61747572650000604482015260640161060c565b610c3d8a8a8a610da2565b50505050505050505050565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b60408051808201909152600080825260208201526001600160a01b0383166000908152600c60205260409020805463ffffffff8416908110610cb857610cb8612465565b60009182526020918290206040805180820190915291015463ffffffff8116825264010000000090046001600160e01b0316918101919091529392505050565b610d00611310565b6001600160a01b038116610d655760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161060c565b6106f68161145b565b6000602083511015610d8a57610d8383611640565b9050610559565b81610d9584826124c9565b5060009050610559565b90565b6001600160a01b038316610e045760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161060c565b6001600160a01b038216610e655760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161060c565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610ed28484610c49565b90506000198114610f3a5781811015610f2d5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161060c565b610f3a8484848403610da2565b50505050565b6001600160a01b038316610fa45760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161060c565b6001600160a01b0382166110065760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161060c565b61101183838361167e565b6001600160a01b038316600090815260016020526040902054818110156110895760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161060c565b6001600160a01b0380851660008181526001602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906110e99086815260200190565b60405180910390a3610f3a8484846116e9565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561115557507f000000000000000000000000000000000000000000000000000000000000000046145b1561117f57507f000000000000000000000000000000000000000000000000000000000000000090565b61058d604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b815460009081816005811115611281576000611242846116f4565b61124c9085612589565b600088815260209020909150869082015463ffffffff1611156112715780915061127f565b61127c81600161243c565b92505b505b808210156112ce57600061129583836117dc565b600088815260209020909150869082015463ffffffff1611156112ba578091506112c8565b6112c581600161243c565b92505b50611281565b80156112fa576000868152602090208101600019015464010000000090046001600160e01b03166112fd565b60005b6001600160e01b03169695505050505050565b600a546001600160a01b0316331461072d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161060c565b61137482826117f7565b5050565b6001600160a01b038281166000818152600b6020818152604080842080546001845282862054949093528787166001600160a01b03198416811790915590519190951694919391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4610f3a828483611881565b600063ffffffff8211156114575760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b606482015260840161060c565b5090565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b606060ff8316156114c157610d83836119be565b8180546114cd906123f2565b80601f01602080910402602001604051908101604052809291908181526020018280546114f9906123f2565b80156115465780601f1061151b57610100808354040283529160200191611546565b820191906000526020600020905b81548152906001019060200180831161152957829003601f168201915b50505050509050610559565b600065ffffffffffff8211156114575760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203460448201526538206269747360d01b606482015260840161060c565b61137482826119f3565b60006105596115d06110fc565b8360405161190160f01b8152600281019290925260228201526042902090565b600080600061160187878787611a0b565b9150915061160e81611acf565b5095945050505050565b6001600160a01b03811660009081526008602052604090208054600181018255905b50919050565b600080829050601f8151111561166b578260405163305a27a960e01b815260040161060c919061214d565b80516116768261259c565b179392505050565b60005460ff16156116e45760405162461bcd60e51b815260206004820152602a60248201527f45524332305061757361626c653a20746f6b656e207472616e736665722077686044820152691a5b19481c185d5cd95960b21b606482015260840161060c565b505050565b6116e4838383611c19565b60008160000361170657506000919050565b6000600161171384611c4b565b901c6001901b9050600181848161172c5761172c6125c0565b048201901c90506001818481611744576117446125c0565b048201901c9050600181848161175c5761175c6125c0565b048201901c90506001818481611774576117746125c0565b048201901c9050600181848161178c5761178c6125c0565b048201901c905060018184816117a4576117a46125c0565b048201901c905060018184816117bc576117bc6125c0565b048201901c9050610637818285816117d6576117d66125c0565b04611cdf565b60006117eb60028484186125d6565b6106379084841661243c565b6118018282611cf5565b6003546001600160e01b0310156118735760405162461bcd60e51b815260206004820152603060248201527f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60448201526f766572666c6f77696e6720766f74657360801b606482015260840161060c565b610f3a600d611dca83611dd6565b816001600160a01b0316836001600160a01b0316141580156118a35750600081115b156116e4576001600160a01b03831615611931576001600160a01b0383166000908152600c6020526040812081906118de90611f4b85611dd6565b91509150846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051611926929190918252602082015260400190565b60405180910390a250505b6001600160a01b038216156116e4576001600160a01b0382166000908152600c60205260408120819061196790611dca85611dd6565b91509150836001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a72483836040516119af929190918252602082015260400190565b60405180910390a25050505050565b60408051602080825281830190925260609160ff84169160009180820181803683375050509182525060208101929092525090565b6119fd8282611f57565b610f3a600d611f4b83611dd6565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611a425750600090506003611ac6565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611a96573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611abf57600060019250925050611ac6565b9150600090505b94509492505050565b6000816004811115611ae357611ae36125f8565b03611aeb5750565b6001816004811115611aff57611aff6125f8565b03611b4c5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161060c565b6002816004811115611b6057611b606125f8565b03611bad5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161060c565b6003816004811115611bc157611bc16125f8565b036106f65760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161060c565b6001600160a01b038381166000908152600b60205260408082205485841683529120546116e492918216911683611881565b600080608083901c15611c6057608092831c92015b604083901c15611c7257604092831c92015b602083901c15611c8457602092831c92015b601083901c15611c9657601092831c92015b600883901c15611ca857600892831c92015b600483901c15611cba57600492831c92015b600283901c15611ccc57600292831c92015b600183901c156105595760010192915050565b6000818310611cee5781610637565b5090919050565b6001600160a01b038216611d4b5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161060c565b611d576000838361167e565b8060036000828254611d69919061243c565b90915550506001600160a01b0382166000818152600160209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3611374600083836116e9565b6000610637828461243c565b82546000908190818115611e235760008781526020902082016000190160408051808201909152905463ffffffff8116825264010000000090046001600160e01b03166020820152611e38565b60408051808201909152600080825260208201525b905080602001516001600160e01b03169350611e5884868863ffffffff16565b9250600082118015611e825750611e6d61083d565b65ffffffffffff16816000015163ffffffff16145b15611ec757611e908361209e565b60008881526020902083016000190180546001600160e01b03929092166401000000000263ffffffff909216919091179055611f41565b866040518060400160405280611eeb611ede61083d565b65ffffffffffff166113f2565b63ffffffff168152602001611eff8661209e565b6001600160e01b0390811690915282546001810184556000938452602093849020835194909301519091166401000000000263ffffffff909316929092179101555b5050935093915050565b60006106378284612589565b6001600160a01b038216611fb75760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161060c565b611fc38260008361167e565b6001600160a01b038216600090815260016020526040902054818110156120375760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161060c565b6001600160a01b03831660008181526001602090815260408083208686039055600380548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36116e4836000846116e9565b60006001600160e01b038211156114575760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b606482015260840161060c565b6000815180845260005b8181101561212d57602081850181015186830182015201612111565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006106376020830184612107565b80356001600160a01b038116811461217757600080fd5b919050565b6000806040838503121561218f57600080fd5b61219883612160565b946020939093013593505050565b6000806000606084860312156121bb57600080fd5b6121c484612160565b92506121d260208501612160565b9150604084013590509250925092565b6000602082840312156121f457600080fd5b61063782612160565b60ff60f81b881681526000602060e08184015261221d60e084018a612107565b838103604085015261222f818a612107565b606085018990526001600160a01b038816608086015260a0850187905284810360c0860152855180825283870192509083019060005b8181101561228157835183529284019291840191600101612265565b50909c9b505050505050505050505050565b6000602082840312156122a557600080fd5b5035919050565b803560ff8116811461217757600080fd5b60008060008060008060c087890312156122d657600080fd5b6122df87612160565b955060208701359450604087013593506122fb606088016122ac565b92506080870135915060a087013590509295509295509295565b600080600080600080600060e0888a03121561233057600080fd5b61233988612160565b965061234760208901612160565b95506040880135945060608801359350612363608089016122ac565b925060a0880135915060c0880135905092959891949750929550565b6000806040838503121561239257600080fd5b61239b83612160565b91506123a960208401612160565b90509250929050565b600080604083850312156123c557600080fd5b6123ce83612160565b9150602083013563ffffffff811681146123e757600080fd5b809150509250929050565b600181811c9082168061240657607f821691505b60208210810361163a57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561055957610559612426565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b601f8211156116e457600081815260208120601f850160051c810160208610156124a25750805b601f850160051c820191505b818110156124c1578281556001016124ae565b505050505050565b815167ffffffffffffffff8111156124e3576124e361244f565b6124f7816124f184546123f2565b8461247b565b602080601f83116001811461252c57600084156125145750858301515b600019600386901b1c1916600185901b1785556124c1565b600085815260208120601f198616915b8281101561255b5788860151825594840194600190910190840161253c565b50858210156125795787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8181038181111561055957610559612426565b8051602080830151919081101561163a5760001960209190910360031b1b16919050565b634e487b7160e01b600052601260045260246000fd5b6000826125f357634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052602160045260246000fdfea264697066735822122043e3e6afad14b464789532b6a0c12d3f5d5e3f1ca4480ca2561b2eb2d207c37164736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101e55760003560e01c8063715018a61161010f5780639dc29fac116100a2578063d505accf11610071578063d505accf1461043d578063dd62ed3e14610450578063f1127ed814610463578063f2fde38b146104a057600080fd5b80639dc29fac146103f1578063a457c2d714610404578063a9059cbb14610417578063c3cda5201461042a57600080fd5b80638e539e8c116100de5780638e539e8c146103a457806391ddadf4146103b757806395d89b41146103d65780639ab24eb0146103de57600080fd5b8063715018a61461035d5780637ecebe001461036557806384b0196e146103785780638da5cb5b1461039357600080fd5b80633a46b1a8116101875780635c19a95c116101565780635c19a95c146102ee5780635c975abb146103015780636fcfff451461030c57806370a082311461033457600080fd5b80633a46b1a81461027a57806340c10f191461028d5780634bf5d7e9146102a2578063587cde1e146102aa57600080fd5b806323b872dd116101c357806323b872dd1461023d578063313ce567146102505780633644e5151461025f578063395093511461026757600080fd5b806306fdde03146101ea578063095ea7b31461020857806318160ddd1461022b575b600080fd5b6101f26104b3565b6040516101ff919061214d565b60405180910390f35b61021b61021636600461217c565b610545565b60405190151581526020016101ff565b6003545b6040519081526020016101ff565b61021b61024b3660046121a6565b61055f565b604051601281526020016101ff565b61022f610583565b61021b61027536600461217c565b610592565b61022f61028836600461217c565b6105b4565b6102a061029b36600461217c565b61063e565b005b6101f2610697565b6102d66102b83660046121e2565b6001600160a01b039081166000908152600b60205260409020541690565b6040516001600160a01b0390911681526020016101ff565b6102a06102fc3660046121e2565b6106ec565b60005460ff1661021b565b61031f61031a3660046121e2565b6106f9565b60405163ffffffff90911681526020016101ff565b61022f6103423660046121e2565b6001600160a01b031660009081526001602052604090205490565b6102a061071b565b61022f6103733660046121e2565b61072f565b61038061074d565b6040516101ff97969594939291906121fd565b600a546001600160a01b03166102d6565b61022f6103b2366004612293565b6107d6565b6103bf61083d565b60405165ffffffffffff90911681526020016101ff565b6101f2610848565b61022f6103ec3660046121e2565b610857565b6102a06103ff36600461217c565b6108d9565b61021b61041236600461217c565b610926565b61021b61042536600461217c565b6109a1565b6102a06104383660046122bd565b6109af565b6102a061044b366004612315565b610ae5565b61022f61045e36600461237f565b610c49565b6104766104713660046123b2565b610c74565b60408051825163ffffffff1681526020928301516001600160e01b031692810192909252016101ff565b6102a06104ae3660046121e2565b610cf8565b6060600480546104c2906123f2565b80601f01602080910402602001604051908101604052809291908181526020018280546104ee906123f2565b801561053b5780601f106105105761010080835404028352916020019161053b565b820191906000526020600020905b81548152906001019060200180831161051e57829003601f168201915b5050505050905090565b600033610553818585610da2565b60019150505b92915050565b60003361056d858285610ec6565b610578858585610f40565b506001949350505050565b600061058d6110fc565b905090565b6000336105538185856105a58383610c49565b6105af919061243c565b610da2565b60006105be61083d565b65ffffffffffff1682106106155760405162461bcd60e51b815260206004820152601960248201527804552433230566f7465733a20667574757265206c6f6f6b757603c1b60448201526064015b60405180910390fd5b6001600160a01b0383166000908152600c602052604090206106379083611227565b9392505050565b610646611310565b610650828261136a565b816001600160a01b03167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968858260405161068b91815260200190565b60405180910390a25050565b6060436106a261083d565b65ffffffffffff16146106b457600080fd5b5060408051808201909152601d81527f6d6f64653d626c6f636b6e756d6265722666726f6d3d64656661756c74000000602082015290565b6106f63382611378565b50565b6001600160a01b0381166000908152600c6020526040812054610559906113f2565b610723611310565b61072d600061145b565b565b6001600160a01b038116600090815260086020526040812054610559565b6000606080828080836107817f000000000000000000000000000000000000000000000000000000000000000060066114ad565b6107ac7f000000000000000000000000000000000000000000000000000000000000000060076114ad565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b60006107e061083d565b65ffffffffffff1682106108325760405162461bcd60e51b815260206004820152601960248201527804552433230566f7465733a20667574757265206c6f6f6b757603c1b604482015260640161060c565b610559600d83611227565b600061058d43611552565b6060600580546104c2906123f2565b6001600160a01b0381166000908152600c602052604081205480156108c6576001600160a01b0383166000908152600c60205260409020805460001983019081106108a4576108a4612465565b60009182526020909120015464010000000090046001600160e01b03166108c9565b60005b6001600160e01b03169392505050565b6108e1611310565b6108eb82826115b9565b816001600160a01b03167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58260405161068b91815260200190565b600033816109348286610c49565b9050838110156109945760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161060c565b6105788286868403610da2565b600033610553818585610f40565b834211156109ff5760405162461bcd60e51b815260206004820152601d60248201527f4552433230566f7465733a207369676e61747572652065787069726564000000604482015260640161060c565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60208201526001600160a01b038816918101919091526060810186905260808101859052600090610a7990610a719060a001604051602081830303815290604052805190602001206115c3565b8585856115f0565b9050610a8481611618565b8614610ad25760405162461bcd60e51b815260206004820152601960248201527f4552433230566f7465733a20696e76616c6964206e6f6e636500000000000000604482015260640161060c565b610adc8188611378565b50505050505050565b83421115610b355760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e65000000604482015260640161060c565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9888888610b648c611618565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090506000610bbf826115c3565b90506000610bcf828787876115f0565b9050896001600160a01b0316816001600160a01b031614610c325760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e61747572650000604482015260640161060c565b610c3d8a8a8a610da2565b50505050505050505050565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b60408051808201909152600080825260208201526001600160a01b0383166000908152600c60205260409020805463ffffffff8416908110610cb857610cb8612465565b60009182526020918290206040805180820190915291015463ffffffff8116825264010000000090046001600160e01b0316918101919091529392505050565b610d00611310565b6001600160a01b038116610d655760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161060c565b6106f68161145b565b6000602083511015610d8a57610d8383611640565b9050610559565b81610d9584826124c9565b5060009050610559565b90565b6001600160a01b038316610e045760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161060c565b6001600160a01b038216610e655760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161060c565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610ed28484610c49565b90506000198114610f3a5781811015610f2d5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161060c565b610f3a8484848403610da2565b50505050565b6001600160a01b038316610fa45760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161060c565b6001600160a01b0382166110065760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161060c565b61101183838361167e565b6001600160a01b038316600090815260016020526040902054818110156110895760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161060c565b6001600160a01b0380851660008181526001602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906110e99086815260200190565b60405180910390a3610f3a8484846116e9565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561115557507f000000000000000000000000000000000000000000000000000000000000000046145b1561117f57507f000000000000000000000000000000000000000000000000000000000000000090565b61058d604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b815460009081816005811115611281576000611242846116f4565b61124c9085612589565b600088815260209020909150869082015463ffffffff1611156112715780915061127f565b61127c81600161243c565b92505b505b808210156112ce57600061129583836117dc565b600088815260209020909150869082015463ffffffff1611156112ba578091506112c8565b6112c581600161243c565b92505b50611281565b80156112fa576000868152602090208101600019015464010000000090046001600160e01b03166112fd565b60005b6001600160e01b03169695505050505050565b600a546001600160a01b0316331461072d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161060c565b61137482826117f7565b5050565b6001600160a01b038281166000818152600b6020818152604080842080546001845282862054949093528787166001600160a01b03198416811790915590519190951694919391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4610f3a828483611881565b600063ffffffff8211156114575760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b606482015260840161060c565b5090565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b606060ff8316156114c157610d83836119be565b8180546114cd906123f2565b80601f01602080910402602001604051908101604052809291908181526020018280546114f9906123f2565b80156115465780601f1061151b57610100808354040283529160200191611546565b820191906000526020600020905b81548152906001019060200180831161152957829003601f168201915b50505050509050610559565b600065ffffffffffff8211156114575760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203460448201526538206269747360d01b606482015260840161060c565b61137482826119f3565b60006105596115d06110fc565b8360405161190160f01b8152600281019290925260228201526042902090565b600080600061160187878787611a0b565b9150915061160e81611acf565b5095945050505050565b6001600160a01b03811660009081526008602052604090208054600181018255905b50919050565b600080829050601f8151111561166b578260405163305a27a960e01b815260040161060c919061214d565b80516116768261259c565b179392505050565b60005460ff16156116e45760405162461bcd60e51b815260206004820152602a60248201527f45524332305061757361626c653a20746f6b656e207472616e736665722077686044820152691a5b19481c185d5cd95960b21b606482015260840161060c565b505050565b6116e4838383611c19565b60008160000361170657506000919050565b6000600161171384611c4b565b901c6001901b9050600181848161172c5761172c6125c0565b048201901c90506001818481611744576117446125c0565b048201901c9050600181848161175c5761175c6125c0565b048201901c90506001818481611774576117746125c0565b048201901c9050600181848161178c5761178c6125c0565b048201901c905060018184816117a4576117a46125c0565b048201901c905060018184816117bc576117bc6125c0565b048201901c9050610637818285816117d6576117d66125c0565b04611cdf565b60006117eb60028484186125d6565b6106379084841661243c565b6118018282611cf5565b6003546001600160e01b0310156118735760405162461bcd60e51b815260206004820152603060248201527f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60448201526f766572666c6f77696e6720766f74657360801b606482015260840161060c565b610f3a600d611dca83611dd6565b816001600160a01b0316836001600160a01b0316141580156118a35750600081115b156116e4576001600160a01b03831615611931576001600160a01b0383166000908152600c6020526040812081906118de90611f4b85611dd6565b91509150846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051611926929190918252602082015260400190565b60405180910390a250505b6001600160a01b038216156116e4576001600160a01b0382166000908152600c60205260408120819061196790611dca85611dd6565b91509150836001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a72483836040516119af929190918252602082015260400190565b60405180910390a25050505050565b60408051602080825281830190925260609160ff84169160009180820181803683375050509182525060208101929092525090565b6119fd8282611f57565b610f3a600d611f4b83611dd6565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611a425750600090506003611ac6565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611a96573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611abf57600060019250925050611ac6565b9150600090505b94509492505050565b6000816004811115611ae357611ae36125f8565b03611aeb5750565b6001816004811115611aff57611aff6125f8565b03611b4c5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161060c565b6002816004811115611b6057611b606125f8565b03611bad5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161060c565b6003816004811115611bc157611bc16125f8565b036106f65760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161060c565b6001600160a01b038381166000908152600b60205260408082205485841683529120546116e492918216911683611881565b600080608083901c15611c6057608092831c92015b604083901c15611c7257604092831c92015b602083901c15611c8457602092831c92015b601083901c15611c9657601092831c92015b600883901c15611ca857600892831c92015b600483901c15611cba57600492831c92015b600283901c15611ccc57600292831c92015b600183901c156105595760010192915050565b6000818310611cee5781610637565b5090919050565b6001600160a01b038216611d4b5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161060c565b611d576000838361167e565b8060036000828254611d69919061243c565b90915550506001600160a01b0382166000818152600160209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3611374600083836116e9565b6000610637828461243c565b82546000908190818115611e235760008781526020902082016000190160408051808201909152905463ffffffff8116825264010000000090046001600160e01b03166020820152611e38565b60408051808201909152600080825260208201525b905080602001516001600160e01b03169350611e5884868863ffffffff16565b9250600082118015611e825750611e6d61083d565b65ffffffffffff16816000015163ffffffff16145b15611ec757611e908361209e565b60008881526020902083016000190180546001600160e01b03929092166401000000000263ffffffff909216919091179055611f41565b866040518060400160405280611eeb611ede61083d565b65ffffffffffff166113f2565b63ffffffff168152602001611eff8661209e565b6001600160e01b0390811690915282546001810184556000938452602093849020835194909301519091166401000000000263ffffffff909316929092179101555b5050935093915050565b60006106378284612589565b6001600160a01b038216611fb75760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161060c565b611fc38260008361167e565b6001600160a01b038216600090815260016020526040902054818110156120375760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161060c565b6001600160a01b03831660008181526001602090815260408083208686039055600380548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36116e4836000846116e9565b60006001600160e01b038211156114575760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b606482015260840161060c565b6000815180845260005b8181101561212d57602081850181015186830182015201612111565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006106376020830184612107565b80356001600160a01b038116811461217757600080fd5b919050565b6000806040838503121561218f57600080fd5b61219883612160565b946020939093013593505050565b6000806000606084860312156121bb57600080fd5b6121c484612160565b92506121d260208501612160565b9150604084013590509250925092565b6000602082840312156121f457600080fd5b61063782612160565b60ff60f81b881681526000602060e08184015261221d60e084018a612107565b838103604085015261222f818a612107565b606085018990526001600160a01b038816608086015260a0850187905284810360c0860152855180825283870192509083019060005b8181101561228157835183529284019291840191600101612265565b50909c9b505050505050505050505050565b6000602082840312156122a557600080fd5b5035919050565b803560ff8116811461217757600080fd5b60008060008060008060c087890312156122d657600080fd5b6122df87612160565b955060208701359450604087013593506122fb606088016122ac565b92506080870135915060a087013590509295509295509295565b600080600080600080600060e0888a03121561233057600080fd5b61233988612160565b965061234760208901612160565b95506040880135945060608801359350612363608089016122ac565b925060a0880135915060c0880135905092959891949750929550565b6000806040838503121561239257600080fd5b61239b83612160565b91506123a960208401612160565b90509250929050565b600080604083850312156123c557600080fd5b6123ce83612160565b9150602083013563ffffffff811681146123e757600080fd5b809150509250929050565b600181811c9082168061240657607f821691505b60208210810361163a57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561055957610559612426565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b601f8211156116e457600081815260208120601f850160051c810160208610156124a25750805b601f850160051c820191505b818110156124c1578281556001016124ae565b505050505050565b815167ffffffffffffffff8111156124e3576124e361244f565b6124f7816124f184546123f2565b8461247b565b602080601f83116001811461252c57600084156125145750858301515b600019600386901b1c1916600185901b1785556124c1565b600085815260208120601f198616915b8281101561255b5788860151825594840194600190910190840161253c565b50858210156125795787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8181038181111561055957610559612426565b8051602080830151919081101561163a5760001960209190910360031b1b16919050565b634e487b7160e01b600052601260045260246000fd5b6000826125f357634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052602160045260246000fdfea264697066735822122043e3e6afad14b464789532b6a0c12d3f5d5e3f1ca4480ca2561b2eb2d207c37164736f6c63430008110033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "kind": "dev",
    "methods": {
      "CLOCK_MODE()": {
        "details": "Description of the clock"
      },
      "DOMAIN_SEPARATOR()": {
        "details": "See {IERC20Permit-DOMAIN_SEPARATOR}."
      },
      "checkpoints(address,uint32)": {
        "details": "Get the `pos`-th checkpoint for `account`."
      },
      "clock()": {
        "details": "Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting)."
      },
      "delegate(address)": {
        "details": "Delegate votes from the sender to `delegatee`."
      },
      "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "Delegates votes from signer to `delegatee`"
      },
      "delegates(address)": {
        "details": "Get the address `account` is currently delegating to."
      },
      "eip712Domain()": {
        "details": "See {EIP-5267}."
      },
      "getPastTotalSupply(uint256)": {
        "details": "Retrieve the `totalSupply` at the end of `timepoint`. Note, this value is the sum of all balances. It is NOT the sum of all the delegated votes! Requirements: - `timepoint` must be in the past"
      },
      "getPastVotes(address,uint256)": {
        "details": "Retrieve the number of votes for `account` at the end of `timepoint`. Requirements: - `timepoint` must be in the past"
      },
      "getVotes(address)": {
        "details": "Gets the current votes balance for `account`"
      },
      "nonces(address)": {
        "details": "See {IERC20Permit-nonces}."
      },
      "numCheckpoints(address)": {
        "details": "Get number of checkpoints for `account`."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "See {IERC20Permit-permit}."
      }
    },
    "version": 1
  },
  "evm": {
    "bytecode": {
      "functionDebugData": {
        "@_1632": {
          "entryPoint": null,
          "id": 1632,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@_45": {
          "entryPoint": null,
          "id": 45,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@_6336": {
          "entryPoint": null,
          "id": 6336,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@_687": {
          "entryPoint": null,
          "id": 687,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@_8988": {
          "entryPoint": null,
          "id": 8988,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@_9982": {
          "entryPoint": null,
          "id": 9982,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@_buildDomainSeparator_10029": {
          "entryPoint": null,
          "id": 10029,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@_msgSender_8716": {
          "entryPoint": null,
          "id": 8716,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@_transferOwnership_9070": {
          "entryPoint": 468,
          "id": 9070,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@getStringSlot_9325": {
          "entryPoint": 626,
          "id": 9325,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@toShortStringWithFallback_9211": {
          "entryPoint": 388,
          "id": 9211,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@toShortString_9125": {
          "entryPoint": 550,
          "id": 9125,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 6,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": 998,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "array_dataslot_string_storage": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "clean_up_bytearray_end_slots_string_storage": {
          "entryPoint": 711,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32": {
          "entryPoint": 1078,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
          "entryPoint": 794,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "extract_byte_array_length": {
          "entryPoint": 651,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "extract_used_part_and_set_length_of_short_byte_array": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "panic_error_0x41": {
          "entryPoint": 629,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        }
      },
      "generatedSources": [
        {
          "ast": {
            "nodeType": "YulBlock",
            "src": "0:4081:49",
            "statements": [
              {
                "nodeType": "YulBlock",
                "src": "6:3:49",
                "statements": []
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "46:95:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "63:1:49",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "70:3:49",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "75:10:49",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "66:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "66:20:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "56:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "56:31:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "56:31:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "103:1:49",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "106:4:49",
                            "type": "",
                            "value": "0x41"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "96:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "96:15:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "96:15:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "127:1:49",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "130:4:49",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "120:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "120:15:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "120:15:49"
                    }
                  ]
                },
                "name": "panic_error_0x41",
                "nodeType": "YulFunctionDefinition",
                "src": "14:127:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "201:325:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "211:22:49",
                      "value": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "225:1:49",
                            "type": "",
                            "value": "1"
                          },
                          {
                            "name": "data",
                            "nodeType": "YulIdentifier",
                            "src": "228:4:49"
                          }
                        ],
                        "functionName": {
                          "name": "shr",
                          "nodeType": "YulIdentifier",
                          "src": "221:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "221:12:49"
                      },
                      "variableNames": [
                        {
                          "name": "length",
                          "nodeType": "YulIdentifier",
                          "src": "211:6:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "242:38:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "data",
                            "nodeType": "YulIdentifier",
                            "src": "272:4:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "278:1:49",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "and",
                          "nodeType": "YulIdentifier",
                          "src": "268:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "268:12:49"
                      },
                      "variables": [
                        {
                          "name": "outOfPlaceEncoding",
                          "nodeType": "YulTypedName",
                          "src": "246:18:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "319:31:49",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "321:27:49",
                            "value": {
                              "arguments": [
                                {
                                  "name": "length",
                                  "nodeType": "YulIdentifier",
                                  "src": "335:6:49"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "343:4:49",
                                  "type": "",
                                  "value": "0x7f"
                                }
                              ],
                              "functionName": {
                                "name": "and",
                                "nodeType": "YulIdentifier",
                                "src": "331:3:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "331:17:49"
                            },
                            "variableNames": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "321:6:49"
                              }
                            ]
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "outOfPlaceEncoding",
                            "nodeType": "YulIdentifier",
                            "src": "299:18:49"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "292:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "292:26:49"
                      },
                      "nodeType": "YulIf",
                      "src": "289:61:49"
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "409:111:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "430:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "437:3:49",
                                      "type": "",
                                      "value": "224"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "442:10:49",
                                      "type": "",
                                      "value": "0x4e487b71"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shl",
                                    "nodeType": "YulIdentifier",
                                    "src": "433:3:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "433:20:49"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "423:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "423:31:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "423:31:49"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "474:1:49",
                                  "type": "",
                                  "value": "4"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "477:4:49",
                                  "type": "",
                                  "value": "0x22"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "467:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "467:15:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "467:15:49"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "502:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "505:4:49",
                                  "type": "",
                                  "value": "0x24"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "495:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "495:15:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "495:15:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "outOfPlaceEncoding",
                            "nodeType": "YulIdentifier",
                            "src": "365:18:49"
                          },
                          {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "388:6:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "396:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "385:2:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "385:14:49"
                          }
                        ],
                        "functionName": {
                          "name": "eq",
                          "nodeType": "YulIdentifier",
                          "src": "362:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "362:38:49"
                      },
                      "nodeType": "YulIf",
                      "src": "359:161:49"
                    }
                  ]
                },
                "name": "extract_byte_array_length",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "data",
                    "nodeType": "YulTypedName",
                    "src": "181:4:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "length",
                    "nodeType": "YulTypedName",
                    "src": "190:6:49",
                    "type": ""
                  }
                ],
                "src": "146:380:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "587:65:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "604:1:49",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "name": "ptr",
                            "nodeType": "YulIdentifier",
                            "src": "607:3:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "597:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "597:14:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "597:14:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "620:26:49",
                      "value": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "638:1:49",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "641:4:49",
                            "type": "",
                            "value": "0x20"
                          }
                        ],
                        "functionName": {
                          "name": "keccak256",
                          "nodeType": "YulIdentifier",
                          "src": "628:9:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "628:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "data",
                          "nodeType": "YulIdentifier",
                          "src": "620:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "array_dataslot_string_storage",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "ptr",
                    "nodeType": "YulTypedName",
                    "src": "570:3:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "data",
                    "nodeType": "YulTypedName",
                    "src": "578:4:49",
                    "type": ""
                  }
                ],
                "src": "531:121:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "738:464:49",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "771:425:49",
                        "statements": [
                          {
                            "nodeType": "YulVariableDeclaration",
                            "src": "785:11:49",
                            "value": {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "795:1:49",
                              "type": "",
                              "value": "0"
                            },
                            "variables": [
                              {
                                "name": "_1",
                                "nodeType": "YulTypedName",
                                "src": "789:2:49",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "816:2:49"
                                },
                                {
                                  "name": "array",
                                  "nodeType": "YulIdentifier",
                                  "src": "820:5:49"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "809:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "809:17:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "809:17:49"
                          },
                          {
                            "nodeType": "YulVariableDeclaration",
                            "src": "839:31:49",
                            "value": {
                              "arguments": [
                                {
                                  "name": "_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "861:2:49"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "865:4:49",
                                  "type": "",
                                  "value": "0x20"
                                }
                              ],
                              "functionName": {
                                "name": "keccak256",
                                "nodeType": "YulIdentifier",
                                "src": "851:9:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "851:19:49"
                            },
                            "variables": [
                              {
                                "name": "data",
                                "nodeType": "YulTypedName",
                                "src": "843:4:49",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "nodeType": "YulVariableDeclaration",
                            "src": "883:57:49",
                            "value": {
                              "arguments": [
                                {
                                  "name": "data",
                                  "nodeType": "YulIdentifier",
                                  "src": "906:4:49"
                                },
                                {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "916:1:49",
                                      "type": "",
                                      "value": "5"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "startIndex",
                                          "nodeType": "YulIdentifier",
                                          "src": "923:10:49"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "935:2:49",
                                          "type": "",
                                          "value": "31"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "919:3:49"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "919:19:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shr",
                                    "nodeType": "YulIdentifier",
                                    "src": "912:3:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "912:27:49"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "902:3:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "902:38:49"
                            },
                            "variables": [
                              {
                                "name": "deleteStart",
                                "nodeType": "YulTypedName",
                                "src": "887:11:49",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "body": {
                              "nodeType": "YulBlock",
                              "src": "977:23:49",
                              "statements": [
                                {
                                  "nodeType": "YulAssignment",
                                  "src": "979:19:49",
                                  "value": {
                                    "name": "data",
                                    "nodeType": "YulIdentifier",
                                    "src": "994:4:49"
                                  },
                                  "variableNames": [
                                    {
                                      "name": "deleteStart",
                                      "nodeType": "YulIdentifier",
                                      "src": "979:11:49"
                                    }
                                  ]
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "name": "startIndex",
                                  "nodeType": "YulIdentifier",
                                  "src": "959:10:49"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "971:4:49",
                                  "type": "",
                                  "value": "0x20"
                                }
                              ],
                              "functionName": {
                                "name": "lt",
                                "nodeType": "YulIdentifier",
                                "src": "956:2:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "956:20:49"
                            },
                            "nodeType": "YulIf",
                            "src": "953:47:49"
                          },
                          {
                            "nodeType": "YulVariableDeclaration",
                            "src": "1013:41:49",
                            "value": {
                              "arguments": [
                                {
                                  "name": "data",
                                  "nodeType": "YulIdentifier",
                                  "src": "1027:4:49"
                                },
                                {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1037:1:49",
                                      "type": "",
                                      "value": "5"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "len",
                                          "nodeType": "YulIdentifier",
                                          "src": "1044:3:49"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1049:2:49",
                                          "type": "",
                                          "value": "31"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "1040:3:49"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1040:12:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shr",
                                    "nodeType": "YulIdentifier",
                                    "src": "1033:3:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1033:20:49"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "1023:3:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1023:31:49"
                            },
                            "variables": [
                              {
                                "name": "_2",
                                "nodeType": "YulTypedName",
                                "src": "1017:2:49",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "nodeType": "YulVariableDeclaration",
                            "src": "1067:24:49",
                            "value": {
                              "name": "deleteStart",
                              "nodeType": "YulIdentifier",
                              "src": "1080:11:49"
                            },
                            "variables": [
                              {
                                "name": "start",
                                "nodeType": "YulTypedName",
                                "src": "1071:5:49",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "body": {
                              "nodeType": "YulBlock",
                              "src": "1165:21:49",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "name": "start",
                                        "nodeType": "YulIdentifier",
                                        "src": "1174:5:49"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "1181:2:49"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sstore",
                                      "nodeType": "YulIdentifier",
                                      "src": "1167:6:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1167:17:49"
                                  },
                                  "nodeType": "YulExpressionStatement",
                                  "src": "1167:17:49"
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "name": "start",
                                  "nodeType": "YulIdentifier",
                                  "src": "1115:5:49"
                                },
                                {
                                  "name": "_2",
                                  "nodeType": "YulIdentifier",
                                  "src": "1122:2:49"
                                }
                              ],
                              "functionName": {
                                "name": "lt",
                                "nodeType": "YulIdentifier",
                                "src": "1112:2:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1112:13:49"
                            },
                            "nodeType": "YulForLoop",
                            "post": {
                              "nodeType": "YulBlock",
                              "src": "1126:26:49",
                              "statements": [
                                {
                                  "nodeType": "YulAssignment",
                                  "src": "1128:22:49",
                                  "value": {
                                    "arguments": [
                                      {
                                        "name": "start",
                                        "nodeType": "YulIdentifier",
                                        "src": "1141:5:49"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1148:1:49",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1137:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1137:13:49"
                                  },
                                  "variableNames": [
                                    {
                                      "name": "start",
                                      "nodeType": "YulIdentifier",
                                      "src": "1128:5:49"
                                    }
                                  ]
                                }
                              ]
                            },
                            "pre": {
                              "nodeType": "YulBlock",
                              "src": "1108:3:49",
                              "statements": []
                            },
                            "src": "1104:82:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "len",
                            "nodeType": "YulIdentifier",
                            "src": "754:3:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "759:2:49",
                            "type": "",
                            "value": "31"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "751:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "751:11:49"
                      },
                      "nodeType": "YulIf",
                      "src": "748:448:49"
                    }
                  ]
                },
                "name": "clean_up_bytearray_end_slots_string_storage",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "array",
                    "nodeType": "YulTypedName",
                    "src": "710:5:49",
                    "type": ""
                  },
                  {
                    "name": "len",
                    "nodeType": "YulTypedName",
                    "src": "717:3:49",
                    "type": ""
                  },
                  {
                    "name": "startIndex",
                    "nodeType": "YulTypedName",
                    "src": "722:10:49",
                    "type": ""
                  }
                ],
                "src": "657:545:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1292:81:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "1302:65:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "1317:4:49"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1335:1:49",
                                            "type": "",
                                            "value": "3"
                                          },
                                          {
                                            "name": "len",
                                            "nodeType": "YulIdentifier",
                                            "src": "1338:3:49"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "1331:3:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1331:11:49"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1348:1:49",
                                            "type": "",
                                            "value": "0"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "1344:3:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1344:6:49"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shr",
                                      "nodeType": "YulIdentifier",
                                      "src": "1327:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1327:24:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "1323:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1323:29:49"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "1313:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1313:40:49"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1359:1:49",
                                "type": "",
                                "value": "1"
                              },
                              {
                                "name": "len",
                                "nodeType": "YulIdentifier",
                                "src": "1362:3:49"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "1355:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1355:11:49"
                          }
                        ],
                        "functionName": {
                          "name": "or",
                          "nodeType": "YulIdentifier",
                          "src": "1310:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1310:57:49"
                      },
                      "variableNames": [
                        {
                          "name": "used",
                          "nodeType": "YulIdentifier",
                          "src": "1302:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "extract_used_part_and_set_length_of_short_byte_array",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "data",
                    "nodeType": "YulTypedName",
                    "src": "1269:4:49",
                    "type": ""
                  },
                  {
                    "name": "len",
                    "nodeType": "YulTypedName",
                    "src": "1275:3:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "used",
                    "nodeType": "YulTypedName",
                    "src": "1283:4:49",
                    "type": ""
                  }
                ],
                "src": "1207:166:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1474:1256:49",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "1484:24:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "src",
                            "nodeType": "YulIdentifier",
                            "src": "1504:3:49"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "1498:5:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1498:10:49"
                      },
                      "variables": [
                        {
                          "name": "newLen",
                          "nodeType": "YulTypedName",
                          "src": "1488:6:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1551:22:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x41",
                                "nodeType": "YulIdentifier",
                                "src": "1553:16:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1553:18:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1553:18:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "newLen",
                            "nodeType": "YulIdentifier",
                            "src": "1523:6:49"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1539:2:49",
                                    "type": "",
                                    "value": "64"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1543:1:49",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "1535:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1535:10:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1547:1:49",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "1531:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1531:18:49"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "1520:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1520:30:49"
                      },
                      "nodeType": "YulIf",
                      "src": "1517:56:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "slot",
                            "nodeType": "YulIdentifier",
                            "src": "1626:4:49"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "slot",
                                    "nodeType": "YulIdentifier",
                                    "src": "1664:4:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "sload",
                                  "nodeType": "YulIdentifier",
                                  "src": "1658:5:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1658:11:49"
                              }
                            ],
                            "functionName": {
                              "name": "extract_byte_array_length",
                              "nodeType": "YulIdentifier",
                              "src": "1632:25:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1632:38:49"
                          },
                          {
                            "name": "newLen",
                            "nodeType": "YulIdentifier",
                            "src": "1672:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "clean_up_bytearray_end_slots_string_storage",
                          "nodeType": "YulIdentifier",
                          "src": "1582:43:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1582:97:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1582:97:49"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "1688:18:49",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "1705:1:49",
                        "type": "",
                        "value": "0"
                      },
                      "variables": [
                        {
                          "name": "srcOffset",
                          "nodeType": "YulTypedName",
                          "src": "1692:9:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "1715:23:49",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "1734:4:49",
                        "type": "",
                        "value": "0x20"
                      },
                      "variables": [
                        {
                          "name": "srcOffset_1",
                          "nodeType": "YulTypedName",
                          "src": "1719:11:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1747:24:49",
                      "value": {
                        "name": "srcOffset_1",
                        "nodeType": "YulIdentifier",
                        "src": "1760:11:49"
                      },
                      "variableNames": [
                        {
                          "name": "srcOffset",
                          "nodeType": "YulIdentifier",
                          "src": "1747:9:49"
                        }
                      ]
                    },
                    {
                      "cases": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1817:656:49",
                            "statements": [
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "1831:35:49",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "newLen",
                                      "nodeType": "YulIdentifier",
                                      "src": "1850:6:49"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1862:2:49",
                                          "type": "",
                                          "value": "31"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "not",
                                        "nodeType": "YulIdentifier",
                                        "src": "1858:3:49"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1858:7:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "1846:3:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1846:20:49"
                                },
                                "variables": [
                                  {
                                    "name": "loopEnd",
                                    "nodeType": "YulTypedName",
                                    "src": "1835:7:49",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "1879:49:49",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "slot",
                                      "nodeType": "YulIdentifier",
                                      "src": "1923:4:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "array_dataslot_string_storage",
                                    "nodeType": "YulIdentifier",
                                    "src": "1893:29:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1893:35:49"
                                },
                                "variables": [
                                  {
                                    "name": "dstPtr",
                                    "nodeType": "YulTypedName",
                                    "src": "1883:6:49",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "1941:10:49",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1950:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                "variables": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulTypedName",
                                    "src": "1945:1:49",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "2028:172:49",
                                  "statements": [
                                    {
                                      "expression": {
                                        "arguments": [
                                          {
                                            "name": "dstPtr",
                                            "nodeType": "YulIdentifier",
                                            "src": "2053:6:49"
                                          },
                                          {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "src",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "2071:3:49"
                                                  },
                                                  {
                                                    "name": "srcOffset",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "2076:9:49"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2067:3:49"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "2067:19:49"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mload",
                                              "nodeType": "YulIdentifier",
                                              "src": "2061:5:49"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2061:26:49"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sstore",
                                          "nodeType": "YulIdentifier",
                                          "src": "2046:6:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2046:42:49"
                                      },
                                      "nodeType": "YulExpressionStatement",
                                      "src": "2046:42:49"
                                    },
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "2105:24:49",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "dstPtr",
                                            "nodeType": "YulIdentifier",
                                            "src": "2119:6:49"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2127:1:49",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "2115:3:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2115:14:49"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "dstPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "2105:6:49"
                                        }
                                      ]
                                    },
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "2146:40:49",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "srcOffset",
                                            "nodeType": "YulIdentifier",
                                            "src": "2163:9:49"
                                          },
                                          {
                                            "name": "srcOffset_1",
                                            "nodeType": "YulIdentifier",
                                            "src": "2174:11:49"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "2159:3:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2159:27:49"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "srcOffset",
                                          "nodeType": "YulIdentifier",
                                          "src": "2146:9:49"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "1975:1:49"
                                    },
                                    {
                                      "name": "loopEnd",
                                      "nodeType": "YulIdentifier",
                                      "src": "1978:7:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "lt",
                                    "nodeType": "YulIdentifier",
                                    "src": "1972:2:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1972:14:49"
                                },
                                "nodeType": "YulForLoop",
                                "post": {
                                  "nodeType": "YulBlock",
                                  "src": "1987:28:49",
                                  "statements": [
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "1989:24:49",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "i",
                                            "nodeType": "YulIdentifier",
                                            "src": "1998:1:49"
                                          },
                                          {
                                            "name": "srcOffset_1",
                                            "nodeType": "YulIdentifier",
                                            "src": "2001:11:49"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "1994:3:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1994:19:49"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "1989:1:49"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "pre": {
                                  "nodeType": "YulBlock",
                                  "src": "1968:3:49",
                                  "statements": []
                                },
                                "src": "1964:236:49"
                              },
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "2248:166:49",
                                  "statements": [
                                    {
                                      "nodeType": "YulVariableDeclaration",
                                      "src": "2266:43:49",
                                      "value": {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "name": "src",
                                                "nodeType": "YulIdentifier",
                                                "src": "2293:3:49"
                                              },
                                              {
                                                "name": "srcOffset",
                                                "nodeType": "YulIdentifier",
                                                "src": "2298:9:49"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "2289:3:49"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2289:19:49"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "mload",
                                          "nodeType": "YulIdentifier",
                                          "src": "2283:5:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2283:26:49"
                                      },
                                      "variables": [
                                        {
                                          "name": "lastValue",
                                          "nodeType": "YulTypedName",
                                          "src": "2270:9:49",
                                          "type": ""
                                        }
                                      ]
                                    },
                                    {
                                      "expression": {
                                        "arguments": [
                                          {
                                            "name": "dstPtr",
                                            "nodeType": "YulIdentifier",
                                            "src": "2333:6:49"
                                          },
                                          {
                                            "arguments": [
                                              {
                                                "name": "lastValue",
                                                "nodeType": "YulIdentifier",
                                                "src": "2345:9:49"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "arguments": [
                                                      {
                                                        "arguments": [
                                                          {
                                                            "arguments": [
                                                              {
                                                                "kind": "number",
                                                                "nodeType": "YulLiteral",
                                                                "src": "2372:1:49",
                                                                "type": "",
                                                                "value": "3"
                                                              },
                                                              {
                                                                "name": "newLen",
                                                                "nodeType": "YulIdentifier",
                                                                "src": "2375:6:49"
                                                              }
                                                            ],
                                                            "functionName": {
                                                              "name": "shl",
                                                              "nodeType": "YulIdentifier",
                                                              "src": "2368:3:49"
                                                            },
                                                            "nodeType": "YulFunctionCall",
                                                            "src": "2368:14:49"
                                                          },
                                                          {
                                                            "kind": "number",
                                                            "nodeType": "YulLiteral",
                                                            "src": "2384:3:49",
                                                            "type": "",
                                                            "value": "248"
                                                          }
                                                        ],
                                                        "functionName": {
                                                          "name": "and",
                                                          "nodeType": "YulIdentifier",
                                                          "src": "2364:3:49"
                                                        },
                                                        "nodeType": "YulFunctionCall",
                                                        "src": "2364:24:49"
                                                      },
                                                      {
                                                        "arguments": [
                                                          {
                                                            "kind": "number",
                                                            "nodeType": "YulLiteral",
                                                            "src": "2394:1:49",
                                                            "type": "",
                                                            "value": "0"
                                                          }
                                                        ],
                                                        "functionName": {
                                                          "name": "not",
                                                          "nodeType": "YulIdentifier",
                                                          "src": "2390:3:49"
                                                        },
                                                        "nodeType": "YulFunctionCall",
                                                        "src": "2390:6:49"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "shr",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "2360:3:49"
                                                    },
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "2360:37:49"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "not",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2356:3:49"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "2356:42:49"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "and",
                                              "nodeType": "YulIdentifier",
                                              "src": "2341:3:49"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2341:58:49"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sstore",
                                          "nodeType": "YulIdentifier",
                                          "src": "2326:6:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2326:74:49"
                                      },
                                      "nodeType": "YulExpressionStatement",
                                      "src": "2326:74:49"
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "loopEnd",
                                      "nodeType": "YulIdentifier",
                                      "src": "2219:7:49"
                                    },
                                    {
                                      "name": "newLen",
                                      "nodeType": "YulIdentifier",
                                      "src": "2228:6:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "lt",
                                    "nodeType": "YulIdentifier",
                                    "src": "2216:2:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2216:19:49"
                                },
                                "nodeType": "YulIf",
                                "src": "2213:201:49"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "slot",
                                      "nodeType": "YulIdentifier",
                                      "src": "2434:4:49"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "2448:1:49",
                                              "type": "",
                                              "value": "1"
                                            },
                                            {
                                              "name": "newLen",
                                              "nodeType": "YulIdentifier",
                                              "src": "2451:6:49"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "shl",
                                            "nodeType": "YulIdentifier",
                                            "src": "2444:3:49"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "2444:14:49"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2460:1:49",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "2440:3:49"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2440:22:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "sstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "2427:6:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2427:36:49"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2427:36:49"
                              }
                            ]
                          },
                          "nodeType": "YulCase",
                          "src": "1810:663:49",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1815:1:49",
                            "type": "",
                            "value": "1"
                          }
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2490:234:49",
                            "statements": [
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "2504:14:49",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2517:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                "variables": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulTypedName",
                                    "src": "2508:5:49",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "2553:67:49",
                                  "statements": [
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "2571:35:49",
                                      "value": {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "name": "src",
                                                "nodeType": "YulIdentifier",
                                                "src": "2590:3:49"
                                              },
                                              {
                                                "name": "srcOffset",
                                                "nodeType": "YulIdentifier",
                                                "src": "2595:9:49"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "2586:3:49"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2586:19:49"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "mload",
                                          "nodeType": "YulIdentifier",
                                          "src": "2580:5:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2580:26:49"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "value",
                                          "nodeType": "YulIdentifier",
                                          "src": "2571:5:49"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "condition": {
                                  "name": "newLen",
                                  "nodeType": "YulIdentifier",
                                  "src": "2534:6:49"
                                },
                                "nodeType": "YulIf",
                                "src": "2531:89:49"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "slot",
                                      "nodeType": "YulIdentifier",
                                      "src": "2640:4:49"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "value",
                                          "nodeType": "YulIdentifier",
                                          "src": "2699:5:49"
                                        },
                                        {
                                          "name": "newLen",
                                          "nodeType": "YulIdentifier",
                                          "src": "2706:6:49"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "extract_used_part_and_set_length_of_short_byte_array",
                                        "nodeType": "YulIdentifier",
                                        "src": "2646:52:49"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2646:67:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "sstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "2633:6:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2633:81:49"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2633:81:49"
                              }
                            ]
                          },
                          "nodeType": "YulCase",
                          "src": "2482:242:49",
                          "value": "default"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "name": "newLen",
                            "nodeType": "YulIdentifier",
                            "src": "1790:6:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1798:2:49",
                            "type": "",
                            "value": "31"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "1787:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1787:14:49"
                      },
                      "nodeType": "YulSwitch",
                      "src": "1780:944:49"
                    }
                  ]
                },
                "name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "slot",
                    "nodeType": "YulTypedName",
                    "src": "1459:4:49",
                    "type": ""
                  },
                  {
                    "name": "src",
                    "nodeType": "YulTypedName",
                    "src": "1465:3:49",
                    "type": ""
                  }
                ],
                "src": "1378:1352:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2948:276:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "2958:27:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2970:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2981:3:49",
                            "type": "",
                            "value": "160"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "2966:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2966:19:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "2958:4:49"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3001:9:49"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "3012:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2994:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2994:25:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2994:25:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3039:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3050:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3035:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3035:18:49"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "3055:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3028:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3028:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3028:34:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3082:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3093:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3078:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3078:18:49"
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulIdentifier",
                            "src": "3098:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3071:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3071:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3071:34:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3125:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3136:2:49",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3121:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3121:18:49"
                          },
                          {
                            "name": "value3",
                            "nodeType": "YulIdentifier",
                            "src": "3141:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3114:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3114:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3114:34:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3168:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3179:3:49",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3164:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3164:19:49"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value4",
                                "nodeType": "YulIdentifier",
                                "src": "3189:6:49"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3205:3:49",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3210:1:49",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "3201:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3201:11:49"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3214:1:49",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3197:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3197:19:49"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "3185:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3185:32:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3157:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3157:61:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3157:61:49"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "2885:9:49",
                    "type": ""
                  },
                  {
                    "name": "value4",
                    "nodeType": "YulTypedName",
                    "src": "2896:6:49",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "2904:6:49",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "2912:6:49",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "2920:6:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "2928:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "2939:4:49",
                    "type": ""
                  }
                ],
                "src": "2735:489:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3350:427:49",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "3360:12:49",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "3370:2:49",
                        "type": "",
                        "value": "32"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "3364:2:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3388:9:49"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "3399:2:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3381:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3381:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3381:21:49"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "3411:27:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "3431:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "3425:5:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3425:13:49"
                      },
                      "variables": [
                        {
                          "name": "length",
                          "nodeType": "YulTypedName",
                          "src": "3415:6:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3458:9:49"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "3469:2:49"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3454:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3454:18:49"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "3474:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3447:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3447:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3447:34:49"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "3490:10:49",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "3499:1:49",
                        "type": "",
                        "value": "0"
                      },
                      "variables": [
                        {
                          "name": "i",
                          "nodeType": "YulTypedName",
                          "src": "3494:1:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "3559:90:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "headStart",
                                          "nodeType": "YulIdentifier",
                                          "src": "3588:9:49"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "3599:1:49"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "3584:3:49"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3584:17:49"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3603:2:49",
                                      "type": "",
                                      "value": "64"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "3580:3:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3580:26:49"
                                },
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "value0",
                                              "nodeType": "YulIdentifier",
                                              "src": "3622:6:49"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "3630:1:49"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "3618:3:49"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "3618:14:49"
                                        },
                                        {
                                          "name": "_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "3634:2:49"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "3614:3:49"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3614:23:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "3608:5:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3608:30:49"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "3573:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3573:66:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "3573:66:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "i",
                            "nodeType": "YulIdentifier",
                            "src": "3520:1:49"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "3523:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "3517:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3517:13:49"
                      },
                      "nodeType": "YulForLoop",
                      "post": {
                        "nodeType": "YulBlock",
                        "src": "3531:19:49",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "3533:15:49",
                            "value": {
                              "arguments": [
                                {
                                  "name": "i",
                                  "nodeType": "YulIdentifier",
                                  "src": "3542:1:49"
                                },
                                {
                                  "name": "_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "3545:2:49"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "3538:3:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3538:10:49"
                            },
                            "variableNames": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "3533:1:49"
                              }
                            ]
                          }
                        ]
                      },
                      "pre": {
                        "nodeType": "YulBlock",
                        "src": "3513:3:49",
                        "statements": []
                      },
                      "src": "3509:140:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3673:9:49"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "3684:6:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3669:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3669:22:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3693:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3665:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3665:31:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3698:1:49",
                            "type": "",
                            "value": "0"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3658:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3658:42:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3658:42:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3709:62:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3725:9:49"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "3744:6:49"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3752:2:49",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "3740:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3740:15:49"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3761:2:49",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "3757:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3757:7:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "3736:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3736:29:49"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3721:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3721:45:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3768:2:49",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "3717:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3717:54:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "3709:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "3319:9:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "3330:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "3341:4:49",
                    "type": ""
                  }
                ],
                "src": "3229:548:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3876:203:49",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "3886:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "array",
                            "nodeType": "YulIdentifier",
                            "src": "3906:5:49"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "3900:5:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3900:12:49"
                      },
                      "variables": [
                        {
                          "name": "length",
                          "nodeType": "YulTypedName",
                          "src": "3890:6:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3921:32:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "array",
                                "nodeType": "YulIdentifier",
                                "src": "3940:5:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3947:4:49",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3936:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3936:16:49"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "3930:5:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3930:23:49"
                      },
                      "variableNames": [
                        {
                          "name": "value",
                          "nodeType": "YulIdentifier",
                          "src": "3921:5:49"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "3990:83:49",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "4004:59:49",
                            "value": {
                              "arguments": [
                                {
                                  "name": "value",
                                  "nodeType": "YulIdentifier",
                                  "src": "4017:5:49"
                                },
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "4032:1:49",
                                          "type": "",
                                          "value": "3"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "4039:4:49",
                                              "type": "",
                                              "value": "0x20"
                                            },
                                            {
                                              "name": "length",
                                              "nodeType": "YulIdentifier",
                                              "src": "4045:6:49"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "sub",
                                            "nodeType": "YulIdentifier",
                                            "src": "4035:3:49"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "4035:17:49"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "4028:3:49"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4028:25:49"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "4059:1:49",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "not",
                                        "nodeType": "YulIdentifier",
                                        "src": "4055:3:49"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4055:6:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shl",
                                    "nodeType": "YulIdentifier",
                                    "src": "4024:3:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4024:38:49"
                                }
                              ],
                              "functionName": {
                                "name": "and",
                                "nodeType": "YulIdentifier",
                                "src": "4013:3:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "4013:50:49"
                            },
                            "variableNames": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "4004:5:49"
                              }
                            ]
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "3968:6:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3976:4:49",
                            "type": "",
                            "value": "0x20"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "3965:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3965:16:49"
                      },
                      "nodeType": "YulIf",
                      "src": "3962:111:49"
                    }
                  ]
                },
                "name": "convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "array",
                    "nodeType": "YulTypedName",
                    "src": "3856:5:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "3866:5:49",
                    "type": ""
                  }
                ],
                "src": "3782:297:49"
              }
            ]
          },
          "contents": "{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        mstore(add(add(headStart, length), 64), 0)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32(array) -> value\n    {\n        let length := mload(array)\n        value := mload(add(array, 0x20))\n        if lt(length, 0x20)\n        {\n            value := and(value, shl(shl(3, sub(0x20, length)), not(0)))\n        }\n    }\n}",
          "id": 49,
          "language": "Yul",
          "name": "#utility.yul"
        }
      ],
      "linkReferences": {},
      "object": "6101606040523480156200001257600080fd5b50604080518082018252600980825268496e6b5f566f74657360b81b60208084018290528451808601865260018152603160f81b8183015285518087018752938452838201929092528451808601909552600385526249544b60e81b908501526000805460ff1916905591928392919060046200009083826200031a565b5060056200009f82826200031a565b505050620000bd6006836200018460201b62000d6e1790919060201c565b60e052620000d981600762000184602090811b62000d6e17901c565b61010052815160208084019190912061012052815190820120610140524660a052620001696101205161014051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60805250503060c052506200017e33620001d4565b6200045b565b6000602083511015620001a4576200019c8362000226565b9050620001ce565b82620001bb836200027260201b62000d9f1760201c565b90620001c890826200031a565b50600090505b92915050565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080829050601f815111156200025d578260405163305a27a960e01b8152600401620002549190620003e6565b60405180910390fd5b80516200026a8262000436565b179392505050565b90565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620002a057607f821691505b602082108103620002c157634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200031557600081815260208120601f850160051c81016020861015620002f05750805b601f850160051c820191505b818110156200031157828155600101620002fc565b5050505b505050565b81516001600160401b0381111562000336576200033662000275565b6200034e816200034784546200028b565b84620002c7565b602080601f8311600181146200038657600084156200036d5750858301515b600019600386901b1c1916600185901b17855562000311565b600085815260208120601f198616915b82811015620003b75788860151825594840194600190910190840162000396565b5085821015620003d65787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208083528351808285015260005b818110156200041557858101830151858201604001528201620003f7565b506000604082860101526040601f19601f8301168501019250505092915050565b80516020808301519190811015620002c15760001960209190910360031b1b16919050565b60805160a05160c05160e051610100516101205161014051612644620004b660003960006111d6015260006111ae015260006107860152600061075b01526000611109015260006111330152600061115d01526126446000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c8063715018a61161010f5780639dc29fac116100a2578063d505accf11610071578063d505accf1461043d578063dd62ed3e14610450578063f1127ed814610463578063f2fde38b146104a057600080fd5b80639dc29fac146103f1578063a457c2d714610404578063a9059cbb14610417578063c3cda5201461042a57600080fd5b80638e539e8c116100de5780638e539e8c146103a457806391ddadf4146103b757806395d89b41146103d65780639ab24eb0146103de57600080fd5b8063715018a61461035d5780637ecebe001461036557806384b0196e146103785780638da5cb5b1461039357600080fd5b80633a46b1a8116101875780635c19a95c116101565780635c19a95c146102ee5780635c975abb146103015780636fcfff451461030c57806370a082311461033457600080fd5b80633a46b1a81461027a57806340c10f191461028d5780634bf5d7e9146102a2578063587cde1e146102aa57600080fd5b806323b872dd116101c357806323b872dd1461023d578063313ce567146102505780633644e5151461025f578063395093511461026757600080fd5b806306fdde03146101ea578063095ea7b31461020857806318160ddd1461022b575b600080fd5b6101f26104b3565b6040516101ff919061214d565b60405180910390f35b61021b61021636600461217c565b610545565b60405190151581526020016101ff565b6003545b6040519081526020016101ff565b61021b61024b3660046121a6565b61055f565b604051601281526020016101ff565b61022f610583565b61021b61027536600461217c565b610592565b61022f61028836600461217c565b6105b4565b6102a061029b36600461217c565b61063e565b005b6101f2610697565b6102d66102b83660046121e2565b6001600160a01b039081166000908152600b60205260409020541690565b6040516001600160a01b0390911681526020016101ff565b6102a06102fc3660046121e2565b6106ec565b60005460ff1661021b565b61031f61031a3660046121e2565b6106f9565b60405163ffffffff90911681526020016101ff565b61022f6103423660046121e2565b6001600160a01b031660009081526001602052604090205490565b6102a061071b565b61022f6103733660046121e2565b61072f565b61038061074d565b6040516101ff97969594939291906121fd565b600a546001600160a01b03166102d6565b61022f6103b2366004612293565b6107d6565b6103bf61083d565b60405165ffffffffffff90911681526020016101ff565b6101f2610848565b61022f6103ec3660046121e2565b610857565b6102a06103ff36600461217c565b6108d9565b61021b61041236600461217c565b610926565b61021b61042536600461217c565b6109a1565b6102a06104383660046122bd565b6109af565b6102a061044b366004612315565b610ae5565b61022f61045e36600461237f565b610c49565b6104766104713660046123b2565b610c74565b60408051825163ffffffff1681526020928301516001600160e01b031692810192909252016101ff565b6102a06104ae3660046121e2565b610cf8565b6060600480546104c2906123f2565b80601f01602080910402602001604051908101604052809291908181526020018280546104ee906123f2565b801561053b5780601f106105105761010080835404028352916020019161053b565b820191906000526020600020905b81548152906001019060200180831161051e57829003601f168201915b5050505050905090565b600033610553818585610da2565b60019150505b92915050565b60003361056d858285610ec6565b610578858585610f40565b506001949350505050565b600061058d6110fc565b905090565b6000336105538185856105a58383610c49565b6105af919061243c565b610da2565b60006105be61083d565b65ffffffffffff1682106106155760405162461bcd60e51b815260206004820152601960248201527804552433230566f7465733a20667574757265206c6f6f6b757603c1b60448201526064015b60405180910390fd5b6001600160a01b0383166000908152600c602052604090206106379083611227565b9392505050565b610646611310565b610650828261136a565b816001600160a01b03167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968858260405161068b91815260200190565b60405180910390a25050565b6060436106a261083d565b65ffffffffffff16146106b457600080fd5b5060408051808201909152601d81527f6d6f64653d626c6f636b6e756d6265722666726f6d3d64656661756c74000000602082015290565b6106f63382611378565b50565b6001600160a01b0381166000908152600c6020526040812054610559906113f2565b610723611310565b61072d600061145b565b565b6001600160a01b038116600090815260086020526040812054610559565b6000606080828080836107817f000000000000000000000000000000000000000000000000000000000000000060066114ad565b6107ac7f000000000000000000000000000000000000000000000000000000000000000060076114ad565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b60006107e061083d565b65ffffffffffff1682106108325760405162461bcd60e51b815260206004820152601960248201527804552433230566f7465733a20667574757265206c6f6f6b757603c1b604482015260640161060c565b610559600d83611227565b600061058d43611552565b6060600580546104c2906123f2565b6001600160a01b0381166000908152600c602052604081205480156108c6576001600160a01b0383166000908152600c60205260409020805460001983019081106108a4576108a4612465565b60009182526020909120015464010000000090046001600160e01b03166108c9565b60005b6001600160e01b03169392505050565b6108e1611310565b6108eb82826115b9565b816001600160a01b03167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58260405161068b91815260200190565b600033816109348286610c49565b9050838110156109945760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161060c565b6105788286868403610da2565b600033610553818585610f40565b834211156109ff5760405162461bcd60e51b815260206004820152601d60248201527f4552433230566f7465733a207369676e61747572652065787069726564000000604482015260640161060c565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60208201526001600160a01b038816918101919091526060810186905260808101859052600090610a7990610a719060a001604051602081830303815290604052805190602001206115c3565b8585856115f0565b9050610a8481611618565b8614610ad25760405162461bcd60e51b815260206004820152601960248201527f4552433230566f7465733a20696e76616c6964206e6f6e636500000000000000604482015260640161060c565b610adc8188611378565b50505050505050565b83421115610b355760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e65000000604482015260640161060c565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9888888610b648c611618565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090506000610bbf826115c3565b90506000610bcf828787876115f0565b9050896001600160a01b0316816001600160a01b031614610c325760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e61747572650000604482015260640161060c565b610c3d8a8a8a610da2565b50505050505050505050565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b60408051808201909152600080825260208201526001600160a01b0383166000908152600c60205260409020805463ffffffff8416908110610cb857610cb8612465565b60009182526020918290206040805180820190915291015463ffffffff8116825264010000000090046001600160e01b0316918101919091529392505050565b610d00611310565b6001600160a01b038116610d655760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161060c565b6106f68161145b565b6000602083511015610d8a57610d8383611640565b9050610559565b81610d9584826124c9565b5060009050610559565b90565b6001600160a01b038316610e045760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161060c565b6001600160a01b038216610e655760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161060c565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610ed28484610c49565b90506000198114610f3a5781811015610f2d5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161060c565b610f3a8484848403610da2565b50505050565b6001600160a01b038316610fa45760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161060c565b6001600160a01b0382166110065760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161060c565b61101183838361167e565b6001600160a01b038316600090815260016020526040902054818110156110895760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161060c565b6001600160a01b0380851660008181526001602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906110e99086815260200190565b60405180910390a3610f3a8484846116e9565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561115557507f000000000000000000000000000000000000000000000000000000000000000046145b1561117f57507f000000000000000000000000000000000000000000000000000000000000000090565b61058d604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b815460009081816005811115611281576000611242846116f4565b61124c9085612589565b600088815260209020909150869082015463ffffffff1611156112715780915061127f565b61127c81600161243c565b92505b505b808210156112ce57600061129583836117dc565b600088815260209020909150869082015463ffffffff1611156112ba578091506112c8565b6112c581600161243c565b92505b50611281565b80156112fa576000868152602090208101600019015464010000000090046001600160e01b03166112fd565b60005b6001600160e01b03169695505050505050565b600a546001600160a01b0316331461072d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161060c565b61137482826117f7565b5050565b6001600160a01b038281166000818152600b6020818152604080842080546001845282862054949093528787166001600160a01b03198416811790915590519190951694919391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4610f3a828483611881565b600063ffffffff8211156114575760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b606482015260840161060c565b5090565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b606060ff8316156114c157610d83836119be565b8180546114cd906123f2565b80601f01602080910402602001604051908101604052809291908181526020018280546114f9906123f2565b80156115465780601f1061151b57610100808354040283529160200191611546565b820191906000526020600020905b81548152906001019060200180831161152957829003601f168201915b50505050509050610559565b600065ffffffffffff8211156114575760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203460448201526538206269747360d01b606482015260840161060c565b61137482826119f3565b60006105596115d06110fc565b8360405161190160f01b8152600281019290925260228201526042902090565b600080600061160187878787611a0b565b9150915061160e81611acf565b5095945050505050565b6001600160a01b03811660009081526008602052604090208054600181018255905b50919050565b600080829050601f8151111561166b578260405163305a27a960e01b815260040161060c919061214d565b80516116768261259c565b179392505050565b60005460ff16156116e45760405162461bcd60e51b815260206004820152602a60248201527f45524332305061757361626c653a20746f6b656e207472616e736665722077686044820152691a5b19481c185d5cd95960b21b606482015260840161060c565b505050565b6116e4838383611c19565b60008160000361170657506000919050565b6000600161171384611c4b565b901c6001901b9050600181848161172c5761172c6125c0565b048201901c90506001818481611744576117446125c0565b048201901c9050600181848161175c5761175c6125c0565b048201901c90506001818481611774576117746125c0565b048201901c9050600181848161178c5761178c6125c0565b048201901c905060018184816117a4576117a46125c0565b048201901c905060018184816117bc576117bc6125c0565b048201901c9050610637818285816117d6576117d66125c0565b04611cdf565b60006117eb60028484186125d6565b6106379084841661243c565b6118018282611cf5565b6003546001600160e01b0310156118735760405162461bcd60e51b815260206004820152603060248201527f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60448201526f766572666c6f77696e6720766f74657360801b606482015260840161060c565b610f3a600d611dca83611dd6565b816001600160a01b0316836001600160a01b0316141580156118a35750600081115b156116e4576001600160a01b03831615611931576001600160a01b0383166000908152600c6020526040812081906118de90611f4b85611dd6565b91509150846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051611926929190918252602082015260400190565b60405180910390a250505b6001600160a01b038216156116e4576001600160a01b0382166000908152600c60205260408120819061196790611dca85611dd6565b91509150836001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a72483836040516119af929190918252602082015260400190565b60405180910390a25050505050565b60408051602080825281830190925260609160ff84169160009180820181803683375050509182525060208101929092525090565b6119fd8282611f57565b610f3a600d611f4b83611dd6565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611a425750600090506003611ac6565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611a96573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611abf57600060019250925050611ac6565b9150600090505b94509492505050565b6000816004811115611ae357611ae36125f8565b03611aeb5750565b6001816004811115611aff57611aff6125f8565b03611b4c5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161060c565b6002816004811115611b6057611b606125f8565b03611bad5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161060c565b6003816004811115611bc157611bc16125f8565b036106f65760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161060c565b6001600160a01b038381166000908152600b60205260408082205485841683529120546116e492918216911683611881565b600080608083901c15611c6057608092831c92015b604083901c15611c7257604092831c92015b602083901c15611c8457602092831c92015b601083901c15611c9657601092831c92015b600883901c15611ca857600892831c92015b600483901c15611cba57600492831c92015b600283901c15611ccc57600292831c92015b600183901c156105595760010192915050565b6000818310611cee5781610637565b5090919050565b6001600160a01b038216611d4b5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161060c565b611d576000838361167e565b8060036000828254611d69919061243c565b90915550506001600160a01b0382166000818152600160209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3611374600083836116e9565b6000610637828461243c565b82546000908190818115611e235760008781526020902082016000190160408051808201909152905463ffffffff8116825264010000000090046001600160e01b03166020820152611e38565b60408051808201909152600080825260208201525b905080602001516001600160e01b03169350611e5884868863ffffffff16565b9250600082118015611e825750611e6d61083d565b65ffffffffffff16816000015163ffffffff16145b15611ec757611e908361209e565b60008881526020902083016000190180546001600160e01b03929092166401000000000263ffffffff909216919091179055611f41565b866040518060400160405280611eeb611ede61083d565b65ffffffffffff166113f2565b63ffffffff168152602001611eff8661209e565b6001600160e01b0390811690915282546001810184556000938452602093849020835194909301519091166401000000000263ffffffff909316929092179101555b5050935093915050565b60006106378284612589565b6001600160a01b038216611fb75760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161060c565b611fc38260008361167e565b6001600160a01b038216600090815260016020526040902054818110156120375760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161060c565b6001600160a01b03831660008181526001602090815260408083208686039055600380548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36116e4836000846116e9565b60006001600160e01b038211156114575760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b606482015260840161060c565b6000815180845260005b8181101561212d57602081850181015186830182015201612111565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006106376020830184612107565b80356001600160a01b038116811461217757600080fd5b919050565b6000806040838503121561218f57600080fd5b61219883612160565b946020939093013593505050565b6000806000606084860312156121bb57600080fd5b6121c484612160565b92506121d260208501612160565b9150604084013590509250925092565b6000602082840312156121f457600080fd5b61063782612160565b60ff60f81b881681526000602060e08184015261221d60e084018a612107565b838103604085015261222f818a612107565b606085018990526001600160a01b038816608086015260a0850187905284810360c0860152855180825283870192509083019060005b8181101561228157835183529284019291840191600101612265565b50909c9b505050505050505050505050565b6000602082840312156122a557600080fd5b5035919050565b803560ff8116811461217757600080fd5b60008060008060008060c087890312156122d657600080fd5b6122df87612160565b955060208701359450604087013593506122fb606088016122ac565b92506080870135915060a087013590509295509295509295565b600080600080600080600060e0888a03121561233057600080fd5b61233988612160565b965061234760208901612160565b95506040880135945060608801359350612363608089016122ac565b925060a0880135915060c0880135905092959891949750929550565b6000806040838503121561239257600080fd5b61239b83612160565b91506123a960208401612160565b90509250929050565b600080604083850312156123c557600080fd5b6123ce83612160565b9150602083013563ffffffff811681146123e757600080fd5b809150509250929050565b600181811c9082168061240657607f821691505b60208210810361163a57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561055957610559612426565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b601f8211156116e457600081815260208120601f850160051c810160208610156124a25750805b601f850160051c820191505b818110156124c1578281556001016124ae565b505050505050565b815167ffffffffffffffff8111156124e3576124e361244f565b6124f7816124f184546123f2565b8461247b565b602080601f83116001811461252c57600084156125145750858301515b600019600386901b1c1916600185901b1785556124c1565b600085815260208120601f198616915b8281101561255b5788860151825594840194600190910190840161253c565b50858210156125795787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8181038181111561055957610559612426565b8051602080830151919081101561163a5760001960209190910360031b1b16919050565b634e487b7160e01b600052601260045260246000fd5b6000826125f357634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052602160045260246000fdfea264697066735822122043e3e6afad14b464789532b6a0c12d3f5d5e3f1ca4480ca2561b2eb2d207c37164736f6c63430008110033",
      "opcodes": "PUSH2 0x160 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x9 DUP1 DUP3 MSTORE PUSH9 0x496E6B5F566F746573 PUSH1 0xB8 SHL PUSH1 0x20 DUP1 DUP5 ADD DUP3 SWAP1 MSTORE DUP5 MLOAD DUP1 DUP7 ADD DUP7 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x31 PUSH1 0xF8 SHL DUP2 DUP4 ADD MSTORE DUP6 MLOAD DUP1 DUP8 ADD DUP8 MSTORE SWAP4 DUP5 MSTORE DUP4 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP5 MLOAD DUP1 DUP7 ADD SWAP1 SWAP6 MSTORE PUSH1 0x3 DUP6 MSTORE PUSH3 0x49544B PUSH1 0xE8 SHL SWAP1 DUP6 ADD MSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE SWAP2 SWAP3 DUP4 SWAP3 SWAP2 SWAP1 PUSH1 0x4 PUSH3 0x90 DUP4 DUP3 PUSH3 0x31A JUMP JUMPDEST POP PUSH1 0x5 PUSH3 0x9F DUP3 DUP3 PUSH3 0x31A JUMP JUMPDEST POP POP POP PUSH3 0xBD PUSH1 0x6 DUP4 PUSH3 0x184 PUSH1 0x20 SHL PUSH3 0xD6E OR SWAP1 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0xE0 MSTORE PUSH3 0xD9 DUP2 PUSH1 0x7 PUSH3 0x184 PUSH1 0x20 SWAP1 DUP2 SHL PUSH3 0xD6E OR SWAP1 SHR JUMP JUMPDEST PUSH2 0x100 MSTORE DUP2 MLOAD PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 KECCAK256 PUSH2 0x120 MSTORE DUP2 MLOAD SWAP1 DUP3 ADD KECCAK256 PUSH2 0x140 MSTORE CHAINID PUSH1 0xA0 MSTORE PUSH3 0x169 PUSH2 0x120 MLOAD PUSH2 0x140 MLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x80 MSTORE POP POP ADDRESS PUSH1 0xC0 MSTORE POP PUSH3 0x17E CALLER PUSH3 0x1D4 JUMP JUMPDEST PUSH3 0x45B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP4 MLOAD LT ISZERO PUSH3 0x1A4 JUMPI PUSH3 0x19C DUP4 PUSH3 0x226 JUMP JUMPDEST SWAP1 POP PUSH3 0x1CE JUMP JUMPDEST DUP3 PUSH3 0x1BB DUP4 PUSH3 0x272 PUSH1 0x20 SHL PUSH3 0xD9F OR PUSH1 0x20 SHR JUMP JUMPDEST SWAP1 PUSH3 0x1C8 SWAP1 DUP3 PUSH3 0x31A JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xA DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SWAP1 POP PUSH1 0x1F DUP2 MLOAD GT ISZERO PUSH3 0x25D JUMPI DUP3 PUSH1 0x40 MLOAD PUSH4 0x305A27A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x254 SWAP2 SWAP1 PUSH3 0x3E6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD PUSH3 0x26A DUP3 PUSH3 0x436 JUMP JUMPDEST OR SWAP4 SWAP3 POP POP POP JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x2A0 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x2C1 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x315 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x2F0 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x311 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x2FC JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x336 JUMPI PUSH3 0x336 PUSH3 0x275 JUMP JUMPDEST PUSH3 0x34E DUP2 PUSH3 0x347 DUP5 SLOAD PUSH3 0x28B JUMP JUMPDEST DUP5 PUSH3 0x2C7 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x386 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x36D JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x311 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x3B7 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x396 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x3D6 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x415 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH3 0x3F7 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x40 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP2 SWAP1 DUP2 LT ISZERO PUSH3 0x2C1 JUMPI PUSH1 0x0 NOT PUSH1 0x20 SWAP2 SWAP1 SWAP2 SUB PUSH1 0x3 SHL SHL AND SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH2 0x120 MLOAD PUSH2 0x140 MLOAD PUSH2 0x2644 PUSH3 0x4B6 PUSH1 0x0 CODECOPY PUSH1 0x0 PUSH2 0x11D6 ADD MSTORE PUSH1 0x0 PUSH2 0x11AE ADD MSTORE PUSH1 0x0 PUSH2 0x786 ADD MSTORE PUSH1 0x0 PUSH2 0x75B ADD MSTORE PUSH1 0x0 PUSH2 0x1109 ADD MSTORE PUSH1 0x0 PUSH2 0x1133 ADD MSTORE PUSH1 0x0 PUSH2 0x115D ADD MSTORE PUSH2 0x2644 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1E5 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0x10F JUMPI DUP1 PUSH4 0x9DC29FAC GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xD505ACCF GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x43D JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x450 JUMPI DUP1 PUSH4 0xF1127ED8 EQ PUSH2 0x463 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x4A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9DC29FAC EQ PUSH2 0x3F1 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x404 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x417 JUMPI DUP1 PUSH4 0xC3CDA520 EQ PUSH2 0x42A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8E539E8C GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x8E539E8C EQ PUSH2 0x3A4 JUMPI DUP1 PUSH4 0x91DDADF4 EQ PUSH2 0x3B7 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x3D6 JUMPI DUP1 PUSH4 0x9AB24EB0 EQ PUSH2 0x3DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x35D JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x365 JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x378 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x393 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3A46B1A8 GT PUSH2 0x187 JUMPI DUP1 PUSH4 0x5C19A95C GT PUSH2 0x156 JUMPI DUP1 PUSH4 0x5C19A95C EQ PUSH2 0x2EE JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x301 JUMPI DUP1 PUSH4 0x6FCFFF45 EQ PUSH2 0x30C JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x334 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3A46B1A8 EQ PUSH2 0x27A JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x28D JUMPI DUP1 PUSH4 0x4BF5D7E9 EQ PUSH2 0x2A2 JUMPI DUP1 PUSH4 0x587CDE1E EQ PUSH2 0x2AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0x1C3 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x23D JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x250 JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x25F JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x267 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1EA JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x208 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x22B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1F2 PUSH2 0x4B3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FF SWAP2 SWAP1 PUSH2 0x214D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x21B PUSH2 0x216 CALLDATASIZE PUSH1 0x4 PUSH2 0x217C JUMP JUMPDEST PUSH2 0x545 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FF JUMP JUMPDEST PUSH1 0x3 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x21B PUSH2 0x24B CALLDATASIZE PUSH1 0x4 PUSH2 0x21A6 JUMP JUMPDEST PUSH2 0x55F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x22F PUSH2 0x583 JUMP JUMPDEST PUSH2 0x21B PUSH2 0x275 CALLDATASIZE PUSH1 0x4 PUSH2 0x217C JUMP JUMPDEST PUSH2 0x592 JUMP JUMPDEST PUSH2 0x22F PUSH2 0x288 CALLDATASIZE PUSH1 0x4 PUSH2 0x217C JUMP JUMPDEST PUSH2 0x5B4 JUMP JUMPDEST PUSH2 0x2A0 PUSH2 0x29B CALLDATASIZE PUSH1 0x4 PUSH2 0x217C JUMP JUMPDEST PUSH2 0x63E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1F2 PUSH2 0x697 JUMP JUMPDEST PUSH2 0x2D6 PUSH2 0x2B8 CALLDATASIZE PUSH1 0x4 PUSH2 0x21E2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x2A0 PUSH2 0x2FC CALLDATASIZE PUSH1 0x4 PUSH2 0x21E2 JUMP JUMPDEST PUSH2 0x6EC JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH2 0x21B JUMP JUMPDEST PUSH2 0x31F PUSH2 0x31A CALLDATASIZE PUSH1 0x4 PUSH2 0x21E2 JUMP JUMPDEST PUSH2 0x6F9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x22F PUSH2 0x342 CALLDATASIZE PUSH1 0x4 PUSH2 0x21E2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x2A0 PUSH2 0x71B JUMP JUMPDEST PUSH2 0x22F PUSH2 0x373 CALLDATASIZE PUSH1 0x4 PUSH2 0x21E2 JUMP JUMPDEST PUSH2 0x72F JUMP JUMPDEST PUSH2 0x380 PUSH2 0x74D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FF SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x21FD JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2D6 JUMP JUMPDEST PUSH2 0x22F PUSH2 0x3B2 CALLDATASIZE PUSH1 0x4 PUSH2 0x2293 JUMP JUMPDEST PUSH2 0x7D6 JUMP JUMPDEST PUSH2 0x3BF PUSH2 0x83D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH6 0xFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x1F2 PUSH2 0x848 JUMP JUMPDEST PUSH2 0x22F PUSH2 0x3EC CALLDATASIZE PUSH1 0x4 PUSH2 0x21E2 JUMP JUMPDEST PUSH2 0x857 JUMP JUMPDEST PUSH2 0x2A0 PUSH2 0x3FF CALLDATASIZE PUSH1 0x4 PUSH2 0x217C JUMP JUMPDEST PUSH2 0x8D9 JUMP JUMPDEST PUSH2 0x21B PUSH2 0x412 CALLDATASIZE PUSH1 0x4 PUSH2 0x217C JUMP JUMPDEST PUSH2 0x926 JUMP JUMPDEST PUSH2 0x21B PUSH2 0x425 CALLDATASIZE PUSH1 0x4 PUSH2 0x217C JUMP JUMPDEST PUSH2 0x9A1 JUMP JUMPDEST PUSH2 0x2A0 PUSH2 0x438 CALLDATASIZE PUSH1 0x4 PUSH2 0x22BD JUMP JUMPDEST PUSH2 0x9AF JUMP JUMPDEST PUSH2 0x2A0 PUSH2 0x44B CALLDATASIZE PUSH1 0x4 PUSH2 0x2315 JUMP JUMPDEST PUSH2 0xAE5 JUMP JUMPDEST PUSH2 0x22F PUSH2 0x45E CALLDATASIZE PUSH1 0x4 PUSH2 0x237F JUMP JUMPDEST PUSH2 0xC49 JUMP JUMPDEST PUSH2 0x476 PUSH2 0x471 CALLDATASIZE PUSH1 0x4 PUSH2 0x23B2 JUMP JUMPDEST PUSH2 0xC74 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP3 MLOAD PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE ADD PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x2A0 PUSH2 0x4AE CALLDATASIZE PUSH1 0x4 PUSH2 0x21E2 JUMP JUMPDEST PUSH2 0xCF8 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x4C2 SWAP1 PUSH2 0x23F2 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x4EE SWAP1 PUSH2 0x23F2 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x53B JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x510 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x53B JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x51E JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x553 DUP2 DUP6 DUP6 PUSH2 0xDA2 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x56D DUP6 DUP3 DUP6 PUSH2 0xEC6 JUMP JUMPDEST PUSH2 0x578 DUP6 DUP6 DUP6 PUSH2 0xF40 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x58D PUSH2 0x10FC JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x553 DUP2 DUP6 DUP6 PUSH2 0x5A5 DUP4 DUP4 PUSH2 0xC49 JUMP JUMPDEST PUSH2 0x5AF SWAP2 SWAP1 PUSH2 0x243C JUMP JUMPDEST PUSH2 0xDA2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5BE PUSH2 0x83D JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND DUP3 LT PUSH2 0x615 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH25 0x4552433230566F7465733A20667574757265206C6F6F6B757 PUSH1 0x3C SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x637 SWAP1 DUP4 PUSH2 0x1227 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x646 PUSH2 0x1310 JUMP JUMPDEST PUSH2 0x650 DUP3 DUP3 PUSH2 0x136A JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xF6798A560793A54C3BCFE86A93CDE1E73087D944C0EA20544137D4121396885 DUP3 PUSH1 0x40 MLOAD PUSH2 0x68B SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x60 NUMBER PUSH2 0x6A2 PUSH2 0x83D JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND EQ PUSH2 0x6B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1D DUP2 MSTORE PUSH32 0x6D6F64653D626C6F636B6E756D6265722666726F6D3D64656661756C74000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x6F6 CALLER DUP3 PUSH2 0x1378 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x559 SWAP1 PUSH2 0x13F2 JUMP JUMPDEST PUSH2 0x723 PUSH2 0x1310 JUMP JUMPDEST PUSH2 0x72D PUSH1 0x0 PUSH2 0x145B JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x559 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 DUP3 DUP1 DUP1 DUP4 PUSH2 0x781 PUSH32 0x0 PUSH1 0x6 PUSH2 0x14AD JUMP JUMPDEST PUSH2 0x7AC PUSH32 0x0 PUSH1 0x7 PUSH2 0x14AD JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0xF PUSH1 0xF8 SHL SWAP12 SWAP4 SWAP11 POP SWAP2 SWAP9 POP CHAINID SWAP8 POP ADDRESS SWAP7 POP SWAP5 POP SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7E0 PUSH2 0x83D JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND DUP3 LT PUSH2 0x832 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH25 0x4552433230566F7465733A20667574757265206C6F6F6B757 PUSH1 0x3C SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x60C JUMP JUMPDEST PUSH2 0x559 PUSH1 0xD DUP4 PUSH2 0x1227 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x58D NUMBER PUSH2 0x1552 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x5 DUP1 SLOAD PUSH2 0x4C2 SWAP1 PUSH2 0x23F2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x8C6 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT DUP4 ADD SWAP1 DUP2 LT PUSH2 0x8A4 JUMPI PUSH2 0x8A4 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH5 0x100000000 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH2 0x8C9 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x8E1 PUSH2 0x1310 JUMP JUMPDEST PUSH2 0x8EB DUP3 DUP3 PUSH2 0x15B9 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xCC16F5DBB4873280815C1EE09DBD06736CFFCC184412CF7A71A0FDB75D397CA5 DUP3 PUSH1 0x40 MLOAD PUSH2 0x68B SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x934 DUP3 DUP7 PUSH2 0xC49 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x994 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60C JUMP JUMPDEST PUSH2 0x578 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0xDA2 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x553 DUP2 DUP6 DUP6 PUSH2 0xF40 JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0x9FF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433230566F7465733A207369676E61747572652065787069726564000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x60C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xE48329057BFD03D55E49B547132E39CFFD9C1820AD7B9D4C5307691425D15ADF PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0xA79 SWAP1 PUSH2 0xA71 SWAP1 PUSH1 0xA0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0x15C3 JUMP JUMPDEST DUP6 DUP6 DUP6 PUSH2 0x15F0 JUMP JUMPDEST SWAP1 POP PUSH2 0xA84 DUP2 PUSH2 0x1618 JUMP JUMPDEST DUP7 EQ PUSH2 0xAD2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433230566F7465733A20696E76616C6964206E6F6E636500000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x60C JUMP JUMPDEST PUSH2 0xADC DUP2 DUP9 PUSH2 0x1378 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0xB35 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305065726D69743A206578706972656420646561646C696E65000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x60C JUMP JUMPDEST PUSH1 0x0 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP9 DUP9 DUP9 PUSH2 0xB64 DUP13 PUSH2 0x1618 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND SWAP1 DUP7 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xE0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0xBBF DUP3 PUSH2 0x15C3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xBCF DUP3 DUP8 DUP8 DUP8 PUSH2 0x15F0 JUMP JUMPDEST SWAP1 POP DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xC32 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305065726D69743A20696E76616C6964207369676E61747572650000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x60C JUMP JUMPDEST PUSH2 0xC3D DUP11 DUP11 DUP11 PUSH2 0xDA2 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH4 0xFFFFFFFF DUP5 AND SWAP1 DUP2 LT PUSH2 0xCB8 JUMPI PUSH2 0xCB8 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE SWAP2 ADD SLOAD PUSH4 0xFFFFFFFF DUP2 AND DUP3 MSTORE PUSH5 0x100000000 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xD00 PUSH2 0x1310 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xD65 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60C JUMP JUMPDEST PUSH2 0x6F6 DUP2 PUSH2 0x145B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP4 MLOAD LT ISZERO PUSH2 0xD8A JUMPI PUSH2 0xD83 DUP4 PUSH2 0x1640 JUMP JUMPDEST SWAP1 POP PUSH2 0x559 JUMP JUMPDEST DUP2 PUSH2 0xD95 DUP5 DUP3 PUSH2 0x24C9 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP PUSH2 0x559 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xE04 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xE65 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xED2 DUP5 DUP5 PUSH2 0xC49 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0xF3A JUMPI DUP2 DUP2 LT ISZERO PUSH2 0xF2D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x60C JUMP JUMPDEST PUSH2 0xF3A DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0xDA2 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xFA4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1006 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60C JUMP JUMPDEST PUSH2 0x1011 DUP4 DUP4 DUP4 PUSH2 0x167E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x1089 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE SWAP3 DUP7 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE SWAP2 MLOAD PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x10E9 SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xF3A DUP5 DUP5 DUP5 PUSH2 0x16E9 JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ DUP1 ISZERO PUSH2 0x1155 JUMPI POP PUSH32 0x0 CHAINID EQ JUMPDEST ISZERO PUSH2 0x117F JUMPI POP PUSH32 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x58D PUSH1 0x40 DUP1 MLOAD PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x0 SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x0 PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x0 SWAP1 DUP2 DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x1281 JUMPI PUSH1 0x0 PUSH2 0x1242 DUP5 PUSH2 0x16F4 JUMP JUMPDEST PUSH2 0x124C SWAP1 DUP6 PUSH2 0x2589 JUMP JUMPDEST PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 SWAP1 SWAP2 POP DUP7 SWAP1 DUP3 ADD SLOAD PUSH4 0xFFFFFFFF AND GT ISZERO PUSH2 0x1271 JUMPI DUP1 SWAP2 POP PUSH2 0x127F JUMP JUMPDEST PUSH2 0x127C DUP2 PUSH1 0x1 PUSH2 0x243C JUMP JUMPDEST SWAP3 POP JUMPDEST POP JUMPDEST DUP1 DUP3 LT ISZERO PUSH2 0x12CE JUMPI PUSH1 0x0 PUSH2 0x1295 DUP4 DUP4 PUSH2 0x17DC JUMP JUMPDEST PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 SWAP1 SWAP2 POP DUP7 SWAP1 DUP3 ADD SLOAD PUSH4 0xFFFFFFFF AND GT ISZERO PUSH2 0x12BA JUMPI DUP1 SWAP2 POP PUSH2 0x12C8 JUMP JUMPDEST PUSH2 0x12C5 DUP2 PUSH1 0x1 PUSH2 0x243C JUMP JUMPDEST SWAP3 POP JUMPDEST POP PUSH2 0x1281 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x12FA JUMPI PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 DUP2 ADD PUSH1 0x0 NOT ADD SLOAD PUSH5 0x100000000 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH2 0x12FD JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x72D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x60C JUMP JUMPDEST PUSH2 0x1374 DUP3 DUP3 PUSH2 0x17F7 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP5 MSTORE DUP3 DUP7 KECCAK256 SLOAD SWAP5 SWAP1 SWAP4 MSTORE DUP8 DUP8 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP5 AND DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP2 SWAP1 SWAP6 AND SWAP5 SWAP2 SWAP4 SWAP2 SWAP3 DUP6 SWAP3 SWAP2 PUSH32 0x3134E8A2E6D97E929A7E54011EA5485D7D196DD5F0BA4D4EF95803E8E3FC257F SWAP2 SWAP1 LOG4 PUSH2 0xF3A DUP3 DUP5 DUP4 PUSH2 0x1881 JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 GT ISZERO PUSH2 0x1457 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53616665436173743A2076616C756520646F65736E27742066697420696E2033 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x322062697473 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60C JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0xA DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xFF DUP4 AND ISZERO PUSH2 0x14C1 JUMPI PUSH2 0xD83 DUP4 PUSH2 0x19BE JUMP JUMPDEST DUP2 DUP1 SLOAD PUSH2 0x14CD SWAP1 PUSH2 0x23F2 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x14F9 SWAP1 PUSH2 0x23F2 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1546 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x151B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1546 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1529 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH2 0x559 JUMP JUMPDEST PUSH1 0x0 PUSH6 0xFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1457 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53616665436173743A2076616C756520646F65736E27742066697420696E2034 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x382062697473 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60C JUMP JUMPDEST PUSH2 0x1374 DUP3 DUP3 PUSH2 0x19F3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x559 PUSH2 0x15D0 PUSH2 0x10FC JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH2 0x1901 PUSH1 0xF0 SHL DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1601 DUP8 DUP8 DUP8 DUP8 PUSH2 0x1A0B JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x160E DUP2 PUSH2 0x1ACF JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE SWAP1 JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SWAP1 POP PUSH1 0x1F DUP2 MLOAD GT ISZERO PUSH2 0x166B JUMPI DUP3 PUSH1 0x40 MLOAD PUSH4 0x305A27A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x60C SWAP2 SWAP1 PUSH2 0x214D JUMP JUMPDEST DUP1 MLOAD PUSH2 0x1676 DUP3 PUSH2 0x259C JUMP JUMPDEST OR SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x16E4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305061757361626C653A20746F6B656E207472616E73666572207768 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1A5B19481C185D5CD959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60C JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x16E4 DUP4 DUP4 DUP4 PUSH2 0x1C19 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 SUB PUSH2 0x1706 JUMPI POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH2 0x1713 DUP5 PUSH2 0x1C4B JUMP JUMPDEST SWAP1 SHR PUSH1 0x1 SWAP1 SHL SWAP1 POP PUSH1 0x1 DUP2 DUP5 DUP2 PUSH2 0x172C JUMPI PUSH2 0x172C PUSH2 0x25C0 JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH1 0x1 DUP2 DUP5 DUP2 PUSH2 0x1744 JUMPI PUSH2 0x1744 PUSH2 0x25C0 JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH1 0x1 DUP2 DUP5 DUP2 PUSH2 0x175C JUMPI PUSH2 0x175C PUSH2 0x25C0 JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH1 0x1 DUP2 DUP5 DUP2 PUSH2 0x1774 JUMPI PUSH2 0x1774 PUSH2 0x25C0 JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH1 0x1 DUP2 DUP5 DUP2 PUSH2 0x178C JUMPI PUSH2 0x178C PUSH2 0x25C0 JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH1 0x1 DUP2 DUP5 DUP2 PUSH2 0x17A4 JUMPI PUSH2 0x17A4 PUSH2 0x25C0 JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH1 0x1 DUP2 DUP5 DUP2 PUSH2 0x17BC JUMPI PUSH2 0x17BC PUSH2 0x25C0 JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH2 0x637 DUP2 DUP3 DUP6 DUP2 PUSH2 0x17D6 JUMPI PUSH2 0x17D6 PUSH2 0x25C0 JUMP JUMPDEST DIV PUSH2 0x1CDF JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17EB PUSH1 0x2 DUP5 DUP5 XOR PUSH2 0x25D6 JUMP JUMPDEST PUSH2 0x637 SWAP1 DUP5 DUP5 AND PUSH2 0x243C JUMP JUMPDEST PUSH2 0x1801 DUP3 DUP3 PUSH2 0x1CF5 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB LT ISZERO PUSH2 0x1873 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x30 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433230566F7465733A20746F74616C20737570706C79207269736B73206F PUSH1 0x44 DUP3 ADD MSTORE PUSH16 0x766572666C6F77696E6720766F746573 PUSH1 0x80 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60C JUMP JUMPDEST PUSH2 0xF3A PUSH1 0xD PUSH2 0x1DCA DUP4 PUSH2 0x1DD6 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 ISZERO PUSH2 0x18A3 JUMPI POP PUSH1 0x0 DUP2 GT JUMPDEST ISZERO PUSH2 0x16E4 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO PUSH2 0x1931 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 SWAP1 PUSH2 0x18DE SWAP1 PUSH2 0x1F4B DUP6 PUSH2 0x1DD6 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDEC2BACDD2F05B59DE34DA9B523DFF8BE42E5E38E818C82FDB0BAE774387A724 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1926 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO PUSH2 0x16E4 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 SWAP1 PUSH2 0x1967 SWAP1 PUSH2 0x1DCA DUP6 PUSH2 0x1DD6 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDEC2BACDD2F05B59DE34DA9B523DFF8BE42E5E38E818C82FDB0BAE774387A724 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x19AF SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0xFF DUP5 AND SWAP2 PUSH1 0x0 SWAP2 DUP1 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP POP POP SWAP2 DUP3 MSTORE POP PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP1 JUMP JUMPDEST PUSH2 0x19FD DUP3 DUP3 PUSH2 0x1F57 JUMP JUMPDEST PUSH2 0xF3A PUSH1 0xD PUSH2 0x1F4B DUP4 PUSH2 0x1DD6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT ISZERO PUSH2 0x1A42 JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x3 PUSH2 0x1AC6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP10 SWAP1 MSTORE PUSH1 0xFF DUP9 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1A96 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1ABF JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x1AC6 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1AE3 JUMPI PUSH2 0x1AE3 PUSH2 0x25F8 JUMP JUMPDEST SUB PUSH2 0x1AEB JUMPI POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1AFF JUMPI PUSH2 0x1AFF PUSH2 0x25F8 JUMP JUMPDEST SUB PUSH2 0x1B4C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x60C JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1B60 JUMPI PUSH2 0x1B60 PUSH2 0x25F8 JUMP JUMPDEST SUB PUSH2 0x1BAD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x60C JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1BC1 JUMPI PUSH2 0x1BC1 PUSH2 0x25F8 JUMP JUMPDEST SUB PUSH2 0x6F6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SLOAD DUP6 DUP5 AND DUP4 MSTORE SWAP2 KECCAK256 SLOAD PUSH2 0x16E4 SWAP3 SWAP2 DUP3 AND SWAP2 AND DUP4 PUSH2 0x1881 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x80 DUP4 SWAP1 SHR ISZERO PUSH2 0x1C60 JUMPI PUSH1 0x80 SWAP3 DUP4 SHR SWAP3 ADD JUMPDEST PUSH1 0x40 DUP4 SWAP1 SHR ISZERO PUSH2 0x1C72 JUMPI PUSH1 0x40 SWAP3 DUP4 SHR SWAP3 ADD JUMPDEST PUSH1 0x20 DUP4 SWAP1 SHR ISZERO PUSH2 0x1C84 JUMPI PUSH1 0x20 SWAP3 DUP4 SHR SWAP3 ADD JUMPDEST PUSH1 0x10 DUP4 SWAP1 SHR ISZERO PUSH2 0x1C96 JUMPI PUSH1 0x10 SWAP3 DUP4 SHR SWAP3 ADD JUMPDEST PUSH1 0x8 DUP4 SWAP1 SHR ISZERO PUSH2 0x1CA8 JUMPI PUSH1 0x8 SWAP3 DUP4 SHR SWAP3 ADD JUMPDEST PUSH1 0x4 DUP4 SWAP1 SHR ISZERO PUSH2 0x1CBA JUMPI PUSH1 0x4 SWAP3 DUP4 SHR SWAP3 ADD JUMPDEST PUSH1 0x2 DUP4 SWAP1 SHR ISZERO PUSH2 0x1CCC JUMPI PUSH1 0x2 SWAP3 DUP4 SHR SWAP3 ADD JUMPDEST PUSH1 0x1 DUP4 SWAP1 SHR ISZERO PUSH2 0x559 JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x1CEE JUMPI DUP2 PUSH2 0x637 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1D4B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x60C JUMP JUMPDEST PUSH2 0x1D57 PUSH1 0x0 DUP4 DUP4 PUSH2 0x167E JUMP JUMPDEST DUP1 PUSH1 0x3 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1D69 SWAP2 SWAP1 PUSH2 0x243C JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE MLOAD DUP5 DUP2 MSTORE PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x1374 PUSH1 0x0 DUP4 DUP4 PUSH2 0x16E9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x637 DUP3 DUP5 PUSH2 0x243C JUMP JUMPDEST DUP3 SLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 DUP2 ISZERO PUSH2 0x1E23 JUMPI PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 DUP3 ADD PUSH1 0x0 NOT ADD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE SWAP1 SLOAD PUSH4 0xFFFFFFFF DUP2 AND DUP3 MSTORE PUSH5 0x100000000 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x1E38 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE JUMPDEST SWAP1 POP DUP1 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND SWAP4 POP PUSH2 0x1E58 DUP5 DUP7 DUP9 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP3 POP PUSH1 0x0 DUP3 GT DUP1 ISZERO PUSH2 0x1E82 JUMPI POP PUSH2 0x1E6D PUSH2 0x83D JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND DUP2 PUSH1 0x0 ADD MLOAD PUSH4 0xFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x1EC7 JUMPI PUSH2 0x1E90 DUP4 PUSH2 0x209E JUMP JUMPDEST PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 DUP4 ADD PUSH1 0x0 NOT ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH5 0x100000000 MUL PUSH4 0xFFFFFFFF SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x1F41 JUMP JUMPDEST DUP7 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x1EEB PUSH2 0x1EDE PUSH2 0x83D JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND PUSH2 0x13F2 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1EFF DUP7 PUSH2 0x209E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP1 DUP2 AND SWAP1 SWAP2 MSTORE DUP3 SLOAD PUSH1 0x1 DUP2 ADD DUP5 SSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x20 SWAP4 DUP5 SWAP1 KECCAK256 DUP4 MLOAD SWAP5 SWAP1 SWAP4 ADD MLOAD SWAP1 SWAP2 AND PUSH5 0x100000000 MUL PUSH4 0xFFFFFFFF SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP2 ADD SSTORE JUMPDEST POP POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x637 DUP3 DUP5 PUSH2 0x2589 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1FB7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60C JUMP JUMPDEST PUSH2 0x1FC3 DUP3 PUSH1 0x0 DUP4 PUSH2 0x167E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x2037 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6365 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE PUSH1 0x3 DUP1 SLOAD DUP8 SWAP1 SUB SWAP1 SSTORE MLOAD DUP6 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x16E4 DUP4 PUSH1 0x0 DUP5 PUSH2 0x16E9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP3 GT ISZERO PUSH2 0x1457 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53616665436173743A2076616C756520646F65736E27742066697420696E2032 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x32342062697473 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60C JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x212D JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x2111 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x637 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2107 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2177 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x218F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2198 DUP4 PUSH2 0x2160 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x21BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x21C4 DUP5 PUSH2 0x2160 JUMP JUMPDEST SWAP3 POP PUSH2 0x21D2 PUSH1 0x20 DUP6 ADD PUSH2 0x2160 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x21F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x637 DUP3 PUSH2 0x2160 JUMP JUMPDEST PUSH1 0xFF PUSH1 0xF8 SHL DUP9 AND DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 PUSH1 0xE0 DUP2 DUP5 ADD MSTORE PUSH2 0x221D PUSH1 0xE0 DUP5 ADD DUP11 PUSH2 0x2107 JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x222F DUP2 DUP11 PUSH2 0x2107 JUMP JUMPDEST PUSH1 0x60 DUP6 ADD DUP10 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x80 DUP7 ADD MSTORE PUSH1 0xA0 DUP6 ADD DUP8 SWAP1 MSTORE DUP5 DUP2 SUB PUSH1 0xC0 DUP7 ADD MSTORE DUP6 MLOAD DUP1 DUP3 MSTORE DUP4 DUP8 ADD SWAP3 POP SWAP1 DUP4 ADD SWAP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2281 JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x2265 JUMP JUMPDEST POP SWAP1 SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x22A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x2177 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x22D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x22DF DUP8 PUSH2 0x2160 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH2 0x22FB PUSH1 0x60 DUP9 ADD PUSH2 0x22AC JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH1 0xA0 DUP8 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x2330 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2339 DUP9 PUSH2 0x2160 JUMP JUMPDEST SWAP7 POP PUSH2 0x2347 PUSH1 0x20 DUP10 ADD PUSH2 0x2160 JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH2 0x2363 PUSH1 0x80 DUP10 ADD PUSH2 0x22AC JUMP JUMPDEST SWAP3 POP PUSH1 0xA0 DUP9 ADD CALLDATALOAD SWAP2 POP PUSH1 0xC0 DUP9 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2392 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x239B DUP4 PUSH2 0x2160 JUMP JUMPDEST SWAP2 POP PUSH2 0x23A9 PUSH1 0x20 DUP5 ADD PUSH2 0x2160 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x23C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x23CE DUP4 PUSH2 0x2160 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x23E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x2406 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x163A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x559 JUMPI PUSH2 0x559 PUSH2 0x2426 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x16E4 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x24A2 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x24C1 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x24AE JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x24E3 JUMPI PUSH2 0x24E3 PUSH2 0x244F JUMP JUMPDEST PUSH2 0x24F7 DUP2 PUSH2 0x24F1 DUP5 SLOAD PUSH2 0x23F2 JUMP JUMPDEST DUP5 PUSH2 0x247B JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x252C JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x2514 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x24C1 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x255B JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x253C JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x2579 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x559 JUMPI PUSH2 0x559 PUSH2 0x2426 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x163A JUMPI PUSH1 0x0 NOT PUSH1 0x20 SWAP2 SWAP1 SWAP2 SUB PUSH1 0x3 SHL SHL AND SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x25F3 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 NUMBER 0xE3 0xE6 0xAF 0xAD EQ 0xB4 PUSH5 0x789532B6A0 0xC1 0x2D EXTCODEHASH 0x5D 0x5E EXTCODEHASH SHR LOG4 BASEFEE 0xC LOG2 JUMP SHL 0x2E 0xB2 0xD2 SMOD 0xC3 PUSH18 0x64736F6C6343000811003300000000000000 ",
      "sourceMap": "255:1012:7:-:0;;;328:68;;;;;;;;;-1:-1:-1;1726:52:2;;;;;;;;;;;;-1:-1:-1;;;1726:52:2;;;;;;;3105:431:40;;;;;;;;;;-1:-1:-1;;;3105:431:40;;;;479:113:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;479:113:0;;;;-1:-1:-1;270:15:25;;-1:-1:-1;;270:15:25;;;1726:52:2;;;;3105:431:40;479:113:0;545:5;:13;479:113;545:5;:13;:::i;:::-;-1:-1:-1;568:7:0;:17;578:7;568;:17;:::i;:::-;;479:113;;3178:45:40;3209:13;3178:4;:30;;;;;;:45;;;;:::i;:::-;3170:53;;3244:51;:7;3278:16;3244:33;;;;;;;:51;;:::i;:::-;3233:62;;3319:22;;;;;;;;;;3305:36;;3368:25;;;;;;3351:42;;3421:13;3404:30;;3469:23;4004:11;;4017:14;;3981:81;;;1856:95;3981:81;;;2994:25:49;3035:18;;;3028:34;;;;3078:18;;;3071:34;4033:13:40;3121:18:49;;;3114:34;4056:4:40;3164:19:49;;;3157:61;3945:7:40;;2966:19:49;;3981:81:40;;;;;;;;;;;;3971:92;;;;;;3964:99;;3890:180;;3469:23;3444:48;;-1:-1:-1;;3524:4:40;3502:27;;-1:-1:-1;339:32:35;176:10:31;339:18:35;:32::i;:::-;255:1012:7;;2194:324:36;2290:11;2339:2;2323:5;2317:19;:24;2313:199;;;2364:20;2378:5;2364:13;:20::i;:::-;2357:27;;;;2313:199;2456:5;2415:32;2441:5;2415:25;;;;;:32;;:::i;:::-;:38;:46;;:38;:46;:::i;:::-;-1:-1:-1;2499:1:36;;-1:-1:-1;2313:199:36;2194:324;;;;:::o;990:187:35:-;1082:6;;;-1:-1:-1;;;;;1098:17:35;;;-1:-1:-1;;;;;;1098:17:35;;;;;;;1130:40;;1082:6;;;1098:17;1082:6;;1130:40;;1063:16;;1130:40;1053:124;990:187;:::o;1107:286:36:-;1172:11;1195:17;1221:3;1195:30;;1253:2;1239:4;:11;:16;1235:72;;;1292:3;1278:18;;-1:-1:-1;;;1278:18:36;;;;;;;;:::i;:::-;;;;;;;;1235:72;1373:11;;1356:13;1373:4;1356:13;:::i;:::-;1348:36;;1107:286;-1:-1:-1;;;1107:286:36:o;3159:202:37:-;3335:10;3159:202::o;14:127:49:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:380;225:1;221:12;;;;268;;;289:61;;343:4;335:6;331:17;321:27;;289:61;396:2;388:6;385:14;365:18;362:38;359:161;;442:10;437:3;433:20;430:1;423:31;477:4;474:1;467:15;505:4;502:1;495:15;359:161;;146:380;;;:::o;657:545::-;759:2;754:3;751:11;748:448;;;795:1;820:5;816:2;809:17;865:4;861:2;851:19;935:2;923:10;919:19;916:1;912:27;906:4;902:38;971:4;959:10;956:20;953:47;;;-1:-1:-1;994:4:49;953:47;1049:2;1044:3;1040:12;1037:1;1033:20;1027:4;1023:31;1013:41;;1104:82;1122:2;1115:5;1112:13;1104:82;;;1167:17;;;1148:1;1137:13;1104:82;;;1108:3;;;748:448;657:545;;;:::o;1378:1352::-;1498:10;;-1:-1:-1;;;;;1520:30:49;;1517:56;;;1553:18;;:::i;:::-;1582:97;1672:6;1632:38;1664:4;1658:11;1632:38;:::i;:::-;1626:4;1582:97;:::i;:::-;1734:4;;1798:2;1787:14;;1815:1;1810:663;;;;2517:1;2534:6;2531:89;;;-1:-1:-1;2586:19:49;;;2580:26;2531:89;-1:-1:-1;;1335:1:49;1331:11;;;1327:24;1323:29;1313:40;1359:1;1355:11;;;1310:57;2633:81;;1780:944;;1810:663;604:1;597:14;;;641:4;628:18;;-1:-1:-1;;1846:20:49;;;1964:236;1978:7;1975:1;1972:14;1964:236;;;2067:19;;;2061:26;2046:42;;2159:27;;;;2127:1;2115:14;;;;1994:19;;1964:236;;;1968:3;2228:6;2219:7;2216:19;2213:201;;;2289:19;;;2283:26;-1:-1:-1;;2372:1:49;2368:14;;;2384:3;2364:24;2360:37;2356:42;2341:58;2326:74;;2213:201;-1:-1:-1;;;;;2460:1:49;2444:14;;;2440:22;2427:36;;-1:-1:-1;1378:1352:49:o;3229:548::-;3341:4;3370:2;3399;3388:9;3381:21;3431:6;3425:13;3474:6;3469:2;3458:9;3454:18;3447:34;3499:1;3509:140;3523:6;3520:1;3517:13;3509:140;;;3618:14;;;3614:23;;3608:30;3584:17;;;3603:2;3580:26;3573:66;3538:10;;3509:140;;;3513:3;3698:1;3693:2;3684:6;3673:9;3669:22;3665:31;3658:42;3768:2;3761;3757:7;3752:2;3744:6;3740:15;3736:29;3725:9;3721:45;3717:54;3709:62;;;;3229:548;;;;:::o;3782:297::-;3900:12;;3947:4;3936:16;;;3930:23;;3900:12;3965:16;;3962:111;;;-1:-1:-1;;4039:4:49;4035:17;;;;4032:1;4028:25;4024:38;4013:50;;3782:297;-1:-1:-1;3782:297:49:o;:::-;255:1012:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
    },
    "deployedBytecode": {
      "functionDebugData": {
        "@CLOCK_MODE_884": {
          "entryPoint": 1687,
          "id": 884,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@DOMAIN_SEPARATOR_787": {
          "entryPoint": 1411,
          "id": 787,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@_add_1519": {
          "entryPoint": 7626,
          "id": 1519,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@_afterTokenTransfer_1294": {
          "entryPoint": 7193,
          "id": 1294,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "@_afterTokenTransfer_1705": {
          "entryPoint": 5865,
          "id": 1705,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "@_afterTokenTransfer_575": {
          "entryPoint": null,
          "id": 575,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "@_approve_506": {
          "entryPoint": 3490,
          "id": 506,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "@_beforeTokenTransfer_565": {
          "entryPoint": 5758,
          "id": 565,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "@_buildDomainSeparator_10029": {
          "entryPoint": null,
          "id": 10029,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@_burn_1264": {
          "entryPoint": 6643,
          "id": 1264,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@_burn_1741": {
          "entryPoint": 5561,
          "id": 1741,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@_burn_462": {
          "entryPoint": 8023,
          "id": 462,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@_checkOwner_9016": {
          "entryPoint": 4880,
          "id": 9016,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@_checkpointsLookup_1122": {
          "entryPoint": 4647,
          "id": 1122,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@_delegate_1333": {
          "entryPoint": 4984,
          "id": 1333,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@_domainSeparatorV4_10008": {
          "entryPoint": 4348,
          "id": 10008,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@_hashTypedDataV4_10045": {
          "entryPoint": 5571,
          "id": 10045,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@_maxSupply_1209": {
          "entryPoint": null,
          "id": 1209,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@_mint_1241": {
          "entryPoint": 6135,
          "id": 1241,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@_mint_1723": {
          "entryPoint": 4970,
          "id": 1723,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@_mint_391": {
          "entryPoint": 7413,
          "id": 391,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@_moveVotingPower_1404": {
          "entryPoint": 6273,
          "id": 1404,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "@_msgSender_8716": {
          "entryPoint": null,
          "id": 8716,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@_spendAllowance_548": {
          "entryPoint": 3782,
          "id": 548,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "@_subtract_1533": {
          "entryPoint": 8011,
          "id": 1533,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@_throwError_9577": {
          "entryPoint": 6863,
          "id": 9577,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@_transferOwnership_9070": {
          "entryPoint": 5211,
          "id": 9070,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@_transfer_335": {
          "entryPoint": 3904,
          "id": 335,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "@_unsafeAccess_1548": {
          "entryPoint": null,
          "id": 1548,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@_useNonce_816": {
          "entryPoint": 5656,
          "id": 816,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@_writeCheckpoint_1505": {
          "entryPoint": 7638,
          "id": 1505,
          "parameterSlots": 3,
          "returnSlots": 2
        },
        "@allowance_135": {
          "entryPoint": 3145,
          "id": 135,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@approve_159": {
          "entryPoint": 1349,
          "id": 159,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@average_10191": {
          "entryPoint": 6108,
          "id": 10191,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@balanceOf_94": {
          "entryPoint": null,
          "id": 94,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@burn_1684": {
          "entryPoint": 2265,
          "id": 1684,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@checkpoints_902": {
          "entryPoint": 3188,
          "id": 902,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@clock_866": {
          "entryPoint": 2109,
          "id": 866,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@current_8744": {
          "entryPoint": null,
          "id": 8744,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@decimals_72": {
          "entryPoint": null,
          "id": 72,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@decreaseAllowance_259": {
          "entryPoint": 2342,
          "id": 259,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@delegateBySig_1196": {
          "entryPoint": 2479,
          "id": 1196,
          "parameterSlots": 6,
          "returnSlots": 0
        },
        "@delegate_1136": {
          "entryPoint": 1772,
          "id": 1136,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@delegates_933": {
          "entryPoint": null,
          "id": 933,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@eip712Domain_10092": {
          "entryPoint": 1869,
          "id": 10092,
          "parameterSlots": 0,
          "returnSlots": 7
        },
        "@getPastTotalSupply_1015": {
          "entryPoint": 2006,
          "id": 1015,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@getPastVotes_992": {
          "entryPoint": 1460,
          "id": 992,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@getStringSlot_9325": {
          "entryPoint": 3487,
          "id": 9325,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@getVotes_965": {
          "entryPoint": 2135,
          "id": 965,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@increaseAllowance_219": {
          "entryPoint": 1426,
          "id": 219,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@increment_8758": {
          "entryPoint": null,
          "id": 8758,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@length_9171": {
          "entryPoint": null,
          "id": 9171,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@log2_10662": {
          "entryPoint": 7243,
          "id": 10662,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@min_10168": {
          "entryPoint": 7391,
          "id": 10168,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@mint_1664": {
          "entryPoint": 1598,
          "id": 1664,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@name_54": {
          "entryPoint": 1203,
          "id": 54,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@nonces_776": {
          "entryPoint": 1839,
          "id": 776,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@numCheckpoints_919": {
          "entryPoint": 1785,
          "id": 919,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@owner_9003": {
          "entryPoint": null,
          "id": 9003,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@paused_6358": {
          "entryPoint": null,
          "id": 6358,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@permit_760": {
          "entryPoint": 2789,
          "id": 760,
          "parameterSlots": 7,
          "returnSlots": 0
        },
        "@recover_9824": {
          "entryPoint": 5616,
          "id": 9824,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "@renounceOwnership_9029": {
          "entryPoint": 1819,
          "id": 9029,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@sqrt_10494": {
          "entryPoint": 5876,
          "id": 10494,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@symbol_63": {
          "entryPoint": 2120,
          "id": 63,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@toShortStringWithFallback_9211": {
          "entryPoint": 3438,
          "id": 9211,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@toShortString_9125": {
          "entryPoint": 5696,
          "id": 9125,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@toStringWithFallback_9237": {
          "entryPoint": 5293,
          "id": 9237,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@toString_9151": {
          "entryPoint": 6590,
          "id": 9151,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@toTypedDataHash_9868": {
          "entryPoint": null,
          "id": 9868,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@toUint224_11092": {
          "entryPoint": 8350,
          "id": 11092,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@toUint32_11692": {
          "entryPoint": 5106,
          "id": 11692,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@toUint48_11642": {
          "entryPoint": 5458,
          "id": 11642,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@totalSupply_81": {
          "entryPoint": null,
          "id": 81,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@transferFrom_191": {
          "entryPoint": 1375,
          "id": 191,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "@transferOwnership_9051": {
          "entryPoint": 3320,
          "id": 9051,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@transfer_118": {
          "entryPoint": 2465,
          "id": 118,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@tryRecover_9791": {
          "entryPoint": 6667,
          "id": 9791,
          "parameterSlots": 4,
          "returnSlots": 2
        },
        "abi_decode_address": {
          "entryPoint": 8544,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_address": {
          "entryPoint": 8674,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_addresst_address": {
          "entryPoint": 9087,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "abi_decode_tuple_t_addresst_addresst_uint256": {
          "entryPoint": 8614,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 3
        },
        "abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32": {
          "entryPoint": 8981,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 7
        },
        "abi_decode_tuple_t_addresst_uint256": {
          "entryPoint": 8572,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "abi_decode_tuple_t_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32": {
          "entryPoint": 8893,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 6
        },
        "abi_decode_tuple_t_addresst_uint32": {
          "entryPoint": 9138,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "abi_decode_tuple_t_uint256": {
          "entryPoint": 8851,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_uint8": {
          "entryPoint": 8876,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_string": {
          "entryPoint": 8455,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed": {
          "entryPoint": 8701,
          "id": null,
          "parameterSlots": 8,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 7,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_bytes32_t_address_t_uint256_t_uint256__to_t_bytes32_t_address_t_uint256_t_uint256__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 5,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 6,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 5,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": 8525,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_136d0f69bc85a5c125b5cc368e2880ebdb3c89d4d9828f6476431c386ea60257__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_1a23b43d95073d55a7380117ca03cace60cd22fee15d5cb140d51e46236e6872__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_599034f9324dd4e988c6cea5a00a30f53147fec1b01559682f18cd840028f495__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_97859f657b3d95198b68f29ae96ee966779795bec3ef1e76700d2d39fefd7699__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_9d2acf551b2466898443b9bc3a403a4d86037386bc5a8960c1bbb0f204e69b79__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_9fb4d8462c9084391e0cf06f1b2a0a5b1a23dc8fede26e3b7b37154948e87a72__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_c907489dafcfb622d3b83f2657a14d6da2f59e0de3116af0d6a80554c1a7cb19__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_fcb1fc9f3615fd38ab90d28b50a608758c295eeacbd5840421a4ee3b0df2f1f4__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_struct$_Checkpoint_$833_memory_ptr__to_t_struct$_Checkpoint_$833_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint32__to_t_uint32__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint48__to_t_uint48__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "array_dataslot_string_storage": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "checked_add_t_uint256": {
          "entryPoint": 9276,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "checked_div_t_uint256": {
          "entryPoint": 9686,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "checked_sub_t_uint256": {
          "entryPoint": 9609,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "clean_up_bytearray_end_slots_string_storage": {
          "entryPoint": 9339,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32": {
          "entryPoint": 9628,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
          "entryPoint": 9417,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "extract_byte_array_length": {
          "entryPoint": 9202,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "extract_used_part_and_set_length_of_short_byte_array": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "panic_error_0x11": {
          "entryPoint": 9254,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "panic_error_0x12": {
          "entryPoint": 9664,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "panic_error_0x21": {
          "entryPoint": 9720,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "panic_error_0x32": {
          "entryPoint": 9317,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "panic_error_0x41": {
          "entryPoint": 9295,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        }
      },
      "generatedSources": [
        {
          "ast": {
            "nodeType": "YulBlock",
            "src": "0:22577:49",
            "statements": [
              {
                "nodeType": "YulBlock",
                "src": "6:3:49",
                "statements": []
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "64:373:49",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "74:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "94:5:49"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "88:5:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "88:12:49"
                      },
                      "variables": [
                        {
                          "name": "length",
                          "nodeType": "YulTypedName",
                          "src": "78:6:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "116:3:49"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "121:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "109:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "109:19:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "109:19:49"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "137:10:49",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "146:1:49",
                        "type": "",
                        "value": "0"
                      },
                      "variables": [
                        {
                          "name": "i",
                          "nodeType": "YulTypedName",
                          "src": "141:1:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "208:110:49",
                        "statements": [
                          {
                            "nodeType": "YulVariableDeclaration",
                            "src": "222:14:49",
                            "value": {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "232:4:49",
                              "type": "",
                              "value": "0x20"
                            },
                            "variables": [
                              {
                                "name": "_1",
                                "nodeType": "YulTypedName",
                                "src": "226:2:49",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "264:3:49"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "269:1:49"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "260:3:49"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "260:11:49"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "273:2:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "256:3:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "256:20:49"
                                },
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "value",
                                              "nodeType": "YulIdentifier",
                                              "src": "292:5:49"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "299:1:49"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "288:3:49"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "288:13:49"
                                        },
                                        {
                                          "name": "_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "303:2:49"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "284:3:49"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "284:22:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "278:5:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "278:29:49"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "249:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "249:59:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "249:59:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "i",
                            "nodeType": "YulIdentifier",
                            "src": "167:1:49"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "170:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "164:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "164:13:49"
                      },
                      "nodeType": "YulForLoop",
                      "post": {
                        "nodeType": "YulBlock",
                        "src": "178:21:49",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "180:17:49",
                            "value": {
                              "arguments": [
                                {
                                  "name": "i",
                                  "nodeType": "YulIdentifier",
                                  "src": "189:1:49"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "192:4:49",
                                  "type": "",
                                  "value": "0x20"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "185:3:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "185:12:49"
                            },
                            "variableNames": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "180:1:49"
                              }
                            ]
                          }
                        ]
                      },
                      "pre": {
                        "nodeType": "YulBlock",
                        "src": "160:3:49",
                        "statements": []
                      },
                      "src": "156:162:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "342:3:49"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "347:6:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "338:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "338:16:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "356:4:49",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "334:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "334:27:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "363:1:49",
                            "type": "",
                            "value": "0"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "327:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "327:38:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "327:38:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "374:57:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "389:3:49"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "402:6:49"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "410:2:49",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "398:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "398:15:49"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "419:2:49",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "415:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "415:7:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "394:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "394:29:49"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "385:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "385:39:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "426:4:49",
                            "type": "",
                            "value": "0x20"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "381:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "381:50:49"
                      },
                      "variableNames": [
                        {
                          "name": "end",
                          "nodeType": "YulIdentifier",
                          "src": "374:3:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_string",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "41:5:49",
                    "type": ""
                  },
                  {
                    "name": "pos",
                    "nodeType": "YulTypedName",
                    "src": "48:3:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "end",
                    "nodeType": "YulTypedName",
                    "src": "56:3:49",
                    "type": ""
                  }
                ],
                "src": "14:423:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "563:99:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "580:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "591:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "573:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "573:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "573:21:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "603:53:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "629:6:49"
                          },
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "641:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "652:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "637:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "637:18:49"
                          }
                        ],
                        "functionName": {
                          "name": "abi_encode_string",
                          "nodeType": "YulIdentifier",
                          "src": "611:17:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "611:45:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "603:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "532:9:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "543:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "554:4:49",
                    "type": ""
                  }
                ],
                "src": "442:220:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "716:124:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "726:29:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "748:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "735:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "735:20:49"
                      },
                      "variableNames": [
                        {
                          "name": "value",
                          "nodeType": "YulIdentifier",
                          "src": "726:5:49"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "818:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "827:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "830:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "820:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "820:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "820:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "777:5:49"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "788:5:49"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "803:3:49",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "808:1:49",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "799:3:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "799:11:49"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "812:1:49",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "795:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "795:19:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "784:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "784:31:49"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "774:2:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "774:42:49"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "767:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "767:50:49"
                      },
                      "nodeType": "YulIf",
                      "src": "764:70:49"
                    }
                  ]
                },
                "name": "abi_decode_address",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "offset",
                    "nodeType": "YulTypedName",
                    "src": "695:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "706:5:49",
                    "type": ""
                  }
                ],
                "src": "667:173:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "932:167:49",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "978:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "987:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "990:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "980:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "980:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "980:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "953:7:49"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "962:9:49"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "949:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "949:23:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "974:2:49",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "945:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "945:32:49"
                      },
                      "nodeType": "YulIf",
                      "src": "942:52:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1003:39:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1032:9:49"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_address",
                          "nodeType": "YulIdentifier",
                          "src": "1013:18:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1013:29:49"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "1003:6:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1051:42:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1078:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1089:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1074:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1074:18:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "1061:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1061:32:49"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "1051:6:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_addresst_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "890:9:49",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "901:7:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "913:6:49",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "921:6:49",
                    "type": ""
                  }
                ],
                "src": "845:254:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1199:92:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "1209:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1221:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1232:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1217:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1217:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "1209:4:49"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1251:9:49"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "1276:6:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "1269:6:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1269:14:49"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "1262:6:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1262:22:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1244:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1244:41:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1244:41:49"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "1168:9:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "1179:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "1190:4:49",
                    "type": ""
                  }
                ],
                "src": "1104:187:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1397:76:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "1407:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1419:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1430:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1415:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1415:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "1407:4:49"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1449:9:49"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "1460:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1442:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1442:25:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1442:25:49"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "1366:9:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "1377:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "1388:4:49",
                    "type": ""
                  }
                ],
                "src": "1296:177:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1582:224:49",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1628:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1637:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1640:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "1630:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1630:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1630:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "1603:7:49"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1612:9:49"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "1599:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1599:23:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1624:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "1595:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1595:32:49"
                      },
                      "nodeType": "YulIf",
                      "src": "1592:52:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1653:39:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1682:9:49"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_address",
                          "nodeType": "YulIdentifier",
                          "src": "1663:18:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1663:29:49"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "1653:6:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1701:48:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1734:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1745:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1730:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1730:18:49"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_address",
                          "nodeType": "YulIdentifier",
                          "src": "1711:18:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1711:38:49"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "1701:6:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1758:42:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1785:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1796:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1781:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1781:18:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "1768:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1768:32:49"
                      },
                      "variableNames": [
                        {
                          "name": "value2",
                          "nodeType": "YulIdentifier",
                          "src": "1758:6:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_addresst_addresst_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "1532:9:49",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "1543:7:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "1555:6:49",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "1563:6:49",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "1571:6:49",
                    "type": ""
                  }
                ],
                "src": "1478:328:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1908:87:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "1918:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1930:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1941:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1926:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1926:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "1918:4:49"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1960:9:49"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "1975:6:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1983:4:49",
                                "type": "",
                                "value": "0xff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "1971:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1971:17:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1953:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1953:36:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1953:36:49"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "1877:9:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "1888:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "1899:4:49",
                    "type": ""
                  }
                ],
                "src": "1811:184:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2101:76:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "2111:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2123:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2134:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "2119:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2119:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "2111:4:49"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2153:9:49"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "2164:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2146:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2146:25:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2146:25:49"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "2070:9:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "2081:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "2092:4:49",
                    "type": ""
                  }
                ],
                "src": "2000:177:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2252:116:49",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2298:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2307:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2310:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "2300:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2300:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2300:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "2273:7:49"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2282:9:49"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "2269:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2269:23:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2294:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "2265:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2265:32:49"
                      },
                      "nodeType": "YulIf",
                      "src": "2262:52:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2323:39:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2352:9:49"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_address",
                          "nodeType": "YulIdentifier",
                          "src": "2333:18:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2333:29:49"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "2323:6:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_address",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "2218:9:49",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "2229:7:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "2241:6:49",
                    "type": ""
                  }
                ],
                "src": "2182:186:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2474:102:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "2484:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2496:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2507:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "2492:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2492:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "2484:4:49"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2526:9:49"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "2541:6:49"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2557:3:49",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2562:1:49",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "2553:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2553:11:49"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2566:1:49",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2549:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2549:19:49"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "2537:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2537:32:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2519:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2519:51:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2519:51:49"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "2443:9:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "2454:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "2465:4:49",
                    "type": ""
                  }
                ],
                "src": "2373:203:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2680:93:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "2690:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2702:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2713:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "2698:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2698:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "2690:4:49"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2732:9:49"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "2747:6:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2755:10:49",
                                "type": "",
                                "value": "0xffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "2743:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2743:23:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2725:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2725:42:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2725:42:49"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint32__to_t_uint32__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "2649:9:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "2660:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "2671:4:49",
                    "type": ""
                  }
                ],
                "src": "2581:192:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3135:902:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3152:9:49"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "3167:6:49"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3179:3:49",
                                    "type": "",
                                    "value": "248"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3184:3:49",
                                    "type": "",
                                    "value": "255"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "3175:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3175:13:49"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "3163:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3163:26:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3145:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3145:45:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3145:45:49"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "3199:12:49",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "3209:2:49",
                        "type": "",
                        "value": "32"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "3203:2:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3231:9:49"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "3242:2:49"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3227:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3227:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3247:3:49",
                            "type": "",
                            "value": "224"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3220:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3220:31:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3220:31:49"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "3260:60:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "3292:6:49"
                          },
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3304:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3315:3:49",
                                "type": "",
                                "value": "224"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3300:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3300:19:49"
                          }
                        ],
                        "functionName": {
                          "name": "abi_encode_string",
                          "nodeType": "YulIdentifier",
                          "src": "3274:17:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3274:46:49"
                      },
                      "variables": [
                        {
                          "name": "tail_1",
                          "nodeType": "YulTypedName",
                          "src": "3264:6:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3340:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3351:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3336:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3336:18:49"
                          },
                          {
                            "arguments": [
                              {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "3360:6:49"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3368:9:49"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "3356:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3356:22:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3329:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3329:50:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3329:50:49"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "3388:47:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "value2",
                            "nodeType": "YulIdentifier",
                            "src": "3420:6:49"
                          },
                          {
                            "name": "tail_1",
                            "nodeType": "YulIdentifier",
                            "src": "3428:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "abi_encode_string",
                          "nodeType": "YulIdentifier",
                          "src": "3402:17:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3402:33:49"
                      },
                      "variables": [
                        {
                          "name": "tail_2",
                          "nodeType": "YulTypedName",
                          "src": "3392:6:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3455:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3466:2:49",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3451:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3451:18:49"
                          },
                          {
                            "name": "value3",
                            "nodeType": "YulIdentifier",
                            "src": "3471:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3444:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3444:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3444:34:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3498:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3509:3:49",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3494:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3494:19:49"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value4",
                                "nodeType": "YulIdentifier",
                                "src": "3519:6:49"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3535:3:49",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3540:1:49",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "3531:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3531:11:49"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3544:1:49",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3527:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3527:19:49"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "3515:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3515:32:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3487:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3487:61:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3487:61:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3568:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3579:3:49",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3564:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3564:19:49"
                          },
                          {
                            "name": "value5",
                            "nodeType": "YulIdentifier",
                            "src": "3585:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3557:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3557:35:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3557:35:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3612:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3623:3:49",
                                "type": "",
                                "value": "192"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3608:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3608:19:49"
                          },
                          {
                            "arguments": [
                              {
                                "name": "tail_2",
                                "nodeType": "YulIdentifier",
                                "src": "3633:6:49"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3641:9:49"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "3629:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3629:22:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3601:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3601:51:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3601:51:49"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "3661:17:49",
                      "value": {
                        "name": "tail_2",
                        "nodeType": "YulIdentifier",
                        "src": "3672:6:49"
                      },
                      "variables": [
                        {
                          "name": "pos",
                          "nodeType": "YulTypedName",
                          "src": "3665:3:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "3687:27:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "value6",
                            "nodeType": "YulIdentifier",
                            "src": "3707:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "3701:5:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3701:13:49"
                      },
                      "variables": [
                        {
                          "name": "length",
                          "nodeType": "YulTypedName",
                          "src": "3691:6:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "tail_2",
                            "nodeType": "YulIdentifier",
                            "src": "3730:6:49"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "3738:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3723:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3723:22:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3723:22:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3754:22:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "tail_2",
                            "nodeType": "YulIdentifier",
                            "src": "3765:6:49"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "3773:2:49"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "3761:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3761:15:49"
                      },
                      "variableNames": [
                        {
                          "name": "pos",
                          "nodeType": "YulIdentifier",
                          "src": "3754:3:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "3785:29:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "value6",
                            "nodeType": "YulIdentifier",
                            "src": "3803:6:49"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "3811:2:49"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "3799:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3799:15:49"
                      },
                      "variables": [
                        {
                          "name": "srcPtr",
                          "nodeType": "YulTypedName",
                          "src": "3789:6:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "3823:10:49",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "3832:1:49",
                        "type": "",
                        "value": "0"
                      },
                      "variables": [
                        {
                          "name": "i",
                          "nodeType": "YulTypedName",
                          "src": "3827:1:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "3891:120:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulIdentifier",
                                  "src": "3912:3:49"
                                },
                                {
                                  "arguments": [
                                    {
                                      "name": "srcPtr",
                                      "nodeType": "YulIdentifier",
                                      "src": "3923:6:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "3917:5:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3917:13:49"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "3905:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3905:26:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "3905:26:49"
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "3944:19:49",
                            "value": {
                              "arguments": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulIdentifier",
                                  "src": "3955:3:49"
                                },
                                {
                                  "name": "_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "3960:2:49"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "3951:3:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3951:12:49"
                            },
                            "variableNames": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "3944:3:49"
                              }
                            ]
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "3976:25:49",
                            "value": {
                              "arguments": [
                                {
                                  "name": "srcPtr",
                                  "nodeType": "YulIdentifier",
                                  "src": "3990:6:49"
                                },
                                {
                                  "name": "_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "3998:2:49"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "3986:3:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3986:15:49"
                            },
                            "variableNames": [
                              {
                                "name": "srcPtr",
                                "nodeType": "YulIdentifier",
                                "src": "3976:6:49"
                              }
                            ]
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "i",
                            "nodeType": "YulIdentifier",
                            "src": "3853:1:49"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "3856:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "3850:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3850:13:49"
                      },
                      "nodeType": "YulForLoop",
                      "post": {
                        "nodeType": "YulBlock",
                        "src": "3864:18:49",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "3866:14:49",
                            "value": {
                              "arguments": [
                                {
                                  "name": "i",
                                  "nodeType": "YulIdentifier",
                                  "src": "3875:1:49"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3878:1:49",
                                  "type": "",
                                  "value": "1"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "3871:3:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3871:9:49"
                            },
                            "variableNames": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "3866:1:49"
                              }
                            ]
                          }
                        ]
                      },
                      "pre": {
                        "nodeType": "YulBlock",
                        "src": "3846:3:49",
                        "statements": []
                      },
                      "src": "3842:169:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4020:11:49",
                      "value": {
                        "name": "pos",
                        "nodeType": "YulIdentifier",
                        "src": "4028:3:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "4020:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "3056:9:49",
                    "type": ""
                  },
                  {
                    "name": "value6",
                    "nodeType": "YulTypedName",
                    "src": "3067:6:49",
                    "type": ""
                  },
                  {
                    "name": "value5",
                    "nodeType": "YulTypedName",
                    "src": "3075:6:49",
                    "type": ""
                  },
                  {
                    "name": "value4",
                    "nodeType": "YulTypedName",
                    "src": "3083:6:49",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "3091:6:49",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "3099:6:49",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "3107:6:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "3115:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "3126:4:49",
                    "type": ""
                  }
                ],
                "src": "2778:1259:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4112:110:49",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "4158:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4167:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4170:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "4160:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "4160:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "4160:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "4133:7:49"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4142:9:49"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "4129:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4129:23:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4154:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "4125:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4125:32:49"
                      },
                      "nodeType": "YulIf",
                      "src": "4122:52:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4183:33:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4206:9:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "4193:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4193:23:49"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "4183:6:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "4078:9:49",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "4089:7:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "4101:6:49",
                    "type": ""
                  }
                ],
                "src": "4042:180:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4326:97:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "4336:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4348:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4359:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4344:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4344:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "4336:4:49"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4378:9:49"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "4393:6:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4401:14:49",
                                "type": "",
                                "value": "0xffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "4389:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4389:27:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4371:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4371:46:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4371:46:49"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint48__to_t_uint48__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "4295:9:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "4306:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "4317:4:49",
                    "type": ""
                  }
                ],
                "src": "4227:196:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4475:109:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "4485:29:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "4507:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "4494:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4494:20:49"
                      },
                      "variableNames": [
                        {
                          "name": "value",
                          "nodeType": "YulIdentifier",
                          "src": "4485:5:49"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "4562:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4571:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4574:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "4564:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "4564:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "4564:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "4536:5:49"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "4547:5:49"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4554:4:49",
                                    "type": "",
                                    "value": "0xff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "4543:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4543:16:49"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "4533:2:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4533:27:49"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "4526:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4526:35:49"
                      },
                      "nodeType": "YulIf",
                      "src": "4523:55:49"
                    }
                  ]
                },
                "name": "abi_decode_uint8",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "offset",
                    "nodeType": "YulTypedName",
                    "src": "4454:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "4465:5:49",
                    "type": ""
                  }
                ],
                "src": "4428:156:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4742:378:49",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "4789:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4798:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4801:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "4791:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "4791:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "4791:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "4763:7:49"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4772:9:49"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "4759:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4759:23:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4784:3:49",
                            "type": "",
                            "value": "192"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "4755:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4755:33:49"
                      },
                      "nodeType": "YulIf",
                      "src": "4752:53:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4814:39:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4843:9:49"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_address",
                          "nodeType": "YulIdentifier",
                          "src": "4824:18:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4824:29:49"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "4814:6:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4862:42:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4889:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4900:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4885:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4885:18:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "4872:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4872:32:49"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "4862:6:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4913:42:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4940:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4951:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4936:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4936:18:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "4923:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4923:32:49"
                      },
                      "variableNames": [
                        {
                          "name": "value2",
                          "nodeType": "YulIdentifier",
                          "src": "4913:6:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4964:46:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4995:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5006:2:49",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4991:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4991:18:49"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_uint8",
                          "nodeType": "YulIdentifier",
                          "src": "4974:16:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4974:36:49"
                      },
                      "variableNames": [
                        {
                          "name": "value3",
                          "nodeType": "YulIdentifier",
                          "src": "4964:6:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "5019:43:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5046:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5057:3:49",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5042:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5042:19:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "5029:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5029:33:49"
                      },
                      "variableNames": [
                        {
                          "name": "value4",
                          "nodeType": "YulIdentifier",
                          "src": "5019:6:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "5071:43:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5098:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5109:3:49",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5094:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5094:19:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "5081:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5081:33:49"
                      },
                      "variableNames": [
                        {
                          "name": "value5",
                          "nodeType": "YulIdentifier",
                          "src": "5071:6:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "4668:9:49",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "4679:7:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "4691:6:49",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "4699:6:49",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "4707:6:49",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "4715:6:49",
                    "type": ""
                  },
                  {
                    "name": "value4",
                    "nodeType": "YulTypedName",
                    "src": "4723:6:49",
                    "type": ""
                  },
                  {
                    "name": "value5",
                    "nodeType": "YulTypedName",
                    "src": "4731:6:49",
                    "type": ""
                  }
                ],
                "src": "4589:531:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "5295:436:49",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "5342:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "5351:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "5354:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "5344:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "5344:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "5344:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "5316:7:49"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5325:9:49"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "5312:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5312:23:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5337:3:49",
                            "type": "",
                            "value": "224"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "5308:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5308:33:49"
                      },
                      "nodeType": "YulIf",
                      "src": "5305:53:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "5367:39:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5396:9:49"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_address",
                          "nodeType": "YulIdentifier",
                          "src": "5377:18:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5377:29:49"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "5367:6:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "5415:48:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5448:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5459:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5444:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5444:18:49"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_address",
                          "nodeType": "YulIdentifier",
                          "src": "5425:18:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5425:38:49"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "5415:6:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "5472:42:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5499:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5510:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5495:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5495:18:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "5482:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5482:32:49"
                      },
                      "variableNames": [
                        {
                          "name": "value2",
                          "nodeType": "YulIdentifier",
                          "src": "5472:6:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "5523:42:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5550:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5561:2:49",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5546:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5546:18:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "5533:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5533:32:49"
                      },
                      "variableNames": [
                        {
                          "name": "value3",
                          "nodeType": "YulIdentifier",
                          "src": "5523:6:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "5574:47:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5605:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5616:3:49",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5601:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5601:19:49"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_uint8",
                          "nodeType": "YulIdentifier",
                          "src": "5584:16:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5584:37:49"
                      },
                      "variableNames": [
                        {
                          "name": "value4",
                          "nodeType": "YulIdentifier",
                          "src": "5574:6:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "5630:43:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5657:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5668:3:49",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5653:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5653:19:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "5640:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5640:33:49"
                      },
                      "variableNames": [
                        {
                          "name": "value5",
                          "nodeType": "YulIdentifier",
                          "src": "5630:6:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "5682:43:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5709:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5720:3:49",
                                "type": "",
                                "value": "192"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5705:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5705:19:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "5692:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5692:33:49"
                      },
                      "variableNames": [
                        {
                          "name": "value6",
                          "nodeType": "YulIdentifier",
                          "src": "5682:6:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "5213:9:49",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "5224:7:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "5236:6:49",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "5244:6:49",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "5252:6:49",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "5260:6:49",
                    "type": ""
                  },
                  {
                    "name": "value4",
                    "nodeType": "YulTypedName",
                    "src": "5268:6:49",
                    "type": ""
                  },
                  {
                    "name": "value5",
                    "nodeType": "YulTypedName",
                    "src": "5276:6:49",
                    "type": ""
                  },
                  {
                    "name": "value6",
                    "nodeType": "YulTypedName",
                    "src": "5284:6:49",
                    "type": ""
                  }
                ],
                "src": "5125:606:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "5823:173:49",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "5869:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "5878:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "5881:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "5871:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "5871:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "5871:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "5844:7:49"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5853:9:49"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "5840:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5840:23:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5865:2:49",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "5836:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5836:32:49"
                      },
                      "nodeType": "YulIf",
                      "src": "5833:52:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "5894:39:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5923:9:49"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_address",
                          "nodeType": "YulIdentifier",
                          "src": "5904:18:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5904:29:49"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "5894:6:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "5942:48:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5975:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5986:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5971:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5971:18:49"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_address",
                          "nodeType": "YulIdentifier",
                          "src": "5952:18:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5952:38:49"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "5942:6:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_addresst_address",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "5781:9:49",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "5792:7:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "5804:6:49",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "5812:6:49",
                    "type": ""
                  }
                ],
                "src": "5736:260:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "6087:264:49",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "6133:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6142:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6145:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "6135:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "6135:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "6135:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "6108:7:49"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6117:9:49"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "6104:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6104:23:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6129:2:49",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "6100:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6100:32:49"
                      },
                      "nodeType": "YulIf",
                      "src": "6097:52:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "6158:39:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6187:9:49"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_address",
                          "nodeType": "YulIdentifier",
                          "src": "6168:18:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6168:29:49"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "6158:6:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "6206:45:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6236:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6247:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6232:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6232:18:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "6219:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6219:32:49"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "6210:5:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "6305:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6314:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6317:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "6307:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "6307:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "6307:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "6273:5:49"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "6284:5:49"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6291:10:49",
                                    "type": "",
                                    "value": "0xffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "6280:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6280:22:49"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "6270:2:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6270:33:49"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "6263:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6263:41:49"
                      },
                      "nodeType": "YulIf",
                      "src": "6260:61:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "6330:15:49",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "6340:5:49"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "6330:6:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_addresst_uint32",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "6045:9:49",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "6056:7:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "6068:6:49",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "6076:6:49",
                    "type": ""
                  }
                ],
                "src": "6001:350:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "6511:189:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "6521:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6533:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6544:2:49",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "6529:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6529:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "6521:4:49"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6563:9:49"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "6584:6:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "6578:5:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6578:13:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6593:10:49",
                                "type": "",
                                "value": "0xffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "6574:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6574:30:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6556:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6556:49:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6556:49:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6625:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6636:4:49",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6621:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6621:20:49"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "6657:6:49"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6665:4:49",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6653:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6653:17:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "6647:5:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6647:24:49"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6681:3:49",
                                        "type": "",
                                        "value": "224"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6686:1:49",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "6677:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6677:11:49"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6690:1:49",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "6673:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6673:19:49"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "6643:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6643:50:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6614:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6614:80:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6614:80:49"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_struct$_Checkpoint_$833_memory_ptr__to_t_struct$_Checkpoint_$833_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "6480:9:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "6491:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "6502:4:49",
                    "type": ""
                  }
                ],
                "src": "6356:344:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "6760:325:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "6770:22:49",
                      "value": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6784:1:49",
                            "type": "",
                            "value": "1"
                          },
                          {
                            "name": "data",
                            "nodeType": "YulIdentifier",
                            "src": "6787:4:49"
                          }
                        ],
                        "functionName": {
                          "name": "shr",
                          "nodeType": "YulIdentifier",
                          "src": "6780:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6780:12:49"
                      },
                      "variableNames": [
                        {
                          "name": "length",
                          "nodeType": "YulIdentifier",
                          "src": "6770:6:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "6801:38:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "data",
                            "nodeType": "YulIdentifier",
                            "src": "6831:4:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6837:1:49",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "and",
                          "nodeType": "YulIdentifier",
                          "src": "6827:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6827:12:49"
                      },
                      "variables": [
                        {
                          "name": "outOfPlaceEncoding",
                          "nodeType": "YulTypedName",
                          "src": "6805:18:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "6878:31:49",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "6880:27:49",
                            "value": {
                              "arguments": [
                                {
                                  "name": "length",
                                  "nodeType": "YulIdentifier",
                                  "src": "6894:6:49"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6902:4:49",
                                  "type": "",
                                  "value": "0x7f"
                                }
                              ],
                              "functionName": {
                                "name": "and",
                                "nodeType": "YulIdentifier",
                                "src": "6890:3:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "6890:17:49"
                            },
                            "variableNames": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "6880:6:49"
                              }
                            ]
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "outOfPlaceEncoding",
                            "nodeType": "YulIdentifier",
                            "src": "6858:18:49"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "6851:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6851:26:49"
                      },
                      "nodeType": "YulIf",
                      "src": "6848:61:49"
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "6968:111:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6989:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6996:3:49",
                                      "type": "",
                                      "value": "224"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7001:10:49",
                                      "type": "",
                                      "value": "0x4e487b71"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shl",
                                    "nodeType": "YulIdentifier",
                                    "src": "6992:3:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6992:20:49"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "6982:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "6982:31:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "6982:31:49"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "7033:1:49",
                                  "type": "",
                                  "value": "4"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "7036:4:49",
                                  "type": "",
                                  "value": "0x22"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "7026:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "7026:15:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "7026:15:49"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "7061:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "7064:4:49",
                                  "type": "",
                                  "value": "0x24"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "7054:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "7054:15:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "7054:15:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "outOfPlaceEncoding",
                            "nodeType": "YulIdentifier",
                            "src": "6924:18:49"
                          },
                          {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "6947:6:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6955:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "6944:2:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6944:14:49"
                          }
                        ],
                        "functionName": {
                          "name": "eq",
                          "nodeType": "YulIdentifier",
                          "src": "6921:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6921:38:49"
                      },
                      "nodeType": "YulIf",
                      "src": "6918:161:49"
                    }
                  ]
                },
                "name": "extract_byte_array_length",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "data",
                    "nodeType": "YulTypedName",
                    "src": "6740:4:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "length",
                    "nodeType": "YulTypedName",
                    "src": "6749:6:49",
                    "type": ""
                  }
                ],
                "src": "6705:380:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "7122:95:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7139:1:49",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7146:3:49",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7151:10:49",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "7142:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7142:20:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7132:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7132:31:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7132:31:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7179:1:49",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7182:4:49",
                            "type": "",
                            "value": "0x11"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7172:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7172:15:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7172:15:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7203:1:49",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7206:4:49",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "7196:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7196:15:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7196:15:49"
                    }
                  ]
                },
                "name": "panic_error_0x11",
                "nodeType": "YulFunctionDefinition",
                "src": "7090:127:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "7270:77:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "7280:16:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "7291:1:49"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "7294:1:49"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "7287:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7287:9:49"
                      },
                      "variableNames": [
                        {
                          "name": "sum",
                          "nodeType": "YulIdentifier",
                          "src": "7280:3:49"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "7319:22:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "7321:16:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "7321:18:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "7321:18:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "7311:1:49"
                          },
                          {
                            "name": "sum",
                            "nodeType": "YulIdentifier",
                            "src": "7314:3:49"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "7308:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7308:10:49"
                      },
                      "nodeType": "YulIf",
                      "src": "7305:36:49"
                    }
                  ]
                },
                "name": "checked_add_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "7253:1:49",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "7256:1:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "sum",
                    "nodeType": "YulTypedName",
                    "src": "7262:3:49",
                    "type": ""
                  }
                ],
                "src": "7222:125:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "7526:175:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7543:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7554:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7536:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7536:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7536:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7577:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7588:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7573:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7573:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7593:2:49",
                            "type": "",
                            "value": "25"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7566:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7566:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7566:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7616:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7627:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7612:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7612:18:49"
                          },
                          {
                            "hexValue": "4552433230566f7465733a20667574757265206c6f6f6b7570",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "7632:27:49",
                            "type": "",
                            "value": "ERC20Votes: future lookup"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7605:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7605:55:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7605:55:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "7669:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7681:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7692:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "7677:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7677:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "7669:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_9fb4d8462c9084391e0cf06f1b2a0a5b1a23dc8fede26e3b7b37154948e87a72__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "7503:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "7517:4:49",
                    "type": ""
                  }
                ],
                "src": "7352:349:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "7738:95:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7755:1:49",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7762:3:49",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7767:10:49",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "7758:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7758:20:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7748:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7748:31:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7748:31:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7795:1:49",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7798:4:49",
                            "type": "",
                            "value": "0x41"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7788:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7788:15:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7788:15:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7819:1:49",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7822:4:49",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "7812:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7812:15:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7812:15:49"
                    }
                  ]
                },
                "name": "panic_error_0x41",
                "nodeType": "YulFunctionDefinition",
                "src": "7706:127:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "7870:95:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7887:1:49",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7894:3:49",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7899:10:49",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "7890:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7890:20:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7880:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7880:31:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7880:31:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7927:1:49",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7930:4:49",
                            "type": "",
                            "value": "0x32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7920:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7920:15:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7920:15:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7951:1:49",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7954:4:49",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "7944:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7944:15:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7944:15:49"
                    }
                  ]
                },
                "name": "panic_error_0x32",
                "nodeType": "YulFunctionDefinition",
                "src": "7838:127:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "8144:227:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "8161:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8172:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "8154:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8154:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8154:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8195:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8206:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8191:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8191:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8211:2:49",
                            "type": "",
                            "value": "37"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "8184:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8184:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8184:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8234:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8245:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8230:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8230:18:49"
                          },
                          {
                            "hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "8250:34:49",
                            "type": "",
                            "value": "ERC20: decreased allowance below"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "8223:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8223:62:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8223:62:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8305:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8316:2:49",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8301:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8301:18:49"
                          },
                          {
                            "hexValue": "207a65726f",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "8321:7:49",
                            "type": "",
                            "value": " zero"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "8294:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8294:35:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8294:35:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "8338:27:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "8350:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8361:3:49",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "8346:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8346:19:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "8338:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "8121:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "8135:4:49",
                    "type": ""
                  }
                ],
                "src": "7970:401:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "8550:179:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "8567:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8578:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "8560:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8560:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8560:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8601:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8612:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8597:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8597:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8617:2:49",
                            "type": "",
                            "value": "29"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "8590:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8590:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8590:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8640:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8651:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8636:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8636:18:49"
                          },
                          {
                            "hexValue": "4552433230566f7465733a207369676e61747572652065787069726564",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "8656:31:49",
                            "type": "",
                            "value": "ERC20Votes: signature expired"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "8629:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8629:59:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8629:59:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "8697:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "8709:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8720:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "8705:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8705:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "8697:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_136d0f69bc85a5c125b5cc368e2880ebdb3c89d4d9828f6476431c386ea60257__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "8527:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "8541:4:49",
                    "type": ""
                  }
                ],
                "src": "8376:353:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "8919:232:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "8929:27:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "8941:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8952:3:49",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "8937:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8937:19:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "8929:4:49"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "8972:9:49"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "8983:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "8965:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8965:25:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8965:25:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9010:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9021:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9006:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9006:18:49"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "9030:6:49"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9046:3:49",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9051:1:49",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "9042:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9042:11:49"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9055:1:49",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "9038:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9038:19:49"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "9026:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9026:32:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "8999:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8999:60:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8999:60:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9079:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9090:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9075:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9075:18:49"
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulIdentifier",
                            "src": "9095:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9068:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9068:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9068:34:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9122:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9133:2:49",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9118:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9118:18:49"
                          },
                          {
                            "name": "value3",
                            "nodeType": "YulIdentifier",
                            "src": "9138:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9111:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9111:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9111:34:49"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_bytes32_t_address_t_uint256_t_uint256__to_t_bytes32_t_address_t_uint256_t_uint256__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "8864:9:49",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "8875:6:49",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "8883:6:49",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "8891:6:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "8899:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "8910:4:49",
                    "type": ""
                  }
                ],
                "src": "8734:417:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "9330:175:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "9347:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9358:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9340:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9340:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9340:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9381:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9392:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9377:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9377:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9397:2:49",
                            "type": "",
                            "value": "25"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9370:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9370:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9370:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9420:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9431:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9416:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9416:18:49"
                          },
                          {
                            "hexValue": "4552433230566f7465733a20696e76616c6964206e6f6e6365",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "9436:27:49",
                            "type": "",
                            "value": "ERC20Votes: invalid nonce"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9409:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9409:55:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9409:55:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "9473:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "9485:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9496:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "9481:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9481:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "9473:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_1a23b43d95073d55a7380117ca03cace60cd22fee15d5cb140d51e46236e6872__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "9307:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "9321:4:49",
                    "type": ""
                  }
                ],
                "src": "9156:349:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "9684:179:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "9701:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9712:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9694:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9694:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9694:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9735:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9746:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9731:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9731:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9751:2:49",
                            "type": "",
                            "value": "29"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9724:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9724:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9724:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9774:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9785:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9770:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9770:18:49"
                          },
                          {
                            "hexValue": "45524332305065726d69743a206578706972656420646561646c696e65",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "9790:31:49",
                            "type": "",
                            "value": "ERC20Permit: expired deadline"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9763:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9763:59:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9763:59:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "9831:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "9843:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9854:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "9839:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9839:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "9831:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "9661:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "9675:4:49",
                    "type": ""
                  }
                ],
                "src": "9510:353:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "10109:350:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "10119:27:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "10131:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10142:3:49",
                            "type": "",
                            "value": "192"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "10127:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10127:19:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "10119:4:49"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "10162:9:49"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "10173:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10155:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10155:25:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10155:25:49"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "10189:29:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10207:3:49",
                                "type": "",
                                "value": "160"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10212:1:49",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "10203:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10203:11:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10216:1:49",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "10199:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10199:19:49"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "10193:2:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10238:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10249:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10234:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10234:18:49"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "10258:6:49"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "10266:2:49"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "10254:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10254:15:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10227:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10227:43:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10227:43:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10290:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10301:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10286:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10286:18:49"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "10310:6:49"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "10318:2:49"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "10306:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10306:15:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10279:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10279:43:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10279:43:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10342:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10353:2:49",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10338:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10338:18:49"
                          },
                          {
                            "name": "value3",
                            "nodeType": "YulIdentifier",
                            "src": "10358:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10331:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10331:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10331:34:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10385:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10396:3:49",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10381:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10381:19:49"
                          },
                          {
                            "name": "value4",
                            "nodeType": "YulIdentifier",
                            "src": "10402:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10374:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10374:35:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10374:35:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10429:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10440:3:49",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10425:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10425:19:49"
                          },
                          {
                            "name": "value5",
                            "nodeType": "YulIdentifier",
                            "src": "10446:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10418:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10418:35:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10418:35:49"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "10038:9:49",
                    "type": ""
                  },
                  {
                    "name": "value5",
                    "nodeType": "YulTypedName",
                    "src": "10049:6:49",
                    "type": ""
                  },
                  {
                    "name": "value4",
                    "nodeType": "YulTypedName",
                    "src": "10057:6:49",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "10065:6:49",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "10073:6:49",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "10081:6:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "10089:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "10100:4:49",
                    "type": ""
                  }
                ],
                "src": "9868:591:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "10638:180:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "10655:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10666:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10648:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10648:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10648:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10689:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10700:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10685:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10685:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10705:2:49",
                            "type": "",
                            "value": "30"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10678:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10678:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10678:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10728:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10739:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10724:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10724:18:49"
                          },
                          {
                            "hexValue": "45524332305065726d69743a20696e76616c6964207369676e6174757265",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "10744:32:49",
                            "type": "",
                            "value": "ERC20Permit: invalid signature"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10717:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10717:60:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10717:60:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "10786:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "10798:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10809:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "10794:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10794:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "10786:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "10615:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "10629:4:49",
                    "type": ""
                  }
                ],
                "src": "10464:354:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "10997:228:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "11014:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11025:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "11007:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11007:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "11007:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11048:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11059:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11044:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11044:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11064:2:49",
                            "type": "",
                            "value": "38"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "11037:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11037:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "11037:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11087:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11098:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11083:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11083:18:49"
                          },
                          {
                            "hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "11103:34:49",
                            "type": "",
                            "value": "Ownable: new owner is the zero a"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "11076:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11076:62:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "11076:62:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11158:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11169:2:49",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11154:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11154:18:49"
                          },
                          {
                            "hexValue": "646472657373",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "11174:8:49",
                            "type": "",
                            "value": "ddress"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "11147:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11147:36:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "11147:36:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "11192:27:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "11204:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11215:3:49",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "11200:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11200:19:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "11192:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "10974:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "10988:4:49",
                    "type": ""
                  }
                ],
                "src": "10823:402:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "11286:65:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11303:1:49",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "name": "ptr",
                            "nodeType": "YulIdentifier",
                            "src": "11306:3:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "11296:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11296:14:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "11296:14:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "11319:26:49",
                      "value": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11337:1:49",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11340:4:49",
                            "type": "",
                            "value": "0x20"
                          }
                        ],
                        "functionName": {
                          "name": "keccak256",
                          "nodeType": "YulIdentifier",
                          "src": "11327:9:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11327:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "data",
                          "nodeType": "YulIdentifier",
                          "src": "11319:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "array_dataslot_string_storage",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "ptr",
                    "nodeType": "YulTypedName",
                    "src": "11269:3:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "data",
                    "nodeType": "YulTypedName",
                    "src": "11277:4:49",
                    "type": ""
                  }
                ],
                "src": "11230:121:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "11437:464:49",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "11470:425:49",
                        "statements": [
                          {
                            "nodeType": "YulVariableDeclaration",
                            "src": "11484:11:49",
                            "value": {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "11494:1:49",
                              "type": "",
                              "value": "0"
                            },
                            "variables": [
                              {
                                "name": "_1",
                                "nodeType": "YulTypedName",
                                "src": "11488:2:49",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "11515:2:49"
                                },
                                {
                                  "name": "array",
                                  "nodeType": "YulIdentifier",
                                  "src": "11519:5:49"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "11508:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "11508:17:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "11508:17:49"
                          },
                          {
                            "nodeType": "YulVariableDeclaration",
                            "src": "11538:31:49",
                            "value": {
                              "arguments": [
                                {
                                  "name": "_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "11560:2:49"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "11564:4:49",
                                  "type": "",
                                  "value": "0x20"
                                }
                              ],
                              "functionName": {
                                "name": "keccak256",
                                "nodeType": "YulIdentifier",
                                "src": "11550:9:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "11550:19:49"
                            },
                            "variables": [
                              {
                                "name": "data",
                                "nodeType": "YulTypedName",
                                "src": "11542:4:49",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "nodeType": "YulVariableDeclaration",
                            "src": "11582:57:49",
                            "value": {
                              "arguments": [
                                {
                                  "name": "data",
                                  "nodeType": "YulIdentifier",
                                  "src": "11605:4:49"
                                },
                                {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11615:1:49",
                                      "type": "",
                                      "value": "5"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "startIndex",
                                          "nodeType": "YulIdentifier",
                                          "src": "11622:10:49"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "11634:2:49",
                                          "type": "",
                                          "value": "31"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "11618:3:49"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "11618:19:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shr",
                                    "nodeType": "YulIdentifier",
                                    "src": "11611:3:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11611:27:49"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "11601:3:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "11601:38:49"
                            },
                            "variables": [
                              {
                                "name": "deleteStart",
                                "nodeType": "YulTypedName",
                                "src": "11586:11:49",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "body": {
                              "nodeType": "YulBlock",
                              "src": "11676:23:49",
                              "statements": [
                                {
                                  "nodeType": "YulAssignment",
                                  "src": "11678:19:49",
                                  "value": {
                                    "name": "data",
                                    "nodeType": "YulIdentifier",
                                    "src": "11693:4:49"
                                  },
                                  "variableNames": [
                                    {
                                      "name": "deleteStart",
                                      "nodeType": "YulIdentifier",
                                      "src": "11678:11:49"
                                    }
                                  ]
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "name": "startIndex",
                                  "nodeType": "YulIdentifier",
                                  "src": "11658:10:49"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "11670:4:49",
                                  "type": "",
                                  "value": "0x20"
                                }
                              ],
                              "functionName": {
                                "name": "lt",
                                "nodeType": "YulIdentifier",
                                "src": "11655:2:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "11655:20:49"
                            },
                            "nodeType": "YulIf",
                            "src": "11652:47:49"
                          },
                          {
                            "nodeType": "YulVariableDeclaration",
                            "src": "11712:41:49",
                            "value": {
                              "arguments": [
                                {
                                  "name": "data",
                                  "nodeType": "YulIdentifier",
                                  "src": "11726:4:49"
                                },
                                {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11736:1:49",
                                      "type": "",
                                      "value": "5"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "len",
                                          "nodeType": "YulIdentifier",
                                          "src": "11743:3:49"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "11748:2:49",
                                          "type": "",
                                          "value": "31"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "11739:3:49"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "11739:12:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shr",
                                    "nodeType": "YulIdentifier",
                                    "src": "11732:3:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11732:20:49"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "11722:3:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "11722:31:49"
                            },
                            "variables": [
                              {
                                "name": "_2",
                                "nodeType": "YulTypedName",
                                "src": "11716:2:49",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "nodeType": "YulVariableDeclaration",
                            "src": "11766:24:49",
                            "value": {
                              "name": "deleteStart",
                              "nodeType": "YulIdentifier",
                              "src": "11779:11:49"
                            },
                            "variables": [
                              {
                                "name": "start",
                                "nodeType": "YulTypedName",
                                "src": "11770:5:49",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "body": {
                              "nodeType": "YulBlock",
                              "src": "11864:21:49",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "name": "start",
                                        "nodeType": "YulIdentifier",
                                        "src": "11873:5:49"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "11880:2:49"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sstore",
                                      "nodeType": "YulIdentifier",
                                      "src": "11866:6:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11866:17:49"
                                  },
                                  "nodeType": "YulExpressionStatement",
                                  "src": "11866:17:49"
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "name": "start",
                                  "nodeType": "YulIdentifier",
                                  "src": "11814:5:49"
                                },
                                {
                                  "name": "_2",
                                  "nodeType": "YulIdentifier",
                                  "src": "11821:2:49"
                                }
                              ],
                              "functionName": {
                                "name": "lt",
                                "nodeType": "YulIdentifier",
                                "src": "11811:2:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "11811:13:49"
                            },
                            "nodeType": "YulForLoop",
                            "post": {
                              "nodeType": "YulBlock",
                              "src": "11825:26:49",
                              "statements": [
                                {
                                  "nodeType": "YulAssignment",
                                  "src": "11827:22:49",
                                  "value": {
                                    "arguments": [
                                      {
                                        "name": "start",
                                        "nodeType": "YulIdentifier",
                                        "src": "11840:5:49"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11847:1:49",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "11836:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11836:13:49"
                                  },
                                  "variableNames": [
                                    {
                                      "name": "start",
                                      "nodeType": "YulIdentifier",
                                      "src": "11827:5:49"
                                    }
                                  ]
                                }
                              ]
                            },
                            "pre": {
                              "nodeType": "YulBlock",
                              "src": "11807:3:49",
                              "statements": []
                            },
                            "src": "11803:82:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "len",
                            "nodeType": "YulIdentifier",
                            "src": "11453:3:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11458:2:49",
                            "type": "",
                            "value": "31"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "11450:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11450:11:49"
                      },
                      "nodeType": "YulIf",
                      "src": "11447:448:49"
                    }
                  ]
                },
                "name": "clean_up_bytearray_end_slots_string_storage",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "array",
                    "nodeType": "YulTypedName",
                    "src": "11409:5:49",
                    "type": ""
                  },
                  {
                    "name": "len",
                    "nodeType": "YulTypedName",
                    "src": "11416:3:49",
                    "type": ""
                  },
                  {
                    "name": "startIndex",
                    "nodeType": "YulTypedName",
                    "src": "11421:10:49",
                    "type": ""
                  }
                ],
                "src": "11356:545:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "11991:81:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "12001:65:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "12016:4:49"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "12034:1:49",
                                            "type": "",
                                            "value": "3"
                                          },
                                          {
                                            "name": "len",
                                            "nodeType": "YulIdentifier",
                                            "src": "12037:3:49"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "12030:3:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "12030:11:49"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "12047:1:49",
                                            "type": "",
                                            "value": "0"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "12043:3:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "12043:6:49"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shr",
                                      "nodeType": "YulIdentifier",
                                      "src": "12026:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12026:24:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "12022:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12022:29:49"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "12012:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12012:40:49"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12058:1:49",
                                "type": "",
                                "value": "1"
                              },
                              {
                                "name": "len",
                                "nodeType": "YulIdentifier",
                                "src": "12061:3:49"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "12054:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12054:11:49"
                          }
                        ],
                        "functionName": {
                          "name": "or",
                          "nodeType": "YulIdentifier",
                          "src": "12009:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12009:57:49"
                      },
                      "variableNames": [
                        {
                          "name": "used",
                          "nodeType": "YulIdentifier",
                          "src": "12001:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "extract_used_part_and_set_length_of_short_byte_array",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "data",
                    "nodeType": "YulTypedName",
                    "src": "11968:4:49",
                    "type": ""
                  },
                  {
                    "name": "len",
                    "nodeType": "YulTypedName",
                    "src": "11974:3:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "used",
                    "nodeType": "YulTypedName",
                    "src": "11982:4:49",
                    "type": ""
                  }
                ],
                "src": "11906:166:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "12173:1256:49",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "12183:24:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "src",
                            "nodeType": "YulIdentifier",
                            "src": "12203:3:49"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "12197:5:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12197:10:49"
                      },
                      "variables": [
                        {
                          "name": "newLen",
                          "nodeType": "YulTypedName",
                          "src": "12187:6:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "12250:22:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x41",
                                "nodeType": "YulIdentifier",
                                "src": "12252:16:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "12252:18:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "12252:18:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "newLen",
                            "nodeType": "YulIdentifier",
                            "src": "12222:6:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "12230:18:49",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "12219:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12219:30:49"
                      },
                      "nodeType": "YulIf",
                      "src": "12216:56:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "slot",
                            "nodeType": "YulIdentifier",
                            "src": "12325:4:49"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "slot",
                                    "nodeType": "YulIdentifier",
                                    "src": "12363:4:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "sload",
                                  "nodeType": "YulIdentifier",
                                  "src": "12357:5:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12357:11:49"
                              }
                            ],
                            "functionName": {
                              "name": "extract_byte_array_length",
                              "nodeType": "YulIdentifier",
                              "src": "12331:25:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12331:38:49"
                          },
                          {
                            "name": "newLen",
                            "nodeType": "YulIdentifier",
                            "src": "12371:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "clean_up_bytearray_end_slots_string_storage",
                          "nodeType": "YulIdentifier",
                          "src": "12281:43:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12281:97:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "12281:97:49"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "12387:18:49",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "12404:1:49",
                        "type": "",
                        "value": "0"
                      },
                      "variables": [
                        {
                          "name": "srcOffset",
                          "nodeType": "YulTypedName",
                          "src": "12391:9:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "12414:23:49",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "12433:4:49",
                        "type": "",
                        "value": "0x20"
                      },
                      "variables": [
                        {
                          "name": "srcOffset_1",
                          "nodeType": "YulTypedName",
                          "src": "12418:11:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "12446:24:49",
                      "value": {
                        "name": "srcOffset_1",
                        "nodeType": "YulIdentifier",
                        "src": "12459:11:49"
                      },
                      "variableNames": [
                        {
                          "name": "srcOffset",
                          "nodeType": "YulIdentifier",
                          "src": "12446:9:49"
                        }
                      ]
                    },
                    {
                      "cases": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "12516:656:49",
                            "statements": [
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "12530:35:49",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "newLen",
                                      "nodeType": "YulIdentifier",
                                      "src": "12549:6:49"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "12561:2:49",
                                          "type": "",
                                          "value": "31"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "not",
                                        "nodeType": "YulIdentifier",
                                        "src": "12557:3:49"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "12557:7:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "12545:3:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12545:20:49"
                                },
                                "variables": [
                                  {
                                    "name": "loopEnd",
                                    "nodeType": "YulTypedName",
                                    "src": "12534:7:49",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "12578:49:49",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "slot",
                                      "nodeType": "YulIdentifier",
                                      "src": "12622:4:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "array_dataslot_string_storage",
                                    "nodeType": "YulIdentifier",
                                    "src": "12592:29:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12592:35:49"
                                },
                                "variables": [
                                  {
                                    "name": "dstPtr",
                                    "nodeType": "YulTypedName",
                                    "src": "12582:6:49",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "12640:10:49",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "12649:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                "variables": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulTypedName",
                                    "src": "12644:1:49",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "12727:172:49",
                                  "statements": [
                                    {
                                      "expression": {
                                        "arguments": [
                                          {
                                            "name": "dstPtr",
                                            "nodeType": "YulIdentifier",
                                            "src": "12752:6:49"
                                          },
                                          {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "src",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "12770:3:49"
                                                  },
                                                  {
                                                    "name": "srcOffset",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "12775:9:49"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "12766:3:49"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "12766:19:49"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mload",
                                              "nodeType": "YulIdentifier",
                                              "src": "12760:5:49"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "12760:26:49"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sstore",
                                          "nodeType": "YulIdentifier",
                                          "src": "12745:6:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "12745:42:49"
                                      },
                                      "nodeType": "YulExpressionStatement",
                                      "src": "12745:42:49"
                                    },
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "12804:24:49",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "dstPtr",
                                            "nodeType": "YulIdentifier",
                                            "src": "12818:6:49"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "12826:1:49",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "12814:3:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "12814:14:49"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "dstPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "12804:6:49"
                                        }
                                      ]
                                    },
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "12845:40:49",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "srcOffset",
                                            "nodeType": "YulIdentifier",
                                            "src": "12862:9:49"
                                          },
                                          {
                                            "name": "srcOffset_1",
                                            "nodeType": "YulIdentifier",
                                            "src": "12873:11:49"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "12858:3:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "12858:27:49"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "srcOffset",
                                          "nodeType": "YulIdentifier",
                                          "src": "12845:9:49"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "12674:1:49"
                                    },
                                    {
                                      "name": "loopEnd",
                                      "nodeType": "YulIdentifier",
                                      "src": "12677:7:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "lt",
                                    "nodeType": "YulIdentifier",
                                    "src": "12671:2:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12671:14:49"
                                },
                                "nodeType": "YulForLoop",
                                "post": {
                                  "nodeType": "YulBlock",
                                  "src": "12686:28:49",
                                  "statements": [
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "12688:24:49",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "i",
                                            "nodeType": "YulIdentifier",
                                            "src": "12697:1:49"
                                          },
                                          {
                                            "name": "srcOffset_1",
                                            "nodeType": "YulIdentifier",
                                            "src": "12700:11:49"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "12693:3:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "12693:19:49"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "12688:1:49"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "pre": {
                                  "nodeType": "YulBlock",
                                  "src": "12667:3:49",
                                  "statements": []
                                },
                                "src": "12663:236:49"
                              },
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "12947:166:49",
                                  "statements": [
                                    {
                                      "nodeType": "YulVariableDeclaration",
                                      "src": "12965:43:49",
                                      "value": {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "name": "src",
                                                "nodeType": "YulIdentifier",
                                                "src": "12992:3:49"
                                              },
                                              {
                                                "name": "srcOffset",
                                                "nodeType": "YulIdentifier",
                                                "src": "12997:9:49"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "12988:3:49"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "12988:19:49"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "mload",
                                          "nodeType": "YulIdentifier",
                                          "src": "12982:5:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "12982:26:49"
                                      },
                                      "variables": [
                                        {
                                          "name": "lastValue",
                                          "nodeType": "YulTypedName",
                                          "src": "12969:9:49",
                                          "type": ""
                                        }
                                      ]
                                    },
                                    {
                                      "expression": {
                                        "arguments": [
                                          {
                                            "name": "dstPtr",
                                            "nodeType": "YulIdentifier",
                                            "src": "13032:6:49"
                                          },
                                          {
                                            "arguments": [
                                              {
                                                "name": "lastValue",
                                                "nodeType": "YulIdentifier",
                                                "src": "13044:9:49"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "arguments": [
                                                      {
                                                        "arguments": [
                                                          {
                                                            "arguments": [
                                                              {
                                                                "kind": "number",
                                                                "nodeType": "YulLiteral",
                                                                "src": "13071:1:49",
                                                                "type": "",
                                                                "value": "3"
                                                              },
                                                              {
                                                                "name": "newLen",
                                                                "nodeType": "YulIdentifier",
                                                                "src": "13074:6:49"
                                                              }
                                                            ],
                                                            "functionName": {
                                                              "name": "shl",
                                                              "nodeType": "YulIdentifier",
                                                              "src": "13067:3:49"
                                                            },
                                                            "nodeType": "YulFunctionCall",
                                                            "src": "13067:14:49"
                                                          },
                                                          {
                                                            "kind": "number",
                                                            "nodeType": "YulLiteral",
                                                            "src": "13083:3:49",
                                                            "type": "",
                                                            "value": "248"
                                                          }
                                                        ],
                                                        "functionName": {
                                                          "name": "and",
                                                          "nodeType": "YulIdentifier",
                                                          "src": "13063:3:49"
                                                        },
                                                        "nodeType": "YulFunctionCall",
                                                        "src": "13063:24:49"
                                                      },
                                                      {
                                                        "arguments": [
                                                          {
                                                            "kind": "number",
                                                            "nodeType": "YulLiteral",
                                                            "src": "13093:1:49",
                                                            "type": "",
                                                            "value": "0"
                                                          }
                                                        ],
                                                        "functionName": {
                                                          "name": "not",
                                                          "nodeType": "YulIdentifier",
                                                          "src": "13089:3:49"
                                                        },
                                                        "nodeType": "YulFunctionCall",
                                                        "src": "13089:6:49"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "shr",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "13059:3:49"
                                                    },
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "13059:37:49"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "not",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "13055:3:49"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "13055:42:49"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "and",
                                              "nodeType": "YulIdentifier",
                                              "src": "13040:3:49"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "13040:58:49"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sstore",
                                          "nodeType": "YulIdentifier",
                                          "src": "13025:6:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "13025:74:49"
                                      },
                                      "nodeType": "YulExpressionStatement",
                                      "src": "13025:74:49"
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "loopEnd",
                                      "nodeType": "YulIdentifier",
                                      "src": "12918:7:49"
                                    },
                                    {
                                      "name": "newLen",
                                      "nodeType": "YulIdentifier",
                                      "src": "12927:6:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "lt",
                                    "nodeType": "YulIdentifier",
                                    "src": "12915:2:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12915:19:49"
                                },
                                "nodeType": "YulIf",
                                "src": "12912:201:49"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "slot",
                                      "nodeType": "YulIdentifier",
                                      "src": "13133:4:49"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "13147:1:49",
                                              "type": "",
                                              "value": "1"
                                            },
                                            {
                                              "name": "newLen",
                                              "nodeType": "YulIdentifier",
                                              "src": "13150:6:49"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "shl",
                                            "nodeType": "YulIdentifier",
                                            "src": "13143:3:49"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "13143:14:49"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "13159:1:49",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "13139:3:49"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "13139:22:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "sstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "13126:6:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13126:36:49"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13126:36:49"
                              }
                            ]
                          },
                          "nodeType": "YulCase",
                          "src": "12509:663:49",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "12514:1:49",
                            "type": "",
                            "value": "1"
                          }
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "13189:234:49",
                            "statements": [
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "13203:14:49",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "13216:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                "variables": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulTypedName",
                                    "src": "13207:5:49",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "13252:67:49",
                                  "statements": [
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "13270:35:49",
                                      "value": {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "name": "src",
                                                "nodeType": "YulIdentifier",
                                                "src": "13289:3:49"
                                              },
                                              {
                                                "name": "srcOffset",
                                                "nodeType": "YulIdentifier",
                                                "src": "13294:9:49"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "13285:3:49"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "13285:19:49"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "mload",
                                          "nodeType": "YulIdentifier",
                                          "src": "13279:5:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "13279:26:49"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "value",
                                          "nodeType": "YulIdentifier",
                                          "src": "13270:5:49"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "condition": {
                                  "name": "newLen",
                                  "nodeType": "YulIdentifier",
                                  "src": "13233:6:49"
                                },
                                "nodeType": "YulIf",
                                "src": "13230:89:49"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "slot",
                                      "nodeType": "YulIdentifier",
                                      "src": "13339:4:49"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "value",
                                          "nodeType": "YulIdentifier",
                                          "src": "13398:5:49"
                                        },
                                        {
                                          "name": "newLen",
                                          "nodeType": "YulIdentifier",
                                          "src": "13405:6:49"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "extract_used_part_and_set_length_of_short_byte_array",
                                        "nodeType": "YulIdentifier",
                                        "src": "13345:52:49"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "13345:67:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "sstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "13332:6:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13332:81:49"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13332:81:49"
                              }
                            ]
                          },
                          "nodeType": "YulCase",
                          "src": "13181:242:49",
                          "value": "default"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "name": "newLen",
                            "nodeType": "YulIdentifier",
                            "src": "12489:6:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "12497:2:49",
                            "type": "",
                            "value": "31"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "12486:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12486:14:49"
                      },
                      "nodeType": "YulSwitch",
                      "src": "12479:944:49"
                    }
                  ]
                },
                "name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "slot",
                    "nodeType": "YulTypedName",
                    "src": "12158:4:49",
                    "type": ""
                  },
                  {
                    "name": "src",
                    "nodeType": "YulTypedName",
                    "src": "12164:3:49",
                    "type": ""
                  }
                ],
                "src": "12077:1352:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "13608:226:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "13625:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "13636:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13618:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13618:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13618:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13659:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13670:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13655:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13655:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "13675:2:49",
                            "type": "",
                            "value": "36"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13648:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13648:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13648:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13698:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13709:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13694:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13694:18:49"
                          },
                          {
                            "hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f20616464",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "13714:34:49",
                            "type": "",
                            "value": "ERC20: approve from the zero add"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13687:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13687:62:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13687:62:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13769:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13780:2:49",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13765:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13765:18:49"
                          },
                          {
                            "hexValue": "72657373",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "13785:6:49",
                            "type": "",
                            "value": "ress"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13758:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13758:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13758:34:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "13801:27:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "13813:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "13824:3:49",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "13809:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13809:19:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "13801:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "13585:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "13599:4:49",
                    "type": ""
                  }
                ],
                "src": "13434:400:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "14013:224:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "14030:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14041:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14023:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14023:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14023:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14064:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14075:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14060:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14060:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14080:2:49",
                            "type": "",
                            "value": "34"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14053:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14053:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14053:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14103:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14114:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14099:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14099:18:49"
                          },
                          {
                            "hexValue": "45524332303a20617070726f766520746f20746865207a65726f206164647265",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "14119:34:49",
                            "type": "",
                            "value": "ERC20: approve to the zero addre"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14092:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14092:62:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14092:62:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14174:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14185:2:49",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14170:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14170:18:49"
                          },
                          {
                            "hexValue": "7373",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "14190:4:49",
                            "type": "",
                            "value": "ss"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14163:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14163:32:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14163:32:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "14204:27:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "14216:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14227:3:49",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "14212:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14212:19:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "14204:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "13990:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "14004:4:49",
                    "type": ""
                  }
                ],
                "src": "13839:398:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "14416:179:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "14433:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14444:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14426:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14426:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14426:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14467:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14478:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14463:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14463:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14483:2:49",
                            "type": "",
                            "value": "29"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14456:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14456:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14456:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14506:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14517:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14502:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14502:18:49"
                          },
                          {
                            "hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "14522:31:49",
                            "type": "",
                            "value": "ERC20: insufficient allowance"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14495:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14495:59:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14495:59:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "14563:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "14575:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14586:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "14571:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14571:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "14563:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "14393:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "14407:4:49",
                    "type": ""
                  }
                ],
                "src": "14242:353:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "14774:227:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "14791:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14802:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14784:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14784:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14784:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14825:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14836:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14821:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14821:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14841:2:49",
                            "type": "",
                            "value": "37"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14814:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14814:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14814:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14864:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14875:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14860:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14860:18:49"
                          },
                          {
                            "hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f206164",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "14880:34:49",
                            "type": "",
                            "value": "ERC20: transfer from the zero ad"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14853:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14853:62:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14853:62:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14935:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14946:2:49",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14931:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14931:18:49"
                          },
                          {
                            "hexValue": "6472657373",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "14951:7:49",
                            "type": "",
                            "value": "dress"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14924:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14924:35:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14924:35:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "14968:27:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "14980:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14991:3:49",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "14976:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14976:19:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "14968:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "14751:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "14765:4:49",
                    "type": ""
                  }
                ],
                "src": "14600:401:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "15180:225:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "15197:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "15208:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "15190:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15190:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "15190:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15231:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15242:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15227:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15227:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "15247:2:49",
                            "type": "",
                            "value": "35"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "15220:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15220:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "15220:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15270:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15281:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15266:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15266:18:49"
                          },
                          {
                            "hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "15286:34:49",
                            "type": "",
                            "value": "ERC20: transfer to the zero addr"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "15259:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15259:62:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "15259:62:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15341:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15352:2:49",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15337:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15337:18:49"
                          },
                          {
                            "hexValue": "657373",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "15357:5:49",
                            "type": "",
                            "value": "ess"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "15330:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15330:33:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "15330:33:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "15372:27:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "15384:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "15395:3:49",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "15380:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15380:19:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "15372:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "15157:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "15171:4:49",
                    "type": ""
                  }
                ],
                "src": "15006:399:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "15584:228:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "15601:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "15612:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "15594:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15594:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "15594:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15635:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15646:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15631:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15631:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "15651:2:49",
                            "type": "",
                            "value": "38"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "15624:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15624:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "15624:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15674:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15685:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15670:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15670:18:49"
                          },
                          {
                            "hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "15690:34:49",
                            "type": "",
                            "value": "ERC20: transfer amount exceeds b"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "15663:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15663:62:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "15663:62:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15745:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15756:2:49",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15741:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15741:18:49"
                          },
                          {
                            "hexValue": "616c616e6365",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "15761:8:49",
                            "type": "",
                            "value": "alance"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "15734:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15734:36:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "15734:36:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "15779:27:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "15791:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "15802:3:49",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "15787:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15787:19:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "15779:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "15561:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "15575:4:49",
                    "type": ""
                  }
                ],
                "src": "15410:402:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "15866:79:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "15876:17:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "15888:1:49"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "15891:1:49"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "15884:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15884:9:49"
                      },
                      "variableNames": [
                        {
                          "name": "diff",
                          "nodeType": "YulIdentifier",
                          "src": "15876:4:49"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "15917:22:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "15919:16:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "15919:18:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "15919:18:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "diff",
                            "nodeType": "YulIdentifier",
                            "src": "15908:4:49"
                          },
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "15914:1:49"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "15905:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15905:11:49"
                      },
                      "nodeType": "YulIf",
                      "src": "15902:37:49"
                    }
                  ]
                },
                "name": "checked_sub_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "15848:1:49",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "15851:1:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "diff",
                    "nodeType": "YulTypedName",
                    "src": "15857:4:49",
                    "type": ""
                  }
                ],
                "src": "15817:128:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "16124:182:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "16141:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16152:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16134:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16134:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16134:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16175:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16186:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16171:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16171:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16191:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16164:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16164:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16164:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16214:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16225:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16210:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16210:18:49"
                          },
                          {
                            "hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "16230:34:49",
                            "type": "",
                            "value": "Ownable: caller is not the owner"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16203:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16203:62:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16203:62:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "16274:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "16286:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16297:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "16282:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16282:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "16274:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "16101:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "16115:4:49",
                    "type": ""
                  }
                ],
                "src": "15950:356:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "16485:228:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "16502:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16513:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16495:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16495:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16495:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16536:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16547:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16532:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16532:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16552:2:49",
                            "type": "",
                            "value": "38"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16525:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16525:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16525:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16575:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16586:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16571:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16571:18:49"
                          },
                          {
                            "hexValue": "53616665436173743a2076616c756520646f65736e27742066697420696e2033",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "16591:34:49",
                            "type": "",
                            "value": "SafeCast: value doesn't fit in 3"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16564:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16564:62:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16564:62:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16646:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16657:2:49",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16642:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16642:18:49"
                          },
                          {
                            "hexValue": "322062697473",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "16662:8:49",
                            "type": "",
                            "value": "2 bits"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16635:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16635:36:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16635:36:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "16680:27:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "16692:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16703:3:49",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "16688:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16688:19:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "16680:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_c907489dafcfb622d3b83f2657a14d6da2f59e0de3116af0d6a80554c1a7cb19__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "16462:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "16476:4:49",
                    "type": ""
                  }
                ],
                "src": "16311:402:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "16892:228:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "16909:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16920:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16902:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16902:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16902:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16943:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16954:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16939:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16939:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16959:2:49",
                            "type": "",
                            "value": "38"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16932:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16932:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16932:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16982:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16993:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16978:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16978:18:49"
                          },
                          {
                            "hexValue": "53616665436173743a2076616c756520646f65736e27742066697420696e2034",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "16998:34:49",
                            "type": "",
                            "value": "SafeCast: value doesn't fit in 4"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16971:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16971:62:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16971:62:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17053:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17064:2:49",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17049:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17049:18:49"
                          },
                          {
                            "hexValue": "382062697473",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "17069:8:49",
                            "type": "",
                            "value": "8 bits"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "17042:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17042:36:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17042:36:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "17087:27:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "17099:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17110:3:49",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "17095:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17095:19:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "17087:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_599034f9324dd4e988c6cea5a00a30f53147fec1b01559682f18cd840028f495__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "16869:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "16883:4:49",
                    "type": ""
                  }
                ],
                "src": "16718:402:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "17219:203:49",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "17229:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "array",
                            "nodeType": "YulIdentifier",
                            "src": "17249:5:49"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "17243:5:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17243:12:49"
                      },
                      "variables": [
                        {
                          "name": "length",
                          "nodeType": "YulTypedName",
                          "src": "17233:6:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "17264:32:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "array",
                                "nodeType": "YulIdentifier",
                                "src": "17283:5:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17290:4:49",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17279:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17279:16:49"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "17273:5:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17273:23:49"
                      },
                      "variableNames": [
                        {
                          "name": "value",
                          "nodeType": "YulIdentifier",
                          "src": "17264:5:49"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "17333:83:49",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "17347:59:49",
                            "value": {
                              "arguments": [
                                {
                                  "name": "value",
                                  "nodeType": "YulIdentifier",
                                  "src": "17360:5:49"
                                },
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "17375:1:49",
                                          "type": "",
                                          "value": "3"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "17382:4:49",
                                              "type": "",
                                              "value": "0x20"
                                            },
                                            {
                                              "name": "length",
                                              "nodeType": "YulIdentifier",
                                              "src": "17388:6:49"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "sub",
                                            "nodeType": "YulIdentifier",
                                            "src": "17378:3:49"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "17378:17:49"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "17371:3:49"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "17371:25:49"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "17402:1:49",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "not",
                                        "nodeType": "YulIdentifier",
                                        "src": "17398:3:49"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "17398:6:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shl",
                                    "nodeType": "YulIdentifier",
                                    "src": "17367:3:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "17367:38:49"
                                }
                              ],
                              "functionName": {
                                "name": "and",
                                "nodeType": "YulIdentifier",
                                "src": "17356:3:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "17356:50:49"
                            },
                            "variableNames": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "17347:5:49"
                              }
                            ]
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "17311:6:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17319:4:49",
                            "type": "",
                            "value": "0x20"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "17308:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17308:16:49"
                      },
                      "nodeType": "YulIf",
                      "src": "17305:111:49"
                    }
                  ]
                },
                "name": "convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "array",
                    "nodeType": "YulTypedName",
                    "src": "17199:5:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "17209:5:49",
                    "type": ""
                  }
                ],
                "src": "17125:297:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "17601:232:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "17618:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17629:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "17611:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17611:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17611:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17652:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17663:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17648:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17648:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17668:2:49",
                            "type": "",
                            "value": "42"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "17641:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17641:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17641:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17691:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17702:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17687:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17687:18:49"
                          },
                          {
                            "hexValue": "45524332305061757361626c653a20746f6b656e207472616e73666572207768",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "17707:34:49",
                            "type": "",
                            "value": "ERC20Pausable: token transfer wh"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "17680:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17680:62:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17680:62:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17762:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17773:2:49",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17758:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17758:18:49"
                          },
                          {
                            "hexValue": "696c6520706175736564",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "17778:12:49",
                            "type": "",
                            "value": "ile paused"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "17751:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17751:40:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17751:40:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "17800:27:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "17812:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17823:3:49",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "17808:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17808:19:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "17800:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_fcb1fc9f3615fd38ab90d28b50a608758c295eeacbd5840421a4ee3b0df2f1f4__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "17578:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "17592:4:49",
                    "type": ""
                  }
                ],
                "src": "17427:406:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "18051:276:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "18061:27:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "18073:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "18084:3:49",
                            "type": "",
                            "value": "160"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "18069:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18069:19:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "18061:4:49"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "18104:9:49"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "18115:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "18097:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18097:25:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "18097:25:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18142:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18153:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18138:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18138:18:49"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "18158:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "18131:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18131:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "18131:34:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18185:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18196:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18181:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18181:18:49"
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulIdentifier",
                            "src": "18201:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "18174:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18174:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "18174:34:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18228:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18239:2:49",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18224:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18224:18:49"
                          },
                          {
                            "name": "value3",
                            "nodeType": "YulIdentifier",
                            "src": "18244:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "18217:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18217:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "18217:34:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18271:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18282:3:49",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18267:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18267:19:49"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value4",
                                "nodeType": "YulIdentifier",
                                "src": "18292:6:49"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "18308:3:49",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "18313:1:49",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "18304:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "18304:11:49"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18317:1:49",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "18300:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18300:19:49"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "18288:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18288:32:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "18260:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18260:61:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "18260:61:49"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "17988:9:49",
                    "type": ""
                  },
                  {
                    "name": "value4",
                    "nodeType": "YulTypedName",
                    "src": "17999:6:49",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "18007:6:49",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "18015:6:49",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "18023:6:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "18031:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "18042:4:49",
                    "type": ""
                  }
                ],
                "src": "17838:489:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "18364:95:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "18381:1:49",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18388:3:49",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18393:10:49",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "18384:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18384:20:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "18374:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18374:31:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "18374:31:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "18421:1:49",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "18424:4:49",
                            "type": "",
                            "value": "0x12"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "18414:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18414:15:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "18414:15:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "18445:1:49",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "18448:4:49",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "18438:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18438:15:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "18438:15:49"
                    }
                  ]
                },
                "name": "panic_error_0x12",
                "nodeType": "YulFunctionDefinition",
                "src": "18332:127:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "18510:171:49",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "18541:111:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "18562:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "18569:3:49",
                                      "type": "",
                                      "value": "224"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "18574:10:49",
                                      "type": "",
                                      "value": "0x4e487b71"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shl",
                                    "nodeType": "YulIdentifier",
                                    "src": "18565:3:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "18565:20:49"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "18555:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "18555:31:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "18555:31:49"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "18606:1:49",
                                  "type": "",
                                  "value": "4"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "18609:4:49",
                                  "type": "",
                                  "value": "0x12"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "18599:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "18599:15:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "18599:15:49"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "18634:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "18637:4:49",
                                  "type": "",
                                  "value": "0x24"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "18627:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "18627:15:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "18627:15:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "18530:1:49"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "18523:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18523:9:49"
                      },
                      "nodeType": "YulIf",
                      "src": "18520:132:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "18661:14:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "18670:1:49"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "18673:1:49"
                          }
                        ],
                        "functionName": {
                          "name": "div",
                          "nodeType": "YulIdentifier",
                          "src": "18666:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18666:9:49"
                      },
                      "variableNames": [
                        {
                          "name": "r",
                          "nodeType": "YulIdentifier",
                          "src": "18661:1:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_div_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "18495:1:49",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "18498:1:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "r",
                    "nodeType": "YulTypedName",
                    "src": "18504:1:49",
                    "type": ""
                  }
                ],
                "src": "18464:217:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "18860:238:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "18877:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "18888:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "18870:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18870:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "18870:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18911:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18922:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18907:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18907:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "18927:2:49",
                            "type": "",
                            "value": "48"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "18900:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18900:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "18900:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18950:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18961:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18946:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18946:18:49"
                          },
                          {
                            "hexValue": "4552433230566f7465733a20746f74616c20737570706c79207269736b73206f",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "18966:34:49",
                            "type": "",
                            "value": "ERC20Votes: total supply risks o"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "18939:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18939:62:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "18939:62:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19021:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19032:2:49",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19017:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19017:18:49"
                          },
                          {
                            "hexValue": "766572666c6f77696e6720766f746573",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "19037:18:49",
                            "type": "",
                            "value": "verflowing votes"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "19010:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19010:46:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "19010:46:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "19065:27:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "19077:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19088:3:49",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "19073:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19073:19:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "19065:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_97859f657b3d95198b68f29ae96ee966779795bec3ef1e76700d2d39fefd7699__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "18837:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "18851:4:49",
                    "type": ""
                  }
                ],
                "src": "18686:412:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "19232:119:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "19242:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "19254:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19265:2:49",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "19250:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19250:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "19242:4:49"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "19284:9:49"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "19295:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "19277:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19277:25:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "19277:25:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19322:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19333:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19318:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19318:18:49"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "19338:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "19311:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19311:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "19311:34:49"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "19193:9:49",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "19204:6:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "19212:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "19223:4:49",
                    "type": ""
                  }
                ],
                "src": "19103:248:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "19537:217:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "19547:27:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "19559:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19570:3:49",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "19555:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19555:19:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "19547:4:49"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "19590:9:49"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "19601:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "19583:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19583:25:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "19583:25:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19628:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19639:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19624:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19624:18:49"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "19648:6:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19656:4:49",
                                "type": "",
                                "value": "0xff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "19644:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19644:17:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "19617:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19617:45:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "19617:45:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19682:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19693:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19678:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19678:18:49"
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulIdentifier",
                            "src": "19698:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "19671:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19671:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "19671:34:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19725:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19736:2:49",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19721:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19721:18:49"
                          },
                          {
                            "name": "value3",
                            "nodeType": "YulIdentifier",
                            "src": "19741:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "19714:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19714:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "19714:34:49"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "19482:9:49",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "19493:6:49",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "19501:6:49",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "19509:6:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "19517:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "19528:4:49",
                    "type": ""
                  }
                ],
                "src": "19356:398:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "19791:95:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19808:1:49",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19815:3:49",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19820:10:49",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "19811:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19811:20:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "19801:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19801:31:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "19801:31:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19848:1:49",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19851:4:49",
                            "type": "",
                            "value": "0x21"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "19841:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19841:15:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "19841:15:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19872:1:49",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19875:4:49",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "19865:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19865:15:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "19865:15:49"
                    }
                  ]
                },
                "name": "panic_error_0x21",
                "nodeType": "YulFunctionDefinition",
                "src": "19759:127:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "20065:174:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "20082:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "20093:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "20075:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20075:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "20075:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20116:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20127:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20112:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20112:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "20132:2:49",
                            "type": "",
                            "value": "24"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "20105:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20105:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "20105:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20155:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20166:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20151:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20151:18:49"
                          },
                          {
                            "hexValue": "45434453413a20696e76616c6964207369676e6174757265",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "20171:26:49",
                            "type": "",
                            "value": "ECDSA: invalid signature"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "20144:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20144:54:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "20144:54:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "20207:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "20219:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "20230:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "20215:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20215:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "20207:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "20042:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "20056:4:49",
                    "type": ""
                  }
                ],
                "src": "19891:348:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "20418:181:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "20435:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "20446:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "20428:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20428:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "20428:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20469:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20480:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20465:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20465:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "20485:2:49",
                            "type": "",
                            "value": "31"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "20458:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20458:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "20458:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20508:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20519:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20504:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20504:18:49"
                          },
                          {
                            "hexValue": "45434453413a20696e76616c6964207369676e6174757265206c656e677468",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "20524:33:49",
                            "type": "",
                            "value": "ECDSA: invalid signature length"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "20497:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20497:61:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "20497:61:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "20567:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "20579:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "20590:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "20575:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20575:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "20567:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "20395:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "20409:4:49",
                    "type": ""
                  }
                ],
                "src": "20244:355:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "20778:224:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "20795:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "20806:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "20788:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20788:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "20788:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20829:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20840:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20825:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20825:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "20845:2:49",
                            "type": "",
                            "value": "34"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "20818:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20818:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "20818:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20868:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20879:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20864:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20864:18:49"
                          },
                          {
                            "hexValue": "45434453413a20696e76616c6964207369676e6174757265202773272076616c",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "20884:34:49",
                            "type": "",
                            "value": "ECDSA: invalid signature 's' val"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "20857:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20857:62:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "20857:62:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20939:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20950:2:49",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20935:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20935:18:49"
                          },
                          {
                            "hexValue": "7565",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "20955:4:49",
                            "type": "",
                            "value": "ue"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "20928:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20928:32:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "20928:32:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "20969:27:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "20981:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "20992:3:49",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "20977:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20977:19:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "20969:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "20755:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "20769:4:49",
                    "type": ""
                  }
                ],
                "src": "20604:398:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "21181:181:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "21198:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "21209:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "21191:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21191:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "21191:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21232:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21243:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21228:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21228:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "21248:2:49",
                            "type": "",
                            "value": "31"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "21221:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21221:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "21221:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21271:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21282:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21267:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21267:18:49"
                          },
                          {
                            "hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "21287:33:49",
                            "type": "",
                            "value": "ERC20: mint to the zero address"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "21260:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21260:61:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "21260:61:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "21330:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "21342:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "21353:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "21338:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21338:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "21330:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "21158:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "21172:4:49",
                    "type": ""
                  }
                ],
                "src": "21007:355:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "21541:223:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "21558:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "21569:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "21551:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21551:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "21551:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21592:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21603:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21588:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21588:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "21608:2:49",
                            "type": "",
                            "value": "33"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "21581:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21581:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "21581:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21631:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21642:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21627:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21627:18:49"
                          },
                          {
                            "hexValue": "45524332303a206275726e2066726f6d20746865207a65726f20616464726573",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "21647:34:49",
                            "type": "",
                            "value": "ERC20: burn from the zero addres"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "21620:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21620:62:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "21620:62:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21702:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21713:2:49",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21698:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21698:18:49"
                          },
                          {
                            "hexValue": "73",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "21718:3:49",
                            "type": "",
                            "value": "s"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "21691:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21691:31:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "21691:31:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "21731:27:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "21743:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "21754:3:49",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "21739:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21739:19:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "21731:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "21518:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "21532:4:49",
                    "type": ""
                  }
                ],
                "src": "21367:397:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "21943:224:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "21960:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "21971:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "21953:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21953:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "21953:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21994:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22005:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21990:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21990:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "22010:2:49",
                            "type": "",
                            "value": "34"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "21983:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21983:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "21983:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22033:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22044:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "22029:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22029:18:49"
                          },
                          {
                            "hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "22049:34:49",
                            "type": "",
                            "value": "ERC20: burn amount exceeds balan"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "22022:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "22022:62:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "22022:62:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22104:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22115:2:49",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "22100:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22100:18:49"
                          },
                          {
                            "hexValue": "6365",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "22120:4:49",
                            "type": "",
                            "value": "ce"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "22093:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "22093:32:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "22093:32:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "22134:27:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "22146:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "22157:3:49",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "22142:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "22142:19:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "22134:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "21920:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "21934:4:49",
                    "type": ""
                  }
                ],
                "src": "21769:398:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "22346:229:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "22363:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "22374:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "22356:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "22356:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "22356:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22397:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22408:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "22393:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22393:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "22413:2:49",
                            "type": "",
                            "value": "39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "22386:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "22386:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "22386:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22436:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22447:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "22432:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22432:18:49"
                          },
                          {
                            "hexValue": "53616665436173743a2076616c756520646f65736e27742066697420696e2032",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "22452:34:49",
                            "type": "",
                            "value": "SafeCast: value doesn't fit in 2"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "22425:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "22425:62:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "22425:62:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22507:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22518:2:49",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "22503:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22503:18:49"
                          },
                          {
                            "hexValue": "32342062697473",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "22523:9:49",
                            "type": "",
                            "value": "24 bits"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "22496:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "22496:37:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "22496:37:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "22542:27:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "22554:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "22565:3:49",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "22550:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "22550:19:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "22542:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_9d2acf551b2466898443b9bc3a403a4d86037386bc5a8960c1bbb0f204e69b79__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "22323:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "22337:4:49",
                    "type": ""
                  }
                ],
                "src": "22172:403:49"
              }
            ]
          },
          "contents": "{\n    { }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 0x20) }\n        {\n            let _1 := 0x20\n            mstore(add(add(pos, i), _1), mload(add(add(value, i), _1)))\n        }\n        mstore(add(add(pos, length), 0x20), 0)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_uint32__to_t_uint32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffff))\n    }\n    function abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, shl(248, 255)))\n        let _1 := 32\n        mstore(add(headStart, _1), 224)\n        let tail_1 := abi_encode_string(value1, add(headStart, 224))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        let tail_2 := abi_encode_string(value2, tail_1)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 160), value5)\n        mstore(add(headStart, 192), sub(tail_2, headStart))\n        let pos := tail_2\n        let length := mload(value6)\n        mstore(tail_2, length)\n        pos := add(tail_2, _1)\n        let srcPtr := add(value6, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_uint48__to_t_uint48__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffff))\n    }\n    function abi_decode_uint8(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := abi_decode_uint8(add(headStart, 96))\n        value4 := calldataload(add(headStart, 128))\n        value5 := calldataload(add(headStart, 160))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6\n    {\n        if slt(sub(dataEnd, headStart), 224) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        value4 := abi_decode_uint8(add(headStart, 128))\n        value5 := calldataload(add(headStart, 160))\n        value6 := calldataload(add(headStart, 192))\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_uint32(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, and(value, 0xffffffff))) { revert(0, 0) }\n        value1 := value\n    }\n    function abi_encode_tuple_t_struct$_Checkpoint_$833_memory_ptr__to_t_struct$_Checkpoint_$833_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(mload(value0), 0xffffffff))\n        mstore(add(headStart, 0x20), and(mload(add(value0, 0x20)), sub(shl(224, 1), 1)))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_9fb4d8462c9084391e0cf06f1b2a0a5b1a23dc8fede26e3b7b37154948e87a72__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"ERC20Votes: future lookup\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_136d0f69bc85a5c125b5cc368e2880ebdb3c89d4d9828f6476431c386ea60257__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20Votes: signature expired\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_uint256_t_uint256__to_t_bytes32_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_stringliteral_1a23b43d95073d55a7380117ca03cace60cd22fee15d5cb140d51e46236e6872__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"ERC20Votes: invalid nonce\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20Permit: expired deadline\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 192)\n        mstore(headStart, value0)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n    }\n    function abi_encode_tuple_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 30)\n        mstore(add(headStart, 64), \"ERC20Permit: invalid signature\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_c907489dafcfb622d3b83f2657a14d6da2f59e0de3116af0d6a80554c1a7cb19__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"SafeCast: value doesn't fit in 3\")\n        mstore(add(headStart, 96), \"2 bits\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_599034f9324dd4e988c6cea5a00a30f53147fec1b01559682f18cd840028f495__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"SafeCast: value doesn't fit in 4\")\n        mstore(add(headStart, 96), \"8 bits\")\n        tail := add(headStart, 128)\n    }\n    function convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32(array) -> value\n    {\n        let length := mload(array)\n        value := mload(add(array, 0x20))\n        if lt(length, 0x20)\n        {\n            value := and(value, shl(shl(3, sub(0x20, length)), not(0)))\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_fcb1fc9f3615fd38ab90d28b50a608758c295eeacbd5840421a4ee3b0df2f1f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"ERC20Pausable: token transfer wh\")\n        mstore(add(headStart, 96), \"ile paused\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, sub(shl(160, 1), 1)))\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_97859f657b3d95198b68f29ae96ee966779795bec3ef1e76700d2d39fefd7699__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 48)\n        mstore(add(headStart, 64), \"ERC20Votes: total supply risks o\")\n        mstore(add(headStart, 96), \"verflowing votes\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature length\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature 's' val\")\n        mstore(add(headStart, 96), \"ue\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ERC20: mint to the zero address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC20: burn from the zero addres\")\n        mstore(add(headStart, 96), \"s\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: burn amount exceeds balan\")\n        mstore(add(headStart, 96), \"ce\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9d2acf551b2466898443b9bc3a403a4d86037386bc5a8960c1bbb0f204e69b79__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 39)\n        mstore(add(headStart, 64), \"SafeCast: value doesn't fit in 2\")\n        mstore(add(headStart, 96), \"24 bits\")\n        tail := add(headStart, 128)\n    }\n}",
          "id": 49,
          "language": "Yul",
          "name": "#utility.yul"
        }
      ],
      "immutableReferences": {
        "9906": [
          {
            "length": 32,
            "start": 4445
          }
        ],
        "9908": [
          {
            "length": 32,
            "start": 4403
          }
        ],
        "9910": [
          {
            "length": 32,
            "start": 4361
          }
        ],
        "9913": [
          {
            "length": 32,
            "start": 1883
          }
        ],
        "9916": [
          {
            "length": 32,
            "start": 1926
          }
        ],
        "9922": [
          {
            "length": 32,
            "start": 4526
          }
        ],
        "9924": [
          {
            "length": 32,
            "start": 4566
          }
        ]
      },
      "linkReferences": {},
      "object": "608060405234801561001057600080fd5b50600436106101e55760003560e01c8063715018a61161010f5780639dc29fac116100a2578063d505accf11610071578063d505accf1461043d578063dd62ed3e14610450578063f1127ed814610463578063f2fde38b146104a057600080fd5b80639dc29fac146103f1578063a457c2d714610404578063a9059cbb14610417578063c3cda5201461042a57600080fd5b80638e539e8c116100de5780638e539e8c146103a457806391ddadf4146103b757806395d89b41146103d65780639ab24eb0146103de57600080fd5b8063715018a61461035d5780637ecebe001461036557806384b0196e146103785780638da5cb5b1461039357600080fd5b80633a46b1a8116101875780635c19a95c116101565780635c19a95c146102ee5780635c975abb146103015780636fcfff451461030c57806370a082311461033457600080fd5b80633a46b1a81461027a57806340c10f191461028d5780634bf5d7e9146102a2578063587cde1e146102aa57600080fd5b806323b872dd116101c357806323b872dd1461023d578063313ce567146102505780633644e5151461025f578063395093511461026757600080fd5b806306fdde03146101ea578063095ea7b31461020857806318160ddd1461022b575b600080fd5b6101f26104b3565b6040516101ff919061214d565b60405180910390f35b61021b61021636600461217c565b610545565b60405190151581526020016101ff565b6003545b6040519081526020016101ff565b61021b61024b3660046121a6565b61055f565b604051601281526020016101ff565b61022f610583565b61021b61027536600461217c565b610592565b61022f61028836600461217c565b6105b4565b6102a061029b36600461217c565b61063e565b005b6101f2610697565b6102d66102b83660046121e2565b6001600160a01b039081166000908152600b60205260409020541690565b6040516001600160a01b0390911681526020016101ff565b6102a06102fc3660046121e2565b6106ec565b60005460ff1661021b565b61031f61031a3660046121e2565b6106f9565b60405163ffffffff90911681526020016101ff565b61022f6103423660046121e2565b6001600160a01b031660009081526001602052604090205490565b6102a061071b565b61022f6103733660046121e2565b61072f565b61038061074d565b6040516101ff97969594939291906121fd565b600a546001600160a01b03166102d6565b61022f6103b2366004612293565b6107d6565b6103bf61083d565b60405165ffffffffffff90911681526020016101ff565b6101f2610848565b61022f6103ec3660046121e2565b610857565b6102a06103ff36600461217c565b6108d9565b61021b61041236600461217c565b610926565b61021b61042536600461217c565b6109a1565b6102a06104383660046122bd565b6109af565b6102a061044b366004612315565b610ae5565b61022f61045e36600461237f565b610c49565b6104766104713660046123b2565b610c74565b60408051825163ffffffff1681526020928301516001600160e01b031692810192909252016101ff565b6102a06104ae3660046121e2565b610cf8565b6060600480546104c2906123f2565b80601f01602080910402602001604051908101604052809291908181526020018280546104ee906123f2565b801561053b5780601f106105105761010080835404028352916020019161053b565b820191906000526020600020905b81548152906001019060200180831161051e57829003601f168201915b5050505050905090565b600033610553818585610da2565b60019150505b92915050565b60003361056d858285610ec6565b610578858585610f40565b506001949350505050565b600061058d6110fc565b905090565b6000336105538185856105a58383610c49565b6105af919061243c565b610da2565b60006105be61083d565b65ffffffffffff1682106106155760405162461bcd60e51b815260206004820152601960248201527804552433230566f7465733a20667574757265206c6f6f6b757603c1b60448201526064015b60405180910390fd5b6001600160a01b0383166000908152600c602052604090206106379083611227565b9392505050565b610646611310565b610650828261136a565b816001600160a01b03167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968858260405161068b91815260200190565b60405180910390a25050565b6060436106a261083d565b65ffffffffffff16146106b457600080fd5b5060408051808201909152601d81527f6d6f64653d626c6f636b6e756d6265722666726f6d3d64656661756c74000000602082015290565b6106f63382611378565b50565b6001600160a01b0381166000908152600c6020526040812054610559906113f2565b610723611310565b61072d600061145b565b565b6001600160a01b038116600090815260086020526040812054610559565b6000606080828080836107817f000000000000000000000000000000000000000000000000000000000000000060066114ad565b6107ac7f000000000000000000000000000000000000000000000000000000000000000060076114ad565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b60006107e061083d565b65ffffffffffff1682106108325760405162461bcd60e51b815260206004820152601960248201527804552433230566f7465733a20667574757265206c6f6f6b757603c1b604482015260640161060c565b610559600d83611227565b600061058d43611552565b6060600580546104c2906123f2565b6001600160a01b0381166000908152600c602052604081205480156108c6576001600160a01b0383166000908152600c60205260409020805460001983019081106108a4576108a4612465565b60009182526020909120015464010000000090046001600160e01b03166108c9565b60005b6001600160e01b03169392505050565b6108e1611310565b6108eb82826115b9565b816001600160a01b03167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58260405161068b91815260200190565b600033816109348286610c49565b9050838110156109945760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161060c565b6105788286868403610da2565b600033610553818585610f40565b834211156109ff5760405162461bcd60e51b815260206004820152601d60248201527f4552433230566f7465733a207369676e61747572652065787069726564000000604482015260640161060c565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60208201526001600160a01b038816918101919091526060810186905260808101859052600090610a7990610a719060a001604051602081830303815290604052805190602001206115c3565b8585856115f0565b9050610a8481611618565b8614610ad25760405162461bcd60e51b815260206004820152601960248201527f4552433230566f7465733a20696e76616c6964206e6f6e636500000000000000604482015260640161060c565b610adc8188611378565b50505050505050565b83421115610b355760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e65000000604482015260640161060c565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9888888610b648c611618565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090506000610bbf826115c3565b90506000610bcf828787876115f0565b9050896001600160a01b0316816001600160a01b031614610c325760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e61747572650000604482015260640161060c565b610c3d8a8a8a610da2565b50505050505050505050565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b60408051808201909152600080825260208201526001600160a01b0383166000908152600c60205260409020805463ffffffff8416908110610cb857610cb8612465565b60009182526020918290206040805180820190915291015463ffffffff8116825264010000000090046001600160e01b0316918101919091529392505050565b610d00611310565b6001600160a01b038116610d655760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161060c565b6106f68161145b565b6000602083511015610d8a57610d8383611640565b9050610559565b81610d9584826124c9565b5060009050610559565b90565b6001600160a01b038316610e045760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161060c565b6001600160a01b038216610e655760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161060c565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610ed28484610c49565b90506000198114610f3a5781811015610f2d5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161060c565b610f3a8484848403610da2565b50505050565b6001600160a01b038316610fa45760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161060c565b6001600160a01b0382166110065760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161060c565b61101183838361167e565b6001600160a01b038316600090815260016020526040902054818110156110895760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161060c565b6001600160a01b0380851660008181526001602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906110e99086815260200190565b60405180910390a3610f3a8484846116e9565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561115557507f000000000000000000000000000000000000000000000000000000000000000046145b1561117f57507f000000000000000000000000000000000000000000000000000000000000000090565b61058d604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b815460009081816005811115611281576000611242846116f4565b61124c9085612589565b600088815260209020909150869082015463ffffffff1611156112715780915061127f565b61127c81600161243c565b92505b505b808210156112ce57600061129583836117dc565b600088815260209020909150869082015463ffffffff1611156112ba578091506112c8565b6112c581600161243c565b92505b50611281565b80156112fa576000868152602090208101600019015464010000000090046001600160e01b03166112fd565b60005b6001600160e01b03169695505050505050565b600a546001600160a01b0316331461072d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161060c565b61137482826117f7565b5050565b6001600160a01b038281166000818152600b6020818152604080842080546001845282862054949093528787166001600160a01b03198416811790915590519190951694919391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4610f3a828483611881565b600063ffffffff8211156114575760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b606482015260840161060c565b5090565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b606060ff8316156114c157610d83836119be565b8180546114cd906123f2565b80601f01602080910402602001604051908101604052809291908181526020018280546114f9906123f2565b80156115465780601f1061151b57610100808354040283529160200191611546565b820191906000526020600020905b81548152906001019060200180831161152957829003601f168201915b50505050509050610559565b600065ffffffffffff8211156114575760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203460448201526538206269747360d01b606482015260840161060c565b61137482826119f3565b60006105596115d06110fc565b8360405161190160f01b8152600281019290925260228201526042902090565b600080600061160187878787611a0b565b9150915061160e81611acf565b5095945050505050565b6001600160a01b03811660009081526008602052604090208054600181018255905b50919050565b600080829050601f8151111561166b578260405163305a27a960e01b815260040161060c919061214d565b80516116768261259c565b179392505050565b60005460ff16156116e45760405162461bcd60e51b815260206004820152602a60248201527f45524332305061757361626c653a20746f6b656e207472616e736665722077686044820152691a5b19481c185d5cd95960b21b606482015260840161060c565b505050565b6116e4838383611c19565b60008160000361170657506000919050565b6000600161171384611c4b565b901c6001901b9050600181848161172c5761172c6125c0565b048201901c90506001818481611744576117446125c0565b048201901c9050600181848161175c5761175c6125c0565b048201901c90506001818481611774576117746125c0565b048201901c9050600181848161178c5761178c6125c0565b048201901c905060018184816117a4576117a46125c0565b048201901c905060018184816117bc576117bc6125c0565b048201901c9050610637818285816117d6576117d66125c0565b04611cdf565b60006117eb60028484186125d6565b6106379084841661243c565b6118018282611cf5565b6003546001600160e01b0310156118735760405162461bcd60e51b815260206004820152603060248201527f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60448201526f766572666c6f77696e6720766f74657360801b606482015260840161060c565b610f3a600d611dca83611dd6565b816001600160a01b0316836001600160a01b0316141580156118a35750600081115b156116e4576001600160a01b03831615611931576001600160a01b0383166000908152600c6020526040812081906118de90611f4b85611dd6565b91509150846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051611926929190918252602082015260400190565b60405180910390a250505b6001600160a01b038216156116e4576001600160a01b0382166000908152600c60205260408120819061196790611dca85611dd6565b91509150836001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a72483836040516119af929190918252602082015260400190565b60405180910390a25050505050565b60408051602080825281830190925260609160ff84169160009180820181803683375050509182525060208101929092525090565b6119fd8282611f57565b610f3a600d611f4b83611dd6565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611a425750600090506003611ac6565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611a96573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611abf57600060019250925050611ac6565b9150600090505b94509492505050565b6000816004811115611ae357611ae36125f8565b03611aeb5750565b6001816004811115611aff57611aff6125f8565b03611b4c5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161060c565b6002816004811115611b6057611b606125f8565b03611bad5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161060c565b6003816004811115611bc157611bc16125f8565b036106f65760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161060c565b6001600160a01b038381166000908152600b60205260408082205485841683529120546116e492918216911683611881565b600080608083901c15611c6057608092831c92015b604083901c15611c7257604092831c92015b602083901c15611c8457602092831c92015b601083901c15611c9657601092831c92015b600883901c15611ca857600892831c92015b600483901c15611cba57600492831c92015b600283901c15611ccc57600292831c92015b600183901c156105595760010192915050565b6000818310611cee5781610637565b5090919050565b6001600160a01b038216611d4b5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161060c565b611d576000838361167e565b8060036000828254611d69919061243c565b90915550506001600160a01b0382166000818152600160209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3611374600083836116e9565b6000610637828461243c565b82546000908190818115611e235760008781526020902082016000190160408051808201909152905463ffffffff8116825264010000000090046001600160e01b03166020820152611e38565b60408051808201909152600080825260208201525b905080602001516001600160e01b03169350611e5884868863ffffffff16565b9250600082118015611e825750611e6d61083d565b65ffffffffffff16816000015163ffffffff16145b15611ec757611e908361209e565b60008881526020902083016000190180546001600160e01b03929092166401000000000263ffffffff909216919091179055611f41565b866040518060400160405280611eeb611ede61083d565b65ffffffffffff166113f2565b63ffffffff168152602001611eff8661209e565b6001600160e01b0390811690915282546001810184556000938452602093849020835194909301519091166401000000000263ffffffff909316929092179101555b5050935093915050565b60006106378284612589565b6001600160a01b038216611fb75760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161060c565b611fc38260008361167e565b6001600160a01b038216600090815260016020526040902054818110156120375760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161060c565b6001600160a01b03831660008181526001602090815260408083208686039055600380548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36116e4836000846116e9565b60006001600160e01b038211156114575760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b606482015260840161060c565b6000815180845260005b8181101561212d57602081850181015186830182015201612111565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006106376020830184612107565b80356001600160a01b038116811461217757600080fd5b919050565b6000806040838503121561218f57600080fd5b61219883612160565b946020939093013593505050565b6000806000606084860312156121bb57600080fd5b6121c484612160565b92506121d260208501612160565b9150604084013590509250925092565b6000602082840312156121f457600080fd5b61063782612160565b60ff60f81b881681526000602060e08184015261221d60e084018a612107565b838103604085015261222f818a612107565b606085018990526001600160a01b038816608086015260a0850187905284810360c0860152855180825283870192509083019060005b8181101561228157835183529284019291840191600101612265565b50909c9b505050505050505050505050565b6000602082840312156122a557600080fd5b5035919050565b803560ff8116811461217757600080fd5b60008060008060008060c087890312156122d657600080fd5b6122df87612160565b955060208701359450604087013593506122fb606088016122ac565b92506080870135915060a087013590509295509295509295565b600080600080600080600060e0888a03121561233057600080fd5b61233988612160565b965061234760208901612160565b95506040880135945060608801359350612363608089016122ac565b925060a0880135915060c0880135905092959891949750929550565b6000806040838503121561239257600080fd5b61239b83612160565b91506123a960208401612160565b90509250929050565b600080604083850312156123c557600080fd5b6123ce83612160565b9150602083013563ffffffff811681146123e757600080fd5b809150509250929050565b600181811c9082168061240657607f821691505b60208210810361163a57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561055957610559612426565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b601f8211156116e457600081815260208120601f850160051c810160208610156124a25750805b601f850160051c820191505b818110156124c1578281556001016124ae565b505050505050565b815167ffffffffffffffff8111156124e3576124e361244f565b6124f7816124f184546123f2565b8461247b565b602080601f83116001811461252c57600084156125145750858301515b600019600386901b1c1916600185901b1785556124c1565b600085815260208120601f198616915b8281101561255b5788860151825594840194600190910190840161253c565b50858210156125795787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8181038181111561055957610559612426565b8051602080830151919081101561163a5760001960209190910360031b1b16919050565b634e487b7160e01b600052601260045260246000fd5b6000826125f357634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052602160045260246000fdfea264697066735822122043e3e6afad14b464789532b6a0c12d3f5d5e3f1ca4480ca2561b2eb2d207c37164736f6c63430008110033",
      "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1E5 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0x10F JUMPI DUP1 PUSH4 0x9DC29FAC GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xD505ACCF GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x43D JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x450 JUMPI DUP1 PUSH4 0xF1127ED8 EQ PUSH2 0x463 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x4A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9DC29FAC EQ PUSH2 0x3F1 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x404 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x417 JUMPI DUP1 PUSH4 0xC3CDA520 EQ PUSH2 0x42A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8E539E8C GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x8E539E8C EQ PUSH2 0x3A4 JUMPI DUP1 PUSH4 0x91DDADF4 EQ PUSH2 0x3B7 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x3D6 JUMPI DUP1 PUSH4 0x9AB24EB0 EQ PUSH2 0x3DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x35D JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x365 JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x378 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x393 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3A46B1A8 GT PUSH2 0x187 JUMPI DUP1 PUSH4 0x5C19A95C GT PUSH2 0x156 JUMPI DUP1 PUSH4 0x5C19A95C EQ PUSH2 0x2EE JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x301 JUMPI DUP1 PUSH4 0x6FCFFF45 EQ PUSH2 0x30C JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x334 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3A46B1A8 EQ PUSH2 0x27A JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x28D JUMPI DUP1 PUSH4 0x4BF5D7E9 EQ PUSH2 0x2A2 JUMPI DUP1 PUSH4 0x587CDE1E EQ PUSH2 0x2AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0x1C3 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x23D JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x250 JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x25F JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x267 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1EA JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x208 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x22B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1F2 PUSH2 0x4B3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FF SWAP2 SWAP1 PUSH2 0x214D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x21B PUSH2 0x216 CALLDATASIZE PUSH1 0x4 PUSH2 0x217C JUMP JUMPDEST PUSH2 0x545 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FF JUMP JUMPDEST PUSH1 0x3 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x21B PUSH2 0x24B CALLDATASIZE PUSH1 0x4 PUSH2 0x21A6 JUMP JUMPDEST PUSH2 0x55F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x22F PUSH2 0x583 JUMP JUMPDEST PUSH2 0x21B PUSH2 0x275 CALLDATASIZE PUSH1 0x4 PUSH2 0x217C JUMP JUMPDEST PUSH2 0x592 JUMP JUMPDEST PUSH2 0x22F PUSH2 0x288 CALLDATASIZE PUSH1 0x4 PUSH2 0x217C JUMP JUMPDEST PUSH2 0x5B4 JUMP JUMPDEST PUSH2 0x2A0 PUSH2 0x29B CALLDATASIZE PUSH1 0x4 PUSH2 0x217C JUMP JUMPDEST PUSH2 0x63E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1F2 PUSH2 0x697 JUMP JUMPDEST PUSH2 0x2D6 PUSH2 0x2B8 CALLDATASIZE PUSH1 0x4 PUSH2 0x21E2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x2A0 PUSH2 0x2FC CALLDATASIZE PUSH1 0x4 PUSH2 0x21E2 JUMP JUMPDEST PUSH2 0x6EC JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH2 0x21B JUMP JUMPDEST PUSH2 0x31F PUSH2 0x31A CALLDATASIZE PUSH1 0x4 PUSH2 0x21E2 JUMP JUMPDEST PUSH2 0x6F9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x22F PUSH2 0x342 CALLDATASIZE PUSH1 0x4 PUSH2 0x21E2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x2A0 PUSH2 0x71B JUMP JUMPDEST PUSH2 0x22F PUSH2 0x373 CALLDATASIZE PUSH1 0x4 PUSH2 0x21E2 JUMP JUMPDEST PUSH2 0x72F JUMP JUMPDEST PUSH2 0x380 PUSH2 0x74D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FF SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x21FD JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2D6 JUMP JUMPDEST PUSH2 0x22F PUSH2 0x3B2 CALLDATASIZE PUSH1 0x4 PUSH2 0x2293 JUMP JUMPDEST PUSH2 0x7D6 JUMP JUMPDEST PUSH2 0x3BF PUSH2 0x83D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH6 0xFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x1F2 PUSH2 0x848 JUMP JUMPDEST PUSH2 0x22F PUSH2 0x3EC CALLDATASIZE PUSH1 0x4 PUSH2 0x21E2 JUMP JUMPDEST PUSH2 0x857 JUMP JUMPDEST PUSH2 0x2A0 PUSH2 0x3FF CALLDATASIZE PUSH1 0x4 PUSH2 0x217C JUMP JUMPDEST PUSH2 0x8D9 JUMP JUMPDEST PUSH2 0x21B PUSH2 0x412 CALLDATASIZE PUSH1 0x4 PUSH2 0x217C JUMP JUMPDEST PUSH2 0x926 JUMP JUMPDEST PUSH2 0x21B PUSH2 0x425 CALLDATASIZE PUSH1 0x4 PUSH2 0x217C JUMP JUMPDEST PUSH2 0x9A1 JUMP JUMPDEST PUSH2 0x2A0 PUSH2 0x438 CALLDATASIZE PUSH1 0x4 PUSH2 0x22BD JUMP JUMPDEST PUSH2 0x9AF JUMP JUMPDEST PUSH2 0x2A0 PUSH2 0x44B CALLDATASIZE PUSH1 0x4 PUSH2 0x2315 JUMP JUMPDEST PUSH2 0xAE5 JUMP JUMPDEST PUSH2 0x22F PUSH2 0x45E CALLDATASIZE PUSH1 0x4 PUSH2 0x237F JUMP JUMPDEST PUSH2 0xC49 JUMP JUMPDEST PUSH2 0x476 PUSH2 0x471 CALLDATASIZE PUSH1 0x4 PUSH2 0x23B2 JUMP JUMPDEST PUSH2 0xC74 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP3 MLOAD PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE ADD PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x2A0 PUSH2 0x4AE CALLDATASIZE PUSH1 0x4 PUSH2 0x21E2 JUMP JUMPDEST PUSH2 0xCF8 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x4C2 SWAP1 PUSH2 0x23F2 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x4EE SWAP1 PUSH2 0x23F2 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x53B JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x510 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x53B JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x51E JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x553 DUP2 DUP6 DUP6 PUSH2 0xDA2 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x56D DUP6 DUP3 DUP6 PUSH2 0xEC6 JUMP JUMPDEST PUSH2 0x578 DUP6 DUP6 DUP6 PUSH2 0xF40 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x58D PUSH2 0x10FC JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x553 DUP2 DUP6 DUP6 PUSH2 0x5A5 DUP4 DUP4 PUSH2 0xC49 JUMP JUMPDEST PUSH2 0x5AF SWAP2 SWAP1 PUSH2 0x243C JUMP JUMPDEST PUSH2 0xDA2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5BE PUSH2 0x83D JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND DUP3 LT PUSH2 0x615 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH25 0x4552433230566F7465733A20667574757265206C6F6F6B757 PUSH1 0x3C SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x637 SWAP1 DUP4 PUSH2 0x1227 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x646 PUSH2 0x1310 JUMP JUMPDEST PUSH2 0x650 DUP3 DUP3 PUSH2 0x136A JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xF6798A560793A54C3BCFE86A93CDE1E73087D944C0EA20544137D4121396885 DUP3 PUSH1 0x40 MLOAD PUSH2 0x68B SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x60 NUMBER PUSH2 0x6A2 PUSH2 0x83D JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND EQ PUSH2 0x6B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1D DUP2 MSTORE PUSH32 0x6D6F64653D626C6F636B6E756D6265722666726F6D3D64656661756C74000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x6F6 CALLER DUP3 PUSH2 0x1378 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x559 SWAP1 PUSH2 0x13F2 JUMP JUMPDEST PUSH2 0x723 PUSH2 0x1310 JUMP JUMPDEST PUSH2 0x72D PUSH1 0x0 PUSH2 0x145B JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x559 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 DUP3 DUP1 DUP1 DUP4 PUSH2 0x781 PUSH32 0x0 PUSH1 0x6 PUSH2 0x14AD JUMP JUMPDEST PUSH2 0x7AC PUSH32 0x0 PUSH1 0x7 PUSH2 0x14AD JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0xF PUSH1 0xF8 SHL SWAP12 SWAP4 SWAP11 POP SWAP2 SWAP9 POP CHAINID SWAP8 POP ADDRESS SWAP7 POP SWAP5 POP SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7E0 PUSH2 0x83D JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND DUP3 LT PUSH2 0x832 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH25 0x4552433230566F7465733A20667574757265206C6F6F6B757 PUSH1 0x3C SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x60C JUMP JUMPDEST PUSH2 0x559 PUSH1 0xD DUP4 PUSH2 0x1227 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x58D NUMBER PUSH2 0x1552 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x5 DUP1 SLOAD PUSH2 0x4C2 SWAP1 PUSH2 0x23F2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x8C6 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT DUP4 ADD SWAP1 DUP2 LT PUSH2 0x8A4 JUMPI PUSH2 0x8A4 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH5 0x100000000 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH2 0x8C9 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x8E1 PUSH2 0x1310 JUMP JUMPDEST PUSH2 0x8EB DUP3 DUP3 PUSH2 0x15B9 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xCC16F5DBB4873280815C1EE09DBD06736CFFCC184412CF7A71A0FDB75D397CA5 DUP3 PUSH1 0x40 MLOAD PUSH2 0x68B SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x934 DUP3 DUP7 PUSH2 0xC49 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x994 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60C JUMP JUMPDEST PUSH2 0x578 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0xDA2 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x553 DUP2 DUP6 DUP6 PUSH2 0xF40 JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0x9FF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433230566F7465733A207369676E61747572652065787069726564000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x60C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xE48329057BFD03D55E49B547132E39CFFD9C1820AD7B9D4C5307691425D15ADF PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0xA79 SWAP1 PUSH2 0xA71 SWAP1 PUSH1 0xA0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0x15C3 JUMP JUMPDEST DUP6 DUP6 DUP6 PUSH2 0x15F0 JUMP JUMPDEST SWAP1 POP PUSH2 0xA84 DUP2 PUSH2 0x1618 JUMP JUMPDEST DUP7 EQ PUSH2 0xAD2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433230566F7465733A20696E76616C6964206E6F6E636500000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x60C JUMP JUMPDEST PUSH2 0xADC DUP2 DUP9 PUSH2 0x1378 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0xB35 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305065726D69743A206578706972656420646561646C696E65000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x60C JUMP JUMPDEST PUSH1 0x0 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP9 DUP9 DUP9 PUSH2 0xB64 DUP13 PUSH2 0x1618 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND SWAP1 DUP7 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xE0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0xBBF DUP3 PUSH2 0x15C3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xBCF DUP3 DUP8 DUP8 DUP8 PUSH2 0x15F0 JUMP JUMPDEST SWAP1 POP DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xC32 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305065726D69743A20696E76616C6964207369676E61747572650000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x60C JUMP JUMPDEST PUSH2 0xC3D DUP11 DUP11 DUP11 PUSH2 0xDA2 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH4 0xFFFFFFFF DUP5 AND SWAP1 DUP2 LT PUSH2 0xCB8 JUMPI PUSH2 0xCB8 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE SWAP2 ADD SLOAD PUSH4 0xFFFFFFFF DUP2 AND DUP3 MSTORE PUSH5 0x100000000 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xD00 PUSH2 0x1310 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xD65 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60C JUMP JUMPDEST PUSH2 0x6F6 DUP2 PUSH2 0x145B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP4 MLOAD LT ISZERO PUSH2 0xD8A JUMPI PUSH2 0xD83 DUP4 PUSH2 0x1640 JUMP JUMPDEST SWAP1 POP PUSH2 0x559 JUMP JUMPDEST DUP2 PUSH2 0xD95 DUP5 DUP3 PUSH2 0x24C9 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP PUSH2 0x559 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xE04 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xE65 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xED2 DUP5 DUP5 PUSH2 0xC49 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0xF3A JUMPI DUP2 DUP2 LT ISZERO PUSH2 0xF2D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x60C JUMP JUMPDEST PUSH2 0xF3A DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0xDA2 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xFA4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1006 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60C JUMP JUMPDEST PUSH2 0x1011 DUP4 DUP4 DUP4 PUSH2 0x167E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x1089 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE SWAP3 DUP7 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE SWAP2 MLOAD PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x10E9 SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xF3A DUP5 DUP5 DUP5 PUSH2 0x16E9 JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ DUP1 ISZERO PUSH2 0x1155 JUMPI POP PUSH32 0x0 CHAINID EQ JUMPDEST ISZERO PUSH2 0x117F JUMPI POP PUSH32 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x58D PUSH1 0x40 DUP1 MLOAD PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x0 SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x0 PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x0 SWAP1 DUP2 DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x1281 JUMPI PUSH1 0x0 PUSH2 0x1242 DUP5 PUSH2 0x16F4 JUMP JUMPDEST PUSH2 0x124C SWAP1 DUP6 PUSH2 0x2589 JUMP JUMPDEST PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 SWAP1 SWAP2 POP DUP7 SWAP1 DUP3 ADD SLOAD PUSH4 0xFFFFFFFF AND GT ISZERO PUSH2 0x1271 JUMPI DUP1 SWAP2 POP PUSH2 0x127F JUMP JUMPDEST PUSH2 0x127C DUP2 PUSH1 0x1 PUSH2 0x243C JUMP JUMPDEST SWAP3 POP JUMPDEST POP JUMPDEST DUP1 DUP3 LT ISZERO PUSH2 0x12CE JUMPI PUSH1 0x0 PUSH2 0x1295 DUP4 DUP4 PUSH2 0x17DC JUMP JUMPDEST PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 SWAP1 SWAP2 POP DUP7 SWAP1 DUP3 ADD SLOAD PUSH4 0xFFFFFFFF AND GT ISZERO PUSH2 0x12BA JUMPI DUP1 SWAP2 POP PUSH2 0x12C8 JUMP JUMPDEST PUSH2 0x12C5 DUP2 PUSH1 0x1 PUSH2 0x243C JUMP JUMPDEST SWAP3 POP JUMPDEST POP PUSH2 0x1281 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x12FA JUMPI PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 DUP2 ADD PUSH1 0x0 NOT ADD SLOAD PUSH5 0x100000000 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH2 0x12FD JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x72D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x60C JUMP JUMPDEST PUSH2 0x1374 DUP3 DUP3 PUSH2 0x17F7 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP5 MSTORE DUP3 DUP7 KECCAK256 SLOAD SWAP5 SWAP1 SWAP4 MSTORE DUP8 DUP8 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP5 AND DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP2 SWAP1 SWAP6 AND SWAP5 SWAP2 SWAP4 SWAP2 SWAP3 DUP6 SWAP3 SWAP2 PUSH32 0x3134E8A2E6D97E929A7E54011EA5485D7D196DD5F0BA4D4EF95803E8E3FC257F SWAP2 SWAP1 LOG4 PUSH2 0xF3A DUP3 DUP5 DUP4 PUSH2 0x1881 JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 GT ISZERO PUSH2 0x1457 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53616665436173743A2076616C756520646F65736E27742066697420696E2033 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x322062697473 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60C JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0xA DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xFF DUP4 AND ISZERO PUSH2 0x14C1 JUMPI PUSH2 0xD83 DUP4 PUSH2 0x19BE JUMP JUMPDEST DUP2 DUP1 SLOAD PUSH2 0x14CD SWAP1 PUSH2 0x23F2 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x14F9 SWAP1 PUSH2 0x23F2 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1546 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x151B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1546 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1529 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH2 0x559 JUMP JUMPDEST PUSH1 0x0 PUSH6 0xFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1457 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53616665436173743A2076616C756520646F65736E27742066697420696E2034 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x382062697473 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60C JUMP JUMPDEST PUSH2 0x1374 DUP3 DUP3 PUSH2 0x19F3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x559 PUSH2 0x15D0 PUSH2 0x10FC JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH2 0x1901 PUSH1 0xF0 SHL DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1601 DUP8 DUP8 DUP8 DUP8 PUSH2 0x1A0B JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x160E DUP2 PUSH2 0x1ACF JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE SWAP1 JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SWAP1 POP PUSH1 0x1F DUP2 MLOAD GT ISZERO PUSH2 0x166B JUMPI DUP3 PUSH1 0x40 MLOAD PUSH4 0x305A27A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x60C SWAP2 SWAP1 PUSH2 0x214D JUMP JUMPDEST DUP1 MLOAD PUSH2 0x1676 DUP3 PUSH2 0x259C JUMP JUMPDEST OR SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x16E4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305061757361626C653A20746F6B656E207472616E73666572207768 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1A5B19481C185D5CD959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60C JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x16E4 DUP4 DUP4 DUP4 PUSH2 0x1C19 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 SUB PUSH2 0x1706 JUMPI POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH2 0x1713 DUP5 PUSH2 0x1C4B JUMP JUMPDEST SWAP1 SHR PUSH1 0x1 SWAP1 SHL SWAP1 POP PUSH1 0x1 DUP2 DUP5 DUP2 PUSH2 0x172C JUMPI PUSH2 0x172C PUSH2 0x25C0 JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH1 0x1 DUP2 DUP5 DUP2 PUSH2 0x1744 JUMPI PUSH2 0x1744 PUSH2 0x25C0 JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH1 0x1 DUP2 DUP5 DUP2 PUSH2 0x175C JUMPI PUSH2 0x175C PUSH2 0x25C0 JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH1 0x1 DUP2 DUP5 DUP2 PUSH2 0x1774 JUMPI PUSH2 0x1774 PUSH2 0x25C0 JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH1 0x1 DUP2 DUP5 DUP2 PUSH2 0x178C JUMPI PUSH2 0x178C PUSH2 0x25C0 JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH1 0x1 DUP2 DUP5 DUP2 PUSH2 0x17A4 JUMPI PUSH2 0x17A4 PUSH2 0x25C0 JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH1 0x1 DUP2 DUP5 DUP2 PUSH2 0x17BC JUMPI PUSH2 0x17BC PUSH2 0x25C0 JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH2 0x637 DUP2 DUP3 DUP6 DUP2 PUSH2 0x17D6 JUMPI PUSH2 0x17D6 PUSH2 0x25C0 JUMP JUMPDEST DIV PUSH2 0x1CDF JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17EB PUSH1 0x2 DUP5 DUP5 XOR PUSH2 0x25D6 JUMP JUMPDEST PUSH2 0x637 SWAP1 DUP5 DUP5 AND PUSH2 0x243C JUMP JUMPDEST PUSH2 0x1801 DUP3 DUP3 PUSH2 0x1CF5 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB LT ISZERO PUSH2 0x1873 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x30 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433230566F7465733A20746F74616C20737570706C79207269736B73206F PUSH1 0x44 DUP3 ADD MSTORE PUSH16 0x766572666C6F77696E6720766F746573 PUSH1 0x80 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60C JUMP JUMPDEST PUSH2 0xF3A PUSH1 0xD PUSH2 0x1DCA DUP4 PUSH2 0x1DD6 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 ISZERO PUSH2 0x18A3 JUMPI POP PUSH1 0x0 DUP2 GT JUMPDEST ISZERO PUSH2 0x16E4 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO PUSH2 0x1931 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 SWAP1 PUSH2 0x18DE SWAP1 PUSH2 0x1F4B DUP6 PUSH2 0x1DD6 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDEC2BACDD2F05B59DE34DA9B523DFF8BE42E5E38E818C82FDB0BAE774387A724 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1926 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO PUSH2 0x16E4 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 SWAP1 PUSH2 0x1967 SWAP1 PUSH2 0x1DCA DUP6 PUSH2 0x1DD6 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDEC2BACDD2F05B59DE34DA9B523DFF8BE42E5E38E818C82FDB0BAE774387A724 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x19AF SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0xFF DUP5 AND SWAP2 PUSH1 0x0 SWAP2 DUP1 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP POP POP SWAP2 DUP3 MSTORE POP PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP1 JUMP JUMPDEST PUSH2 0x19FD DUP3 DUP3 PUSH2 0x1F57 JUMP JUMPDEST PUSH2 0xF3A PUSH1 0xD PUSH2 0x1F4B DUP4 PUSH2 0x1DD6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT ISZERO PUSH2 0x1A42 JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x3 PUSH2 0x1AC6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP10 SWAP1 MSTORE PUSH1 0xFF DUP9 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1A96 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1ABF JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x1AC6 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1AE3 JUMPI PUSH2 0x1AE3 PUSH2 0x25F8 JUMP JUMPDEST SUB PUSH2 0x1AEB JUMPI POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1AFF JUMPI PUSH2 0x1AFF PUSH2 0x25F8 JUMP JUMPDEST SUB PUSH2 0x1B4C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x60C JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1B60 JUMPI PUSH2 0x1B60 PUSH2 0x25F8 JUMP JUMPDEST SUB PUSH2 0x1BAD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x60C JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1BC1 JUMPI PUSH2 0x1BC1 PUSH2 0x25F8 JUMP JUMPDEST SUB PUSH2 0x6F6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SLOAD DUP6 DUP5 AND DUP4 MSTORE SWAP2 KECCAK256 SLOAD PUSH2 0x16E4 SWAP3 SWAP2 DUP3 AND SWAP2 AND DUP4 PUSH2 0x1881 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x80 DUP4 SWAP1 SHR ISZERO PUSH2 0x1C60 JUMPI PUSH1 0x80 SWAP3 DUP4 SHR SWAP3 ADD JUMPDEST PUSH1 0x40 DUP4 SWAP1 SHR ISZERO PUSH2 0x1C72 JUMPI PUSH1 0x40 SWAP3 DUP4 SHR SWAP3 ADD JUMPDEST PUSH1 0x20 DUP4 SWAP1 SHR ISZERO PUSH2 0x1C84 JUMPI PUSH1 0x20 SWAP3 DUP4 SHR SWAP3 ADD JUMPDEST PUSH1 0x10 DUP4 SWAP1 SHR ISZERO PUSH2 0x1C96 JUMPI PUSH1 0x10 SWAP3 DUP4 SHR SWAP3 ADD JUMPDEST PUSH1 0x8 DUP4 SWAP1 SHR ISZERO PUSH2 0x1CA8 JUMPI PUSH1 0x8 SWAP3 DUP4 SHR SWAP3 ADD JUMPDEST PUSH1 0x4 DUP4 SWAP1 SHR ISZERO PUSH2 0x1CBA JUMPI PUSH1 0x4 SWAP3 DUP4 SHR SWAP3 ADD JUMPDEST PUSH1 0x2 DUP4 SWAP1 SHR ISZERO PUSH2 0x1CCC JUMPI PUSH1 0x2 SWAP3 DUP4 SHR SWAP3 ADD JUMPDEST PUSH1 0x1 DUP4 SWAP1 SHR ISZERO PUSH2 0x559 JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x1CEE JUMPI DUP2 PUSH2 0x637 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1D4B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x60C JUMP JUMPDEST PUSH2 0x1D57 PUSH1 0x0 DUP4 DUP4 PUSH2 0x167E JUMP JUMPDEST DUP1 PUSH1 0x3 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1D69 SWAP2 SWAP1 PUSH2 0x243C JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE MLOAD DUP5 DUP2 MSTORE PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x1374 PUSH1 0x0 DUP4 DUP4 PUSH2 0x16E9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x637 DUP3 DUP5 PUSH2 0x243C JUMP JUMPDEST DUP3 SLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 DUP2 ISZERO PUSH2 0x1E23 JUMPI PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 DUP3 ADD PUSH1 0x0 NOT ADD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE SWAP1 SLOAD PUSH4 0xFFFFFFFF DUP2 AND DUP3 MSTORE PUSH5 0x100000000 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x1E38 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE JUMPDEST SWAP1 POP DUP1 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND SWAP4 POP PUSH2 0x1E58 DUP5 DUP7 DUP9 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP3 POP PUSH1 0x0 DUP3 GT DUP1 ISZERO PUSH2 0x1E82 JUMPI POP PUSH2 0x1E6D PUSH2 0x83D JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND DUP2 PUSH1 0x0 ADD MLOAD PUSH4 0xFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x1EC7 JUMPI PUSH2 0x1E90 DUP4 PUSH2 0x209E JUMP JUMPDEST PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 DUP4 ADD PUSH1 0x0 NOT ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH5 0x100000000 MUL PUSH4 0xFFFFFFFF SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x1F41 JUMP JUMPDEST DUP7 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x1EEB PUSH2 0x1EDE PUSH2 0x83D JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND PUSH2 0x13F2 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1EFF DUP7 PUSH2 0x209E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP1 DUP2 AND SWAP1 SWAP2 MSTORE DUP3 SLOAD PUSH1 0x1 DUP2 ADD DUP5 SSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x20 SWAP4 DUP5 SWAP1 KECCAK256 DUP4 MLOAD SWAP5 SWAP1 SWAP4 ADD MLOAD SWAP1 SWAP2 AND PUSH5 0x100000000 MUL PUSH4 0xFFFFFFFF SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP2 ADD SSTORE JUMPDEST POP POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x637 DUP3 DUP5 PUSH2 0x2589 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1FB7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60C JUMP JUMPDEST PUSH2 0x1FC3 DUP3 PUSH1 0x0 DUP4 PUSH2 0x167E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x2037 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6365 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE PUSH1 0x3 DUP1 SLOAD DUP8 SWAP1 SUB SWAP1 SSTORE MLOAD DUP6 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x16E4 DUP4 PUSH1 0x0 DUP5 PUSH2 0x16E9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP3 GT ISZERO PUSH2 0x1457 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53616665436173743A2076616C756520646F65736E27742066697420696E2032 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x32342062697473 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60C JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x212D JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x2111 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x637 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2107 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2177 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x218F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2198 DUP4 PUSH2 0x2160 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x21BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x21C4 DUP5 PUSH2 0x2160 JUMP JUMPDEST SWAP3 POP PUSH2 0x21D2 PUSH1 0x20 DUP6 ADD PUSH2 0x2160 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x21F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x637 DUP3 PUSH2 0x2160 JUMP JUMPDEST PUSH1 0xFF PUSH1 0xF8 SHL DUP9 AND DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 PUSH1 0xE0 DUP2 DUP5 ADD MSTORE PUSH2 0x221D PUSH1 0xE0 DUP5 ADD DUP11 PUSH2 0x2107 JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x222F DUP2 DUP11 PUSH2 0x2107 JUMP JUMPDEST PUSH1 0x60 DUP6 ADD DUP10 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x80 DUP7 ADD MSTORE PUSH1 0xA0 DUP6 ADD DUP8 SWAP1 MSTORE DUP5 DUP2 SUB PUSH1 0xC0 DUP7 ADD MSTORE DUP6 MLOAD DUP1 DUP3 MSTORE DUP4 DUP8 ADD SWAP3 POP SWAP1 DUP4 ADD SWAP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2281 JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x2265 JUMP JUMPDEST POP SWAP1 SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x22A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x2177 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x22D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x22DF DUP8 PUSH2 0x2160 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH2 0x22FB PUSH1 0x60 DUP9 ADD PUSH2 0x22AC JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH1 0xA0 DUP8 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x2330 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2339 DUP9 PUSH2 0x2160 JUMP JUMPDEST SWAP7 POP PUSH2 0x2347 PUSH1 0x20 DUP10 ADD PUSH2 0x2160 JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH2 0x2363 PUSH1 0x80 DUP10 ADD PUSH2 0x22AC JUMP JUMPDEST SWAP3 POP PUSH1 0xA0 DUP9 ADD CALLDATALOAD SWAP2 POP PUSH1 0xC0 DUP9 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2392 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x239B DUP4 PUSH2 0x2160 JUMP JUMPDEST SWAP2 POP PUSH2 0x23A9 PUSH1 0x20 DUP5 ADD PUSH2 0x2160 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x23C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x23CE DUP4 PUSH2 0x2160 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x23E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x2406 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x163A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x559 JUMPI PUSH2 0x559 PUSH2 0x2426 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x16E4 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x24A2 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x24C1 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x24AE JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x24E3 JUMPI PUSH2 0x24E3 PUSH2 0x244F JUMP JUMPDEST PUSH2 0x24F7 DUP2 PUSH2 0x24F1 DUP5 SLOAD PUSH2 0x23F2 JUMP JUMPDEST DUP5 PUSH2 0x247B JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x252C JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x2514 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x24C1 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x255B JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x253C JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x2579 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x559 JUMPI PUSH2 0x559 PUSH2 0x2426 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x163A JUMPI PUSH1 0x0 NOT PUSH1 0x20 SWAP2 SWAP1 SWAP2 SUB PUSH1 0x3 SHL SHL AND SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x25F3 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 NUMBER 0xE3 0xE6 0xAF 0xAD EQ 0xB4 PUSH5 0x789532B6A0 0xC1 0x2D EXTCODEHASH 0x5D 0x5E EXTCODEHASH SHR LOG4 BASEFEE 0xC LOG2 JUMP SHL 0x2E 0xB2 0xD2 SMOD 0xC3 PUSH18 0x64736F6C6343000811003300000000000000 ",
      "sourceMap": "255:1012:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;598:98:0;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1500:197;;;;;;:::i;:::-;;:::i;:::-;;;1269:14:49;;1262:22;1244:41;;1232:2;1217:18;1500:197:0;1104:187:49;907:106:0;994:12;;907:106;;;1442:25:49;;;1430:2;1415:18;907:106:0;1296:177:49;1703:256:0;;;;;;:::i;:::-;;:::i;810:91::-;;;892:2;1953:36:49;;1941:2;1926:18;810:91:0;1811:184:49;2776:113:2;;;:::i;1965:234:0:-;;;;;;:::i;:::-;;:::i;2447:248:3:-;;;;;;:::i;:::-;;:::i;512:125:7:-;;;;;;:::i;:::-;;:::i;:::-;;1061:221:3;;;:::i;1819:126::-;;;;;;:::i;:::-;-1:-1:-1;;;;;1919:19:3;;;1893:7;1919:19;;;:10;:19;;;;;;;;1819:126;;;;-1:-1:-1;;;;;2537:32:49;;;2519:51;;2507:2;2492:18;1819:126:3;2373:203:49;5237:112:3;;;;;;:::i;:::-;;:::i;448:84:25:-;495:4;518:7;;;448:84;;1582:149:3;;;;;;:::i;:::-;;:::i;:::-;;;2755:10:49;2743:23;;;2725:42;;2713:2;2698:18;1582:149:3;2581:192:49;1019:125:0;;;;;;:::i;:::-;-1:-1:-1;;;;;1119:18:0;1093:7;1119:18;;;:9;:18;;;;;;;1019:125;679:101:35;;;:::i;2526:126:2:-;;;;;;:::i;:::-;;:::i;4910:633:40:-;;;:::i;:::-;;;;;;;;;;;;;:::i;452:85:35:-;524:6;;-1:-1:-1;;;;;524:6:35;452:85;;2957:239:3;;;;;;:::i;:::-;;:::i;831:118::-;;;:::i;:::-;;;4401:14:49;4389:27;;;4371:46;;4359:2;4344:18;831:118:3;4227:196:49;702:102:0;;;:::i;2024:243:3:-;;;;;;:::i;:::-;;:::i;644:125:7:-;;;;;;:::i;:::-;;:::i;2205:427:0:-;;;;;;:::i;:::-;;:::i;1150:189::-;;;;;;:::i;:::-;;:::i;5426:574:3:-;;;;;;:::i;:::-;;:::i;1839:626:2:-;;;;;;:::i;:::-;;:::i;1345:149:0:-;;;;;;:::i;:::-;;:::i;1359:148:3:-;;;;;;:::i;:::-;;:::i;:::-;;;;6578:13:49;;6593:10;6574:30;6556:49;;6665:4;6653:17;;;6647:24;-1:-1:-1;;;;;6643:50:49;6621:20;;;6614:80;;;;6529:18;1359:148:3;6356:344:49;786:198:35;;;;;;:::i;:::-;;:::i;598:98:0:-;652:13;684:5;677:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;598:98;:::o;1500:197::-;1583:4;176:10:31;1637:32:0;176:10:31;1653:7:0;1662:6;1637:8;:32::i;:::-;1686:4;1679:11;;;1500:197;;;;;:::o;1703:256::-;1800:4;176:10:31;1856:38:0;1872:4;176:10:31;1887:6:0;1856:15;:38::i;:::-;1904:27;1914:4;1920:2;1924:6;1904:9;:27::i;:::-;-1:-1:-1;1948:4:0;;1703:256;-1:-1:-1;;;;1703:256:0:o;2776:113:2:-;2836:7;2862:20;:18;:20::i;:::-;2855:27;;2776:113;:::o;1965:234:0:-;2053:4;176:10:31;2107:64:0;176:10:31;2123:7:0;2160:10;2132:25;176:10:31;2123:7:0;2132:9;:25::i;:::-;:38;;;;:::i;:::-;2107:8;:64::i;2447:248:3:-;2543:7;2582;:5;:7::i;:::-;2570:19;;:9;:19;2562:57;;;;-1:-1:-1;;;2562:57:3;;7554:2:49;2562:57:3;;;7536:21:49;7593:2;7573:18;;;7566:30;-1:-1:-1;;;7612:18:49;;;7605:55;7677:18;;2562:57:3;;;;;;;;;-1:-1:-1;;;;;2655:21:3;;;;;;:12;:21;;;;;2636:52;;2678:9;2636:18;:52::i;:::-;2629:59;2447:248;-1:-1:-1;;;2447:248:3:o;512:125:7:-;415:13:35;:11;:13::i;:::-;581:17:7::1;587:2;591:6;581:5;:17::i;:::-;619:2;-1:-1:-1::0;;;;;614:16:7::1;;623:6;614:16;;;;1442:25:49::0;;1430:2;1415:18;;1296:177;614:16:7::1;;;;;;;;512:125:::0;;:::o;1061:221:3:-;1121:13;1214:12;1203:7;:5;:7::i;:::-;:23;;;1195:32;;;;;;-1:-1:-1;1237:38:3;;;;;;;;;;;;;;;;;;1061:221::o;5237:112::-;5308:34;176:10:31;5332:9:3;5308;:34::i;:::-;5237:112;:::o;1582:149::-;-1:-1:-1;;;;;1695:21:3;;1652:6;1695:21;;;:12;:21;;;;;:28;1677:47;;:17;:47::i;679:101:35:-;415:13;:11;:13::i;:::-;743:30:::1;770:1;743:18;:30::i;:::-;679:101::o:0;2526:126:2:-;-1:-1:-1;;;;;2621:14:2;;2595:7;2621:14;;;:7;:14;;;;;871::32;2621:24:2;780:112:32;4910:633:40;5025:13;5052:18;;5025:13;;;5052:18;5316:41;:5;5343:13;5316:26;:41::i;:::-;5371:47;:8;5401:16;5371:29;:47::i;:::-;5510:16;;;5494:1;5510:16;;;;;;;;;-1:-1:-1;;;5265:271:40;;;-1:-1:-1;5265:271:40;;-1:-1:-1;5432:13:40;;-1:-1:-1;5467:4:40;;-1:-1:-1;5494:1:40;-1:-1:-1;5510:16:40;-1:-1:-1;5265:271:40;-1:-1:-1;4910:633:40:o;2957:239:3:-;3042:7;3081;:5;:7::i;:::-;3069:19;;:9;:19;3061:57;;;;-1:-1:-1;;;3061:57:3;;7554:2:49;3061:57:3;;;7536:21:49;7593:2;7573:18;;;7566:30;-1:-1:-1;;;7612:18:49;;;7605:55;7677:18;;3061:57:3;7352:349:49;3061:57:3;3135:54;3154:23;3179:9;3135:18;:54::i;831:118::-;886:6;911:31;929:12;911:17;:31::i;702:102:0:-;758:13;790:7;783:14;;;;;:::i;2024:243:3:-;-1:-1:-1;;;;;2130:21:3;;2097:7;2130:21;;;:12;:21;;;;;:28;2199:8;;:51;;-1:-1:-1;;;;;2214:21:3;;;;;;:12;:21;;;;;:30;;-1:-1:-1;;2236:7:3;;;2214:30;;;;;;:::i;:::-;;;;;;;;;;:36;;;;-1:-1:-1;;;;;2214:36:3;2199:51;;;2210:1;2199:51;-1:-1:-1;;;;;2192:58:3;;2024:243;-1:-1:-1;;;2024:243:3:o;644:125:7:-;415:13:35;:11;:13::i;:::-;713:17:7::1;719:2;723:6;713:5;:17::i;:::-;751:2;-1:-1:-1::0;;;;;746:16:7::1;;755:6;746:16;;;;1442:25:49::0;;1430:2;1415:18;;1296:177;2205:427:0;2298:4;176:10:31;2298:4:0;2379:25;176:10:31;2396:7:0;2379:9;:25::i;:::-;2352:52;;2442:15;2422:16;:35;;2414:85;;;;-1:-1:-1;;;2414:85:0;;8172:2:49;2414:85:0;;;8154:21:49;8211:2;8191:18;;;8184:30;8250:34;8230:18;;;8223:62;-1:-1:-1;;;8301:18:49;;;8294:35;8346:19;;2414:85:0;7970:401:49;2414:85:0;2533:60;2542:5;2549:7;2577:15;2558:16;:34;2533:8;:60::i;1150:189::-;1229:4;176:10:31;1283:28:0;176:10:31;1300:2:0;1304:6;1283:9;:28::i;5426:574:3:-;5645:6;5626:15;:25;;5618:67;;;;-1:-1:-1;;;5618:67:3;;8578:2:49;5618:67:3;;;8560:21:49;8617:2;8597:18;;;8590:30;8656:31;8636:18;;;8629:59;8705:18;;5618:67:3;8376:353:49;5618:67:3;5766:58;;;453:71;5766:58;;;8965:25:49;-1:-1:-1;;;;;9026:32:49;;9006:18;;;8999:60;;;;9075:18;;;9068:34;;;9118:18;;;9111:34;;;5695:14:3;;5712:169;;5739:87;;8937:19:49;;5766:58:3;;;;;;;;;;;;5756:69;;;;;;5739:16;:87::i;:::-;5840:1;5855;5870;5712:13;:169::i;:::-;5695:186;;5908:17;5918:6;5908:9;:17::i;:::-;5899:5;:26;5891:64;;;;-1:-1:-1;;;5891:64:3;;9358:2:49;5891:64:3;;;9340:21:49;9397:2;9377:18;;;9370:30;9436:27;9416:18;;;9409:55;9481:18;;5891:64:3;9156:349:49;5891:64:3;5965:28;5975:6;5983:9;5965;:28::i;:::-;5608:392;5426:574;;;;;;:::o;1839:626:2:-;2074:8;2055:15;:27;;2047:69;;;;-1:-1:-1;;;2047:69:2;;9712:2:49;2047:69:2;;;9694:21:49;9751:2;9731:18;;;9724:30;9790:31;9770:18;;;9763:59;9839:18;;2047:69:2;9510:353:49;2047:69:2;2127:18;1034:95;2187:5;2194:7;2203:5;2210:16;2220:5;2210:9;:16::i;:::-;2158:79;;;;;;10155:25:49;;;;-1:-1:-1;;;;;10254:15:49;;;10234:18;;;10227:43;10306:15;;;;10286:18;;;10279:43;10338:18;;;10331:34;10381:19;;;10374:35;10425:19;;;10418:35;;;10127:19;;2158:79:2;;;;;;;;;;;;2148:90;;;;;;2127:111;;2249:12;2264:28;2281:10;2264:16;:28::i;:::-;2249:43;;2303:14;2320:28;2334:4;2340:1;2343;2346;2320:13;:28::i;:::-;2303:45;;2376:5;-1:-1:-1;;;;;2366:15:2;:6;-1:-1:-1;;;;;2366:15:2;;2358:58;;;;-1:-1:-1;;;2358:58:2;;10666:2:49;2358:58:2;;;10648:21:49;10705:2;10685:18;;;10678:30;10744:32;10724:18;;;10717:60;10794:18;;2358:58:2;10464:354:49;2358:58:2;2427:31;2436:5;2443:7;2452:5;2427:8;:31::i;:::-;2037:428;;;1839:626;;;;;;;:::o;1345:149:0:-;-1:-1:-1;;;;;1460:18:0;;;1434:7;1460:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;1345:149::o;1359:148:3:-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;1474:21:3;;;;;;:12;:21;;;;;:26;;;;;;;;;;;;:::i;:::-;;;;;;;;;;1467:33;;;;;;;;;1474:26;;1467:33;;;;;;;;;-1:-1:-1;;;;;1467:33:3;;;;;;;;;1359:148;-1:-1:-1;;;1359:148:3:o;786:198:35:-;415:13;:11;:13::i;:::-;-1:-1:-1;;;;;874:22:35;::::1;866:73;;;::::0;-1:-1:-1;;;866:73:35;;11025:2:49;866:73:35::1;::::0;::::1;11007:21:49::0;11064:2;11044:18;;;11037:30;11103:34;11083:18;;;11076:62;-1:-1:-1;;;11154:18:49;;;11147:36;11200:19;;866:73:35::1;10823:402:49::0;866:73:35::1;949:28;968:8;949:18;:28::i;2194:324:36:-:0;2290:11;2339:2;2323:5;2317:19;:24;2313:199;;;2364:20;2378:5;2364:13;:20::i;:::-;2357:27;;;;2313:199;2441:5;2415:46;2456:5;2441;2415:46;:::i;:::-;-1:-1:-1;2499:1:36;;-1:-1:-1;2475:26:36;;3159:202:37;3335:10;3159:202::o;4284:340:0:-;-1:-1:-1;;;;;4385:19:0;;4377:68;;;;-1:-1:-1;;;4377:68:0;;13636:2:49;4377:68:0;;;13618:21:49;13675:2;13655:18;;;13648:30;13714:34;13694:18;;;13687:62;-1:-1:-1;;;13765:18:49;;;13758:34;13809:19;;4377:68:0;13434:400:49;4377:68:0;-1:-1:-1;;;;;4463:21:0;;4455:68;;;;-1:-1:-1;;;4455:68:0;;14041:2:49;4455:68:0;;;14023:21:49;14080:2;14060:18;;;14053:30;14119:34;14099:18;;;14092:62;-1:-1:-1;;;14170:18:49;;;14163:32;14212:19;;4455:68:0;13839:398:49;4455:68:0;-1:-1:-1;;;;;4534:18:0;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;4585:32;;1442:25:49;;;4585:32:0;;1415:18:49;4585:32:0;;;;;;;4284:340;;;:::o;4630:411::-;4730:24;4757:25;4767:5;4774:7;4757:9;:25::i;:::-;4730:52;;-1:-1:-1;;4796:16:0;:37;4792:243;;4877:6;4857:16;:26;;4849:68;;;;-1:-1:-1;;;4849:68:0;;14444:2:49;4849:68:0;;;14426:21:49;14483:2;14463:18;;;14456:30;14522:31;14502:18;;;14495:59;14571:18;;4849:68:0;14242:353:49;4849:68:0;4959:51;4968:5;4975:7;5003:6;4984:16;:25;4959:8;:51::i;:::-;4720:321;4630:411;;;:::o;2638:625::-;-1:-1:-1;;;;;2734:18:0;;2726:68;;;;-1:-1:-1;;;2726:68:0;;14802:2:49;2726:68:0;;;14784:21:49;14841:2;14821:18;;;14814:30;14880:34;14860:18;;;14853:62;-1:-1:-1;;;14931:18:49;;;14924:35;14976:19;;2726:68:0;14600:401:49;2726:68:0;-1:-1:-1;;;;;2812:16:0;;2804:64;;;;-1:-1:-1;;;2804:64:0;;15208:2:49;2804:64:0;;;15190:21:49;15247:2;15227:18;;;15220:30;15286:34;15266:18;;;15259:62;-1:-1:-1;;;15337:18:49;;;15330:33;15380:19;;2804:64:0;15006:399:49;2804:64:0;2879:38;2900:4;2906:2;2910:6;2879:20;:38::i;:::-;-1:-1:-1;;;;;2950:15:0;;2928:19;2950:15;;;:9;:15;;;;;;2983:21;;;;2975:72;;;;-1:-1:-1;;;2975:72:0;;15612:2:49;2975:72:0;;;15594:21:49;15651:2;15631:18;;;15624:30;15690:34;15670:18;;;15663:62;-1:-1:-1;;;15741:18:49;;;15734:36;15787:19;;2975:72:0;15410:402:49;2975:72:0;-1:-1:-1;;;;;3081:15:0;;;;;;;:9;:15;;;;;;3099:20;;;3081:38;;3133:13;;;;;;;;;;:23;;;;;;3182:26;;;;;;3113:6;1442:25:49;;1430:2;1415:18;;1296:177;3182:26:0;;;;;;;;3219:37;3239:4;3245:2;3249:6;3219:19;:37::i;3622:262:40:-;3675:7;3706:4;-1:-1:-1;;;;;3715:11:40;3698:28;;:63;;;;;3747:14;3730:13;:31;3698:63;3694:184;;;-1:-1:-1;3784:22:40;;3622:262::o;3694:184::-;3844:23;3981:81;;;1856:95;3981:81;;;18097:25:49;4004:11:40;18138:18:49;;;18131:34;;;;4017:14:40;18181:18:49;;;18174:34;4033:13:40;18224:18:49;;;18217:34;4056:4:40;18267:19:49;;;18260:61;3945:7:40;;18069:19:49;;3981:81:40;;;;;;;;;;;;3971:92;;;;;;3964:99;;3890:180;;3280:1876:3;4472:12;;3377:7;;;4472:12;4565:1;4556:10;;4552:242;;;4582:11;4605:17;4615:6;4605:9;:17::i;:::-;4596:26;;:6;:26;:::i;:::-;9588:25;9648:21;;;9714:4;9701:18;;4582:40;;-1:-1:-1;4678:9:3;;9697:28;;4640:35;;;:47;4636:148;;;4714:3;4707:10;;4636:148;;;4762:7;:3;4768:1;4762:7;:::i;:::-;4756:13;;4636:148;4568:226;4552:242;4817:4;4811:3;:10;4804:242;;;4837:11;4851:23;4864:3;4869:4;4851:12;:23::i;:::-;9588:25;9648:21;;;9714:4;9701:18;;4837:37;;-1:-1:-1;4930:9:3;;9697:28;;4892:35;;;:47;4888:148;;;4966:3;4959:10;;4888:148;;;5014:7;:3;5020:1;5014:7;:::i;:::-;5008:13;;4888:148;4823:223;4804:242;;;5087:9;;:52;;9588:25;9648:21;;;9714:4;9701:18;;9697:28;;-1:-1:-1;;9697:28:3;5103:36;;;;-1:-1:-1;;;;;5103:36:3;5087:52;;;5099:1;5087:52;-1:-1:-1;;;;;5080:59:3;;3280:1876;-1:-1:-1;;;;;;3280:1876:3:o;543:130:35:-;524:6;;-1:-1:-1;;;;;524:6:35;176:10:31;606:23:35;598:68;;;;-1:-1:-1;;;598:68:35;;16152:2:49;598:68:35;;;16134:21:49;;;16171:18;;;16164:30;16230:34;16210:18;;;16203:62;16282:18;;598:68:35;15950:356:49;969:140:7;1079:23;1091:2;1095:6;1079:11;:23::i;:::-;969:140;;:::o;7393:380:3:-;-1:-1:-1;;;;;1919:19:3;;;7477:23;1919:19;;;:10;:19;;;;;;;;;;1119:9:0;:18;;;;;;7590:21:3;;;;:33;;;-1:-1:-1;;;;;;7590:33:3;;;;;;;7639:54;;1919:19;;;;;1119:18:0;;7590:33:3;;1919:19;;;7639:54;;7477:23;7639:54;7704:62;7721:15;7738:9;7749:16;7704;:62::i;14403:187:44:-;14459:6;14494:16;14485:25;;;14477:76;;;;-1:-1:-1;;;14477:76:44;;16513:2:49;14477:76:44;;;16495:21:49;16552:2;16532:18;;;16525:30;16591:34;16571:18;;;16564:62;-1:-1:-1;;;16642:18:49;;;16635:36;16688:19;;14477:76:44;16311:402:49;14477:76:44;-1:-1:-1;14577:5:44;14403:187::o;990::35:-;1082:6;;;-1:-1:-1;;;;;1098:17:35;;;-1:-1:-1;;;;;;1098:17:35;;;;;;;1130:40;;1082:6;;;1098:17;1082:6;;1130:40;;1063:16;;1130:40;1053:124;990:187;:::o;2649:238:36:-;2743:13;2069:4;2033:40;;2772:17;2768:113;;2812:15;2821:5;2812:8;:15::i;2768:113::-;2865:5;2858:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13379:187:44;13435:6;13470:16;13461:25;;;13453:76;;;;-1:-1:-1;;;13453:76:44;;16920:2:49;13453:76:44;;;16902:21:49;16959:2;16939:18;;;16932:30;16998:34;16978:18;;;16971:62;-1:-1:-1;;;17049:18:49;;;17042:36;17095:19;;13453:76:44;16718:402:49;1115:150:7;1230:28;1242:7;1251:6;1230:11;:28::i;4695:165:40:-;4772:7;4798:55;4820:20;:18;:20::i;:::-;4842:10;8464:4:39;8458:11;-1:-1:-1;;;8482:23:39;;8534:4;8525:14;;8518:39;;;;8586:4;8577:14;;8570:34;8640:4;8625:20;;;8264:397;6526:232;6611:7;6631:17;6650:18;6672:25;6683:4;6689:1;6692;6695;6672:10;:25::i;:::-;6630:67;;;;6707:18;6719:5;6707:11;:18::i;:::-;-1:-1:-1;6742:9:39;6526:232;-1:-1:-1;;;;;6526:232:39:o;3020:203:2:-;-1:-1:-1;;;;;3140:14:2;;3080:15;3140:14;;;:7;:14;;;;;871::32;;1003:1;985:19;;;;871:14;3199:17:2;3097:126;3020:203;;;:::o;1107:286:36:-;1172:11;1195:17;1221:3;1195:30;;1253:2;1239:4;:11;:16;1235:72;;;1292:3;1278:18;;-1:-1:-1;;;1278:18:36;;;;;;;;:::i;1235:72::-;1373:11;;1356:13;1373:4;1356:13;:::i;:::-;1348:36;;1107:286;-1:-1:-1;;;1107:286:36:o;5047:171:0:-;495:4:25;518:7;;;5155:9:0;5147:64;;;;-1:-1:-1;;;5147:64:0;;17629:2:49;5147:64:0;;;17611:21:49;17668:2;17648:18;;;17641:30;17707:34;17687:18;;;17680:62;-1:-1:-1;;;17758:18:49;;;17751:40;17808:19;;5147:64:0;17427:406:49;5147:64:0;5047:171;;;:::o;775:188:7:-;913:43;939:4;945:2;949:6;913:25;:43::i;6283:1642:43:-;6331:7;6354:1;6359;6354:6;6350:45;;-1:-1:-1;6383:1:43;;6283:1642;-1:-1:-1;6283:1642:43:o;6350:45::-;7074:14;7108:1;7097:7;7102:1;7097:4;:7::i;:::-;:12;;7091:1;:19;;7074:36;;7569:1;7558:6;7554:1;:10;;;;;:::i;:::-;;7545:6;:19;7544:26;;7535:35;;7618:1;7607:6;7603:1;:10;;;;;:::i;:::-;;7594:6;:19;7593:26;;7584:35;;7667:1;7656:6;7652:1;:10;;;;;:::i;:::-;;7643:6;:19;7642:26;;7633:35;;7716:1;7705:6;7701:1;:10;;;;;:::i;:::-;;7692:6;:19;7691:26;;7682:35;;7765:1;7754:6;7750:1;:10;;;;;:::i;:::-;;7741:6;:19;7740:26;;7731:35;;7814:1;7803:6;7799:1;:10;;;;;:::i;:::-;;7790:6;:19;7789:26;;7780:35;;7863:1;7852:6;7848:1;:10;;;;;:::i;:::-;;7839:6;:19;7838:26;;7829:35;;7885:23;7889:6;7901;7897:1;:10;;;;;:::i;:::-;;7885:3;:23::i;808:153::-;870:7;943:11;953:1;944:5;;;943:11;:::i;:::-;933:21;;934:5;;;933:21;:::i;6294:285:3:-;6378:28;6390:7;6399:6;6378:11;:28::i;:::-;994:12:0;;-1:-1:-1;;;;;;6424:29:3;6416:90;;;;-1:-1:-1;;;6416:90:3;;18888:2:49;6416:90:3;;;18870:21:49;18927:2;18907:18;;;18900:30;18966:34;18946:18;;;18939:62;-1:-1:-1;;;19017:18:49;;;19010:46;19073:19;;6416:90:3;18686:412:49;6416:90:3;6517:55;6534:23;6559:4;6565:6;6517:16;:55::i;7779:597::-;7876:3;-1:-1:-1;;;;;7869:10:3;:3;-1:-1:-1;;;;;7869:10:3;;;:24;;;;;7892:1;7883:6;:10;7869:24;7865:505;;;-1:-1:-1;;;;;7913:17:3;;;7909:221;;-1:-1:-1;;;;;8008:17:3;;7951;8008;;;:12;:17;;;;;7951;;7991:54;;8027:9;8038:6;7991:16;:54::i;:::-;7950:95;;;;8089:3;-1:-1:-1;;;;;8068:47:3;;8094:9;8105;8068:47;;;;;;19277:25:49;;;19333:2;19318:18;;19311:34;19265:2;19250:18;;19103:248;8068:47:3;;;;;;;;7932:198;;7909:221;-1:-1:-1;;;;;8148:17:3;;;8144:216;;-1:-1:-1;;;;;8243:17:3;;8186;8243;;;:12;:17;;;;;8186;;8226:49;;8262:4;8268:6;8226:16;:49::i;:::-;8185:90;;;;8319:3;-1:-1:-1;;;;;8298:47:3;;8324:9;8335;8298:47;;;;;;19277:25:49;;;19333:2;19318:18;;19311:34;19265:2;19250:18;;19103:248;8298:47:3;;;;;;;;8167:193;;7779:597;;;:::o;1477:401:36:-;1695:14;;;1706:2;1695:14;;;;;;;;;1536:13;;2069:4;2033:40;;;1561:11;;1695:14;;;1706:2;;1695:14;;;-1:-1:-1;;;1785:16:36;;;-1:-1:-1;1830:4:36;1821:14;;1814:28;;;;-1:-1:-1;1785:16:36;1477:401::o;6668:190:3:-;6752:28;6764:7;6773:6;6752:11;:28::i;:::-;6791:60;6808:23;6833:9;6844:6;6791:16;:60::i;4937:1456:39:-;5025:7;;5949:66;5936:79;;5932:161;;;-1:-1:-1;6047:1:39;;-1:-1:-1;6051:30:39;6031:51;;5932:161;6204:24;;;6187:14;6204:24;;;;;;;;;19583:25:49;;;19656:4;19644:17;;19624:18;;;19617:45;;;;19678:18;;;19671:34;;;19721:18;;;19714:34;;;6204:24:39;;19555:19:49;;6204:24:39;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6204:24:39;;-1:-1:-1;;6204:24:39;;;-1:-1:-1;;;;;;;6242:20:39;;6238:101;;6294:1;6298:29;6278:50;;;;;;;6238:101;6357:6;-1:-1:-1;6365:20:39;;-1:-1:-1;4937:1456:39;;;;;;;;:::o;498:511::-;575:20;566:5;:29;;;;;;;;:::i;:::-;;562:441;;498:511;:::o;562:441::-;671:29;662:5;:38;;;;;;;;:::i;:::-;;658:345;;716:34;;-1:-1:-1;;;716:34:39;;20093:2:49;716:34:39;;;20075:21:49;20132:2;20112:18;;;20105:30;20171:26;20151:18;;;20144:54;20215:18;;716:34:39;19891:348:49;658:345:39;780:35;771:5;:44;;;;;;;;:::i;:::-;;767:236;;831:41;;-1:-1:-1;;;831:41:39;;20446:2:49;831:41:39;;;20428:21:49;20485:2;20465:18;;;20458:30;20524:33;20504:18;;;20497:61;20575:18;;831:41:39;20244:355:49;767:236:39;902:30;893:5;:39;;;;;;;;:::i;:::-;;889:114;;948:44;;-1:-1:-1;;;948:44:39;;20806:2:49;948:44:39;;;20788:21:49;20845:2;20825:18;;;20818:30;20884:34;20864:18;;;20857:62;-1:-1:-1;;;20935:18:49;;;20928:32;20977:19;;948:44:39;20604:398:49;6998:224:3;-1:-1:-1;;;;;1919:19:3;;;1893:7;1919:19;;;:10;:19;;;;;;;;;;;;;;;7159:56;;1919:19;;;;;7208:6;7159:16;:56::i;8386:983:43:-;8438:7;;8522:3;8513:12;;;:16;8509:99;;8559:3;8549:13;;;;8580;8509:99;8634:2;8625:11;;;:15;8621:96;;8670:2;8660:12;;;;8690;8621:96;8743:2;8734:11;;;:15;8730:96;;8779:2;8769:12;;;;8799;8730:96;8852:2;8843:11;;;:15;8839:96;;8888:2;8878:12;;;;8908;8839:96;8961:1;8952:10;;;:14;8948:93;;8996:1;8986:11;;;;9015;8948:93;9067:1;9058:10;;;:14;9054:93;;9102:1;9092:11;;;;9121;9054:93;9173:1;9164:10;;;:14;9160:93;;9208:1;9198:11;;;;9227;9160:93;9279:1;9270:10;;;:14;9266:64;;9314:1;9304:11;9356:6;8386:983;-1:-1:-1;;8386:983:43:o;591:104::-;649:7;679:1;675;:5;:13;;687:1;675:13;;;-1:-1:-1;683:1:43;;591:104;-1:-1:-1;591:104:43:o;3269:423:0:-;-1:-1:-1;;;;;3352:21:0;;3344:65;;;;-1:-1:-1;;;3344:65:0;;21209:2:49;3344:65:0;;;21191:21:49;21248:2;21228:18;;;21221:30;21287:33;21267:18;;;21260:61;21338:18;;3344:65:0;21007:355:49;3344:65:0;3420:49;3449:1;3453:7;3462:6;3420:20;:49::i;:::-;3496:6;3480:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;3536:18:0;;;;;;:9;:18;;;;;;;;:28;;;;;;3589:37;1442:25:49;;;3589:37:0;;1415:18:49;3589:37:0;;;;;;;3637:48;3665:1;3669:7;3678:6;3637:19;:48::i;9156:96:3:-;9214:7;9240:5;9244:1;9240;:5;:::i;8382:768::-;8614:12;;8552:17;;;;;8689:8;;:59;;9588:25;9648:21;;;9714:4;9701:18;;9697:28;;-1:-1:-1;;9697:28:3;8689:59;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;8689:59:3;;;;;;;;8700:16;;;;;;;;;-1:-1:-1;8700:16:3;;;;;;;8689:59;8661:87;;8775:7;:13;;;-1:-1:-1;;;;;8763:25:3;;;8814:20;8817:9;8828:5;8814:2;:20;;:::i;:::-;8802:32;;8859:1;8853:3;:7;:39;;;;;8885:7;:5;:7::i;:::-;8864:28;;:7;:17;;;:28;;;8853:39;8849:285;;;8950:29;8969:9;8950:18;:29::i;:::-;9588:25;9648:21;;;9714:4;9701:18;;9697:28;;-1:-1:-1;;9697:28:3;8912:67;;-1:-1:-1;;;;;8912:67:3;;;;;;;;;;;;;;;;8849:285;;;9018:5;9029:89;;;;;;;;9052:26;9070:7;:5;:7::i;:::-;9052:26;;:17;:26::i;:::-;9029:89;;;;;;9087:29;9106:9;9087:18;:29::i;:::-;-1:-1:-1;;;;;9029:89:3;;;;;;9018:101;;;;;;;-1:-1:-1;9018:101:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8849:285;8637:507;8590:560;8382:768;;;;;;:::o;9258:101::-;9321:7;9347:5;9351:1;9347;:5;:::i;3698:580:0:-;-1:-1:-1;;;;;3781:21:0;;3773:67;;;;-1:-1:-1;;;3773:67:0;;21569:2:49;3773:67:0;;;21551:21:49;21608:2;21588:18;;;21581:30;21647:34;21627:18;;;21620:62;-1:-1:-1;;;21698:18:49;;;21691:31;21739:19;;3773:67:0;21367:397:49;3773:67:0;3851:49;3872:7;3889:1;3893:6;3851:20;:49::i;:::-;-1:-1:-1;;;;;3936:18:0;;3911:22;3936:18;;;:9;:18;;;;;;3972:24;;;;3964:71;;;;-1:-1:-1;;;3964:71:0;;21971:2:49;3964:71:0;;;21953:21:49;22010:2;21990:18;;;21983:30;22049:34;22029:18;;;22022:62;-1:-1:-1;;;22100:18:49;;;22093:32;22142:19;;3964:71:0;21769:398:49;3964:71:0;-1:-1:-1;;;;;4069:18:0;;;;;;:9;:18;;;;;;;;4090:23;;;4069:44;;4127:12;:22;;;;;;;4175:37;1442:25:49;;;4069:18:0;;;4175:37;;1415:18:49;4175:37:0;;;;;;;4223:48;4243:7;4260:1;4264:6;4223:19;:48::i;1975:192:44:-;2032:7;-1:-1:-1;;;;;2059:26:44;;;2051:78;;;;-1:-1:-1;;;2051:78:44;;22374:2:49;2051:78:44;;;22356:21:49;22413:2;22393:18;;;22386:30;22452:34;22432:18;;;22425:62;-1:-1:-1;;;22503:18:49;;;22496:37;22550:19;;2051:78:44;22172:403:49;14:423;56:3;94:5;88:12;121:6;116:3;109:19;146:1;156:162;170:6;167:1;164:13;156:162;;;232:4;288:13;;;284:22;;278:29;260:11;;;256:20;;249:59;185:12;156:162;;;160:3;363:1;356:4;347:6;342:3;338:16;334:27;327:38;426:4;419:2;415:7;410:2;402:6;398:15;394:29;389:3;385:39;381:50;374:57;;;14:423;;;;:::o;442:220::-;591:2;580:9;573:21;554:4;611:45;652:2;641:9;637:18;629:6;611:45;:::i;667:173::-;735:20;;-1:-1:-1;;;;;784:31:49;;774:42;;764:70;;830:1;827;820:12;764:70;667:173;;;:::o;845:254::-;913:6;921;974:2;962:9;953:7;949:23;945:32;942:52;;;990:1;987;980:12;942:52;1013:29;1032:9;1013:29;:::i;:::-;1003:39;1089:2;1074:18;;;;1061:32;;-1:-1:-1;;;845:254:49:o;1478:328::-;1555:6;1563;1571;1624:2;1612:9;1603:7;1599:23;1595:32;1592:52;;;1640:1;1637;1630:12;1592:52;1663:29;1682:9;1663:29;:::i;:::-;1653:39;;1711:38;1745:2;1734:9;1730:18;1711:38;:::i;:::-;1701:48;;1796:2;1785:9;1781:18;1768:32;1758:42;;1478:328;;;;;:::o;2182:186::-;2241:6;2294:2;2282:9;2273:7;2269:23;2265:32;2262:52;;;2310:1;2307;2300:12;2262:52;2333:29;2352:9;2333:29;:::i;2778:1259::-;3184:3;3179;3175:13;3167:6;3163:26;3152:9;3145:45;3126:4;3209:2;3247:3;3242:2;3231:9;3227:18;3220:31;3274:46;3315:3;3304:9;3300:19;3292:6;3274:46;:::i;:::-;3368:9;3360:6;3356:22;3351:2;3340:9;3336:18;3329:50;3402:33;3428:6;3420;3402:33;:::i;:::-;3466:2;3451:18;;3444:34;;;-1:-1:-1;;;;;3515:32:49;;3509:3;3494:19;;3487:61;3535:3;3564:19;;3557:35;;;3629:22;;;3623:3;3608:19;;3601:51;3701:13;;3723:22;;;3799:15;;;;-1:-1:-1;3761:15:49;;;;-1:-1:-1;3842:169:49;3856:6;3853:1;3850:13;3842:169;;;3917:13;;3905:26;;3986:15;;;;3951:12;;;;3878:1;3871:9;3842:169;;;-1:-1:-1;4028:3:49;;2778:1259;-1:-1:-1;;;;;;;;;;;;2778:1259:49:o;4042:180::-;4101:6;4154:2;4142:9;4133:7;4129:23;4125:32;4122:52;;;4170:1;4167;4160:12;4122:52;-1:-1:-1;4193:23:49;;4042:180;-1:-1:-1;4042:180:49:o;4428:156::-;4494:20;;4554:4;4543:16;;4533:27;;4523:55;;4574:1;4571;4564:12;4589:531;4691:6;4699;4707;4715;4723;4731;4784:3;4772:9;4763:7;4759:23;4755:33;4752:53;;;4801:1;4798;4791:12;4752:53;4824:29;4843:9;4824:29;:::i;:::-;4814:39;;4900:2;4889:9;4885:18;4872:32;4862:42;;4951:2;4940:9;4936:18;4923:32;4913:42;;4974:36;5006:2;4995:9;4991:18;4974:36;:::i;:::-;4964:46;;5057:3;5046:9;5042:19;5029:33;5019:43;;5109:3;5098:9;5094:19;5081:33;5071:43;;4589:531;;;;;;;;:::o;5125:606::-;5236:6;5244;5252;5260;5268;5276;5284;5337:3;5325:9;5316:7;5312:23;5308:33;5305:53;;;5354:1;5351;5344:12;5305:53;5377:29;5396:9;5377:29;:::i;:::-;5367:39;;5425:38;5459:2;5448:9;5444:18;5425:38;:::i;:::-;5415:48;;5510:2;5499:9;5495:18;5482:32;5472:42;;5561:2;5550:9;5546:18;5533:32;5523:42;;5584:37;5616:3;5605:9;5601:19;5584:37;:::i;:::-;5574:47;;5668:3;5657:9;5653:19;5640:33;5630:43;;5720:3;5709:9;5705:19;5692:33;5682:43;;5125:606;;;;;;;;;;:::o;5736:260::-;5804:6;5812;5865:2;5853:9;5844:7;5840:23;5836:32;5833:52;;;5881:1;5878;5871:12;5833:52;5904:29;5923:9;5904:29;:::i;:::-;5894:39;;5952:38;5986:2;5975:9;5971:18;5952:38;:::i;:::-;5942:48;;5736:260;;;;;:::o;6001:350::-;6068:6;6076;6129:2;6117:9;6108:7;6104:23;6100:32;6097:52;;;6145:1;6142;6135:12;6097:52;6168:29;6187:9;6168:29;:::i;:::-;6158:39;;6247:2;6236:9;6232:18;6219:32;6291:10;6284:5;6280:22;6273:5;6270:33;6260:61;;6317:1;6314;6307:12;6260:61;6340:5;6330:15;;;6001:350;;;;;:::o;6705:380::-;6784:1;6780:12;;;;6827;;;6848:61;;6902:4;6894:6;6890:17;6880:27;;6848:61;6955:2;6947:6;6944:14;6924:18;6921:38;6918:161;;7001:10;6996:3;6992:20;6989:1;6982:31;7036:4;7033:1;7026:15;7064:4;7061:1;7054:15;7090:127;7151:10;7146:3;7142:20;7139:1;7132:31;7182:4;7179:1;7172:15;7206:4;7203:1;7196:15;7222:125;7287:9;;;7308:10;;;7305:36;;;7321:18;;:::i;7706:127::-;7767:10;7762:3;7758:20;7755:1;7748:31;7798:4;7795:1;7788:15;7822:4;7819:1;7812:15;7838:127;7899:10;7894:3;7890:20;7887:1;7880:31;7930:4;7927:1;7920:15;7954:4;7951:1;7944:15;11356:545;11458:2;11453:3;11450:11;11447:448;;;11494:1;11519:5;11515:2;11508:17;11564:4;11560:2;11550:19;11634:2;11622:10;11618:19;11615:1;11611:27;11605:4;11601:38;11670:4;11658:10;11655:20;11652:47;;;-1:-1:-1;11693:4:49;11652:47;11748:2;11743:3;11739:12;11736:1;11732:20;11726:4;11722:31;11712:41;;11803:82;11821:2;11814:5;11811:13;11803:82;;;11866:17;;;11847:1;11836:13;11803:82;;;11807:3;;;11356:545;;;:::o;12077:1352::-;12203:3;12197:10;12230:18;12222:6;12219:30;12216:56;;;12252:18;;:::i;:::-;12281:97;12371:6;12331:38;12363:4;12357:11;12331:38;:::i;:::-;12325:4;12281:97;:::i;:::-;12433:4;;12497:2;12486:14;;12514:1;12509:663;;;;13216:1;13233:6;13230:89;;;-1:-1:-1;13285:19:49;;;13279:26;13230:89;-1:-1:-1;;12034:1:49;12030:11;;;12026:24;12022:29;12012:40;12058:1;12054:11;;;12009:57;13332:81;;12479:944;;12509:663;11303:1;11296:14;;;11340:4;11327:18;;-1:-1:-1;;12545:20:49;;;12663:236;12677:7;12674:1;12671:14;12663:236;;;12766:19;;;12760:26;12745:42;;12858:27;;;;12826:1;12814:14;;;;12693:19;;12663:236;;;12667:3;12927:6;12918:7;12915:19;12912:201;;;12988:19;;;12982:26;-1:-1:-1;;13071:1:49;13067:14;;;13083:3;13063:24;13059:37;13055:42;13040:58;13025:74;;12912:201;-1:-1:-1;;;;;13159:1:49;13143:14;;;13139:22;13126:36;;-1:-1:-1;12077:1352:49:o;15817:128::-;15884:9;;;15905:11;;;15902:37;;;15919:18;;:::i;17125:297::-;17243:12;;17290:4;17279:16;;;17273:23;;17243:12;17308:16;;17305:111;;;-1:-1:-1;;17382:4:49;17378:17;;;;17375:1;17371:25;17367:38;17356:50;;17125:297;-1:-1:-1;17125:297:49:o;18332:127::-;18393:10;18388:3;18384:20;18381:1;18374:31;18424:4;18421:1;18414:15;18448:4;18445:1;18438:15;18464:217;18504:1;18530;18520:132;;18574:10;18569:3;18565:20;18562:1;18555:31;18609:4;18606:1;18599:15;18637:4;18634:1;18627:15;18520:132;-1:-1:-1;18666:9:49;;18464:217::o;19759:127::-;19820:10;19815:3;19811:20;19808:1;19801:31;19851:4;19848:1;19841:15;19875:4;19872:1;19865:15"
    },
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "1959200",
        "executionCost": "infinite",
        "totalCost": "infinite"
      },
      "external": {
        "CLOCK_MODE()": "infinite",
        "DOMAIN_SEPARATOR()": "infinite",
        "allowance(address,address)": "infinite",
        "approve(address,uint256)": "24674",
        "balanceOf(address)": "2648",
        "burn(address,uint256)": "infinite",
        "checkpoints(address,uint32)": "5131",
        "clock()": "391",
        "decimals()": "245",
        "decreaseAllowance(address,uint256)": "27017",
        "delegate(address)": "infinite",
        "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
        "delegates(address)": "2679",
        "eip712Domain()": "infinite",
        "getPastTotalSupply(uint256)": "4919",
        "getPastVotes(address,uint256)": "5114",
        "getVotes(address)": "7138",
        "increaseAllowance(address,uint256)": "infinite",
        "mint(address,uint256)": "infinite",
        "name()": "infinite",
        "nonces(address)": "2639",
        "numCheckpoints(address)": "2759",
        "owner()": "2443",
        "paused()": "2371",
        "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
        "renounceOwnership()": "infinite",
        "symbol()": "infinite",
        "totalSupply()": "2372",
        "transfer(address,uint256)": "infinite",
        "transferFrom(address,address,uint256)": "infinite",
        "transferOwnership(address)": "28446"
      },
      "internal": {
        "_afterTokenTransfer(address,address,uint256)": "infinite",
        "_burn(address,uint256)": "infinite",
        "_mint(address,uint256)": "infinite"
      }
    },
    "methodIdentifiers": {
      "CLOCK_MODE()": "4bf5d7e9",
      "DOMAIN_SEPARATOR()": "3644e515",
      "allowance(address,address)": "dd62ed3e",
      "approve(address,uint256)": "095ea7b3",
      "balanceOf(address)": "70a08231",
      "burn(address,uint256)": "9dc29fac",
      "checkpoints(address,uint32)": "f1127ed8",
      "clock()": "91ddadf4",
      "decimals()": "313ce567",
      "decreaseAllowance(address,uint256)": "a457c2d7",
      "delegate(address)": "5c19a95c",
      "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": "c3cda520",
      "delegates(address)": "587cde1e",
      "eip712Domain()": "84b0196e",
      "getPastTotalSupply(uint256)": "8e539e8c",
      "getPastVotes(address,uint256)": "3a46b1a8",
      "getVotes(address)": "9ab24eb0",
      "increaseAllowance(address,uint256)": "39509351",
      "mint(address,uint256)": "40c10f19",
      "name()": "06fdde03",
      "nonces(address)": "7ecebe00",
      "numCheckpoints(address)": "6fcfff45",
      "owner()": "8da5cb5b",
      "paused()": "5c975abb",
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf",
      "renounceOwnership()": "715018a6",
      "symbol()": "95d89b41",
      "totalSupply()": "18160ddd",
      "transfer(address,uint256)": "a9059cbb",
      "transferFrom(address,address,uint256)": "23b872dd",
      "transferOwnership(address)": "f2fde38b"
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLOCK_MODE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"pos\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"votes\",\"type\":\"uint224\"}],\"internalType\":\"struct ERC20Votes.Checkpoint\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clock\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"getPastTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"CLOCK_MODE()\":{\"details\":\"Description of the clock\"},\"DOMAIN_SEPARATOR()\":{\"details\":\"See {IERC20Permit-DOMAIN_SEPARATOR}.\"},\"checkpoints(address,uint32)\":{\"details\":\"Get the `pos`-th checkpoint for `account`.\"},\"clock()\":{\"details\":\"Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting).\"},\"delegate(address)\":{\"details\":\"Delegate votes from the sender to `delegatee`.\"},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Delegates votes from signer to `delegatee`\"},\"delegates(address)\":{\"details\":\"Get the address `account` is currently delegating to.\"},\"eip712Domain()\":{\"details\":\"See {EIP-5267}.\"},\"getPastTotalSupply(uint256)\":{\"details\":\"Retrieve the `totalSupply` at the end of `timepoint`. Note, this value is the sum of all balances. It is NOT the sum of all the delegated votes! Requirements: - `timepoint` must be in the past\"},\"getPastVotes(address,uint256)\":{\"details\":\"Retrieve the number of votes for `account` at the end of `timepoint`. Requirements: - `timepoint` must be in the past\"},\"getVotes(address)\":{\"details\":\"Gets the current votes balance for `account`\"},\"nonces(address)\":{\"details\":\"See {IERC20Permit-nonces}.\"},\"numCheckpoints(address)\":{\"details\":\"Get number of checkpoints for `account`.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"See {IERC20Permit-permit}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Governor_Token.sol\":\"Governor_Token\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../security/Pausable.sol\\\";\\n\\ncontract ERC20 is Context, IERC20, IERC20Metadata, Pausable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {\\n         require(!paused(), \\\"ERC20Pausable: token transfer while paused\\\");\\n    }\\n\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\",\"keccak256\":\"0x2d9cb6cc4aaf3c3768b6d7d90ed8d152919f7ceb315235a2322f559b7c61b3f8\",\"license\":\"UNLICENSED\"},\"contracts/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\ninterface IERC20 {\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\",\"keccak256\":\"0xe13a957e9eb7bcb794b95d60f460b6f1b1cf5663bd48d277db4826aead92bdb2\",\"license\":\"UNLICENSED\"},\"contracts/ERC20/extensions/ERC20Permit.sol\":{\"content\":\"\\n// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\nimport \\\"./IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../utils/cryptography/EIP712.sol\\\";\\nimport \\\"../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /**\\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\\n     * to reserve a slot.\\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\",\"keccak256\":\"0xdca712a29ea061cfece6f32b500b9c76ff0815bac474aa78ce593e6bb18ea603\",\"license\":\"UNLICENSED\"},\"contracts/ERC20/extensions/ERC20Votes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\n\\nimport './ERC20Permit.sol';\\nimport \\\"../../interfaces/IERC5805.sol\\\";\\nimport \\\"../../utils/math/Math.sol\\\";\\nimport \\\"../../utils/math/SafeCast.sol\\\";\\nimport \\\"../../utils/cryptography/ECDSA.sol\\\";\\n\\n\\nabstract contract ERC20Votes is ERC20Permit, IERC5805 {\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint224 votes;\\n    }\\n\\n    bytes32 private constant _DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    mapping(address => address) private _delegates;\\n    mapping(address => Checkpoint[]) private _checkpoints;\\n    Checkpoint[] private _totalSupplyCheckpoints;\\n\\n    /**\\n     * @dev Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting).\\n     */\\n    function clock() public view virtual override returns (uint48) {\\n        return SafeCast.toUint48(block.number);\\n    }\\n\\n    /**\\n     * @dev Description of the clock\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function CLOCK_MODE() public view virtual override returns (string memory) {\\n        // Check that the clock was not modified\\n        require(clock() == block.number);\\n        return \\\"mode=blocknumber&from=default\\\";\\n    }\\n\\n    /**\\n     * @dev Get the `pos`-th checkpoint for `account`.\\n     */\\n    function checkpoints(address account, uint32 pos) public view virtual returns (Checkpoint memory) {\\n        return _checkpoints[account][pos];\\n    }\\n\\n    /**\\n     * @dev Get number of checkpoints for `account`.\\n     */\\n    function numCheckpoints(address account) public view virtual returns (uint32) {\\n        return SafeCast.toUint32(_checkpoints[account].length);\\n    }\\n\\n    /**\\n     * @dev Get the address `account` is currently delegating to.\\n     */\\n    function delegates(address account) public view virtual override returns (address) {\\n        return _delegates[account];\\n    }\\n\\n    /**\\n     * @dev Gets the current votes balance for `account`\\n     */\\n    function getVotes(address account) public view virtual override returns (uint256) {\\n        uint256 pos = _checkpoints[account].length;\\n        unchecked {\\n            return pos == 0 ? 0 : _checkpoints[account][pos - 1].votes;\\n        }\\n    }\\n\\n    /**\\n     * @dev Retrieve the number of votes for `account` at the end of `timepoint`.\\n     *\\n     * Requirements:\\n     *\\n     * - `timepoint` must be in the past\\n     */\\n    function getPastVotes(address account, uint256 timepoint) public view virtual override returns (uint256) {\\n        require(timepoint < clock(), \\\"ERC20Votes: future lookup\\\");\\n        return _checkpointsLookup(_checkpoints[account], timepoint);\\n    }\\n\\n    /**\\n     * @dev Retrieve the `totalSupply` at the end of `timepoint`. Note, this value is the sum of all balances.\\n     * It is NOT the sum of all the delegated votes!\\n     *\\n     * Requirements:\\n     *\\n     * - `timepoint` must be in the past\\n     */\\n    function getPastTotalSupply(uint256 timepoint) public view virtual override returns (uint256) {\\n        require(timepoint < clock(), \\\"ERC20Votes: future lookup\\\");\\n        return _checkpointsLookup(_totalSupplyCheckpoints, timepoint);\\n    }\\n\\n    /**\\n     * @dev Lookup a value in a list of (sorted) checkpoints.\\n     */\\n    function _checkpointsLookup(Checkpoint[] storage ckpts, uint256 timepoint) private view returns (uint256) {\\n        // We run a binary search to look for the earliest checkpoint taken after `timepoint`.\\n        //\\n        // Initially we check if the block is recent to narrow the search range.\\n        // During the loop, the index of the wanted checkpoint remains in the range [low-1, high).\\n        // With each iteration, either `low` or `high` is moved towards the middle of the range to maintain the invariant.\\n        // - If the middle checkpoint is after `timepoint`, we look in [low, mid)\\n        // - If the middle checkpoint is before or equal to `timepoint`, we look in [mid+1, high)\\n        // Once we reach a single value (when low == high), we've found the right checkpoint at the index high-1, if not\\n        // out of bounds (in which case we're looking too far in the past and the result is 0).\\n        // Note that if the latest checkpoint available is exactly for `timepoint`, we end up with an index that is\\n        // past the end of the array, so we technically don't find a checkpoint after `timepoint`, but it works out\\n        // the same.\\n        uint256 length = ckpts.length;\\n\\n        uint256 low = 0;\\n        uint256 high = length;\\n\\n        if (length > 5) {\\n            uint256 mid = length - Math.sqrt(length);\\n            if (_unsafeAccess(ckpts, mid).fromBlock > timepoint) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(ckpts, mid).fromBlock > timepoint) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        unchecked {\\n            return high == 0 ? 0 : _unsafeAccess(ckpts, high - 1).votes;\\n        }\\n    }\\n\\n    /**\\n     * @dev Delegate votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) public virtual override {\\n        _delegate(_msgSender(), delegatee);\\n    }\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= expiry, \\\"ERC20Votes: signature expired\\\");\\n        address signer = ECDSA.recover(\\n            _hashTypedDataV4(keccak256(abi.encode(_DELEGATION_TYPEHASH, delegatee, nonce, expiry))),\\n            v,\\n            r,\\n            s\\n        );\\n        require(nonce == _useNonce(signer), \\\"ERC20Votes: invalid nonce\\\");\\n        _delegate(signer, delegatee);\\n    }\\n\\n    /**\\n     * @dev Maximum token supply. Defaults to `type(uint224).max` (2^224^ - 1).\\n     */\\n    function _maxSupply() internal view virtual returns (uint224) {\\n        return type(uint224).max;\\n    }\\n\\n    /**\\n     * @dev Snapshots the totalSupply after it has been increased.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual override {\\n        super._mint(account, amount);\\n        require(totalSupply() <= _maxSupply(), \\\"ERC20Votes: total supply risks overflowing votes\\\");\\n\\n        _writeCheckpoint(_totalSupplyCheckpoints, _add, amount);\\n    }\\n\\n    /**\\n     * @dev Snapshots the totalSupply after it has been decreased.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual override {\\n        super._burn(account, amount);\\n\\n        _writeCheckpoint(_totalSupplyCheckpoints, _subtract, amount);\\n    }\\n\\n    /**\\n     * @dev Move voting power when tokens are transferred.\\n     *\\n     * Emits a {IVotes-DelegateVotesChanged} event.\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\n        super._afterTokenTransfer(from, to, amount);\\n\\n        _moveVotingPower(delegates(from), delegates(to), amount);\\n    }\\n\\n    /**\\n     * @dev Change delegation for `delegator` to `delegatee`.\\n     *\\n     * Emits events {IVotes-DelegateChanged} and {IVotes-DelegateVotesChanged}.\\n     */\\n    function _delegate(address delegator, address delegatee) internal virtual {\\n        address currentDelegate = delegates(delegator);\\n        uint256 delegatorBalance = balanceOf(delegator);\\n        _delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveVotingPower(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _moveVotingPower(address src, address dst, uint256 amount) private {\\n        if (src != dst && amount > 0) {\\n            if (src != address(0)) {\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[src], _subtract, amount);\\n                emit DelegateVotesChanged(src, oldWeight, newWeight);\\n            }\\n\\n            if (dst != address(0)) {\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[dst], _add, amount);\\n                emit DelegateVotesChanged(dst, oldWeight, newWeight);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        Checkpoint[] storage ckpts,\\n        function(uint256, uint256) view returns (uint256) op,\\n        uint256 delta\\n    ) private returns (uint256 oldWeight, uint256 newWeight) {\\n        uint256 pos = ckpts.length;\\n\\n        unchecked {\\n            Checkpoint memory oldCkpt = pos == 0 ? Checkpoint(0, 0) : _unsafeAccess(ckpts, pos - 1);\\n\\n            oldWeight = oldCkpt.votes;\\n            newWeight = op(oldWeight, delta);\\n\\n            if (pos > 0 && oldCkpt.fromBlock == clock()) {\\n                _unsafeAccess(ckpts, pos - 1).votes = SafeCast.toUint224(newWeight);\\n            } else {\\n                ckpts.push(Checkpoint({fromBlock: SafeCast.toUint32(clock()), votes: SafeCast.toUint224(newWeight)}));\\n            }\\n        }\\n    }\\n\\n    function _add(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    function _subtract(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(Checkpoint[] storage ckpts, uint256 pos) private pure returns (Checkpoint storage result) {\\n        assembly {\\n            mstore(0, ckpts.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n}\",\"keccak256\":\"0xd5468b3312920822f2b2864bbbc8dbae574c5014c1c423b686393696e5cee744\",\"license\":\"UNLICENSED\"},\"contracts/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\ninterface IERC20Metadata is IERC20 {\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n    \\n}\",\"keccak256\":\"0x5dfe0556583532d39c64e90fc994edeba17baa59d0f9e59c20c52e1a89d7abab\",\"license\":\"UNLICENSED\"},\"contracts/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\",\"keccak256\":\"0xca85a33350f6ade5c4e47bd19634e46acf86bbe8b185adda413b0ae0c1e12c9a\",\"license\":\"UNLICENSED\"},\"contracts/Governor_Token.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\n\\nimport './ERC20/ERC20.sol';\\nimport './ERC20/extensions/ERC20Votes.sol';\\nimport './ERC20/extensions/ERC20Permit.sol';\\nimport './utils/Ownable.sol';\\nimport \\\"./utils/cryptography/ECDSA.sol\\\";\\n\\ncontract Governor_Token is ERC20, ERC20Permit, Ownable, ERC20Votes {\\n    constructor() ERC20(\\\"Ink_Votes\\\", \\\"ITK\\\")  ERC20Permit(\\\"Ink_Votes\\\") {}\\n\\n        event Mint(address indexed to, uint _amount);\\n        event Burn(address indexed to, uint _amount);\\n\\n     function mint(address to, uint256 amount) public onlyOwner {\\n        _mint(to, amount);\\n         emit Mint(to, amount);\\n    }\\n\\n     function burn(address to, uint256 amount) public onlyOwner {\\n        _burn(to, amount);\\n         emit Burn(to, amount);\\n    }\\n\\n    function _afterTokenTransfer(address from, address to, uint256 amount)\\n        internal\\n        override(ERC20, ERC20Votes)\\n    {\\n        super._afterTokenTransfer(from, to, amount);\\n    }\\n\\n    function _mint(address to, uint256 amount)\\n        internal\\n        override(ERC20, ERC20Votes)\\n    {\\n        super._mint(to, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount)\\n        internal\\n        override(ERC20, ERC20Votes)\\n    {\\n        super._burn(account, amount);\\n    }\\n}\",\"keccak256\":\"0x8c1f93ff57c27bcf7d58413e2adae8ebbd2397f3234fd421f30a22a6bcdd1fdf\",\"license\":\"UNLICENSED\"},\"contracts/governance/utils/IVotes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/utils/IVotes.sol)\\npragma solidity ^0.8.17;\\n\\n/**\\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\\n *\\n * _Available since v4.5._\\n */\\ninterface IVotes {\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at the end of a past block (`blockNumber`).\\n     */\\n    function getPastVotes(address account, uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total supply of votes available at the end of a past block (`blockNumber`).\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     */\\n    function getPastTotalSupply(uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the delegate that `account` has chosen.\\n     */\\n    function delegates(address account) external view returns (address);\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`.\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\",\"keccak256\":\"0x6fd4ded78992fe759060ebd17956f940cacb7742594d8e43b1155df6d2f63c62\",\"license\":\"MIT\"},\"contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\",\"keccak256\":\"0x93be4e7e2e2027b78425e8dccc643ddb138ec1a49b805d74f5d3fb41ecc82f49\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IERC5805.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\n\\nimport \\\"../governance/utils/IVotes.sol\\\";\\nimport \\\"./IERC6372.sol\\\";\\n\\ninterface IERC5805 is IERC6372, IVotes {}\",\"keccak256\":\"0x6bcfa2863cc3e23cfadb6fed7e64d8d55ea1461fdd88bc5929126110209a39a7\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IERC6372.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\n\\ninterface IERC6372 {\\n\\n    function clock() external view returns (uint48);\\n\\n// solhint-disable-next-line func-name-mixedcase\\n    function CLOCK_MODE() external view returns (string memory);\\n    \\n}\",\"keccak256\":\"0x0b99edf1135678227968d9916061a9a2c0a4a177e2ff8a3b60993a729f13fa05\",\"license\":\"MIT\"},\"contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\nabstract contract Pausable is Context {\\n   \\n    event Paused(address account);\\n\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\",\"keccak256\":\"0x08cf354562151af5a3e5123eddd38a3107f5d89171985605961ae5d04030897d\",\"license\":\"UNLICENSED\"},\"contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0x96bbb18a9ad055c99680e2e319d5d51832a31902cf52b39c95c6bf96ccaac4a2\",\"license\":\"UNLICENSED\"},\"contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\",\"keccak256\":\"0xf478e09d9aeca844b7a8948228d1ba94981a010da9716e643c6e53289f60d7ac\",\"license\":\"UNLICENSED\"},\"contracts/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\",\"keccak256\":\"0x19169536542ce1bae6b58091cbafe5fb15653b37daf502b6b09c6b24750b1c80\",\"license\":\"MIT\"},\"contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"./StorageSlot.sol\\\";\\n\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n * Strings of arbitrary length can be optimized if they are short enough by\\n * the addition of a storage variable used as fallback.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    error StringTooLong(string str);\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = length(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function length(ShortString sstr) internal pure returns (uint256) {\\n        return uint256(ShortString.unwrap(sstr)) & 0xFF;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (length(value) > 0) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n}\",\"keccak256\":\"0x1aa647d750f89ac910a6b08b63381c935f27bcf7e4ac53e23ded8f6be829675f\",\"license\":\"UNLICENSED\"},\"contracts/utils/StorageSlot.sol\":{\"content\":\"\\n\\n// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\",\"keccak256\":\"0x867acd90e895d2be723bfce358a242da44ddfc01e38c505bd2ca9d43b23fdbd1\",\"license\":\"UNLICENSED\"},\"contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\",\"keccak256\":\"0x9d23bcb9f5207ad37c41ba664df3b991ad3b1020d66992ccfd3fa753ff503795\",\"license\":\"MIT\"},\"contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\",\"keccak256\":\"0xd5b76676ae2bdcdf00d773f283325e31c4a2fc8146aa49c2951215255dbd234e\",\"license\":\"UNLICENSED\"},\"contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../ShortStrings.sol\\\";\\nimport \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _name.toStringWithFallback(_nameFallback),\\n            _version.toStringWithFallback(_versionFallback),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n}\",\"keccak256\":\"0xf9385368e86f7537e31939809b68c4b77a5f701ea299213945627770df9503ea\",\"license\":\"UNLICENSED\"},\"contracts/utils/math/Math.sol\":{\"content\":\"\\n\\n// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.17;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\",\"keccak256\":\"0xa6198448964b5c5ce657f8deb162f38dd073cf776c71641b437b81943863d297\",\"license\":\"MIT\"},\"contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\n\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\",\"keccak256\":\"0x6d076ee01e7ab8cfc4ddeb27af859dd0cdfa615cd8bcb897a80c64438ff43b92\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "storageLayout": {
    "storage": [
      {
        "astId": 6328,
        "contract": "contracts/Governor_Token.sol:Governor_Token",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 17,
        "contract": "contracts/Governor_Token.sol:Governor_Token",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 23,
        "contract": "contracts/Governor_Token.sol:Governor_Token",
        "label": "_allowances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 25,
        "contract": "contracts/Governor_Token.sol:Governor_Token",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 27,
        "contract": "contracts/Governor_Token.sol:Governor_Token",
        "label": "_name",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 29,
        "contract": "contracts/Governor_Token.sol:Governor_Token",
        "label": "_symbol",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 9918,
        "contract": "contracts/Governor_Token.sol:Governor_Token",
        "label": "_nameFallback",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 9920,
        "contract": "contracts/Governor_Token.sol:Governor_Token",
        "label": "_versionFallback",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 668,
        "contract": "contracts/Governor_Token.sol:Governor_Token",
        "label": "_nonces",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(Counter)8732_storage)"
      },
      {
        "astId": 676,
        "contract": "contracts/Governor_Token.sol:Governor_Token",
        "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
        "offset": 0,
        "slot": "9",
        "type": "t_bytes32"
      },
      {
        "astId": 8973,
        "contract": "contracts/Governor_Token.sol:Governor_Token",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 842,
        "contract": "contracts/Governor_Token.sol:Governor_Token",
        "label": "_delegates",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 848,
        "contract": "contracts/Governor_Token.sol:Governor_Token",
        "label": "_checkpoints",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)833_storage)dyn_storage)"
      },
      {
        "astId": 852,
        "contract": "contracts/Governor_Token.sol:Governor_Token",
        "label": "_totalSupplyCheckpoints",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_struct(Checkpoint)833_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Checkpoint)833_storage)dyn_storage": {
        "base": "t_struct(Checkpoint)833_storage",
        "encoding": "dynamic_array",
        "label": "struct ERC20Votes.Checkpoint[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_struct(Checkpoint)833_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ERC20Votes.Checkpoint[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Checkpoint)833_storage)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Counter)8732_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Counters.Counter)",
        "numberOfBytes": "32",
        "value": "t_struct(Counter)8732_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Checkpoint)833_storage": {
        "encoding": "inplace",
        "label": "struct ERC20Votes.Checkpoint",
        "members": [
          {
            "astId": 830,
            "contract": "contracts/Governor_Token.sol:Governor_Token",
            "label": "fromBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 832,
            "contract": "contracts/Governor_Token.sol:Governor_Token",
            "label": "votes",
            "offset": 4,
            "slot": "0",
            "type": "t_uint224"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Counter)8732_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 8731,
            "contract": "contracts/Governor_Token.sol:Governor_Token",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"contracts/ERC20/ERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../security/Pausable.sol\\\";\\n\\ncontract ERC20 is Context, IERC20, IERC20Metadata, Pausable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {\\n         require(!paused(), \\\"ERC20Pausable: token transfer while paused\\\");\\n    }\\n\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\"\n    },\n    \"contracts/ERC20/extensions/ERC20Permit.sol\": {\n      \"content\": \"\\n// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\nimport \\\"./IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../utils/cryptography/EIP712.sol\\\";\\nimport \\\"../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /**\\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\\n     * to reserve a slot.\\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\"\n    },\n    \"contracts/ERC20/extensions/ERC20Votes.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\n\\nimport './ERC20Permit.sol';\\nimport \\\"../../interfaces/IERC5805.sol\\\";\\nimport \\\"../../utils/math/Math.sol\\\";\\nimport \\\"../../utils/math/SafeCast.sol\\\";\\nimport \\\"../../utils/cryptography/ECDSA.sol\\\";\\n\\n\\nabstract contract ERC20Votes is ERC20Permit, IERC5805 {\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint224 votes;\\n    }\\n\\n    bytes32 private constant _DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    mapping(address => address) private _delegates;\\n    mapping(address => Checkpoint[]) private _checkpoints;\\n    Checkpoint[] private _totalSupplyCheckpoints;\\n\\n    /**\\n     * @dev Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting).\\n     */\\n    function clock() public view virtual override returns (uint48) {\\n        return SafeCast.toUint48(block.number);\\n    }\\n\\n    /**\\n     * @dev Description of the clock\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function CLOCK_MODE() public view virtual override returns (string memory) {\\n        // Check that the clock was not modified\\n        require(clock() == block.number);\\n        return \\\"mode=blocknumber&from=default\\\";\\n    }\\n\\n    /**\\n     * @dev Get the `pos`-th checkpoint for `account`.\\n     */\\n    function checkpoints(address account, uint32 pos) public view virtual returns (Checkpoint memory) {\\n        return _checkpoints[account][pos];\\n    }\\n\\n    /**\\n     * @dev Get number of checkpoints for `account`.\\n     */\\n    function numCheckpoints(address account) public view virtual returns (uint32) {\\n        return SafeCast.toUint32(_checkpoints[account].length);\\n    }\\n\\n    /**\\n     * @dev Get the address `account` is currently delegating to.\\n     */\\n    function delegates(address account) public view virtual override returns (address) {\\n        return _delegates[account];\\n    }\\n\\n    /**\\n     * @dev Gets the current votes balance for `account`\\n     */\\n    function getVotes(address account) public view virtual override returns (uint256) {\\n        uint256 pos = _checkpoints[account].length;\\n        unchecked {\\n            return pos == 0 ? 0 : _checkpoints[account][pos - 1].votes;\\n        }\\n    }\\n\\n    /**\\n     * @dev Retrieve the number of votes for `account` at the end of `timepoint`.\\n     *\\n     * Requirements:\\n     *\\n     * - `timepoint` must be in the past\\n     */\\n    function getPastVotes(address account, uint256 timepoint) public view virtual override returns (uint256) {\\n        require(timepoint < clock(), \\\"ERC20Votes: future lookup\\\");\\n        return _checkpointsLookup(_checkpoints[account], timepoint);\\n    }\\n\\n    /**\\n     * @dev Retrieve the `totalSupply` at the end of `timepoint`. Note, this value is the sum of all balances.\\n     * It is NOT the sum of all the delegated votes!\\n     *\\n     * Requirements:\\n     *\\n     * - `timepoint` must be in the past\\n     */\\n    function getPastTotalSupply(uint256 timepoint) public view virtual override returns (uint256) {\\n        require(timepoint < clock(), \\\"ERC20Votes: future lookup\\\");\\n        return _checkpointsLookup(_totalSupplyCheckpoints, timepoint);\\n    }\\n\\n    /**\\n     * @dev Lookup a value in a list of (sorted) checkpoints.\\n     */\\n    function _checkpointsLookup(Checkpoint[] storage ckpts, uint256 timepoint) private view returns (uint256) {\\n        // We run a binary search to look for the earliest checkpoint taken after `timepoint`.\\n        //\\n        // Initially we check if the block is recent to narrow the search range.\\n        // During the loop, the index of the wanted checkpoint remains in the range [low-1, high).\\n        // With each iteration, either `low` or `high` is moved towards the middle of the range to maintain the invariant.\\n        // - If the middle checkpoint is after `timepoint`, we look in [low, mid)\\n        // - If the middle checkpoint is before or equal to `timepoint`, we look in [mid+1, high)\\n        // Once we reach a single value (when low == high), we've found the right checkpoint at the index high-1, if not\\n        // out of bounds (in which case we're looking too far in the past and the result is 0).\\n        // Note that if the latest checkpoint available is exactly for `timepoint`, we end up with an index that is\\n        // past the end of the array, so we technically don't find a checkpoint after `timepoint`, but it works out\\n        // the same.\\n        uint256 length = ckpts.length;\\n\\n        uint256 low = 0;\\n        uint256 high = length;\\n\\n        if (length > 5) {\\n            uint256 mid = length - Math.sqrt(length);\\n            if (_unsafeAccess(ckpts, mid).fromBlock > timepoint) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(ckpts, mid).fromBlock > timepoint) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        unchecked {\\n            return high == 0 ? 0 : _unsafeAccess(ckpts, high - 1).votes;\\n        }\\n    }\\n\\n    /**\\n     * @dev Delegate votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) public virtual override {\\n        _delegate(_msgSender(), delegatee);\\n    }\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= expiry, \\\"ERC20Votes: signature expired\\\");\\n        address signer = ECDSA.recover(\\n            _hashTypedDataV4(keccak256(abi.encode(_DELEGATION_TYPEHASH, delegatee, nonce, expiry))),\\n            v,\\n            r,\\n            s\\n        );\\n        require(nonce == _useNonce(signer), \\\"ERC20Votes: invalid nonce\\\");\\n        _delegate(signer, delegatee);\\n    }\\n\\n    /**\\n     * @dev Maximum token supply. Defaults to `type(uint224).max` (2^224^ - 1).\\n     */\\n    function _maxSupply() internal view virtual returns (uint224) {\\n        return type(uint224).max;\\n    }\\n\\n    /**\\n     * @dev Snapshots the totalSupply after it has been increased.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual override {\\n        super._mint(account, amount);\\n        require(totalSupply() <= _maxSupply(), \\\"ERC20Votes: total supply risks overflowing votes\\\");\\n\\n        _writeCheckpoint(_totalSupplyCheckpoints, _add, amount);\\n    }\\n\\n    /**\\n     * @dev Snapshots the totalSupply after it has been decreased.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual override {\\n        super._burn(account, amount);\\n\\n        _writeCheckpoint(_totalSupplyCheckpoints, _subtract, amount);\\n    }\\n\\n    /**\\n     * @dev Move voting power when tokens are transferred.\\n     *\\n     * Emits a {IVotes-DelegateVotesChanged} event.\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\n        super._afterTokenTransfer(from, to, amount);\\n\\n        _moveVotingPower(delegates(from), delegates(to), amount);\\n    }\\n\\n    /**\\n     * @dev Change delegation for `delegator` to `delegatee`.\\n     *\\n     * Emits events {IVotes-DelegateChanged} and {IVotes-DelegateVotesChanged}.\\n     */\\n    function _delegate(address delegator, address delegatee) internal virtual {\\n        address currentDelegate = delegates(delegator);\\n        uint256 delegatorBalance = balanceOf(delegator);\\n        _delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveVotingPower(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _moveVotingPower(address src, address dst, uint256 amount) private {\\n        if (src != dst && amount > 0) {\\n            if (src != address(0)) {\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[src], _subtract, amount);\\n                emit DelegateVotesChanged(src, oldWeight, newWeight);\\n            }\\n\\n            if (dst != address(0)) {\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[dst], _add, amount);\\n                emit DelegateVotesChanged(dst, oldWeight, newWeight);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        Checkpoint[] storage ckpts,\\n        function(uint256, uint256) view returns (uint256) op,\\n        uint256 delta\\n    ) private returns (uint256 oldWeight, uint256 newWeight) {\\n        uint256 pos = ckpts.length;\\n\\n        unchecked {\\n            Checkpoint memory oldCkpt = pos == 0 ? Checkpoint(0, 0) : _unsafeAccess(ckpts, pos - 1);\\n\\n            oldWeight = oldCkpt.votes;\\n            newWeight = op(oldWeight, delta);\\n\\n            if (pos > 0 && oldCkpt.fromBlock == clock()) {\\n                _unsafeAccess(ckpts, pos - 1).votes = SafeCast.toUint224(newWeight);\\n            } else {\\n                ckpts.push(Checkpoint({fromBlock: SafeCast.toUint32(clock()), votes: SafeCast.toUint224(newWeight)}));\\n            }\\n        }\\n    }\\n\\n    function _add(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    function _subtract(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(Checkpoint[] storage ckpts, uint256 pos) private pure returns (Checkpoint storage result) {\\n        assembly {\\n            mstore(0, ckpts.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n}\"\n    },\n    \"contracts/ERC20/extensions/IERC20Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\ninterface IERC20Metadata is IERC20 {\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n    \\n}\"\n    },\n    \"contracts/ERC20/extensions/IERC20Permit.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\"\n    },\n    \"contracts/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\ninterface IERC20 {\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\"\n    },\n    \"contracts/ERC4337/AcccountAbstraction.sol\": {\n      \"content\": \"\"\n    },\n    \"contracts/governance/extensions/GovernorCountingSimple.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (governance/extensions/GovernorCountingSimple.sol)\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../Governor.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} for simple, 3 options, vote counting.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract GovernorCountingSimple is Governor {\\n    /**\\n     * @dev Supported vote types. Matches Governor Bravo ordering.\\n     */\\n    enum VoteType {\\n        Against,\\n        For,\\n        Abstain\\n    }\\n\\n    struct ProposalVote {\\n        uint256 againstVotes;\\n        uint256 forVotes;\\n        uint256 abstainVotes;\\n        mapping(address => bool) hasVoted;\\n    }\\n\\n    mapping(uint256 => ProposalVote) private _proposalVotes;\\n\\n    /**\\n     * @dev See {IGovernor-COUNTING_MODE}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function COUNTING_MODE() public pure virtual override returns (string memory) {\\n        return \\\"support=bravo&quorum=for,abstain\\\";\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-hasVoted}.\\n     */\\n    function hasVoted(uint256 proposalId, address account) public view virtual override returns (bool) {\\n        return _proposalVotes[proposalId].hasVoted[account];\\n    }\\n\\n    /**\\n     * @dev Accessor to the internal vote counts.\\n     */\\n    function proposalVotes(\\n        uint256 proposalId\\n    ) public view virtual returns (uint256 againstVotes, uint256 forVotes, uint256 abstainVotes) {\\n        ProposalVote storage proposalVote = _proposalVotes[proposalId];\\n        return (proposalVote.againstVotes, proposalVote.forVotes, proposalVote.abstainVotes);\\n    }\\n\\n    /**\\n     * @dev See {Governor-_quorumReached}.\\n     */\\n    function _quorumReached(uint256 proposalId) internal view virtual override returns (bool) {\\n        ProposalVote storage proposalVote = _proposalVotes[proposalId];\\n\\n        return quorum(proposalSnapshot(proposalId)) <= proposalVote.forVotes + proposalVote.abstainVotes;\\n    }\\n\\n    /**\\n     * @dev See {Governor-_voteSucceeded}. In this module, the forVotes must be strictly over the againstVotes.\\n     */\\n    function _voteSucceeded(uint256 proposalId) internal view virtual override returns (bool) {\\n        ProposalVote storage proposalVote = _proposalVotes[proposalId];\\n\\n        return proposalVote.forVotes > proposalVote.againstVotes;\\n    }\\n\\n    /**\\n     * @dev See {Governor-_countVote}. In this module, the support follows the `VoteType` enum (from Governor Bravo).\\n     */\\n    function _countVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        uint256 weight,\\n        bytes memory // params\\n    ) internal virtual override {\\n        ProposalVote storage proposalVote = _proposalVotes[proposalId];\\n\\n        require(!proposalVote.hasVoted[account], \\\"GovernorVotingSimple: vote already cast\\\");\\n        proposalVote.hasVoted[account] = true;\\n\\n        if (support == uint8(VoteType.Against)) {\\n            proposalVote.againstVotes += weight;\\n        } else if (support == uint8(VoteType.For)) {\\n            proposalVote.forVotes += weight;\\n        } else if (support == uint8(VoteType.Abstain)) {\\n            proposalVote.abstainVotes += weight;\\n        } else {\\n            revert(\\\"GovernorVotingSimple: invalid value for enum VoteType\\\");\\n        }\\n    }\\n}\"\n    },\n    \"contracts/governance/extensions/GovernorSettings.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (governance/extensions/GovernorSettings.sol)\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../Governor.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} for settings updatable through governance.\\n *\\n * _Available since v4.4._\\n */\\nabstract contract GovernorSettings is Governor {\\n    uint256 private _votingDelay;\\n    uint256 private _votingPeriod;\\n    uint256 private _proposalThreshold;\\n\\n    event VotingDelaySet(uint256 oldVotingDelay, uint256 newVotingDelay);\\n    event VotingPeriodSet(uint256 oldVotingPeriod, uint256 newVotingPeriod);\\n    event ProposalThresholdSet(uint256 oldProposalThreshold, uint256 newProposalThreshold);\\n\\n    /**\\n     * @dev Initialize the governance parameters.\\n     */\\n    constructor(\\n        uint256 initialVotingDelay,\\n        uint256 initialVotingPeriod,\\n        uint256 initialProposalThreshold\\n    ) {\\n        _setVotingDelay(initialVotingDelay);\\n        _setVotingPeriod(initialVotingPeriod);\\n        _setProposalThreshold(initialProposalThreshold);\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-votingDelay}.\\n     */\\n    function votingDelay() public view virtual override returns (uint256) {\\n        return _votingDelay;\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-votingPeriod}.\\n     */\\n    function votingPeriod() public view virtual override returns (uint256) {\\n        return _votingPeriod;\\n    }\\n\\n    /**\\n     * @dev See {Governor-proposalThreshold}.\\n     */\\n    function proposalThreshold() public view virtual override returns (uint256) {\\n        return _proposalThreshold;\\n    }\\n\\n    /**\\n     * @dev Update the voting delay. This operation can only be performed through a governance proposal.\\n     *\\n     * Emits a {VotingDelaySet} event.\\n     */\\n    function setVotingDelay(uint256 newVotingDelay) public virtual onlyGovernance {\\n        _setVotingDelay(newVotingDelay);\\n    }\\n\\n    /**\\n     * @dev Update the voting period. This operation can only be performed through a governance proposal.\\n     *\\n     * Emits a {VotingPeriodSet} event.\\n     */\\n    function setVotingPeriod(uint256 newVotingPeriod) public virtual onlyGovernance {\\n        _setVotingPeriod(newVotingPeriod);\\n    }\\n\\n    /**\\n     * @dev Update the proposal threshold. This operation can only be performed through a governance proposal.\\n     *\\n     * Emits a {ProposalThresholdSet} event.\\n     */\\n    function setProposalThreshold(uint256 newProposalThreshold) public virtual onlyGovernance {\\n        _setProposalThreshold(newProposalThreshold);\\n    }\\n\\n    /**\\n     * @dev Internal setter for the voting delay.\\n     *\\n     * Emits a {VotingDelaySet} event.\\n     */\\n    function _setVotingDelay(uint256 newVotingDelay) internal virtual {\\n        emit VotingDelaySet(_votingDelay, newVotingDelay);\\n        _votingDelay = newVotingDelay;\\n    }\\n\\n    /**\\n     * @dev Internal setter for the voting period.\\n     *\\n     * Emits a {VotingPeriodSet} event.\\n     */\\n    function _setVotingPeriod(uint256 newVotingPeriod) internal virtual {\\n        // voting period must be at least one block long\\n        require(newVotingPeriod > 0, \\\"GovernorSettings: voting period too low\\\");\\n        emit VotingPeriodSet(_votingPeriod, newVotingPeriod);\\n        _votingPeriod = newVotingPeriod;\\n    }\\n\\n    /**\\n     * @dev Internal setter for the proposal threshold.\\n     *\\n     * Emits a {ProposalThresholdSet} event.\\n     */\\n    function _setProposalThreshold(uint256 newProposalThreshold) internal virtual {\\n        emit ProposalThresholdSet(_proposalThreshold, newProposalThreshold);\\n        _proposalThreshold = newProposalThreshold;\\n    }\\n}\"\n    },\n    \"contracts/governance/extensions/GovernorTimelockControl.sol\": {\n      \"content\": \"\\n\\n// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (governance/extensions/GovernorTimelockControl.sol)\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./IGovernorTimelock.sol\\\";\\nimport \\\"../Governor.sol\\\";\\nimport \\\"../TimelockController.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} that binds the execution process to an instance of {TimelockController}. This adds a\\n * delay, enforced by the {TimelockController} to all successful proposal (in addition to the voting duration). The\\n * {Governor} needs the proposer (and ideally the executor) roles for the {Governor} to work properly.\\n *\\n * Using this model means the proposal will be operated by the {TimelockController} and not by the {Governor}. Thus,\\n * the assets and permissions must be attached to the {TimelockController}. Any asset sent to the {Governor} will be\\n * inaccessible.\\n *\\n * WARNING: Setting up the TimelockController to have additional proposers besides the governor is very risky, as it\\n * grants them powers that they must be trusted or known not to use: 1) {onlyGovernance} functions like {relay} are\\n * available to them through the timelock, and 2) approved governance proposals can be blocked by them, effectively\\n * executing a Denial of Service attack. This risk will be mitigated in a future release.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract GovernorTimelockControl is IGovernorTimelock, Governor {\\n    TimelockController private _timelock;\\n    mapping(uint256 => bytes32) private _timelockIds;\\n\\n    /**\\n     * @dev Emitted when the timelock controller used for proposal execution is modified.\\n     */\\n    event TimelockChange(address oldTimelock, address newTimelock);\\n\\n    /**\\n     * @dev Set the timelock.\\n     */\\n    constructor(TimelockController timelockAddress) {\\n        _updateTimelock(timelockAddress);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, Governor) returns (bool) {\\n        return interfaceId == type(IGovernorTimelock).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Overridden version of the {Governor-state} function with added support for the `Queued` status.\\n     */\\n    function state(uint256 proposalId) public view virtual override(IGovernor, Governor) returns (ProposalState) {\\n        ProposalState status = super.state(proposalId);\\n\\n        if (status != ProposalState.Succeeded) {\\n            return status;\\n        }\\n\\n        // core tracks execution, so we just have to check if successful proposal have been queued.\\n        bytes32 queueid = _timelockIds[proposalId];\\n        if (queueid == bytes32(0)) {\\n            return status;\\n        } else if (_timelock.isOperationDone(queueid)) {\\n            return ProposalState.Executed;\\n        } else if (_timelock.isOperationPending(queueid)) {\\n            return ProposalState.Queued;\\n        } else {\\n            return ProposalState.Canceled;\\n        }\\n    }\\n\\n    /**\\n     * @dev Public accessor to check the address of the timelock\\n     */\\n    function timelock() public view virtual override returns (address) {\\n        return address(_timelock);\\n    }\\n\\n    /**\\n     * @dev Public accessor to check the eta of a queued proposal\\n     */\\n    function proposalEta(uint256 proposalId) public view virtual override returns (uint256) {\\n        uint256 eta = _timelock.getTimestamp(_timelockIds[proposalId]);\\n        return eta == 1 ? 0 : eta; // _DONE_TIMESTAMP (1) should be replaced with a 0 value\\n    }\\n\\n    /**\\n     * @dev Function to queue a proposal to the timelock.\\n     */\\n    function queue(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public virtual override returns (uint256) {\\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\\n\\n        require(state(proposalId) == ProposalState.Succeeded, \\\"Governor: proposal not successful\\\");\\n\\n        uint256 delay = _timelock.getMinDelay();\\n        _timelockIds[proposalId] = _timelock.hashOperationBatch(targets, values, calldatas, 0, descriptionHash);\\n        _timelock.scheduleBatch(targets, values, calldatas, 0, descriptionHash, delay);\\n\\n        emit ProposalQueued(proposalId, block.timestamp + delay);\\n\\n        return proposalId;\\n    }\\n\\n    /**\\n     * @dev Overridden execute function that run the already queued proposal through the timelock.\\n     */\\n    function _execute(\\n        uint256, /* proposalId */\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) internal virtual override {\\n        _timelock.executeBatch{value: msg.value}(targets, values, calldatas, 0, descriptionHash);\\n    }\\n\\n    /**\\n     * @dev Overridden version of the {Governor-_cancel} function to cancel the timelocked proposal if it as already\\n     * been queued.\\n     */\\n    // This function can reenter through the external call to the timelock, but we assume the timelock is trusted and\\n    // well behaved (according to TimelockController) and this will not happen.\\n    // slither-disable-next-line reentrancy-no-eth\\n    function _cancel(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) internal virtual override returns (uint256) {\\n        uint256 proposalId = super._cancel(targets, values, calldatas, descriptionHash);\\n\\n        if (_timelockIds[proposalId] != 0) {\\n            _timelock.cancel(_timelockIds[proposalId]);\\n            delete _timelockIds[proposalId];\\n        }\\n\\n        return proposalId;\\n    }\\n\\n    /**\\n     * @dev Address through which the governor executes action. In this case, the timelock.\\n     */\\n    function _executor() internal view virtual override returns (address) {\\n        return address(_timelock);\\n    }\\n\\n    /**\\n     * @dev Public endpoint to update the underlying timelock instance. Restricted to the timelock itself, so updates\\n     * must be proposed, scheduled, and executed through governance proposals.\\n     *\\n     * CAUTION: It is not recommended to change the timelock while there are other queued governance proposals.\\n     */\\n    function updateTimelock(TimelockController newTimelock) external virtual onlyGovernance {\\n        _updateTimelock(newTimelock);\\n    }\\n\\n    function _updateTimelock(TimelockController newTimelock) private {\\n        emit TimelockChange(address(_timelock), address(newTimelock));\\n        _timelock = newTimelock;\\n    }\\n}\"\n    },\n    \"contracts/governance/extensions/GovernorVotes.sol\": {\n      \"content\": \"\\n\\n// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (governance/extensions/GovernorVotes.sol)\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../Governor.sol\\\";\\nimport \\\"../utils/IVotes.sol\\\";\\nimport '../../interfaces/IERC6372.sol';\\nimport '../../interfaces/IERC5805.sol';\\n\\nabstract contract GovernorVotes is Governor {\\n    IERC5805 public immutable token;\\n\\n    constructor(IVotes tokenAddress) {\\n        token = IERC5805(address(tokenAddress));\\n    }\\n\\n    /**\\n     * @dev Clock (as specified in EIP-6372) is set to match the token's clock. Fallback to block numbers if the token\\n     * does not implement EIP-6372.\\n     */\\n    function clock() public view virtual override returns (uint48) {\\n        try token.clock() returns (uint48 timepoint) {\\n            return timepoint;\\n        } catch {\\n            return SafeCast.toUint48(block.number);\\n        }\\n    }\\n\\n    /**\\n     * @dev Machine-readable description of the clock as specified in EIP-6372.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function CLOCK_MODE() public view virtual override returns (string memory) {\\n        try token.CLOCK_MODE() returns (string memory clockmode) {\\n            return clockmode;\\n        } catch {\\n            return \\\"mode=blocknumber&from=default\\\";\\n        }\\n    }\\n\\n    /**\\n     * Read the voting weight from the token's built in snapshot mechanism (see {Governor-_getVotes}).\\n     */\\n    function _getVotes(\\n        address account,\\n        uint256 timepoint,\\n        bytes memory /*params*/\\n    ) internal view virtual override returns (uint256) {\\n        return token.getPastVotes(account, timepoint);\\n    }\\n}\"\n    },\n    \"contracts/governance/extensions/GovernorVotesQuorumFraction.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (governance/extensions/GovernorVotesQuorumFraction.sol)\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./GovernorVotes.sol\\\";\\nimport \\\"../../utils/Checkpoints.sol\\\";\\nimport \\\"../../utils/math/SafeCast.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} for voting weight extraction from an {ERC20Votes} token and a quorum expressed as a\\n * fraction of the total supply.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract GovernorVotesQuorumFraction is GovernorVotes {\\n    using SafeCast for *;\\n    using Checkpoints for Checkpoints.Trace224;\\n\\n    uint256 private _quorumNumerator; // DEPRECATED in favor of _quorumNumeratorHistory\\n\\n    /// @custom:oz-retyped-from Checkpoints.History\\n    Checkpoints.Trace224 private _quorumNumeratorHistory;\\n\\n    event QuorumNumeratorUpdated(uint256 oldQuorumNumerator, uint256 newQuorumNumerator);\\n\\n    /**\\n     * @dev Initialize quorum as a fraction of the token's total supply.\\n     *\\n     * The fraction is specified as `numerator / denominator`. By default the denominator is 100, so quorum is\\n     * specified as a percent: a numerator of 10 corresponds to quorum being 10% of total supply. The denominator can be\\n     * customized by overriding {quorumDenominator}.\\n     */\\n    constructor(uint256 quorumNumeratorValue) {\\n        _updateQuorumNumerator(quorumNumeratorValue);\\n    }\\n\\n    /**\\n     * @dev Returns the current quorum numerator. See {quorumDenominator}.\\n     */\\n    function quorumNumerator() public view virtual returns (uint256) {\\n        return _quorumNumeratorHistory._checkpoints.length == 0 ? _quorumNumerator : _quorumNumeratorHistory.latest();\\n    }\\n\\n    /**\\n     * @dev Returns the quorum numerator at a specific timepoint. See {quorumDenominator}.\\n     */\\n    function quorumNumerator(uint256 timepoint) public view virtual returns (uint256) {\\n        // If history is empty, fallback to old storage\\n        uint256 length = _quorumNumeratorHistory._checkpoints.length;\\n        if (length == 0) {\\n            return _quorumNumerator;\\n        }\\n\\n        // Optimistic search, check the latest checkpoint\\n        Checkpoints.Checkpoint224 memory latest = _quorumNumeratorHistory._checkpoints[length - 1];\\n        if (latest._key <= timepoint) {\\n            return latest._value;\\n        }\\n\\n        // Otherwise, do the binary search\\n        return _quorumNumeratorHistory.upperLookupRecent(timepoint.toUint32());\\n    }\\n\\n    /**\\n     * @dev Returns the quorum denominator. Defaults to 100, but may be overridden.\\n     */\\n    function quorumDenominator() public view virtual returns (uint256) {\\n        return 100;\\n    }\\n\\n    /**\\n     * @dev Returns the quorum for a timepoint, in terms of number of votes: `supply * numerator / denominator`.\\n     */\\n    function quorum(uint256 timepoint) public view virtual override returns (uint256) {\\n        return (token.getPastTotalSupply(timepoint) * quorumNumerator(timepoint)) / quorumDenominator();\\n    }\\n\\n    /**\\n     * @dev Changes the quorum numerator.\\n     *\\n     * Emits a {QuorumNumeratorUpdated} event.\\n     *\\n     * Requirements:\\n     *\\n     * - Must be called through a governance proposal.\\n     * - New numerator must be smaller or equal to the denominator.\\n     */\\n    function updateQuorumNumerator(uint256 newQuorumNumerator) external virtual onlyGovernance {\\n        _updateQuorumNumerator(newQuorumNumerator);\\n    }\\n\\n    /**\\n     * @dev Changes the quorum numerator.\\n     *\\n     * Emits a {QuorumNumeratorUpdated} event.\\n     *\\n     * Requirements:\\n     *\\n     * - New numerator must be smaller or equal to the denominator.\\n     */\\n    function _updateQuorumNumerator(uint256 newQuorumNumerator) internal virtual {\\n        require(\\n            newQuorumNumerator <= quorumDenominator(),\\n            \\\"GovernorVotesQuorumFraction: quorumNumerator over quorumDenominator\\\"\\n        );\\n\\n        uint256 oldQuorumNumerator = quorumNumerator();\\n\\n        // Make sure we keep track of the original numerator in contracts upgraded from a version without checkpoints.\\n        if (oldQuorumNumerator != 0 && _quorumNumeratorHistory._checkpoints.length == 0) {\\n            _quorumNumeratorHistory._checkpoints.push(\\n                Checkpoints.Checkpoint224({_key: 0, _value: oldQuorumNumerator.toUint224()})\\n            );\\n        }\\n\\n        // Set new quorum for future proposals\\n        _quorumNumeratorHistory.push(clock().toUint32(), newQuorumNumerator.toUint224());\\n\\n        emit QuorumNumeratorUpdated(oldQuorumNumerator, newQuorumNumerator);\\n    }\\n}\"\n    },\n    \"contracts/governance/extensions/IGovernorTimelock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (governance/extensions/IGovernorTimelock.sol)\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../IGovernor.sol\\\";\\n\\n/**\\n * @dev Extension of the {IGovernor} for timelock supporting modules.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract IGovernorTimelock is IGovernor {\\n    event ProposalQueued(uint256 proposalId, uint256 eta);\\n\\n    function timelock() public view virtual returns (address);\\n\\n    function proposalEta(uint256 proposalId) public view virtual returns (uint256);\\n\\n    function queue(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public virtual returns (uint256 proposalId);\\n}\"\n    },\n    \"contracts/governance/Governor.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\n\\nimport \\\"../utils/cryptography/EIP712.sol\\\";\\nimport \\\"../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../utils/math/SafeCast.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\nimport \\\"../utils/structs/DoubleEndedQueue.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"./IGovernor.sol\\\";\\n\\n\\nabstract contract Governor  is Context, ERC165, IGovernor, EIP712 {\\n    using DoubleEndedQueue for DoubleEndedQueue.Bytes32Deque;\\n    using SafeCast for uint256;\\n\\n    bytes32 public constant BALLOT_TYPEHASH = keccak256(\\\"Ballot(uint256 proposalId,uint8 support)\\\");\\n    bytes32 public constant EXTENDED_BALLOT_TYPEHASH = keccak256(\\\"ExtendedBallot(uint256 proposalId,uint8 support, string reason, bytes params)\\\");\\n\\n    struct ProposalCore {\\n        uint64 voteStart;\\n        address proposer;\\n        bytes4 __gap_unused0;\\n        uint64 voteEnd;\\n        bytes24 __gap_unused1;\\n        bool executed;\\n        bool canceled;\\n    }\\n\\n    string private _name;\\n\\n    mapping(uint256 => ProposalCore) private _proposals;\\n    DoubleEndedQueue.Bytes32Deque private _governanceCall;\\n\\n    modifier onlyGovernance() {\\n        require(_msgSender() == _executor(), \\\"Governor: onlyGovernance\\\");\\n        if(_executor() != address(this)) {\\n            bytes32 msgDataHash = keccak256(_msgData());\\n            while(_governanceCall.popFront() != msgDataHash) {}\\n        }\\n        _;\\n    }\\n\\n    constructor(string memory name_) EIP712(name_, version()) {\\n        _name = name_;\\n    }\\n\\n    receive() external payable virtual {\\n        require(_executor() == address(this));\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n       return\\n            interfaceId ==\\n            (type(IGovernor).interfaceId ^\\n                type(IERC6372).interfaceId ^\\n                this.cancel.selector ^\\n                this.castVoteWithReasonAndParams.selector ^\\n                this.getVotesWithParams.selector) ||\\n            interfaceId == (type(IGovernor).interfaceId ^ type(IERC6372).interfaceId ^ this.cancel.selector) ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function version() public view virtual override returns (string memory) {\\n        return \\\"1\\\";\\n    }\\n\\n    function hashProposal(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public pure virtual override returns (uint256) {\\n        return uint256(keccak256(abi.encode(targets, values, calldatas, descriptionHash)));\\n    }\\n\\n\\n    function state(uint256 proposalId) public view virtual override returns (ProposalState) {\\n        ProposalCore storage proposal = _proposals[proposalId];\\n\\n        if(proposal.executed) {\\n            return ProposalState.Executed;\\n        }\\n\\n        if(proposal.canceled) {\\n            return ProposalState.Canceled;\\n        }\\n\\n        uint256 snapshot = proposalSnapshot(proposalId);\\n\\n        if(snapshot == 0) {\\n            revert(\\\"Governor: unknown proposal id\\\");\\n        }\\n\\n        uint256 currentTimepoint = clock();\\n\\n        if(snapshot >= currentTimepoint) {\\n            return ProposalState.Pending;\\n        }\\n\\n        uint256 deadline = proposalDeadline(proposalId);\\n\\n        if(deadline >= currentTimepoint) {\\n            return ProposalState.Active;\\n        }\\n\\n        if(_quorumReached(proposalId) && _voteSucceeded(proposalId)) {\\n            return ProposalState.Succeeded;\\n        } else {\\n            return ProposalState.Defeated;\\n        }\\n    } \\n\\n    function proposalThreshold() public view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    function proposalSnapshot(uint256 proposalId) public view virtual override returns (uint256) {\\n        return _proposals[proposalId].voteStart;\\n    }\\n\\n      function proposalDeadline(uint256 proposalId) public view virtual override returns (uint256) {\\n        return _proposals[proposalId].voteEnd;\\n    }\\n\\n    function _quorumReached(uint256 proposalId) internal view virtual returns (bool);\\n\\n      function _voteSucceeded(uint256 proposalId) internal view virtual returns (bool);\\n\\n    function _getVotes(address account,uint256 timepoint, bytes memory params) internal view virtual returns (uint256);\\n\\n    function _countVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 suppport,\\n        uint256 weight,\\n        bytes memory params\\n    ) internal virtual;\\n\\n    function _defaultParams() internal view virtual returns (bytes memory) {\\n        return \\\"\\\";\\n    }\\n\\n    function propose(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) public virtual override returns (uint256) {\\n        address proposer = _msgSender();\\n        uint256 currentTimepoint = clock();\\n\\n        require(\\n            getVotes(proposer, currentTimepoint - 1) >= proposalThreshold(),\\n            \\\"Governor: proposer votes below proposal threshold\\\"\\n        );\\n\\n        uint256 proposalId = hashProposal(targets, values, calldatas, keccak256(bytes(description)));\\n\\n        require(targets.length == values.length, \\\"Governor: invalid proposal length\\\");\\n        require(targets.length == calldatas.length,\\\"Governor: invalid proposal length\\\");\\n        require(targets.length > 0, \\\"Governor: empty proposal\\\");\\n        require(_proposals[proposalId].voteStart == 0, \\\"Governor: proposal already exists\\\");\\n\\n        uint256 snapshot = currentTimepoint + votingDelay();\\n        uint256 deadline = snapshot + votingPeriod();\\n\\n      _proposals[proposalId] = ProposalCore({\\n            proposer: proposer,\\n            voteStart: snapshot.toUint64(),\\n            voteEnd: deadline.toUint64(),\\n            executed: false,\\n            canceled: false,\\n            __gap_unused0: 0,\\n            __gap_unused1: 0\\n        });\\n\\n        emit ProposalCreated(\\n            proposalId,\\n            proposer,\\n            targets,\\n            values,\\n            new string[](targets.length),\\n            calldatas,\\n            snapshot,\\n            deadline,\\n            description\\n        );\\n        return proposalId;\\n    }\\n\\n    function execute(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public payable virtual override returns (uint256) {\\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\\n\\n        ProposalState status = state(proposalId);\\n        require(\\n            status == ProposalState.Succeeded || status == ProposalState.Queued,\\n            \\\"Governor: proposal not successful\\\"\\n        );\\n        _proposals[proposalId].executed = true;\\n\\n        emit ProposalExecuted(proposalId);\\n\\n        _beforeExecute(proposalId, targets, values, calldatas, descriptionHash);\\n        _execute(proposalId, targets, values, calldatas, descriptionHash);\\n        _afterExecute(proposalId, targets, values, calldatas, descriptionHash);\\n\\n        return proposalId;\\n    }\\n\\nfunction cancel(\\n    address[] memory targets,\\n    uint256[] memory values,\\n    bytes[] memory calldatas,\\n    bytes32 descriptionHash\\n) public virtual override returns (uint256) {\\n    uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\\n    require(state(proposalId) == ProposalState.Pending, \\\"Governor: too late to cancel\\\");\\n    require(_msgSender() == _proposals[proposalId].proposer,\\\"Governor: only proposer can cancel\\\");\\n    return _cancel(targets, values, calldatas, descriptionHash);\\n\\n}\\n\\n   function _execute(\\n        uint256 ,\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 \\n    ) internal virtual {\\n        string memory errorMessage = \\\"Governor: call reverted without message\\\";\\n        for (uint256 i = 0; i < targets.length; ++i) {\\n            (bool success, bytes memory returndata) = targets[i].call{value: values[i]}(calldatas[i]);\\n            Address.verifyCallResult(success, returndata, errorMessage);\\n        }\\n    }\\n\\nfunction _beforeExecute(\\n    uint256,\\n    address[] memory targets,\\n    uint256[] memory,\\n    bytes[] memory calldatas,\\n    bytes32\\n) internal virtual {\\n      if (_executor() != address(this)) {\\n            for (uint256 i = 0; i < targets.length; ++i) {\\n                if (targets[i] == address(this)) {\\n                    _governanceCall.pushBack(keccak256(calldatas[i]));\\n                }\\n            }\\n        }\\n}\\n\\n function _afterExecute(\\n        uint256,\\n        address[] memory,\\n        uint256[] memory,\\n        bytes[] memory,\\n        bytes32 \\n    ) internal virtual {\\n        if (_executor() != address(this)) {\\n            if (!_governanceCall.empty()) {\\n                _governanceCall.clear();\\n            }\\n        }\\n    }\\n\\n     function _cancel(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) internal virtual returns (uint256) {\\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\\n\\n        ProposalState status = state(proposalId);\\n\\n        require(\\n            status != ProposalState.Canceled && status != ProposalState.Expired && status != ProposalState.Executed,\\n            \\\"Governor: proposal not active\\\"\\n        );\\n        _proposals[proposalId].canceled = true;\\n\\n        emit ProposalCanceled(proposalId);\\n\\n        return proposalId;\\n    }\\n\\n  function getVotes(address account, uint256 timepoint) public view virtual override returns (uint256) {\\n        return _getVotes(account, timepoint, _defaultParams());\\n    }\\n\\n      function getVotesWithParams(\\n        address account,\\n        uint256 timepoint,\\n        bytes memory params\\n    ) public view virtual override returns (uint256) {\\n        return _getVotes(account, timepoint, params);\\n    }\\n\\n      function castVote(uint256 proposalId, uint8 support) public virtual override returns (uint256) {\\n        address voter = _msgSender();\\n        return _castVote(proposalId, voter, support, \\\"\\\");\\n    }\\n\\n     function castVoteWithReason(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason\\n    ) public virtual override returns (uint256) {\\n        address voter = _msgSender();\\n        return _castVote(proposalId, voter, support, reason);\\n    }\\n\\n\\n\\n      function castVoteWithReasonAndParams(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason,\\n        bytes memory params\\n    ) public virtual override returns (uint256) {\\n        address voter = _msgSender();\\n        return _castVote(proposalId, voter, support, reason, params);\\n    }\\n\\n\\n        function castVoteBySig(\\n        uint256 proposalId,\\n        uint8 support,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override returns (uint256) {\\n        address voter = ECDSA.recover(\\n            _hashTypedDataV4(keccak256(abi.encode(BALLOT_TYPEHASH, proposalId, support))),\\n            v,\\n            r,\\n            s\\n        );\\n        return _castVote(proposalId, voter, support, \\\"\\\");\\n    }\\n\\n\\n        function castVoteWithReasonAndParamsBySig(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason,\\n        bytes memory params,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override returns (uint256) {\\n        address voter = ECDSA.recover(\\n            _hashTypedDataV4(\\n                keccak256(\\n                    abi.encode(\\n                        EXTENDED_BALLOT_TYPEHASH,\\n                        proposalId,\\n                        support,\\n                        keccak256(bytes(reason)),\\n                        keccak256(params)\\n                    )\\n                )\\n            ),\\n            v,\\n            r,\\n            s\\n        );\\n\\n        return _castVote(proposalId, voter, support, reason, params);\\n    }\\n\\n  function _castVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        string memory reason\\n    ) internal virtual returns (uint256) {\\n        return _castVote(proposalId, account, support, reason, _defaultParams());\\n    }\\n\\n    function _castVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        string memory reason,\\n        bytes memory params\\n    ) internal virtual returns (uint256) {\\n        ProposalCore storage proposal = _proposals[proposalId];\\n        require(state(proposalId) == ProposalState.Active, \\\"Governor: vote not currently active\\\");\\n\\n        uint256 weight = _getVotes(account, proposal.voteStart, params);\\n        _countVote(proposalId, account, support, weight, params);\\n\\n        if (params.length == 0) {\\n            emit VoteCast(account, proposalId, support, weight, reason);\\n        } else {\\n            emit VoteCastWithParams(account, proposalId, support, weight, reason, params);\\n        }\\n\\n        return weight;\\n    }\\n\\n\\n function relay(address target, uint256 value, bytes calldata data) external payable virtual onlyGovernance {\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        Address.verifyCallResult(success, returndata, \\\"Governor: relay reverted without message\\\");\\n    }\\n\\n     function _executor() internal view virtual returns (address) {\\n        return address(this);\\n    }\\n    \\n}\"\n    },\n    \"contracts/governance/GovernorSettings.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Governor.sol\\\";\\n\\nabstract contract GovernorSettings is Governor {\\n    uint256 private _votingDelay;\\n    uint256 private _votingPeriod;\\n    uint256 private _proposalThreshold;\\n\\n    event VotingDelaySet(uint256 oldVotingDelay, uint256 newVotingDelay);\\n    event VotingPeriodSet(uint256 oldVotingPeriod, uint256 newVotingPeriod);\\n    event ProposalThresholdSet(uint256 oldProposalThreshold, uint256 newProposalThreshold);\\n\\n    constructor(\\n        uint256 initialVotingDelay,\\n        uint256 initialVotingPeriod,\\n        uint256 initialProposalThreshold\\n    ) {\\n        _setVotingDelay(initialVotingDelay);\\n        _setVotingPeriod(initialVotingPeriod);\\n        _setProposalThreshold(initialProposalThreshold);\\n    }\\n\\n    function votingDelay() public view virtual override returns (uint256) {\\n        return _votingDelay;\\n    }\\n\\n    function votingPeriod() public view virtual override returns (uint256) {\\n        return _votingPeriod;\\n    }\\n\\n    function proposalThreshold() public view virtual override returns (uint256) {\\n        return _proposalThreshold;\\n    }\\n\\n    function setVotingDelay(uint256 newVotingDelay) public virtual onlyGovernance {\\n        _setVotingDelay(newVotingDelay);\\n    }\\n\\n    function setVotingPeriod(uint256 newVotingPeriod) public virtual onlyGovernance {\\n        _setVotingPeriod(newVotingPeriod);\\n    }\\n\\n    function setProposalThreshold(uint256 newProposalThreshold) public virtual onlyGovernance {\\n        _setProposalThreshold(newProposalThreshold);\\n    }\\n\\n    function _setVotingDelay(uint256 newVotingDelay) internal virtual {\\n        emit VotingDelaySet(_votingDelay, newVotingDelay);\\n        _votingDelay = newVotingDelay;\\n    }\\n\\n    function _setVotingPeriod(uint256 newVotingPeriod) internal virtual {\\n        require(newVotingPeriod > 0, \\\"GovernorSettings: voting period too low\\\");\\n        emit VotingPeriodSet(_votingPeriod, newVotingPeriod);\\n        _votingPeriod = newVotingPeriod;\\n    }\\n\\n    function _setProposalThreshold(uint256 newProposalThreshold) internal virtual {\\n        emit ProposalThresholdSet(_proposalThreshold, newProposalThreshold);\\n        _proposalThreshold = newProposalThreshold;\\n    }\\n}\"\n    },\n    \"contracts/governance/IGovernor.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\nimport \\\"../interfaces/IERC6372.sol\\\";\\n\\nabstract contract IGovernor is IERC165, IERC6372 {\\n    enum ProposalState {\\n        Pending,\\n        Active,\\n        Canceled,\\n        Defeated,\\n        Succeeded,\\n        Queued,\\n        Expired,\\n        Executed\\n    }\\n\\n    /**\\n     * @dev Emitted when a proposal is created.\\n     */\\n    event ProposalCreated(\\n        uint256 proposalId,\\n        address proposer,\\n        address[] targets,\\n        uint256[] values,\\n        string[] signatures,\\n        bytes[] calldatas,\\n        uint256 voteStart,\\n        uint256 voteEnd,\\n        string description\\n    );\\n\\n    /**\\n     * @dev Emitted when a proposal is canceled.\\n     */\\n    event ProposalCanceled(uint256 proposalId);\\n\\n    /**\\n     * @dev Emitted when a proposal is executed.\\n     */\\n    event ProposalExecuted(uint256 proposalId);\\n\\n    /**\\n     * @dev Emitted when a vote is cast without params.\\n     *\\n     * Note: `support` values should be seen as buckets. Their interpretation depends on the voting module used.\\n     */\\n    event VoteCast(address indexed voter, uint256 proposalId, uint8 support, uint256 weight, string reason);\\n\\n    /**\\n     * @dev Emitted when a vote is cast with params.\\n     *\\n     * Note: `support` values should be seen as buckets. Their interpretation depends on the voting module used.\\n     * `params` are additional encoded parameters. Their interpepretation also depends on the voting module used.\\n     */\\n    event VoteCastWithParams(\\n        address indexed voter,\\n        uint256 proposalId,\\n        uint8 support,\\n        uint256 weight,\\n        string reason,\\n        bytes params\\n    );\\n\\n    /**\\n     * @notice module:core\\n     * @dev Name of the governor instance (used in building the ERC712 domain separator).\\n     */\\n    function name() public view virtual returns (string memory);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Version of the governor instance (used in building the ERC712 domain separator). Default: \\\"1\\\"\\n     */\\n    function version() public view virtual returns (string memory);\\n\\n    /**\\n     * @notice module:core\\n     * @dev See {IERC6372}\\n     */\\n    function clock() public view virtual override returns (uint48);\\n\\n    /**\\n     * @notice module:core\\n     * @dev See EIP-6372.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function CLOCK_MODE() public view virtual override returns (string memory);\\n\\n    /**\\n     * @notice module:voting\\n     * @dev A description of the possible `support` values for {castVote} and the way these votes are counted, meant to\\n     * be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of\\n     * key-value pairs that each describe one aspect, for example `support=bravo&quorum=for,abstain`.\\n     *\\n     * There are 2 standard keys: `support` and `quorum`.\\n     *\\n     * - `support=bravo` refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in `GovernorBravo`.\\n     * - `quorum=bravo` means that only For votes are counted towards quorum.\\n     * - `quorum=for,abstain` means that both For and Abstain votes are counted towards quorum.\\n     *\\n     * If a counting module makes use of encoded `params`, it should  include this under a `params` key with a unique\\n     * name that describes the behavior. For example:\\n     *\\n     * - `params=fractional` might refer to a scheme where votes are divided fractionally between for/against/abstain.\\n     * - `params=erc721` might refer to a scheme where specific NFTs are delegated to vote.\\n     *\\n     * NOTE: The string can be decoded by the standard\\n     * https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[`URLSearchParams`]\\n     * JavaScript class.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function COUNTING_MODE() public view virtual returns (string memory);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Hashing function used to (re)build the proposal id from the proposal details..\\n     */\\n    function hashProposal(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public pure virtual returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Current state of a proposal, following Compound's convention\\n     */\\n    function state(uint256 proposalId) public view virtual returns (ProposalState);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Timepoint used to retrieve user's votes and quorum. If using block number (as per Compound's Comp), the\\n     * snapshot is performed at the end of this block. Hence, voting for this proposal starts at the beginning of the\\n     * following block.\\n     */\\n    function proposalSnapshot(uint256 proposalId) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Timepoint at which votes close. If using block number, votes close at the end of this block, so it is\\n     * possible to cast a vote during this block.\\n     */\\n    function proposalDeadline(uint256 proposalId) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Delay, between the proposal is created and the vote starts. The unit this duration is expressed in depends\\n     * on the clock (see EIP-6372) this contract uses.\\n     *\\n     * This can be increased to leave time for users to buy voting power, or delegate it, before the voting of a\\n     * proposal starts.\\n     */\\n    function votingDelay() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Delay, between the vote start and vote ends. The unit this duration is expressed in depends on the clock\\n     * (see EIP-6372) this contract uses.\\n     *\\n     * NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting\\n     * duration compared to the voting delay.\\n     */\\n    function votingPeriod() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Minimum number of cast voted required for a proposal to be successful.\\n     *\\n     * NOTE: The `timepoint` parameter corresponds to the snapshot used for counting vote. This allows to scale the\\n     * quorum depending on values such as the totalSupply of a token at this timepoint (see {ERC20Votes}).\\n     */\\n    function quorum(uint256 timepoint) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:reputation\\n     * @dev Voting power of an `account` at a specific `timepoint`.\\n     *\\n     * Note: this can be implemented in a number of ways, for example by reading the delegated balance from one (or\\n     * multiple), {ERC20Votes} tokens.\\n     */\\n    function getVotes(address account, uint256 timepoint) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:reputation\\n     * @dev Voting power of an `account` at a specific `timepoint` given additional encoded parameters.\\n     */\\n    function getVotesWithParams(\\n        address account,\\n        uint256 timepoint,\\n        bytes memory params\\n    ) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:voting\\n     * @dev Returns whether `account` has cast a vote on `proposalId`.\\n     */\\n    function hasVoted(uint256 proposalId, address account) public view virtual returns (bool);\\n\\n    /**\\n     * @dev Create a new proposal. Vote start after a delay specified by {IGovernor-votingDelay} and lasts for a\\n     * duration specified by {IGovernor-votingPeriod}.\\n     *\\n     * Emits a {ProposalCreated} event.\\n     */\\n    function propose(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) public virtual returns (uint256 proposalId);\\n\\n    /**\\n     * @dev Execute a successful proposal. This requires the quorum to be reached, the vote to be successful, and the\\n     * deadline to be reached.\\n     *\\n     * Emits a {ProposalExecuted} event.\\n     *\\n     * Note: some module can modify the requirements for execution, for example by adding an additional timelock.\\n     */\\n    function execute(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public payable virtual returns (uint256 proposalId);\\n\\n    /**\\n     * @dev Cancel a proposal. A proposal is cancellable by the proposer, but only while it is Pending state, i.e.\\n     * before the vote starts.\\n     *\\n     * Emits a {ProposalCanceled} event.\\n     */\\n    function cancel(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public virtual returns (uint256 proposalId);\\n\\n    /**\\n     * @dev Cast a vote\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVote(uint256 proposalId, uint8 support) public virtual returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote with a reason\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVoteWithReason(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason\\n    ) public virtual returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote with a reason and additional encoded parameters\\n     *\\n     * Emits a {VoteCast} or {VoteCastWithParams} event depending on the length of params.\\n     */\\n    function castVoteWithReasonAndParams(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason,\\n        bytes memory params\\n    ) public virtual returns (uint256 balance);\\n\\n  /**\\n     * @dev Cast a vote using the user's cryptographic signature.\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVoteBySig(\\n        uint256 proposalId,\\n        uint8 support,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote with a reason and additional encoded parameters using the user's cryptographic signature.\\n     *\\n     * Emits a {VoteCast} or {VoteCastWithParams} event depending on the length of params.\\n     */\\n    function castVoteWithReasonAndParamsBySig(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason,\\n        bytes memory params,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual returns (uint256 balance);\\n}\"\n    },\n    \"contracts/governance/TimelockController.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (governance/TimelockController.sol)\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../utils/AccessControl.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev Contract module which acts as a timelocked controller. When set as the\\n * owner of an `Ownable` smart contract, it enforces a timelock on all\\n * `onlyOwner` maintenance operations. This gives time for users of the\\n * controlled contract to exit before a potentially dangerous maintenance\\n * operation is applied.\\n *\\n * By default, this contract is self administered, meaning administration tasks\\n * have to go through the timelock process. The proposer (resp executor) role\\n * is in charge of proposing (resp executing) operations. A common use case is\\n * to position this {TimelockController} as the owner of a smart contract, with\\n * a multisig or a DAO as the sole proposer.\\n *\\n * _Available since v3.3._\\n */\\ncontract TimelockController is AccessControl {\\n    bytes32 public constant TIMELOCK_ADMIN_ROLE = keccak256(\\\"TIMELOCK_ADMIN_ROLE\\\");\\n    bytes32 public constant PROPOSER_ROLE = keccak256(\\\"PROPOSER_ROLE\\\");\\n    bytes32 public constant EXECUTOR_ROLE = keccak256(\\\"EXECUTOR_ROLE\\\");\\n    bytes32 public constant CANCELLER_ROLE = keccak256(\\\"CANCELLER_ROLE\\\");\\n    uint256 internal constant _DONE_TIMESTAMP = uint256(1);\\n\\n    mapping(bytes32 => uint256) private _timestamps;\\n    uint256 private _minDelay;\\n\\n    /**\\n     * @dev Emitted when a call is scheduled as part of operation `id`.\\n     */\\n    event CallScheduled(\\n        bytes32 indexed id,\\n        uint256 indexed index,\\n        address target,\\n        uint256 value,\\n        bytes data,\\n        bytes32 predecessor,\\n        uint256 delay\\n    );\\n\\n    /**\\n     * @dev Emitted when a call is performed as part of operation `id`.\\n     */\\n    event CallExecuted(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data);\\n\\n     /**\\n     * @dev Emitted when new proposal is scheduled with non-zero salt.\\n     */\\n    event CallSalt(bytes32 indexed id, bytes32 salt);\\n\\n\\n    /**\\n     * @dev Emitted when operation `id` is cancelled.\\n     */\\n    event Cancelled(bytes32 indexed id);\\n\\n    /**\\n     * @dev Emitted when the minimum delay for future operations is modified.\\n     */\\n    event MinDelayChange(uint256 oldDuration, uint256 newDuration);\\n\\n    /**\\n     * @dev Initializes the contract with the following parameters:\\n     *\\n     * - `minDelay`: initial minimum delay for operations\\n     * - `proposers`: accounts to be granted proposer and canceller roles\\n     * - `executors`: accounts to be granted executor role\\n     * - `admin`: optional account to be granted admin role; disable with zero address\\n     *\\n     * IMPORTANT: The optional admin can aid with initial configuration of roles after deployment\\n     * without being subject to delay, but this role should be subsequently renounced in favor of\\n     * administration through timelocked proposals. Previous versions of this contract would assign\\n     * this admin to the deployer automatically and should be renounced as well.\\n     */\\n    constructor(\\n        uint256 minDelay,\\n        address[] memory proposers,\\n        address[] memory executors,\\n        address admin\\n    ) {\\n        _setRoleAdmin(TIMELOCK_ADMIN_ROLE, TIMELOCK_ADMIN_ROLE);\\n        _setRoleAdmin(PROPOSER_ROLE, TIMELOCK_ADMIN_ROLE);\\n        _setRoleAdmin(EXECUTOR_ROLE, TIMELOCK_ADMIN_ROLE);\\n        _setRoleAdmin(CANCELLER_ROLE, TIMELOCK_ADMIN_ROLE);\\n\\n        // self administration\\n        _setupRole(TIMELOCK_ADMIN_ROLE, address(this));\\n\\n        // optional admin\\n        if (admin != address(0)) {\\n            _setupRole(TIMELOCK_ADMIN_ROLE, admin);\\n        }\\n\\n        // register proposers and cancellers\\n        for (uint256 i = 0; i < proposers.length; ++i) {\\n            _setupRole(PROPOSER_ROLE, proposers[i]);\\n            _setupRole(CANCELLER_ROLE, proposers[i]);\\n        }\\n\\n        // register executors\\n        for (uint256 i = 0; i < executors.length; ++i) {\\n            _setupRole(EXECUTOR_ROLE, executors[i]);\\n        }\\n\\n        _minDelay = minDelay;\\n        emit MinDelayChange(0, minDelay);\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only by a certain role. In\\n     * addition to checking the sender's role, `address(0)` 's role is also\\n     * considered. Granting a role to `address(0)` is equivalent to enabling\\n     * this role for everyone.\\n     */\\n    modifier onlyRoleOrOpenRole(bytes32 role) {\\n        if (!hasRole(role, address(0))) {\\n            _checkRole(role, _msgSender());\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Contract might receive/hold ETH as part of the maintenance process.\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n   function supportsInterface(bytes4 interfaceId) public view virtual override(AccessControl) returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns whether an id correspond to a registered operation. This\\n     * includes both Pending, Ready and Done operations.\\n     */\\n    function isOperation(bytes32 id) public view virtual returns (bool registered) {\\n        return getTimestamp(id) > 0;\\n    }\\n\\n    /**\\n     * @dev Returns whether an operation is pending or not.\\n     */\\n    function isOperationPending(bytes32 id) public view virtual returns (bool pending) {\\n        return getTimestamp(id) > _DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev Returns whether an operation is ready or not.\\n     */\\n    function isOperationReady(bytes32 id) public view virtual returns (bool ready) {\\n        uint256 timestamp = getTimestamp(id);\\n        return timestamp > _DONE_TIMESTAMP && timestamp <= block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Returns whether an operation is done or not.\\n     */\\n    function isOperationDone(bytes32 id) public view virtual returns (bool done) {\\n        return getTimestamp(id) == _DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev Returns the timestamp at with an operation becomes ready (0 for\\n     * unset operations, 1 for done operations).\\n     */\\n    function getTimestamp(bytes32 id) public view virtual returns (uint256 timestamp) {\\n        return _timestamps[id];\\n    }\\n\\n    /**\\n     * @dev Returns the minimum delay for an operation to become valid.\\n     *\\n     * This value can be changed by executing an operation that calls `updateDelay`.\\n     */\\n    function getMinDelay() public view virtual returns (uint256 duration) {\\n        return _minDelay;\\n    }\\n\\n    /**\\n     * @dev Returns the identifier of an operation containing a single\\n     * transaction.\\n     */\\n    function hashOperation(\\n        address target,\\n        uint256 value,\\n        bytes calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public pure virtual returns (bytes32 hash) {\\n        return keccak256(abi.encode(target, value, data, predecessor, salt));\\n    }\\n\\n    /**\\n     * @dev Returns the identifier of an operation containing a batch of\\n     * transactions.\\n     */\\n    function hashOperationBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata payloads,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public pure virtual returns (bytes32 hash) {\\n        return keccak256(abi.encode(targets, values, payloads, predecessor, salt));\\n    }\\n\\n    /**\\n     * @dev Schedule an operation containing a single transaction.\\n     *\\n     * Emits a {CallScheduled} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'proposer' role.\\n     */\\n    function schedule(\\n        address target,\\n        uint256 value,\\n        bytes calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt,\\n        uint256 delay\\n    ) public virtual onlyRole(PROPOSER_ROLE) {\\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\\n        _schedule(id, delay);\\n        emit CallScheduled(id, 0, target, value, data, predecessor, delay);\\n          if (salt != bytes32(0)) {\\n            emit CallSalt(id, salt);\\n        }\\n    }\\n\\n    /**\\n     * @dev Schedule an operation containing a batch of transactions.\\n     *\\n     * Emits one {CallScheduled} event per transaction in the batch.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'proposer' role.\\n     */\\n    function scheduleBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata payloads,\\n        bytes32 predecessor,\\n        bytes32 salt,\\n        uint256 delay\\n    ) public virtual onlyRole(PROPOSER_ROLE) {\\n        require(targets.length == values.length, \\\"TimelockController: length mismatch\\\");\\n        require(targets.length == payloads.length, \\\"TimelockController: length mismatch\\\");\\n\\n        bytes32 id = hashOperationBatch(targets, values, payloads, predecessor, salt);\\n        _schedule(id, delay);\\n        for (uint256 i = 0; i < targets.length; ++i) {\\n            emit CallScheduled(id, i, targets[i], values[i], payloads[i], predecessor, delay);\\n        }\\n        if (salt != bytes32(0)) {\\n            emit CallSalt(id, salt);\\n        }\\n    }\\n\\n    /**\\n     * @dev Schedule an operation that is to becomes valid after a given delay.\\n     */\\n    function _schedule(bytes32 id, uint256 delay) private {\\n        require(!isOperation(id), \\\"TimelockController: operation already scheduled\\\");\\n        require(delay >= getMinDelay(), \\\"TimelockController: insufficient delay\\\");\\n        _timestamps[id] = block.timestamp + delay;\\n    }\\n\\n    /**\\n     * @dev Cancel an operation.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'canceller' role.\\n     */\\n    function cancel(bytes32 id) public virtual onlyRole(CANCELLER_ROLE) {\\n        require(isOperationPending(id), \\\"TimelockController: operation cannot be cancelled\\\");\\n        delete _timestamps[id];\\n\\n        emit Cancelled(id);\\n    }\\n\\n    /**\\n     * @dev Execute an (ready) operation containing a single transaction.\\n     *\\n     * Emits a {CallExecuted} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'executor' role.\\n     */\\n    // This function can reenter, but it doesn't pose a risk because _afterCall checks that the proposal is pending,\\n    // thus any modifications to the operation during reentrancy should be caught.\\n    // slither-disable-next-line reentrancy-eth\\n    function execute(\\n        address target,\\n        uint256 value,\\n        bytes calldata payload,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\\n        bytes32 id = hashOperation(target, value, payload, predecessor, salt);\\n\\n        _beforeCall(id, predecessor);\\n        _execute(target, value, payload);\\n        emit CallExecuted(id, 0, target, value, payload);\\n        _afterCall(id);\\n    }\\n\\n    /**\\n     * @dev Execute an (ready) operation containing a batch of transactions.\\n     *\\n     * Emits one {CallExecuted} event per transaction in the batch.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'executor' role.\\n     */\\n    function executeBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata payloads,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\\n        require(targets.length == values.length, \\\"TimelockController: length mismatch\\\");\\n        require(targets.length == payloads.length, \\\"TimelockController: length mismatch\\\");\\n\\n        bytes32 id = hashOperationBatch(targets, values, payloads, predecessor, salt);\\n\\n        _beforeCall(id, predecessor);\\n        for (uint256 i = 0; i < targets.length; ++i) {\\n            address target = targets[i];\\n            uint256 value = values[i];\\n            bytes calldata payload = payloads[i];\\n            _execute(target, value, payload);\\n            emit CallExecuted(id, i, target, value, payload);\\n        }\\n        _afterCall(id);\\n    }\\n\\n    /**\\n     * @dev Execute an operation's call.\\n     */\\n    function _execute(\\n        address target,\\n        uint256 value,\\n        bytes calldata data\\n    ) internal virtual {\\n        (bool success, ) = target.call{value: value}(data);\\n        require(success, \\\"TimelockController: underlying transaction reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Checks before execution of an operation's calls.\\n     */\\n    function _beforeCall(bytes32 id, bytes32 predecessor) private view {\\n        require(isOperationReady(id), \\\"TimelockController: operation is not ready\\\");\\n        require(predecessor == bytes32(0) || isOperationDone(predecessor), \\\"TimelockController: missing dependency\\\");\\n    }\\n\\n    /**\\n     * @dev Checks after execution of an operation's calls.\\n     */\\n    function _afterCall(bytes32 id) private {\\n        require(isOperationReady(id), \\\"TimelockController: operation is not ready\\\");\\n        _timestamps[id] = _DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev Changes the minimum timelock duration for future operations.\\n     *\\n     * Emits a {MinDelayChange} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the timelock itself. This can only be achieved by scheduling and later executing\\n     * an operation where the timelock is the target and the data is the ABI-encoded call to this function.\\n     */\\n    function updateDelay(uint256 newDelay) external virtual {\\n        require(msg.sender == address(this), \\\"TimelockController: caller must be timelock\\\");\\n        emit MinDelayChange(_minDelay, newDelay);\\n        _minDelay = newDelay;\\n    }\\n}\"\n    },\n    \"contracts/governance/utils/IVotes.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/utils/IVotes.sol)\\npragma solidity ^0.8.17;\\n\\n/**\\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\\n *\\n * _Available since v4.5._\\n */\\ninterface IVotes {\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at the end of a past block (`blockNumber`).\\n     */\\n    function getPastVotes(address account, uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total supply of votes available at the end of a past block (`blockNumber`).\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     */\\n    function getPastTotalSupply(uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the delegate that `account` has chosen.\\n     */\\n    function delegates(address account) external view returns (address);\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`.\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\"\n    },\n    \"contracts/Governor_Token.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\n\\nimport './ERC20/ERC20.sol';\\nimport './ERC20/extensions/ERC20Votes.sol';\\nimport './ERC20/extensions/ERC20Permit.sol';\\nimport './utils/Ownable.sol';\\nimport \\\"./utils/cryptography/ECDSA.sol\\\";\\n\\ncontract Governor_Token is ERC20, ERC20Permit, Ownable, ERC20Votes {\\n    constructor() ERC20(\\\"Ink_Votes\\\", \\\"ITK\\\")  ERC20Permit(\\\"Ink_Votes\\\") {}\\n\\n        event Mint(address indexed to, uint _amount);\\n        event Burn(address indexed to, uint _amount);\\n\\n     function mint(address to, uint256 amount) public onlyOwner {\\n        _mint(to, amount);\\n         emit Mint(to, amount);\\n    }\\n\\n     function burn(address to, uint256 amount) public onlyOwner {\\n        _burn(to, amount);\\n         emit Burn(to, amount);\\n    }\\n\\n    function _afterTokenTransfer(address from, address to, uint256 amount)\\n        internal\\n        override(ERC20, ERC20Votes)\\n    {\\n        super._afterTokenTransfer(from, to, amount);\\n    }\\n\\n    function _mint(address to, uint256 amount)\\n        internal\\n        override(ERC20, ERC20Votes)\\n    {\\n        super._mint(to, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount)\\n        internal\\n        override(ERC20, ERC20Votes)\\n    {\\n        super._burn(account, amount);\\n    }\\n}\"\n    },\n    \"contracts/Ink_Governor.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport './governance/Governor.sol';\\nimport './governance/extensions/GovernorVotes.sol';\\nimport './governance/extensions/GovernorVotesQuorumFraction.sol';\\nimport './governance/extensions/GovernorCountingSimple.sol';\\nimport './governance/extensions/GovernorSettings.sol';\\n\\ncontract Ink_Governor is Governor, GovernorSettings, GovernorCountingSimple, GovernorVotes, GovernorVotesQuorumFraction {\\n    constructor(IVotes _token)\\n        Governor(\\\"Ink_Governor\\\")\\n        GovernorSettings(4 /* 4 block */, 300 /* 1 hour */, 0)\\n        GovernorVotes(_token)\\n        GovernorVotesQuorumFraction(4)\\n    {}\\n\\n   function cancel_(\\n         address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public returns (uint256) {\\n        return super._cancel(targets,values,calldatas,descriptionHash);\\n    }\\n\\n    // The following functions are overrides required by Solidity.\\n\\n   function votingDelay()\\n        public\\n        view\\n        override(IGovernor, GovernorSettings)\\n        returns (uint256)\\n    {\\n        return super.votingDelay();\\n    }\\n\\n    function votingPeriod()\\n        public\\n        view\\n        override(IGovernor, GovernorSettings)\\n        returns (uint256)\\n    {\\n        return super.votingPeriod();\\n    }\\n\\n    function quorum(uint256 blockNumber)\\n        public\\n        view\\n        override(IGovernor, GovernorVotesQuorumFraction)\\n        returns (uint256)\\n    {\\n        return super.quorum(blockNumber);\\n    }\\n\\n    function proposalThreshold()\\n        public\\n        view\\n        override(Governor, GovernorSettings)\\n        returns (uint256)\\n    {\\n        return super.proposalThreshold();\\n    }\\n    \\n}\"\n    },\n    \"contracts/interfaces/IERC5267.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\"\n    },\n    \"contracts/interfaces/IERC5805.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\n\\nimport \\\"../governance/utils/IVotes.sol\\\";\\nimport \\\"./IERC6372.sol\\\";\\n\\ninterface IERC5805 is IERC6372, IVotes {}\"\n    },\n    \"contracts/interfaces/IERC6372.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\n\\ninterface IERC6372 {\\n\\n    function clock() external view returns (uint48);\\n\\n// solhint-disable-next-line func-name-mixedcase\\n    function CLOCK_MODE() external view returns (string memory);\\n    \\n}\"\n    },\n    \"contracts/Lock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\ncontract Timelock {\\n    uint constant MINIMUM_DELAY = 0;\\n    uint constant MAXIMUM_DELAY = 1 days;\\n    uint constant GRACE_PERIOD = 1 days;\\n    address public owner;\\n    string public message;\\n    uint public amount;\\n\\n    mapping(bytes32 => bool) public queue;\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"not an owner!\\\");\\n        _;\\n    }\\n\\n    event Queued(bytes32 txId);\\n    event Discarded(bytes32 txId);\\n    event Executed(bytes32 txId);\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    function demo(string calldata _msg) external payable {\\n        message = _msg;\\n        amount = msg.value;\\n    }\\n\\n    function getNextTimestamp() external view returns(uint) {\\n        return block.timestamp + 60;\\n    }\\n\\n    function prepareData(string calldata _msg) external pure returns(bytes memory) {\\n        return abi.encode(_msg);\\n    }\\n\\n    function addToQueue(\\n        address _to,\\n        string calldata _func,\\n        bytes calldata _data,\\n        uint _value,\\n        uint _timestamp\\n    ) external onlyOwner returns(bytes32) {\\n        require(\\n            _timestamp > block.timestamp + MINIMUM_DELAY &&\\n            _timestamp < block.timestamp + MAXIMUM_DELAY,\\n            \\\"invalid timestamp\\\"\\n        );\\n        bytes32 txId = keccak256(abi.encode(\\n            _to,\\n            _func,\\n            _data,\\n            _value,\\n            _timestamp\\n        ));\\n\\n        require(!queue[txId], \\\"already queued\\\");\\n\\n        queue[txId] = true;\\n\\n        emit Queued(txId);\\n\\n        return txId;\\n    }\\n\\n    function execute(\\n        address _to,\\n        string calldata _func,\\n        bytes calldata _data,\\n        uint _value,\\n        uint _timestamp\\n    ) external payable onlyOwner returns(bytes memory) {\\n        require(\\n            block.timestamp > _timestamp,\\n            \\\"too early\\\"\\n        );\\n        require(\\n            _timestamp + GRACE_PERIOD > block.timestamp,\\n            \\\"tx expired\\\"\\n        );\\n\\n        bytes32 txId = keccak256(abi.encode(\\n            _to,\\n            _func,\\n            _data,\\n            _value,\\n            _timestamp\\n        ));\\n\\n        require(queue[txId], \\\"not queued!\\\");\\n\\n        delete queue[txId];\\n\\n        bytes memory data;\\n        if(bytes(_func).length > 0) {\\n            data = abi.encodePacked(\\n                bytes4(keccak256(bytes(_func))),\\n                _data\\n            );\\n        } else {\\n            data = _data;\\n        }\\n\\n        (bool success, bytes memory resp) = _to.call{value: _value}(data);\\n        require(success);\\n\\n        emit Executed(txId);\\n        return resp;\\n    }\\n\\n    function discard(bytes32 _txId) external onlyOwner {\\n        require(queue[_txId], \\\"not queued\\\");\\n\\n        delete queue[_txId];\\n\\n        emit Discarded(_txId);\\n    }\\n}\"\n    },\n    \"contracts/security/Pausable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\nabstract contract Pausable is Context {\\n   \\n    event Paused(address account);\\n\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\"\n    },\n    \"contracts/security/PullPayment.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"../utils/Escrow.sol\\\";\\n\\nabstract contract PullPayment {\\n    Escrow private immutable _escrow;\\n\\n    constructor() {\\n        _escrow = new Escrow();\\n    }\\n\\n    function withdrawPayments(address payable payee) public virtual {\\n        _escrow.withdraw(payee);\\n    }\\n\\n    function payments(address dest) public view returns (uint256) {\\n        return _escrow.depositsOf(dest);\\n    }\\n\\n    function _asyncTransfer(address dest, uint256 amount) internal virtual {\\n        _escrow.deposit{value: amount}(dest);\\n    }\\n}\"\n    },\n    \"contracts/security/ReentrancyGuard.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nabstract contract ReentrancyGuard {\\n   \\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\"\n    },\n    \"contracts/Timelock_Governor.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\n\\nimport './governance/Governor.sol';\\nimport './governance/GovernorSettings.sol';\\nimport './governance/extensions/GovernorVotes.sol';\\nimport './governance/extensions/GovernorVotesQuorumFraction.sol';\\nimport './governance/extensions/GovernorTimelockControl.sol';\\nimport './governance/extensions/GovernorCountingSimple.sol';\\n\\ncontract Timelock_Governor is Governor, GovernorSettings, GovernorCountingSimple, GovernorVotes, GovernorVotesQuorumFraction, GovernorTimelockControl {\\n    constructor(IVotes _token, TimelockController _timelock)\\n        Governor(\\\"Timelock_Governor\\\")\\n        GovernorSettings(4, 300, 0)\\n        GovernorVotes(_token)\\n        GovernorVotesQuorumFraction(4)\\n        GovernorTimelockControl(_timelock)\\n    {}\\n\\n   function cancel_(\\n         address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public returns (uint256) {\\n        return super._cancel(targets,values,calldatas,descriptionHash);\\n    }\\n\\n function nonGovernanceFunction() external {}\\n    // The following functions are overrides required by Solidity.\\n\\n    function votingDelay()\\n        public\\n        view\\n        override(IGovernor, GovernorSettings)\\n        returns (uint256)\\n    {\\n        return super.votingDelay();\\n    }\\n\\n    function votingPeriod()\\n        public\\n        view\\n        override(IGovernor, GovernorSettings)\\n        returns (uint256)\\n    {\\n        return super.votingPeriod();\\n    }\\n\\n    function quorum(uint256 blockNumber)\\n        public\\n        view\\n        override(IGovernor, GovernorVotesQuorumFraction)\\n        returns (uint256)\\n    {\\n        return super.quorum(blockNumber);\\n    }\\n\\n    function state(uint256 proposalId)\\n        public\\n        view\\n        override(Governor, GovernorTimelockControl)\\n        returns (ProposalState)\\n    {\\n        return super.state(proposalId);\\n    }\\n\\n    function propose(address[] memory targets, uint256[] memory values, bytes[] memory calldatas, string memory description)\\n        public\\n        override(Governor, IGovernor)\\n        returns (uint256)\\n    {\\n        return super.propose(targets, values, calldatas, description);\\n    }\\n\\n    function proposalThreshold()\\n        public\\n        view\\n        override(Governor, GovernorSettings)\\n        returns (uint256)\\n    {\\n        return super.proposalThreshold();\\n    }\\n\\n    function _execute(uint256 proposalId, address[] memory targets, uint256[] memory values, bytes[] memory calldatas, bytes32 descriptionHash)\\n        internal\\n        override(Governor, GovernorTimelockControl)\\n    {\\n        super._execute(proposalId, targets, values, calldatas, descriptionHash);\\n    }\\n\\n    function _cancel(address[] memory targets, uint256[] memory values, bytes[] memory calldatas, bytes32 descriptionHash)\\n        internal\\n        override(Governor, GovernorTimelockControl)\\n        returns (uint256)\\n    {\\n        return super._cancel(targets, values, calldatas, descriptionHash);\\n    }\\n\\n    function _executor()\\n        internal\\n        view\\n        override(Governor, GovernorTimelockControl)\\n        returns (address)\\n    {\\n        return super._executor();\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(Governor, GovernorTimelockControl)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\"\n    },\n    \"contracts/utils/AccessControl.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\"\n    },\n    \"contracts/utils/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nlibrary Address {\\n   \\n    function isContract(address account) internal view returns (bool) {\\n        return account.code.length > 0;\\n    }\\n\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        if (returndata.length > 0) {\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\"\n    },\n    \"contracts/utils/Checkpoints.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (utils/Checkpoints.sol)\\n// This file was procedurally generated from scripts/generate/templates/Checkpoints.js.\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SafeCast.sol\\\";\\n\\n/**\\n * @dev This library defines the `History` struct, for checkpointing values as they change at different points in\\n * time, and later looking up past values by block number. See {Votes} as an example.\\n *\\n * To create a history of checkpoints define a variable type `Checkpoints.History` in your contract, and store a new\\n * checkpoint for the current transaction block using the {push} function.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Checkpoints {\\n    struct History {\\n        Checkpoint[] _checkpoints;\\n    }\\n\\n    struct Checkpoint {\\n        uint32 _blockNumber;\\n        uint224 _value;\\n    }\\n\\n    /**\\n     * @dev Returns the value at a given block number. If a checkpoint is not available at that block, the closest one\\n     * before it is returned, or zero otherwise. Because the number returned corresponds to that at the end of the\\n     * block, the requested block number must be in the past, excluding the current block.\\n     */\\n    function getAtBlock(History storage self, uint256 blockNumber) internal view returns (uint256) {\\n        require(blockNumber < block.number, \\\"Checkpoints: block not yet mined\\\");\\n        uint32 key = SafeCast.toUint32(blockNumber);\\n\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value at a given block number. If a checkpoint is not available at that block, the closest one\\n     * before it is returned, or zero otherwise. Similar to {upperLookup} but optimized for the case when the searched\\n     * checkpoint is probably \\\"recent\\\", defined as being among the last sqrt(N) checkpoints where N is the number of\\n     * checkpoints.\\n     */\\n    function getAtProbablyRecentBlock(History storage self, uint256 blockNumber) internal view returns (uint256) {\\n        require(blockNumber < block.number, \\\"Checkpoints: block not yet mined\\\");\\n        uint32 key = SafeCast.toUint32(blockNumber);\\n\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - Math.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._blockNumber) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Pushes a value onto a History so that it is stored as the checkpoint for the current block.\\n     *\\n     * Returns previous value and new value.\\n     */\\n    function push(History storage self, uint256 value) internal returns (uint256, uint256) {\\n        return _insert(self._checkpoints, SafeCast.toUint32(block.number), SafeCast.toUint224(value));\\n    }\\n\\n    /**\\n     * @dev Pushes a value onto a History, by updating the latest value using binary operation `op`. The new value will\\n     * be set to `op(latest, delta)`.\\n     *\\n     * Returns previous value and new value.\\n     */\\n    function push(\\n        History storage self,\\n        function(uint256, uint256) view returns (uint256) op,\\n        uint256 delta\\n    ) internal returns (uint256, uint256) {\\n        return push(self, op(latest(self), delta));\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(History storage self) internal view returns (uint224) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(\\n        History storage self\\n    ) internal view returns (bool exists, uint32 _blockNumber, uint224 _value) {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._blockNumber, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(History storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(Checkpoint[] storage self, uint32 key, uint224 value) private returns (uint224, uint224) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            // Copying to memory is important here.\\n            Checkpoint memory last = _unsafeAccess(self, pos - 1);\\n\\n            // Checkpoint keys must be non-decreasing.\\n            require(last._blockNumber <= key, \\\"Checkpoint: decreasing keys\\\");\\n\\n            // Update or push new checkpoint\\n            if (last._blockNumber == key) {\\n                _unsafeAccess(self, pos - 1)._value = value;\\n            } else {\\n                self.push(Checkpoint({_blockNumber: key, _value: value}));\\n            }\\n            return (last._value, value);\\n        } else {\\n            self.push(Checkpoint({_blockNumber: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the oldest checkpoint whose key is greater than the search key, or `high` if there is none.\\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._blockNumber > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the oldest checkpoint whose key is greater or equal than the search key, or `high` if there is none.\\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._blockNumber < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(Checkpoint[] storage self, uint256 pos) private pure returns (Checkpoint storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n\\n    struct Trace224 {\\n        Checkpoint224[] _checkpoints;\\n    }\\n\\n    struct Checkpoint224 {\\n        uint32 _key;\\n        uint224 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace224 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     */\\n    function push(Trace224 storage self, uint32 key, uint224 value) internal returns (uint224, uint224) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the oldest checkpoint with key greater or equal than the search key, or zero if there is none.\\n     */\\n    function lowerLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint with key lower or equal than the search key.\\n     */\\n    function upperLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint with key lower or equal than the search key.\\n     *\\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \\\"recent\\\" checkpoint (checkpoints with high keys).\\n     */\\n    function upperLookupRecent(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - Math.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace224 storage self) internal view returns (uint224) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace224 storage self) internal view returns (bool exists, uint32 _key, uint224 _value) {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint224 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace224 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(Checkpoint224[] storage self, uint32 key, uint224 value) private returns (uint224, uint224) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            // Copying to memory is important here.\\n            Checkpoint224 memory last = _unsafeAccess(self, pos - 1);\\n\\n            // Checkpoint keys must be non-decreasing.\\n            require(last._key <= key, \\\"Checkpoint: decreasing keys\\\");\\n\\n            // Update or push new checkpoint\\n            if (last._key == key) {\\n                _unsafeAccess(self, pos - 1)._value = value;\\n            } else {\\n                self.push(Checkpoint224({_key: key, _value: value}));\\n            }\\n            return (last._value, value);\\n        } else {\\n            self.push(Checkpoint224({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the oldest checkpoint whose key is greater than the search key, or `high` if there is none.\\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint224[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the oldest checkpoint whose key is greater or equal than the search key, or `high` if there is none.\\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint224[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(\\n        Checkpoint224[] storage self,\\n        uint256 pos\\n    ) private pure returns (Checkpoint224 storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n\\n    struct Trace160 {\\n        Checkpoint160[] _checkpoints;\\n    }\\n\\n    struct Checkpoint160 {\\n        uint96 _key;\\n        uint160 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace160 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     */\\n    function push(Trace160 storage self, uint96 key, uint160 value) internal returns (uint160, uint160) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the oldest checkpoint with key greater or equal than the search key, or zero if there is none.\\n     */\\n    function lowerLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint with key lower or equal than the search key.\\n     */\\n    function upperLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint with key lower or equal than the search key.\\n     *\\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \\\"recent\\\" checkpoint (checkpoints with high keys).\\n     */\\n    function upperLookupRecent(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - Math.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace160 storage self) internal view returns (uint160) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace160 storage self) internal view returns (bool exists, uint96 _key, uint160 _value) {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint160 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace160 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(Checkpoint160[] storage self, uint96 key, uint160 value) private returns (uint160, uint160) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            // Copying to memory is important here.\\n            Checkpoint160 memory last = _unsafeAccess(self, pos - 1);\\n\\n            // Checkpoint keys must be non-decreasing.\\n            require(last._key <= key, \\\"Checkpoint: decreasing keys\\\");\\n\\n            // Update or push new checkpoint\\n            if (last._key == key) {\\n                _unsafeAccess(self, pos - 1)._value = value;\\n            } else {\\n                self.push(Checkpoint160({_key: key, _value: value}));\\n            }\\n            return (last._value, value);\\n        } else {\\n            self.push(Checkpoint160({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the oldest checkpoint whose key is greater than the search key, or `high` if there is none.\\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint160[] storage self,\\n        uint96 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the oldest checkpoint whose key is greater or equal than the search key, or `high` if there is none.\\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint160[] storage self,\\n        uint96 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(\\n        Checkpoint160[] storage self,\\n        uint256 pos\\n    ) private pure returns (Checkpoint160 storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n}\"\n    },\n    \"contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\"\n    },\n    \"contracts/utils/Counters.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\"\n    },\n    \"contracts/utils/cryptography/ECDSA.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\"\n    },\n    \"contracts/utils/cryptography/EIP712.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../ShortStrings.sol\\\";\\nimport \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _name.toStringWithFallback(_nameFallback),\\n            _version.toStringWithFallback(_versionFallback),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n}\"\n    },\n    \"contracts/utils/Escrow.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\ncontract Escrow is Ownable {\\n    using Address for address payable;\\n\\n    event Deposited(address indexed payee, uint256 weiAmount);\\n    event Withdrawn(address indexed payee, uint256 weiAmount);\\n\\n    mapping(address => uint256) private _deposits;\\n\\n    function depositsOf(address payee) public view returns (uint256) {\\n        return _deposits[payee];\\n    }\\n\\n    function deposit(address payee) public payable virtual onlyOwner {\\n        uint256 amount = msg.value;\\n        _deposits[payee] += amount;\\n        emit Deposited(payee, amount);\\n    }\\n\\n    function withdraw(address payable payee) public virtual onlyOwner {\\n        uint256 payment = _deposits[payee];\\n\\n        _deposits[payee] = 0;\\n\\n        payee.sendValue(payment);\\n\\n        emit Withdrawn(payee, payment);\\n    }\\n}\"\n    },\n    \"contracts/utils/IAccessControl.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.17;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\"\n    },\n    \"contracts/utils/introspection/ERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\nabstract contract ERC165 is IERC165 {\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\"\n    },\n    \"contracts/utils/introspection/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\ninterface IERC165 {\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\"\n    },\n    \"contracts/utils/math/Math.sol\": {\n      \"content\": \"\\n\\n// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.17;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\"\n    },\n    \"contracts/utils/math/SafeCast.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\n\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\"\n    },\n    \"contracts/utils/Ownable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\"\n    },\n    \"contracts/utils/ShortStrings.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"./StorageSlot.sol\\\";\\n\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n * Strings of arbitrary length can be optimized if they are short enough by\\n * the addition of a storage variable used as fallback.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    error StringTooLong(string str);\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = length(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function length(ShortString sstr) internal pure returns (uint256) {\\n        return uint256(ShortString.unwrap(sstr)) & 0xFF;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (length(value) > 0) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n}\"\n    },\n    \"contracts/utils/StorageSlot.sol\": {\n      \"content\": \"\\n\\n// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\"\n    },\n    \"contracts/utils/Strings.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\"\n    },\n    \"contracts/utils/structs/DoubleEndedQueue.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"../math/SafeCast.sol\\\";\\n\\n\\nlibrary DoubleEndedQueue {\\n    /**\\n     * @dev An operation (e.g. {front}) couldn't be completed due to the queue being empty.\\n     */\\n    error Empty();\\n\\n    /**\\n     * @dev An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\\n     */\\n    error OutOfBounds();\\n\\n    /**\\n     * @dev Indices are signed integers because the queue can grow in any direction. They are 128 bits so begin and end\\n     * are packed in a single storage slot for efficient access. Since the items are added one at a time we can safely\\n     * assume that these 128-bit indices will not overflow, and use unchecked arithmetic.\\n     *\\n     * Struct members have an underscore prefix indicating that they are \\\"private\\\" and should not be read or written to\\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\\n     * lead to unexpected behavior.\\n     *\\n     * Indices are in the range [begin, end) which means the first item is at data[begin] and the last item is at\\n     * data[end - 1].\\n     */\\n    struct Bytes32Deque {\\n        int128 _begin;\\n        int128 _end;\\n        mapping(int128 => bytes32) _data;\\n    }\\n\\n    /**\\n     * @dev Inserts an item at the end of the queue.\\n     */\\n    function pushBack(Bytes32Deque storage deque, bytes32 value) internal {\\n        int128 backIndex = deque._end;\\n        deque._data[backIndex] = value;\\n        unchecked {\\n            deque._end = backIndex + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes the item at the end of the queue and returns it.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function popBack(Bytes32Deque storage deque) internal returns (bytes32 value) {\\n        if (empty(deque)) revert Empty();\\n        int128 backIndex;\\n        unchecked {\\n            backIndex = deque._end - 1;\\n        }\\n        value = deque._data[backIndex];\\n        delete deque._data[backIndex];\\n        deque._end = backIndex;\\n    }\\n\\n    /**\\n     * @dev Inserts an item at the beginning of the queue.\\n     */\\n    function pushFront(Bytes32Deque storage deque, bytes32 value) internal {\\n        int128 frontIndex;\\n        unchecked {\\n            frontIndex = deque._begin - 1;\\n        }\\n        deque._data[frontIndex] = value;\\n        deque._begin = frontIndex;\\n    }\\n\\n    /**\\n     * @dev Removes the item at the beginning of the queue and returns it.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function popFront(Bytes32Deque storage deque) internal returns (bytes32 value) {\\n        if (empty(deque)) revert Empty();\\n        int128 frontIndex = deque._begin;\\n        value = deque._data[frontIndex];\\n        delete deque._data[frontIndex];\\n        unchecked {\\n            deque._begin = frontIndex + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the item at the beginning of the queue.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function front(Bytes32Deque storage deque) internal view returns (bytes32 value) {\\n        if (empty(deque)) revert Empty();\\n        int128 frontIndex = deque._begin;\\n        return deque._data[frontIndex];\\n    }\\n\\n    /**\\n     * @dev Returns the item at the end of the queue.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function back(Bytes32Deque storage deque) internal view returns (bytes32 value) {\\n        if (empty(deque)) revert Empty();\\n        int128 backIndex;\\n        unchecked {\\n            backIndex = deque._end - 1;\\n        }\\n        return deque._data[backIndex];\\n    }\\n\\n    /**\\n     * @dev Return the item at a position in the queue given by `index`, with the first item at 0 and last item at\\n     * `length(deque) - 1`.\\n     *\\n     * Reverts with `OutOfBounds` if the index is out of bounds.\\n     */\\n    function at(Bytes32Deque storage deque, uint256 index) internal view returns (bytes32 value) {\\n        // int256(deque._begin) is a safe upcast\\n        int128 idx = SafeCast.toInt128(int256(deque._begin) + SafeCast.toInt256(index));\\n        if (idx >= deque._end) revert OutOfBounds();\\n        return deque._data[idx];\\n    }\\n\\n    /**\\n     * @dev Resets the queue back to being empty.\\n     *\\n     * NOTE: The current items are left behind in storage. This does not affect the functioning of the queue, but misses\\n     * out on potential gas refunds.\\n     */\\n    function clear(Bytes32Deque storage deque) internal {\\n        deque._begin = 0;\\n        deque._end = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of items in the queue.\\n     */\\n    function length(Bytes32Deque storage deque) internal view returns (uint256) {\\n        // The interface preserves the invariant that begin <= end so we assume this will not overflow.\\n        // We also assume there are at most int256.max items in the queue.\\n        unchecked {\\n            return uint256(int256(deque._end) - int256(deque._begin));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the queue is empty.\\n     */\\n    function empty(Bytes32Deque storage deque) internal view returns (bool) {\\n        return deque._end <= deque._begin;\\n    }\\n}\"\n    },\n    \"contracts/utils/tests/ECDSA_Recover.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9;\\n\\nimport \\\"../cryptography/ECDSA.sol\\\";\\nimport \\\"../cryptography/EIP712.sol\\\";\\nimport '../../ERC20/extensions/ERC20Permit.sol';\\nimport '../../ERC20/ERC20.sol';\\n\\ncontract ECDSA_Recover is ERC20, EIP712, ERC20Permit {\\n    bytes32 private constant _DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    constructor() ERC20(\\\"ECDSA_Token\\\", \\\"ETK\\\") ERC20Permit(\\\"ECDSA_Recover\\\"){}\\n\\n    function recover(bytes calldata signature) public view returns (address) {\\n        bytes32 hash = keccak256(abi.encodePacked(msg.sender));\\n        bytes32 message = ECDSA.toEthSignedMessageHash(hash);\\n        address signer = ECDSA.recover(message, signature);\\n        return signer;\\n    }\\n\\n    function delegateBySig_recover(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public view returns ( address ){\\n        address signer = ECDSA.recover(   \\n            _hashTypedDataV4(\\n                keccak256(\\n                    abi.encode(_DELEGATION_TYPEHASH, delegatee, nonce, expiry)\\n                )\\n            ),\\n            v,\\n            r,\\n            s\\n        );\\n       return signer;\\n    }\\n\\n    \\n}\\n\"\n    },\n    \"contracts/utils/tests/Implementation.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Initializable.sol\\\";\\n\\ncontract Implementation2 is Initializable {\\n    uint internal _value;\\n\\n    function initialize() public initializer {}\\n\\n    function setValue(uint _number) public {\\n        _value = _number;\\n    }\\n\\n    function getValue() public view returns (uint) {\\n        return _value;\\n    }\\n}\\n\\ncontract CallReceiverMock {\\n    event MockFunctionCalled();\\n    event MockFunctionCalledWithArgs(uint256 a, uint256 b);\\n\\n    uint256[] private _array;\\n\\n    function mockFunction() public payable returns (string memory) {\\n        emit MockFunctionCalled();\\n\\n        return \\\"0x1234\\\";\\n    }\\n\\n    function mockFunctionRevertsNoReason() public pure returns (string memory) {\\n        revert();\\n    }\\n\\n    function mockFunctionRevertsReason() public payable {\\n        revert(\\\"CallReceiverMock: reverting\\\");\\n    }\\n\\n    function mockFunctionThrows() public payable {\\n        assert(false);\\n    }\\n\\n    function mockFunctionOutOfGas() public payable {\\n        for (uint256 i = 0; ; ++i) {\\n            _array.push(i);\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/utils/tests/Initializable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport '../Address.sol';\\n\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 200\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
  "solcInputHash": "007a533aaaf098dea181c2606269c48e",
  "transactionHash": "0x006d56c93b5ff00096c894a8cdbdda71c69fdb8745b5b5c165ca4258e982964e",
  "args": [],
  "address": "0x44863F234b137A395e5c98359d16057A9A1fAc55",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x44863F234b137A395e5c98359d16057A9A1fAc55",
    "transactionIndex": 0,
    "gasUsed": {
      "type": "BigNumber",
      "hex": "0x226fe4"
    },
    "logsBloom": "0x00000000000000000000000000000000000000001000000000800000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000001000000000000000000000000000000000000020000000000000100000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000002000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x3f43985782c8614dfef5e15941650992c8bc1fc7bf2237828159478c4f1fec5a",
    "transactionHash": "0x006d56c93b5ff00096c894a8cdbdda71c69fdb8745b5b5c165ca4258e982964e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 17181814,
        "transactionHash": "0x006d56c93b5ff00096c894a8cdbdda71c69fdb8745b5b5c165ca4258e982964e",
        "address": "0x44863F234b137A395e5c98359d16057A9A1fAc55",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x3f43985782c8614dfef5e15941650992c8bc1fc7bf2237828159478c4f1fec5a"
      }
    ],
    "blockNumber": 17181814,
    "confirmations": 1,
    "cumulativeGasUsed": {
      "type": "BigNumber",
      "hex": "0x226fe4"
    },
    "effectiveGasPrice": {
      "type": "BigNumber",
      "hex": "0x139b290f29"
    },
    "status": 1,
    "type": 2,
    "byzantium": true
  },
  "factoryDeps": [],
  "newlyDeployed": true
}