/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface TimelockInterface extends utils.Interface {
  functions: {
    "addToQueue(address,string,bytes,uint256,uint256)": FunctionFragment;
    "amount()": FunctionFragment;
    "demo(string)": FunctionFragment;
    "discard(bytes32)": FunctionFragment;
    "execute(address,string,bytes,uint256,uint256)": FunctionFragment;
    "getNextTimestamp()": FunctionFragment;
    "message()": FunctionFragment;
    "owner()": FunctionFragment;
    "prepareData(string)": FunctionFragment;
    "queue(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addToQueue"
      | "amount"
      | "demo"
      | "discard"
      | "execute"
      | "getNextTimestamp"
      | "message"
      | "owner"
      | "prepareData"
      | "queue"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addToQueue",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "amount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "demo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "discard",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "message", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "prepareData",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "queue",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: "addToQueue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "amount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "demo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "discard", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNextTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "message", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prepareData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "queue", data: BytesLike): Result;

  events: {
    "Discarded(bytes32)": EventFragment;
    "Executed(bytes32)": EventFragment;
    "Queued(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Discarded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Executed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Queued"): EventFragment;
}

export interface DiscardedEventObject {
  txId: string;
}
export type DiscardedEvent = TypedEvent<[string], DiscardedEventObject>;

export type DiscardedEventFilter = TypedEventFilter<DiscardedEvent>;

export interface ExecutedEventObject {
  txId: string;
}
export type ExecutedEvent = TypedEvent<[string], ExecutedEventObject>;

export type ExecutedEventFilter = TypedEventFilter<ExecutedEvent>;

export interface QueuedEventObject {
  txId: string;
}
export type QueuedEvent = TypedEvent<[string], QueuedEventObject>;

export type QueuedEventFilter = TypedEventFilter<QueuedEvent>;

export interface Timelock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TimelockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addToQueue(
      _to: PromiseOrValue<string>,
      _func: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    amount(overrides?: CallOverrides): Promise<[BigNumber]>;

    demo(
      _msg: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    discard(
      _txId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    execute(
      _to: PromiseOrValue<string>,
      _func: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getNextTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    message(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    prepareData(
      _msg: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    queue(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  addToQueue(
    _to: PromiseOrValue<string>,
    _func: PromiseOrValue<string>,
    _data: PromiseOrValue<BytesLike>,
    _value: PromiseOrValue<BigNumberish>,
    _timestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  amount(overrides?: CallOverrides): Promise<BigNumber>;

  demo(
    _msg: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  discard(
    _txId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  execute(
    _to: PromiseOrValue<string>,
    _func: PromiseOrValue<string>,
    _data: PromiseOrValue<BytesLike>,
    _value: PromiseOrValue<BigNumberish>,
    _timestamp: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getNextTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  message(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  prepareData(
    _msg: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  queue(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    addToQueue(
      _to: PromiseOrValue<string>,
      _func: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    amount(overrides?: CallOverrides): Promise<BigNumber>;

    demo(
      _msg: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    discard(
      _txId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    execute(
      _to: PromiseOrValue<string>,
      _func: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getNextTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    message(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    prepareData(
      _msg: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    queue(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Discarded(bytes32)"(txId?: null): DiscardedEventFilter;
    Discarded(txId?: null): DiscardedEventFilter;

    "Executed(bytes32)"(txId?: null): ExecutedEventFilter;
    Executed(txId?: null): ExecutedEventFilter;

    "Queued(bytes32)"(txId?: null): QueuedEventFilter;
    Queued(txId?: null): QueuedEventFilter;
  };

  estimateGas: {
    addToQueue(
      _to: PromiseOrValue<string>,
      _func: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    amount(overrides?: CallOverrides): Promise<BigNumber>;

    demo(
      _msg: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    discard(
      _txId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    execute(
      _to: PromiseOrValue<string>,
      _func: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getNextTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    message(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    prepareData(
      _msg: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queue(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addToQueue(
      _to: PromiseOrValue<string>,
      _func: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    amount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    demo(
      _msg: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    discard(
      _txId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    execute(
      _to: PromiseOrValue<string>,
      _func: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getNextTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    message(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prepareData(
      _msg: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queue(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
